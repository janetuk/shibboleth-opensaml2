From e0bf4997d709ed1053665e86dae8da48f11b44dc Mon Sep 17 00:00:00 2001
From: Sam Hartman <hartmans@debian.org>
Date: Sat, 30 Oct 2010 13:09:29 -0400
Subject: autoreconf

---
 Makefile.in               |  942 ++
 aclocal.m4                |  960 ++
 build-aux/config.guess    | 1502 ++++
 build-aux/config.sub      | 1714 ++++
 build-aux/depcomp         |  630 ++
 build-aux/install-sh      |  520 ++
 build-aux/ltmain.sh       | 8413 ++++++++++++++++++
 build-aux/missing         |  376 +
 config.h.in               |  102 +
 configure                 |21394 +++++++++++++++++++++++++++++++++++++++++++++
 doc/Makefile.in           |  457 +
 m4/libtool.m4             | 7377 ++++++++++++++++
 m4/ltoptions.m4           |  368 +
 m4/ltsugar.m4             |  123 +
 m4/ltversion.m4           |   23 +
 m4/lt~obsolete.m4         |   92 +
 opensaml2_2.3.orig.tar.gz |  Bin 0 -> 926057 bytes
 saml/Makefile.in          | 1702 ++++
 samlsign/Makefile.in      |  552 ++
 samltest/Makefile.in      | 2072 +++++
 schemas/Makefile.in       |  530 ++
 21 files changed, 49849 insertions(+), 0 deletions(-)
 create mode 100644 Makefile.in
 create mode 100644 aclocal.m4
 create mode 100755 build-aux/config.guess
 create mode 100755 build-aux/config.sub
 create mode 100755 build-aux/depcomp
 create mode 100755 build-aux/install-sh
 create mode 100755 build-aux/ltmain.sh
 create mode 100755 build-aux/missing
 create mode 100644 config.h.in
 create mode 100755 configure
 create mode 100644 doc/Makefile.in
 create mode 100644 m4/libtool.m4
 create mode 100644 m4/ltoptions.m4
 create mode 100644 m4/ltsugar.m4
 create mode 100644 m4/ltversion.m4
 create mode 100644 m4/lt~obsolete.m4
 create mode 100644 opensaml2_2.3.orig.tar.gz
 create mode 100644 saml/Makefile.in
 create mode 100644 samlsign/Makefile.in
 create mode 100644 samltest/Makefile.in
 create mode 100644 schemas/Makefile.in

diff --git a/Makefile.in b/Makefile.in
new file mode 100644
index 0000000..14102c3
--- /dev/null
+++ b/Makefile.in
@@ -0,0 +1,942 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+# Copyright (C) 2004 Oren Ben-Kiki
+# This file is distributed under the same terms as the Automake macro files.
+
+# Generate automatic documentation using Doxygen. Goals and variables values
+# are controlled by the various DX_COND_??? conditionals set by autoconf.
+#
+# The provided goals are:
+# doxygen-doc: Generate all doxygen documentation.
+# doxygen-run: Run doxygen, which will generate some of the documentation
+#              (HTML, CHM, CHI, MAN, RTF, XML) but will not do the post
+#              processing required for the rest of it (PS, PDF, and some MAN).
+# doxygen-man: Rename some doxygen generated man pages.
+# doxygen-ps: Generate doxygen PostScript documentation.
+# doxygen-pdf: Generate doxygen PDF documentation.
+#
+# Note that by default these are not integrated into the automake goals. If
+# doxygen is used to generate man pages, you can achieve this integration by
+# setting man3_MANS to the list of man pages generated and then adding the
+# dependency:
+#
+#   $(man3_MANS): doxygen-doc
+#
+# This will cause make to run doxygen and generate all the documentation.
+#
+# The following variable is intended for use in Makefile.am:
+#
+# DX_CLEANFILES = everything to clean.
+#
+# This is usually added to MOSTLYCLEANFILES.
+
+VPATH = @srcdir@
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+DIST_COMMON = $(am__configure_deps) $(srcdir)/Makefile.am \
+	$(srcdir)/Makefile.in $(srcdir)/Portfile.in \
+	$(srcdir)/config.h.in $(srcdir)/doxygen.am \
+	$(srcdir)/opensaml.spec.in $(srcdir)/pkginfo.in \
+	$(top_srcdir)/configure build-aux/config.guess \
+	build-aux/config.sub build-aux/depcomp build-aux/install-sh \
+	build-aux/ltmain.sh build-aux/missing
+subdir = .
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_create_pkgconfig_info.m4 \
+	$(top_srcdir)/m4/doxygen.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
+ configure.lineno config.status.lineno
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = config.h
+CONFIG_CLEAN_FILES = opensaml.spec pkginfo Portfile
+CONFIG_CLEAN_VPATH_FILES =
+SOURCES =
+DIST_SOURCES =
+RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
+	html-recursive info-recursive install-data-recursive \
+	install-dvi-recursive install-exec-recursive \
+	install-html-recursive install-info-recursive \
+	install-pdf-recursive install-ps-recursive install-recursive \
+	installcheck-recursive installdirs-recursive pdf-recursive \
+	ps-recursive uninstall-recursive
+am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
+am__vpath_adj = case $$p in \
+    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
+    *) f=$$p;; \
+  esac;
+am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
+am__install_max = 40
+am__nobase_strip_setup = \
+  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
+am__nobase_strip = \
+  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
+am__nobase_list = $(am__nobase_strip_setup); \
+  for p in $$list; do echo "$$p $$p"; done | \
+  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
+  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
+    if (++n[$$2] == $(am__install_max)) \
+      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
+    END { for (dir in files) print dir, files[dir] }'
+am__base_list = \
+  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
+  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
+am__installdirs = "$(DESTDIR)$(pkgconfigdir)"
+DATA = $(pkgconfig_DATA)
+RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
+  distclean-recursive maintainer-clean-recursive
+AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
+	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
+	distdir dist dist-all distcheck
+ETAGS = etags
+CTAGS = ctags
+DIST_SUBDIRS = $(SUBDIRS)
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+distdir = $(PACKAGE)-$(VERSION)
+top_distdir = $(distdir)
+am__remove_distdir = \
+  { test ! -d "$(distdir)" \
+    || { find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
+         && rm -fr "$(distdir)"; }; }
+am__relativize = \
+  dir0=`pwd`; \
+  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
+  sed_rest='s,^[^/]*/*,,'; \
+  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
+  sed_butlast='s,/*[^/]*$$,,'; \
+  while test -n "$$dir1"; do \
+    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
+    if test "$$first" != "."; then \
+      if test "$$first" = ".."; then \
+        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
+        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
+      else \
+        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
+        if test "$$first2" = "$$first"; then \
+          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
+        else \
+          dir2="../$$dir2"; \
+        fi; \
+        dir0="$$dir0"/"$$first"; \
+      fi; \
+    fi; \
+    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
+  done; \
+  reldir="$$dir2"
+DIST_ARCHIVES = $(distdir).tar.gz
+GZIP_ENV = --best
+distuninstallcheck_listfiles = find . -type f -print
+distcleancheck_listfiles = find . -type f -print
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AR = @AR@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CXX = @CXX@
+CXXCPP = @CXXCPP@
+CXXDEPMODE = @CXXDEPMODE@
+CXXFLAGS = @CXXFLAGS@
+CXXTEST = @CXXTEST@
+CXXTESTFLAGS = @CXXTESTFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+DX_CONFIG = @DX_CONFIG@
+DX_DOCDIR = @DX_DOCDIR@
+DX_DOT = @DX_DOT@
+DX_DOXYGEN = @DX_DOXYGEN@
+DX_DVIPS = @DX_DVIPS@
+DX_EGREP = @DX_EGREP@
+DX_ENV = @DX_ENV@
+DX_FLAG_chi = @DX_FLAG_chi@
+DX_FLAG_chm = @DX_FLAG_chm@
+DX_FLAG_doc = @DX_FLAG_doc@
+DX_FLAG_dot = @DX_FLAG_dot@
+DX_FLAG_html = @DX_FLAG_html@
+DX_FLAG_man = @DX_FLAG_man@
+DX_FLAG_pdf = @DX_FLAG_pdf@
+DX_FLAG_ps = @DX_FLAG_ps@
+DX_FLAG_rtf = @DX_FLAG_rtf@
+DX_FLAG_xml = @DX_FLAG_xml@
+DX_HHC = @DX_HHC@
+DX_INCLUDE = @DX_INCLUDE@
+DX_LATEX = @DX_LATEX@
+DX_MAKEINDEX = @DX_MAKEINDEX@
+DX_PDFLATEX = @DX_PDFLATEX@
+DX_PERL = @DX_PERL@
+DX_PROJECT = @DX_PROJECT@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LOG4CPP_CONFIG = @LOG4CPP_CONFIG@
+LOG4SHIB_CONFIG = @LOG4SHIB_CONFIG@
+LTLIBOBJS = @LTLIBOBJS@
+MAKEINFO = @MAKEINFO@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PKG_CONFIG = @PKG_CONFIG@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+STRIP = @STRIP@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_CXX = @ac_ct_CXX@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+lt_ECHO = @lt_ECHO@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+pkgconfig_libdir = @pkgconfig_libdir@
+pkgconfig_libfile = @pkgconfig_libfile@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AUTOMAKE_OPTIONS = foreign
+ACLOCAL_AMFLAGS = -I m4
+@DX_COND_doc_TRUE@@DX_COND_html_TRUE@DX_CLEAN_HTML = @DX_DOCDIR@/html
+@DX_COND_chm_TRUE@@DX_COND_doc_TRUE@DX_CLEAN_CHM = @DX_DOCDIR@/chm
+@DX_COND_chi_TRUE@@DX_COND_chm_TRUE@@DX_COND_doc_TRUE@DX_CLEAN_CHI = @DX_DOCDIR@/@PACKAGE@.chi
+@DX_COND_doc_TRUE@@DX_COND_man_TRUE@DX_CLEAN_MAN = @DX_DOCDIR@/man
+@DX_COND_doc_TRUE@@DX_COND_rtf_TRUE@DX_CLEAN_RTF = @DX_DOCDIR@/rtf
+@DX_COND_doc_TRUE@@DX_COND_xml_TRUE@DX_CLEAN_XML = @DX_DOCDIR@/xml
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@DX_CLEAN_PS = @DX_DOCDIR@/@PACKAGE@.ps
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@DX_PS_GOAL = doxygen-ps
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@DX_CLEAN_PDF = @DX_DOCDIR@/@PACKAGE@.pdf
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@DX_PDF_GOAL = doxygen-pdf
+@DX_COND_doc_TRUE@@DX_COND_latex_TRUE@DX_CLEAN_LATEX = @DX_DOCDIR@/latex
+@DX_COND_doc_TRUE@DX_CLEANFILES = \
+@DX_COND_doc_TRUE@    @DX_DOCDIR@/@PACKAGE@.tag \
+@DX_COND_doc_TRUE@    -r \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_HTML) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_CHM) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_CHI) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_MAN) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_RTF) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_XML) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_PS) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_PDF) \
+@DX_COND_doc_TRUE@    $(DX_CLEAN_LATEX)
+
+MOSTLYCLEANFILES = $(DX_CLEANFILES)
+SUBDIRS = doc schemas saml samltest samlsign
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = @PACKAGE_NAME@.pc
+GENFILES = @PACKAGE_NAME@.spec pkginfo Portfile
+EXTRA_DIST = $(DX_CONFIG) \
+	cpp-opensaml2.sln \
+	config_win32.h \
+	$(GENFILES) \
+	$(GENFILES:%=%.in) \
+	postinstall
+
+all: config.h
+	$(MAKE) $(AM_MAKEFLAGS) all-recursive
+
+.SUFFIXES:
+am--refresh:
+	@:
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/doxygen.am $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \
+	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \
+		&& exit 0; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    echo ' $(SHELL) ./config.status'; \
+	    $(SHELL) ./config.status;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	$(SHELL) ./config.status --recheck
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	$(am__cd) $(srcdir) && $(AUTOCONF)
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
+$(am__aclocal_m4_deps):
+
+config.h: stamp-h1
+	@if test ! -f $@; then \
+	  rm -f stamp-h1; \
+	  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \
+	else :; fi
+
+stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
+	@rm -f stamp-h1
+	cd $(top_builddir) && $(SHELL) ./config.status config.h
+$(srcdir)/config.h.in:  $(am__configure_deps) 
+	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
+	rm -f stamp-h1
+	touch $@
+
+distclean-hdr:
+	-rm -f config.h stamp-h1
+opensaml.spec: $(top_builddir)/config.status $(srcdir)/opensaml.spec.in
+	cd $(top_builddir) && $(SHELL) ./config.status $@
+pkginfo: $(top_builddir)/config.status $(srcdir)/pkginfo.in
+	cd $(top_builddir) && $(SHELL) ./config.status $@
+Portfile: $(top_builddir)/config.status $(srcdir)/Portfile.in
+	cd $(top_builddir) && $(SHELL) ./config.status $@
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+
+distclean-libtool:
+	-rm -f libtool config.lt
+install-pkgconfigDATA: $(pkgconfig_DATA)
+	@$(NORMAL_INSTALL)
+	test -z "$(pkgconfigdir)" || $(MKDIR_P) "$(DESTDIR)$(pkgconfigdir)"
+	@list='$(pkgconfig_DATA)'; test -n "$(pkgconfigdir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgconfigdir)'"; \
+	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgconfigdir)" || exit $$?; \
+	done
+
+uninstall-pkgconfigDATA:
+	@$(NORMAL_UNINSTALL)
+	@list='$(pkgconfig_DATA)'; test -n "$(pkgconfigdir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(pkgconfigdir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(pkgconfigdir)" && rm -f $$files
+
+# This directory's subdirectories are mostly independent; you can cd
+# into them and run `make' without going through this Makefile.
+# To change the values of `make' variables: instead of editing Makefiles,
+# (1) if the variable is set in `config.status', edit `config.status'
+#     (which will cause the Makefiles to be regenerated when you run `make');
+# (2) otherwise, pass the desired values on the `make' command line.
+$(RECURSIVE_TARGETS):
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
+	dot_seen=no; \
+	target=`echo $@ | sed s/-recursive//`; \
+	list='$(SUBDIRS)'; for subdir in $$list; do \
+	  echo "Making $$target in $$subdir"; \
+	  if test "$$subdir" = "."; then \
+	    dot_seen=yes; \
+	    local_target="$$target-am"; \
+	  else \
+	    local_target="$$target"; \
+	  fi; \
+	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
+	  || eval $$failcom; \
+	done; \
+	if test "$$dot_seen" = "no"; then \
+	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
+	fi; test -z "$$fail"
+
+$(RECURSIVE_CLEAN_TARGETS):
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
+	dot_seen=no; \
+	case "$@" in \
+	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
+	  *) list='$(SUBDIRS)' ;; \
+	esac; \
+	rev=''; for subdir in $$list; do \
+	  if test "$$subdir" = "."; then :; else \
+	    rev="$$subdir $$rev"; \
+	  fi; \
+	done; \
+	rev="$$rev ."; \
+	target=`echo $@ | sed s/-recursive//`; \
+	for subdir in $$rev; do \
+	  echo "Making $$target in $$subdir"; \
+	  if test "$$subdir" = "."; then \
+	    local_target="$$target-am"; \
+	  else \
+	    local_target="$$target"; \
+	  fi; \
+	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
+	  || eval $$failcom; \
+	done && test -z "$$fail"
+tags-recursive:
+	list='$(SUBDIRS)'; for subdir in $$list; do \
+	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
+	done
+ctags-recursive:
+	list='$(SUBDIRS)'; for subdir in $$list; do \
+	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
+	done
+
+ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
+	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	mkid -fID $$unique
+tags: TAGS
+
+TAGS: tags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	set x; \
+	here=`pwd`; \
+	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
+	  include_option=--etags-include; \
+	  empty_fix=.; \
+	else \
+	  include_option=--include; \
+	  empty_fix=; \
+	fi; \
+	list='$(SUBDIRS)'; for subdir in $$list; do \
+	  if test "$$subdir" = .; then :; else \
+	    test ! -f $$subdir/TAGS || \
+	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
+	  fi; \
+	done; \
+	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: CTAGS
+CTAGS: ctags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	$(am__remove_distdir)
+	test -d "$(distdir)" || mkdir "$(distdir)"
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
+	  if test "$$subdir" = .; then :; else \
+	    test -d "$(distdir)/$$subdir" \
+	    || $(MKDIR_P) "$(distdir)/$$subdir" \
+	    || exit 1; \
+	  fi; \
+	done
+	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
+	  if test "$$subdir" = .; then :; else \
+	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
+	    $(am__relativize); \
+	    new_distdir=$$reldir; \
+	    dir1=$$subdir; dir2="$(top_distdir)"; \
+	    $(am__relativize); \
+	    new_top_distdir=$$reldir; \
+	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
+	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
+	    ($(am__cd) $$subdir && \
+	      $(MAKE) $(AM_MAKEFLAGS) \
+	        top_distdir="$$new_top_distdir" \
+	        distdir="$$new_distdir" \
+		am__remove_distdir=: \
+		am__skip_length_check=: \
+		am__skip_mode_fix=: \
+	        distdir) \
+	      || exit 1; \
+	  fi; \
+	done
+	$(MAKE) $(AM_MAKEFLAGS) \
+	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
+	  dist-hook
+	-test -n "$(am__skip_mode_fix)" \
+	|| find "$(distdir)" -type d ! -perm -755 \
+		-exec chmod u+rwx,go+rx {} \; -o \
+	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
+	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
+	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
+	|| chmod -R a+r "$(distdir)"
+dist-gzip: distdir
+	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
+	$(am__remove_distdir)
+
+dist-bzip2: distdir
+	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
+	$(am__remove_distdir)
+
+dist-lzma: distdir
+	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
+	$(am__remove_distdir)
+
+dist-xz: distdir
+	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz
+	$(am__remove_distdir)
+
+dist-tarZ: distdir
+	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
+	$(am__remove_distdir)
+
+dist-shar: distdir
+	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
+	$(am__remove_distdir)
+
+dist-zip: distdir
+	-rm -f $(distdir).zip
+	zip -rq $(distdir).zip $(distdir)
+	$(am__remove_distdir)
+
+dist dist-all: distdir
+	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
+	$(am__remove_distdir)
+
+# This target untars the dist file and tries a VPATH configuration.  Then
+# it guarantees that the distribution is self-contained by making another
+# tarfile.
+distcheck: dist
+	case '$(DIST_ARCHIVES)' in \
+	*.tar.gz*) \
+	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
+	*.tar.bz2*) \
+	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
+	*.tar.lzma*) \
+	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
+	*.tar.xz*) \
+	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
+	*.tar.Z*) \
+	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
+	*.shar.gz*) \
+	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
+	*.zip*) \
+	  unzip $(distdir).zip ;;\
+	esac
+	chmod -R a-w $(distdir); chmod a+w $(distdir)
+	mkdir $(distdir)/_build
+	mkdir $(distdir)/_inst
+	chmod a-w $(distdir)
+	test -d $(distdir)/_build || exit 0; \
+	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
+	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
+	  && am__cwd=`pwd` \
+	  && $(am__cd) $(distdir)/_build \
+	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
+	    $(DISTCHECK_CONFIGURE_FLAGS) \
+	  && $(MAKE) $(AM_MAKEFLAGS) \
+	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
+	  && $(MAKE) $(AM_MAKEFLAGS) check \
+	  && $(MAKE) $(AM_MAKEFLAGS) install \
+	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
+	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
+	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
+	        distuninstallcheck \
+	  && chmod -R a-w "$$dc_install_base" \
+	  && ({ \
+	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
+	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
+	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
+	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
+	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
+	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
+	  && rm -rf "$$dc_destdir" \
+	  && $(MAKE) $(AM_MAKEFLAGS) dist \
+	  && rm -rf $(DIST_ARCHIVES) \
+	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
+	  && cd "$$am__cwd" \
+	  || exit 1
+	$(am__remove_distdir)
+	@(echo "$(distdir) archives ready for distribution: "; \
+	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
+	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
+distuninstallcheck:
+	@$(am__cd) '$(distuninstallcheck_dir)' \
+	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
+	   || { echo "ERROR: files left after uninstall:" ; \
+	        if test -n "$(DESTDIR)"; then \
+	          echo "  (check DESTDIR support)"; \
+	        fi ; \
+	        $(distuninstallcheck_listfiles) ; \
+	        exit 1; } >&2
+distcleancheck: distclean
+	@if test '$(srcdir)' = . ; then \
+	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
+	  exit 1 ; \
+	fi
+	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
+	  || { echo "ERROR: files left in build directory after distclean:" ; \
+	       $(distcleancheck_listfiles) ; \
+	       exit 1; } >&2
+check-am: all-am
+check: check-recursive
+all-am: Makefile $(DATA) config.h all-local
+installdirs: installdirs-recursive
+installdirs-am:
+	for dir in "$(DESTDIR)$(pkgconfigdir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-recursive
+install-exec: install-exec-recursive
+install-data: install-data-recursive
+uninstall: uninstall-recursive
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-recursive
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-recursive
+
+clean-am: clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-recursive
+	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
+	-rm -f Makefile
+distclean-am: clean-am distclean-generic distclean-hdr \
+	distclean-libtool distclean-tags
+
+dvi: dvi-recursive
+
+dvi-am:
+
+html: html-recursive
+
+html-am:
+
+info: info-recursive
+
+info-am:
+
+install-data-am: install-pkgconfigDATA
+
+install-dvi: install-dvi-recursive
+
+install-dvi-am:
+
+install-exec-am:
+
+install-html: install-html-recursive
+
+install-html-am:
+
+install-info: install-info-recursive
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-recursive
+
+install-pdf-am:
+
+install-ps: install-ps-recursive
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-recursive
+	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
+	-rm -rf $(top_srcdir)/autom4te.cache
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-recursive
+
+mostlyclean-am: mostlyclean-generic mostlyclean-libtool
+
+pdf: pdf-recursive
+
+pdf-am:
+
+ps: ps-recursive
+
+ps-am:
+
+uninstall-am: uninstall-pkgconfigDATA
+
+.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) all \
+	ctags-recursive install-am install-strip tags-recursive
+
+.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
+	all all-am all-local am--refresh check check-am clean \
+	clean-generic clean-libtool ctags ctags-recursive dist \
+	dist-all dist-bzip2 dist-gzip dist-hook dist-lzma dist-shar \
+	dist-tarZ dist-xz dist-zip distcheck distclean \
+	distclean-generic distclean-hdr distclean-libtool \
+	distclean-tags distcleancheck distdir distuninstallcheck dvi \
+	dvi-am html html-am info info-am install install-am \
+	install-data install-data-am install-dvi install-dvi-am \
+	install-exec install-exec-am install-html install-html-am \
+	install-info install-info-am install-man install-pdf \
+	install-pdf-am install-pkgconfigDATA install-ps install-ps-am \
+	install-strip installcheck installcheck-am installdirs \
+	installdirs-am maintainer-clean maintainer-clean-generic \
+	mostlyclean mostlyclean-generic mostlyclean-libtool pdf pdf-am \
+	ps ps-am tags tags-recursive uninstall uninstall-am \
+	uninstall-pkgconfigDATA
+
+
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@doxygen-ps: @DX_DOCDIR@/@PACKAGE@.ps
+
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@@DX_DOCDIR@/@PACKAGE@.ps: @DX_DOCDIR@/@PACKAGE@.tag
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	cd @DX_DOCDIR@/latex; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	rm -f *.aux *.toc *.idx *.ind *.ilg *.log *.out; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	$(DX_LATEX) refman.tex; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	$(MAKEINDEX_PATH) refman.idx; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	$(DX_LATEX) refman.tex; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	countdown=5; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	while $(DX_EGREP) 'Rerun (LaTeX|to get cross-references right)' \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	                  refman.log > /dev/null 2>&1 \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	   && test $$countdown -gt 0; do \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	    $(DX_LATEX) refman.tex; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	    countdown=`expr $$countdown - 1`; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	done; \
+@DX_COND_doc_TRUE@@DX_COND_ps_TRUE@	$(DX_DVIPS) -o ../@PACKAGE@.ps refman.dvi
+
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@doxygen-pdf: @DX_DOCDIR@/@PACKAGE@.pdf
+
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@@DX_DOCDIR@/@PACKAGE@.pdf: @DX_DOCDIR@/@PACKAGE@.tag
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	cd @DX_DOCDIR@/latex; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	rm -f *.aux *.toc *.idx *.ind *.ilg *.log *.out; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	$(DX_PDFLATEX) refman.tex; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	$(DX_MAKEINDEX) refman.idx; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	$(DX_PDFLATEX) refman.tex; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	countdown=5; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	while $(DX_EGREP) 'Rerun (LaTeX|to get cross-references right)' \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	                  refman.log > /dev/null 2>&1 \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	   && test $$countdown -gt 0; do \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	    $(DX_PDFLATEX) refman.tex; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	    countdown=`expr $$countdown - 1`; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	done; \
+@DX_COND_doc_TRUE@@DX_COND_pdf_TRUE@	mv refman.pdf ../@PACKAGE@.pdf
+
+@DX_COND_doc_TRUE@.PHONY: doxygen-run doxygen-doc $(DX_PS_GOAL) $(DX_PDF_GOAL)
+
+@DX_COND_doc_TRUE@.INTERMEDIATE: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL)
+
+@DX_COND_doc_TRUE@doxygen-run: @DX_DOCDIR@/@PACKAGE@.tag
+
+@DX_COND_doc_TRUE@doxygen-doc: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL)
+
+@DX_COND_doc_TRUE@@DX_DOCDIR@/@PACKAGE@.tag: $(DX_CONFIG) $(pkginclude_HEADERS)
+@DX_COND_doc_TRUE@	rm -rf @DX_DOCDIR@
+@DX_COND_doc_TRUE@	$(DX_ENV) DX_INCLUDE=$(DX_INCLUDE) $(DX_DOXYGEN) $(srcdir)/$(DX_CONFIG)
+
+dist-hook:
+	rm -rf `find $(distdir)/samltest/data -name .svn`
+	rm -rf `find $(distdir)/doc/api -name .svn`
+
+@DX_COND_doc_TRUE@all-local: doxygen-doc
+@DX_COND_doc_FALSE@all-local:
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/aclocal.m4 b/aclocal.m4
new file mode 100644
index 0000000..f5072f6
--- /dev/null
+++ b/aclocal.m4
@@ -0,0 +1,960 @@
+# generated automatically by aclocal 1.11.1 -*- Autoconf -*-
+
+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
+# 2005, 2006, 2007, 2008, 2009  Free Software Foundation, Inc.
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+m4_ifndef([AC_AUTOCONF_VERSION],
+  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
+m4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.67],,
+[m4_warning([this file was generated for autoconf 2.67.
+You have another version of autoconf.  It may work, but is not guaranteed to.
+If you have problems, you may need to regenerate the build system entirely.
+To do so, use the procedure documented by the package, typically `autoreconf'.])])
+
+# Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# AM_AUTOMAKE_VERSION(VERSION)
+# ----------------------------
+# Automake X.Y traces this macro to ensure aclocal.m4 has been
+# generated from the m4 files accompanying Automake X.Y.
+# (This private macro should not be called outside this file.)
+AC_DEFUN([AM_AUTOMAKE_VERSION],
+[am__api_version='1.11'
+dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
+dnl require some minimum version.  Point them to the right macro.
+m4_if([$1], [1.11.1], [],
+      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
+])
+
+# _AM_AUTOCONF_VERSION(VERSION)
+# -----------------------------
+# aclocal traces this macro to find the Autoconf version.
+# This is a private macro too.  Using m4_define simplifies
+# the logic in aclocal, which can simply ignore this definition.
+m4_define([_AM_AUTOCONF_VERSION], [])
+
+# AM_SET_CURRENT_AUTOMAKE_VERSION
+# -------------------------------
+# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.
+# This function is AC_REQUIREd by AM_INIT_AUTOMAKE.
+AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],
+[AM_AUTOMAKE_VERSION([1.11.1])dnl
+m4_ifndef([AC_AUTOCONF_VERSION],
+  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
+_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
+
+# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-
+
+# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets
+# $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to
+# `$srcdir', `$srcdir/..', or `$srcdir/../..'.
+#
+# Of course, Automake must honor this variable whenever it calls a
+# tool from the auxiliary directory.  The problem is that $srcdir (and
+# therefore $ac_aux_dir as well) can be either absolute or relative,
+# depending on how configure is run.  This is pretty annoying, since
+# it makes $ac_aux_dir quite unusable in subdirectories: in the top
+# source directory, any form will work fine, but in subdirectories a
+# relative path needs to be adjusted first.
+#
+# $ac_aux_dir/missing
+#    fails when called from a subdirectory if $ac_aux_dir is relative
+# $top_srcdir/$ac_aux_dir/missing
+#    fails if $ac_aux_dir is absolute,
+#    fails when called from a subdirectory in a VPATH build with
+#          a relative $ac_aux_dir
+#
+# The reason of the latter failure is that $top_srcdir and $ac_aux_dir
+# are both prefixed by $srcdir.  In an in-source build this is usually
+# harmless because $srcdir is `.', but things will broke when you
+# start a VPATH build or use an absolute $srcdir.
+#
+# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,
+# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:
+#   am_aux_dir='\$(top_srcdir)/'`expr "$ac_aux_dir" : "$srcdir//*\(.*\)"`
+# and then we would define $MISSING as
+#   MISSING="\${SHELL} $am_aux_dir/missing"
+# This will work as long as MISSING is not called from configure, because
+# unfortunately $(top_srcdir) has no meaning in configure.
+# However there are other variables, like CC, which are often used in
+# configure, and could therefore not use this "fixed" $ac_aux_dir.
+#
+# Another solution, used here, is to always expand $ac_aux_dir to an
+# absolute PATH.  The drawback is that using absolute paths prevent a
+# configured tree to be moved without reconfiguration.
+
+AC_DEFUN([AM_AUX_DIR_EXPAND],
+[dnl Rely on autoconf to set up CDPATH properly.
+AC_PREREQ([2.50])dnl
+# expand $ac_aux_dir to an absolute path
+am_aux_dir=`cd $ac_aux_dir && pwd`
+])
+
+# AM_CONDITIONAL                                            -*- Autoconf -*-
+
+# Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006, 2008
+# Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 9
+
+# AM_CONDITIONAL(NAME, SHELL-CONDITION)
+# -------------------------------------
+# Define a conditional.
+AC_DEFUN([AM_CONDITIONAL],
+[AC_PREREQ(2.52)dnl
+ ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],
+	[$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl
+AC_SUBST([$1_TRUE])dnl
+AC_SUBST([$1_FALSE])dnl
+_AM_SUBST_NOTMAKE([$1_TRUE])dnl
+_AM_SUBST_NOTMAKE([$1_FALSE])dnl
+m4_define([_AM_COND_VALUE_$1], [$2])dnl
+if $2; then
+  $1_TRUE=
+  $1_FALSE='#'
+else
+  $1_TRUE='#'
+  $1_FALSE=
+fi
+AC_CONFIG_COMMANDS_PRE(
+[if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
+  AC_MSG_ERROR([[conditional "$1" was never defined.
+Usually this means the macro was only invoked conditionally.]])
+fi])])
+
+# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009
+# Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 10
+
+# There are a few dirty hacks below to avoid letting `AC_PROG_CC' be
+# written in clear, in which case automake, when reading aclocal.m4,
+# will think it sees a *use*, and therefore will trigger all it's
+# C support machinery.  Also note that it means that autoscan, seeing
+# CC etc. in the Makefile, will ask for an AC_PROG_CC use...
+
+
+# _AM_DEPENDENCIES(NAME)
+# ----------------------
+# See how the compiler implements dependency checking.
+# NAME is "CC", "CXX", "GCJ", or "OBJC".
+# We try a few techniques and use that to set a single cache variable.
+#
+# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was
+# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular
+# dependency, and given that the user is not expected to run this macro,
+# just rely on AC_PROG_CC.
+AC_DEFUN([_AM_DEPENDENCIES],
+[AC_REQUIRE([AM_SET_DEPDIR])dnl
+AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl
+AC_REQUIRE([AM_MAKE_INCLUDE])dnl
+AC_REQUIRE([AM_DEP_TRACK])dnl
+
+ifelse([$1], CC,   [depcc="$CC"   am_compiler_list=],
+       [$1], CXX,  [depcc="$CXX"  am_compiler_list=],
+       [$1], OBJC, [depcc="$OBJC" am_compiler_list='gcc3 gcc'],
+       [$1], UPC,  [depcc="$UPC"  am_compiler_list=],
+       [$1], GCJ,  [depcc="$GCJ"  am_compiler_list='gcc3 gcc'],
+                   [depcc="$$1"   am_compiler_list=])
+
+AC_CACHE_CHECK([dependency style of $depcc],
+               [am_cv_$1_dependencies_compiler_type],
+[if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
+  # We make a subdir and do the tests there.  Otherwise we can end up
+  # making bogus files that we don't know about and never remove.  For
+  # instance it was reported that on HP-UX the gcc test will end up
+  # making a dummy file named `D' -- because `-MD' means `put the output
+  # in D'.
+  mkdir conftest.dir
+  # Copy depcomp to subdir because otherwise we won't find it if we're
+  # using a relative directory.
+  cp "$am_depcomp" conftest.dir
+  cd conftest.dir
+  # We will build objects and dependencies in a subdirectory because
+  # it helps to detect inapplicable dependency modes.  For instance
+  # both Tru64's cc and ICC support -MD to output dependencies as a
+  # side effect of compilation, but ICC will put the dependencies in
+  # the current directory while Tru64 will put them in the object
+  # directory.
+  mkdir sub
+
+  am_cv_$1_dependencies_compiler_type=none
+  if test "$am_compiler_list" = ""; then
+     am_compiler_list=`sed -n ['s/^#*\([a-zA-Z0-9]*\))$/\1/p'] < ./depcomp`
+  fi
+  am__universal=false
+  m4_case([$1], [CC],
+    [case " $depcc " in #(
+     *\ -arch\ *\ -arch\ *) am__universal=true ;;
+     esac],
+    [CXX],
+    [case " $depcc " in #(
+     *\ -arch\ *\ -arch\ *) am__universal=true ;;
+     esac])
+
+  for depmode in $am_compiler_list; do
+    # Setup a source with many dependencies, because some compilers
+    # like to wrap large dependency lists on column 80 (with \), and
+    # we should not choose a depcomp mode which is confused by this.
+    #
+    # We need to recreate these files for each test, as the compiler may
+    # overwrite some of them when testing with obscure command lines.
+    # This happens at least with the AIX C compiler.
+    : > sub/conftest.c
+    for i in 1 2 3 4 5 6; do
+      echo '#include "conftst'$i'.h"' >> sub/conftest.c
+      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with
+      # Solaris 8's {/usr,}/bin/sh.
+      touch sub/conftst$i.h
+    done
+    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf
+
+    # We check with `-c' and `-o' for the sake of the "dashmstdout"
+    # mode.  It turns out that the SunPro C++ compiler does not properly
+    # handle `-M -o', and we need to detect this.  Also, some Intel
+    # versions had trouble with output in subdirs
+    am__obj=sub/conftest.${OBJEXT-o}
+    am__minus_obj="-o $am__obj"
+    case $depmode in
+    gcc)
+      # This depmode causes a compiler race in universal mode.
+      test "$am__universal" = false || continue
+      ;;
+    nosideeffect)
+      # after this tag, mechanisms are not by side-effect, so they'll
+      # only be used when explicitly requested
+      if test "x$enable_dependency_tracking" = xyes; then
+	continue
+      else
+	break
+      fi
+      ;;
+    msvisualcpp | msvcmsys)
+      # This compiler won't grok `-c -o', but also, the minuso test has
+      # not run yet.  These depmodes are late enough in the game, and
+      # so weak that their functioning should not be impacted.
+      am__obj=conftest.${OBJEXT-o}
+      am__minus_obj=
+      ;;
+    none) break ;;
+    esac
+    if depmode=$depmode \
+       source=sub/conftest.c object=$am__obj \
+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
+         >/dev/null 2>conftest.err &&
+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
+      # icc doesn't choke on unknown options, it will just issue warnings
+      # or remarks (even with -Werror).  So we grep stderr for any message
+      # that says an option was ignored or not supported.
+      # When given -MP, icc 7.0 and 7.1 complain thusly:
+      #   icc: Command line warning: ignoring option '-M'; no argument required
+      # The diagnosis changed in icc 8.0:
+      #   icc: Command line remark: option '-MP' not supported
+      if (grep 'ignoring option' conftest.err ||
+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
+        am_cv_$1_dependencies_compiler_type=$depmode
+        break
+      fi
+    fi
+  done
+
+  cd ..
+  rm -rf conftest.dir
+else
+  am_cv_$1_dependencies_compiler_type=none
+fi
+])
+AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])
+AM_CONDITIONAL([am__fastdep$1], [
+  test "x$enable_dependency_tracking" != xno \
+  && test "$am_cv_$1_dependencies_compiler_type" = gcc3])
+])
+
+
+# AM_SET_DEPDIR
+# -------------
+# Choose a directory name for dependency files.
+# This macro is AC_REQUIREd in _AM_DEPENDENCIES
+AC_DEFUN([AM_SET_DEPDIR],
+[AC_REQUIRE([AM_SET_LEADING_DOT])dnl
+AC_SUBST([DEPDIR], ["${am__leading_dot}deps"])dnl
+])
+
+
+# AM_DEP_TRACK
+# ------------
+AC_DEFUN([AM_DEP_TRACK],
+[AC_ARG_ENABLE(dependency-tracking,
+[  --disable-dependency-tracking  speeds up one-time build
+  --enable-dependency-tracking   do not reject slow dependency extractors])
+if test "x$enable_dependency_tracking" != xno; then
+  am_depcomp="$ac_aux_dir/depcomp"
+  AMDEPBACKSLASH='\'
+fi
+AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
+AC_SUBST([AMDEPBACKSLASH])dnl
+_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl
+])
+
+# Generate code to set up dependency tracking.              -*- Autoconf -*-
+
+# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008
+# Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+#serial 5
+
+# _AM_OUTPUT_DEPENDENCY_COMMANDS
+# ------------------------------
+AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],
+[{
+  # Autoconf 2.62 quotes --file arguments for eval, but not when files
+  # are listed without --file.  Let's play safe and only enable the eval
+  # if we detect the quoting.
+  case $CONFIG_FILES in
+  *\'*) eval set x "$CONFIG_FILES" ;;
+  *)   set x $CONFIG_FILES ;;
+  esac
+  shift
+  for mf
+  do
+    # Strip MF so we end up with the name of the file.
+    mf=`echo "$mf" | sed -e 's/:.*$//'`
+    # Check whether this is an Automake generated Makefile or not.
+    # We used to match only the files named `Makefile.in', but
+    # some people rename them; so instead we look at the file content.
+    # Grep'ing the first line is not enough: some people post-process
+    # each Makefile.in and add a new line on top of each file to say so.
+    # Grep'ing the whole file is not good either: AIX grep has a line
+    # limit of 2048, but all sed's we know have understand at least 4000.
+    if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
+      dirpart=`AS_DIRNAME("$mf")`
+    else
+      continue
+    fi
+    # Extract the definition of DEPDIR, am__include, and am__quote
+    # from the Makefile without running `make'.
+    DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
+    test -z "$DEPDIR" && continue
+    am__include=`sed -n 's/^am__include = //p' < "$mf"`
+    test -z "am__include" && continue
+    am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
+    # When using ansi2knr, U may be empty or an underscore; expand it
+    U=`sed -n 's/^U = //p' < "$mf"`
+    # Find all dependency output files, they are included files with
+    # $(DEPDIR) in their names.  We invoke sed twice because it is the
+    # simplest approach to changing $(DEPDIR) to its actual value in the
+    # expansion.
+    for file in `sed -n "
+      s/^$am__include $am__quote\(.*(DEPDIR).*\)$am__quote"'$/\1/p' <"$mf" | \
+	 sed -e 's/\$(DEPDIR)/'"$DEPDIR"'/g' -e 's/\$U/'"$U"'/g'`; do
+      # Make sure the directory exists.
+      test -f "$dirpart/$file" && continue
+      fdir=`AS_DIRNAME(["$file"])`
+      AS_MKDIR_P([$dirpart/$fdir])
+      # echo "creating $dirpart/$file"
+      echo '# dummy' > "$dirpart/$file"
+    done
+  done
+}
+])# _AM_OUTPUT_DEPENDENCY_COMMANDS
+
+
+# AM_OUTPUT_DEPENDENCY_COMMANDS
+# -----------------------------
+# This macro should only be invoked once -- use via AC_REQUIRE.
+#
+# This code is only required when automatic dependency tracking
+# is enabled.  FIXME.  This creates each `.P' file that we will
+# need in order to bootstrap the dependency handling code.
+AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],
+[AC_CONFIG_COMMANDS([depfiles],
+     [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
+     [AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"])
+])
+
+# Do all the work for Automake.                             -*- Autoconf -*-
+
+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
+# 2005, 2006, 2008, 2009 Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 16
+
+# This macro actually does too much.  Some checks are only needed if
+# your package does certain things.  But this isn't really a big deal.
+
+# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])
+# AM_INIT_AUTOMAKE([OPTIONS])
+# -----------------------------------------------
+# The call with PACKAGE and VERSION arguments is the old style
+# call (pre autoconf-2.50), which is being phased out.  PACKAGE
+# and VERSION should now be passed to AC_INIT and removed from
+# the call to AM_INIT_AUTOMAKE.
+# We support both call styles for the transition.  After
+# the next Automake release, Autoconf can make the AC_INIT
+# arguments mandatory, and then we can depend on a new Autoconf
+# release and drop the old call support.
+AC_DEFUN([AM_INIT_AUTOMAKE],
+[AC_PREREQ([2.62])dnl
+dnl Autoconf wants to disallow AM_ names.  We explicitly allow
+dnl the ones we care about.
+m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl
+AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl
+AC_REQUIRE([AC_PROG_INSTALL])dnl
+if test "`cd $srcdir && pwd`" != "`pwd`"; then
+  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
+  # is not polluted with repeated "-I."
+  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl
+  # test to see if srcdir already configured
+  if test -f $srcdir/config.status; then
+    AC_MSG_ERROR([source directory already configured; run "make distclean" there first])
+  fi
+fi
+
+# test whether we have cygpath
+if test -z "$CYGPATH_W"; then
+  if (cygpath --version) >/dev/null 2>/dev/null; then
+    CYGPATH_W='cygpath -w'
+  else
+    CYGPATH_W=echo
+  fi
+fi
+AC_SUBST([CYGPATH_W])
+
+# Define the identity of the package.
+dnl Distinguish between old-style and new-style calls.
+m4_ifval([$2],
+[m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl
+ AC_SUBST([PACKAGE], [$1])dnl
+ AC_SUBST([VERSION], [$2])],
+[_AM_SET_OPTIONS([$1])dnl
+dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.
+m4_if(m4_ifdef([AC_PACKAGE_NAME], 1)m4_ifdef([AC_PACKAGE_VERSION], 1), 11,,
+  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl
+ AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl
+ AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl
+
+_AM_IF_OPTION([no-define],,
+[AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", [Name of package])
+ AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [Version number of package])])dnl
+
+# Some tools Automake needs.
+AC_REQUIRE([AM_SANITY_CHECK])dnl
+AC_REQUIRE([AC_ARG_PROGRAM])dnl
+AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version})
+AM_MISSING_PROG(AUTOCONF, autoconf)
+AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version})
+AM_MISSING_PROG(AUTOHEADER, autoheader)
+AM_MISSING_PROG(MAKEINFO, makeinfo)
+AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
+AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl
+AC_REQUIRE([AM_PROG_MKDIR_P])dnl
+# We need awk for the "check" target.  The system "awk" is bad on
+# some platforms.
+AC_REQUIRE([AC_PROG_AWK])dnl
+AC_REQUIRE([AC_PROG_MAKE_SET])dnl
+AC_REQUIRE([AM_SET_LEADING_DOT])dnl
+_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],
+	      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
+			     [_AM_PROG_TAR([v7])])])
+_AM_IF_OPTION([no-dependencies],,
+[AC_PROVIDE_IFELSE([AC_PROG_CC],
+		  [_AM_DEPENDENCIES(CC)],
+		  [define([AC_PROG_CC],
+			  defn([AC_PROG_CC])[_AM_DEPENDENCIES(CC)])])dnl
+AC_PROVIDE_IFELSE([AC_PROG_CXX],
+		  [_AM_DEPENDENCIES(CXX)],
+		  [define([AC_PROG_CXX],
+			  defn([AC_PROG_CXX])[_AM_DEPENDENCIES(CXX)])])dnl
+AC_PROVIDE_IFELSE([AC_PROG_OBJC],
+		  [_AM_DEPENDENCIES(OBJC)],
+		  [define([AC_PROG_OBJC],
+			  defn([AC_PROG_OBJC])[_AM_DEPENDENCIES(OBJC)])])dnl
+])
+_AM_IF_OPTION([silent-rules], [AC_REQUIRE([AM_SILENT_RULES])])dnl
+dnl The `parallel-tests' driver may need to know about EXEEXT, so add the
+dnl `am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This macro
+dnl is hooked onto _AC_COMPILER_EXEEXT early, see below.
+AC_CONFIG_COMMANDS_PRE(dnl
+[m4_provide_if([_AM_COMPILER_EXEEXT],
+  [AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])])])dnl
+])
+
+dnl Hook into `_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not
+dnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further
+dnl mangled by Autoconf and run in a shell conditional statement.
+m4_define([_AC_COMPILER_EXEEXT],
+m4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])
+
+
+# When config.status generates a header, we must update the stamp-h file.
+# This file resides in the same directory as the config header
+# that is generated.  The stamp files are numbered to have different names.
+
+# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the
+# loop where config.status creates the headers, so we can generate
+# our stamp files there.
+AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],
+[# Compute $1's index in $config_headers.
+_am_arg=$1
+_am_stamp_count=1
+for _am_header in $config_headers :; do
+  case $_am_header in
+    $_am_arg | $_am_arg:* )
+      break ;;
+    * )
+      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
+  esac
+done
+echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
+
+# Copyright (C) 2001, 2003, 2005, 2008  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# AM_PROG_INSTALL_SH
+# ------------------
+# Define $install_sh.
+AC_DEFUN([AM_PROG_INSTALL_SH],
+[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
+if test x"${install_sh}" != xset; then
+  case $am_aux_dir in
+  *\ * | *\	*)
+    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
+  *)
+    install_sh="\${SHELL} $am_aux_dir/install-sh"
+  esac
+fi
+AC_SUBST(install_sh)])
+
+# Copyright (C) 2003, 2005  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 2
+
+# Check whether the underlying file-system supports filenames
+# with a leading dot.  For instance MS-DOS doesn't.
+AC_DEFUN([AM_SET_LEADING_DOT],
+[rm -rf .tst 2>/dev/null
+mkdir .tst 2>/dev/null
+if test -d .tst; then
+  am__leading_dot=.
+else
+  am__leading_dot=_
+fi
+rmdir .tst 2>/dev/null
+AC_SUBST([am__leading_dot])])
+
+# Check to see how 'make' treats includes.	            -*- Autoconf -*-
+
+# Copyright (C) 2001, 2002, 2003, 2005, 2009  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 4
+
+# AM_MAKE_INCLUDE()
+# -----------------
+# Check to see how make treats includes.
+AC_DEFUN([AM_MAKE_INCLUDE],
+[am_make=${MAKE-make}
+cat > confinc << 'END'
+am__doit:
+	@echo this is the am__doit target
+.PHONY: am__doit
+END
+# If we don't find an include directive, just comment out the code.
+AC_MSG_CHECKING([for style of include used by $am_make])
+am__include="#"
+am__quote=
+_am_result=none
+# First try GNU make style include.
+echo "include confinc" > confmf
+# Ignore all kinds of additional output from `make'.
+case `$am_make -s -f confmf 2> /dev/null` in #(
+*the\ am__doit\ target*)
+  am__include=include
+  am__quote=
+  _am_result=GNU
+  ;;
+esac
+# Now try BSD make style include.
+if test "$am__include" = "#"; then
+   echo '.include "confinc"' > confmf
+   case `$am_make -s -f confmf 2> /dev/null` in #(
+   *the\ am__doit\ target*)
+     am__include=.include
+     am__quote="\""
+     _am_result=BSD
+     ;;
+   esac
+fi
+AC_SUBST([am__include])
+AC_SUBST([am__quote])
+AC_MSG_RESULT([$_am_result])
+rm -f confinc confmf
+])
+
+# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-
+
+# Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004, 2005, 2008
+# Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 6
+
+# AM_MISSING_PROG(NAME, PROGRAM)
+# ------------------------------
+AC_DEFUN([AM_MISSING_PROG],
+[AC_REQUIRE([AM_MISSING_HAS_RUN])
+$1=${$1-"${am_missing_run}$2"}
+AC_SUBST($1)])
+
+
+# AM_MISSING_HAS_RUN
+# ------------------
+# Define MISSING if not defined so far and test if it supports --run.
+# If it does, set am_missing_run to use it, otherwise, to nothing.
+AC_DEFUN([AM_MISSING_HAS_RUN],
+[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
+AC_REQUIRE_AUX_FILE([missing])dnl
+if test x"${MISSING+set}" != xset; then
+  case $am_aux_dir in
+  *\ * | *\	*)
+    MISSING="\${SHELL} \"$am_aux_dir/missing\"" ;;
+  *)
+    MISSING="\${SHELL} $am_aux_dir/missing" ;;
+  esac
+fi
+# Use eval to expand $SHELL
+if eval "$MISSING --run true"; then
+  am_missing_run="$MISSING --run "
+else
+  am_missing_run=
+  AC_MSG_WARN([`missing' script is too old or missing])
+fi
+])
+
+# Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# AM_PROG_MKDIR_P
+# ---------------
+# Check for `mkdir -p'.
+AC_DEFUN([AM_PROG_MKDIR_P],
+[AC_PREREQ([2.60])dnl
+AC_REQUIRE([AC_PROG_MKDIR_P])dnl
+dnl Automake 1.8 to 1.9.6 used to define mkdir_p.  We now use MKDIR_P,
+dnl while keeping a definition of mkdir_p for backward compatibility.
+dnl @MKDIR_P@ is magic: AC_OUTPUT adjusts its value for each Makefile.
+dnl However we cannot define mkdir_p as $(MKDIR_P) for the sake of
+dnl Makefile.ins that do not define MKDIR_P, so we do our own
+dnl adjustment using top_builddir (which is defined more often than
+dnl MKDIR_P).
+AC_SUBST([mkdir_p], ["$MKDIR_P"])dnl
+case $mkdir_p in
+  [[\\/$]]* | ?:[[\\/]]*) ;;
+  */*) mkdir_p="\$(top_builddir)/$mkdir_p" ;;
+esac
+])
+
+# Helper functions for option handling.                     -*- Autoconf -*-
+
+# Copyright (C) 2001, 2002, 2003, 2005, 2008  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 4
+
+# _AM_MANGLE_OPTION(NAME)
+# -----------------------
+AC_DEFUN([_AM_MANGLE_OPTION],
+[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])
+
+# _AM_SET_OPTION(NAME)
+# ------------------------------
+# Set option NAME.  Presently that only means defining a flag for this option.
+AC_DEFUN([_AM_SET_OPTION],
+[m4_define(_AM_MANGLE_OPTION([$1]), 1)])
+
+# _AM_SET_OPTIONS(OPTIONS)
+# ----------------------------------
+# OPTIONS is a space-separated list of Automake options.
+AC_DEFUN([_AM_SET_OPTIONS],
+[m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])
+
+# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])
+# -------------------------------------------
+# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.
+AC_DEFUN([_AM_IF_OPTION],
+[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
+
+# Check to make sure that the build environment is sane.    -*- Autoconf -*-
+
+# Copyright (C) 1996, 1997, 2000, 2001, 2003, 2005, 2008
+# Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 5
+
+# AM_SANITY_CHECK
+# ---------------
+AC_DEFUN([AM_SANITY_CHECK],
+[AC_MSG_CHECKING([whether build environment is sane])
+# Just in case
+sleep 1
+echo timestamp > conftest.file
+# Reject unsafe characters in $srcdir or the absolute working directory
+# name.  Accept space and tab only in the latter.
+am_lf='
+'
+case `pwd` in
+  *[[\\\"\#\$\&\'\`$am_lf]]*)
+    AC_MSG_ERROR([unsafe absolute working directory name]);;
+esac
+case $srcdir in
+  *[[\\\"\#\$\&\'\`$am_lf\ \	]]*)
+    AC_MSG_ERROR([unsafe srcdir value: `$srcdir']);;
+esac
+
+# Do `set' in a subshell so we don't clobber the current shell's
+# arguments.  Must try -L first in case configure is actually a
+# symlink; some systems play weird games with the mod time of symlinks
+# (eg FreeBSD returns the mod time of the symlink's containing
+# directory).
+if (
+   set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
+   if test "$[*]" = "X"; then
+      # -L didn't work.
+      set X `ls -t "$srcdir/configure" conftest.file`
+   fi
+   rm -f conftest.file
+   if test "$[*]" != "X $srcdir/configure conftest.file" \
+      && test "$[*]" != "X conftest.file $srcdir/configure"; then
+
+      # If neither matched, then we have a broken ls.  This can happen
+      # if, for instance, CONFIG_SHELL is bash and it inherits a
+      # broken ls alias from the environment.  This has actually
+      # happened.  Such a system could not be considered "sane".
+      AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken
+alias in your environment])
+   fi
+
+   test "$[2]" = conftest.file
+   )
+then
+   # Ok.
+   :
+else
+   AC_MSG_ERROR([newly created file is older than distributed files!
+Check your system clock])
+fi
+AC_MSG_RESULT(yes)])
+
+# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# AM_PROG_INSTALL_STRIP
+# ---------------------
+# One issue with vendor `install' (even GNU) is that you can't
+# specify the program used to strip binaries.  This is especially
+# annoying in cross-compiling environments, where the build's strip
+# is unlikely to handle the host's binaries.
+# Fortunately install-sh will honor a STRIPPROG variable, so we
+# always use install-sh in `make install-strip', and initialize
+# STRIPPROG with the value of the STRIP variable (set by the user).
+AC_DEFUN([AM_PROG_INSTALL_STRIP],
+[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
+# Installed binaries are usually stripped using `strip' when the user
+# run `make install-strip'.  However `strip' might not be the right
+# tool to use in cross-compilation environments, therefore Automake
+# will honor the `STRIP' environment variable to overrule this program.
+dnl Don't test for $cross_compiling = yes, because it might be `maybe'.
+if test "$cross_compiling" != no; then
+  AC_CHECK_TOOL([STRIP], [strip], :)
+fi
+INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
+AC_SUBST([INSTALL_STRIP_PROGRAM])])
+
+# Copyright (C) 2006, 2008  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 2
+
+# _AM_SUBST_NOTMAKE(VARIABLE)
+# ---------------------------
+# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.
+# This macro is traced by Automake.
+AC_DEFUN([_AM_SUBST_NOTMAKE])
+
+# AM_SUBST_NOTMAKE(VARIABLE)
+# ---------------------------
+# Public sister of _AM_SUBST_NOTMAKE.
+AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
+
+# Check how to create a tarball.                            -*- Autoconf -*-
+
+# Copyright (C) 2004, 2005  Free Software Foundation, Inc.
+#
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# serial 2
+
+# _AM_PROG_TAR(FORMAT)
+# --------------------
+# Check how to create a tarball in format FORMAT.
+# FORMAT should be one of `v7', `ustar', or `pax'.
+#
+# Substitute a variable $(am__tar) that is a command
+# writing to stdout a FORMAT-tarball containing the directory
+# $tardir.
+#     tardir=directory && $(am__tar) > result.tar
+#
+# Substitute a variable $(am__untar) that extract such
+# a tarball read from stdin.
+#     $(am__untar) < result.tar
+AC_DEFUN([_AM_PROG_TAR],
+[# Always define AMTAR for backward compatibility.
+AM_MISSING_PROG([AMTAR], [tar])
+m4_if([$1], [v7],
+     [am__tar='${AMTAR} chof - "$$tardir"'; am__untar='${AMTAR} xf -'],
+     [m4_case([$1], [ustar],, [pax],,
+              [m4_fatal([Unknown tar format])])
+AC_MSG_CHECKING([how to create a $1 tar archive])
+# Loop over all known methods to create a tar archive until one works.
+_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'
+_am_tools=${am_cv_prog_tar_$1-$_am_tools}
+# Do not fold the above two line into one, because Tru64 sh and
+# Solaris sh will not grok spaces in the rhs of `-'.
+for _am_tool in $_am_tools
+do
+  case $_am_tool in
+  gnutar)
+    for _am_tar in tar gnutar gtar;
+    do
+      AM_RUN_LOG([$_am_tar --version]) && break
+    done
+    am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
+    am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
+    am__untar="$_am_tar -xf -"
+    ;;
+  plaintar)
+    # Must skip GNU tar: if it does not support --format= it doesn't create
+    # ustar tarball either.
+    (tar --version) >/dev/null 2>&1 && continue
+    am__tar='tar chf - "$$tardir"'
+    am__tar_='tar chf - "$tardir"'
+    am__untar='tar xf -'
+    ;;
+  pax)
+    am__tar='pax -L -x $1 -w "$$tardir"'
+    am__tar_='pax -L -x $1 -w "$tardir"'
+    am__untar='pax -r'
+    ;;
+  cpio)
+    am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
+    am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
+    am__untar='cpio -i -H $1 -d'
+    ;;
+  none)
+    am__tar=false
+    am__tar_=false
+    am__untar=false
+    ;;
+  esac
+
+  # If the value was cached, stop now.  We just wanted to have am__tar
+  # and am__untar set.
+  test -n "${am_cv_prog_tar_$1}" && break
+
+  # tar/untar a dummy directory, and stop if the command works
+  rm -rf conftest.dir
+  mkdir conftest.dir
+  echo GrepMe > conftest.dir/file
+  AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
+  rm -rf conftest.dir
+  if test -s conftest.tar; then
+    AM_RUN_LOG([$am__untar <conftest.tar])
+    grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
+  fi
+done
+rm -rf conftest.dir
+
+AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
+AC_MSG_RESULT([$am_cv_prog_tar_$1])])
+AC_SUBST([am__tar])
+AC_SUBST([am__untar])
+]) # _AM_PROG_TAR
+
+m4_include([m4/acinclude.m4])
+m4_include([m4/acx_pthread.m4])
+m4_include([m4/ax_create_pkgconfig_info.m4])
+m4_include([m4/doxygen.m4])
+m4_include([m4/libtool.m4])
+m4_include([m4/ltoptions.m4])
+m4_include([m4/ltsugar.m4])
+m4_include([m4/ltversion.m4])
+m4_include([m4/lt~obsolete.m4])
diff --git a/build-aux/config.guess b/build-aux/config.guess
new file mode 100755
index 0000000..c2246a4
--- /dev/null
+++ b/build-aux/config.guess
@@ -0,0 +1,1502 @@
+#! /bin/sh
+# Attempt to guess a canonical system name.
+#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
+#   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
+#   Free Software Foundation, Inc.
+
+timestamp='2009-12-30'
+
+# This file is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception to the GNU General Public License, if you
+# distribute this file as part of a program that contains a
+# configuration script generated by Autoconf, you may include it under
+# the same distribution terms that you use for the rest of that program.
+
+
+# Originally written by Per Bothner.  Please send patches (context
+# diff format) to <config-patches@gnu.org> and include a ChangeLog
+# entry.
+#
+# This script attempts to guess a canonical system name similar to
+# config.sub.  If it succeeds, it prints the system name on stdout, and
+# exits with 0.  Otherwise, it exits with 1.
+#
+# You can get the latest version of this script from:
+# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD
+
+me=`echo "$0" | sed -e 's,.*/,,'`
+
+usage="\
+Usage: $0 [OPTION]
+
+Output the configuration name of the system \`$me' is run on.
+
+Operation modes:
+  -h, --help         print this help, then exit
+  -t, --time-stamp   print date of last modification, then exit
+  -v, --version      print version number, then exit
+
+Report bugs and patches to <config-patches@gnu.org>."
+
+version="\
+GNU config.guess ($timestamp)
+
+Originally written by Per Bothner.
+Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
+2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free
+Software Foundation, Inc.
+
+This is free software; see the source for copying conditions.  There is NO
+warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
+
+help="
+Try \`$me --help' for more information."
+
+# Parse command line
+while test $# -gt 0 ; do
+  case $1 in
+    --time-stamp | --time* | -t )
+       echo "$timestamp" ; exit ;;
+    --version | -v )
+       echo "$version" ; exit ;;
+    --help | --h* | -h )
+       echo "$usage"; exit ;;
+    -- )     # Stop option processing
+       shift; break ;;
+    - )	# Use stdin as input.
+       break ;;
+    -* )
+       echo "$me: invalid option $1$help" >&2
+       exit 1 ;;
+    * )
+       break ;;
+  esac
+done
+
+if test $# != 0; then
+  echo "$me: too many arguments$help" >&2
+  exit 1
+fi
+
+trap 'exit 1' 1 2 15
+
+# CC_FOR_BUILD -- compiler used by this script. Note that the use of a
+# compiler to aid in system detection is discouraged as it requires
+# temporary files to be created and, as you can see below, it is a
+# headache to deal with in a portable fashion.
+
+# Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still
+# use `HOST_CC' if defined, but it is deprecated.
+
+# Portable tmp directory creation inspired by the Autoconf team.
+
+set_cc_for_build='
+trap "exitcode=\$?; (rm -f \$tmpfiles 2>/dev/null; rmdir \$tmp 2>/dev/null) && exit \$exitcode" 0 ;
+trap "rm -f \$tmpfiles 2>/dev/null; rmdir \$tmp 2>/dev/null; exit 1" 1 2 13 15 ;
+: ${TMPDIR=/tmp} ;
+ { tmp=`(umask 077 && mktemp -d "$TMPDIR/cgXXXXXX") 2>/dev/null` && test -n "$tmp" && test -d "$tmp" ; } ||
+ { test -n "$RANDOM" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir $tmp) ; } ||
+ { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir $tmp) && echo "Warning: creating insecure temp directory" >&2 ; } ||
+ { echo "$me: cannot create a temporary directory in $TMPDIR" >&2 ; exit 1 ; } ;
+dummy=$tmp/dummy ;
+tmpfiles="$dummy.c $dummy.o $dummy.rel $dummy" ;
+case $CC_FOR_BUILD,$HOST_CC,$CC in
+ ,,)    echo "int x;" > $dummy.c ;
+	for c in cc gcc c89 c99 ; do
+	  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then
+	     CC_FOR_BUILD="$c"; break ;
+	  fi ;
+	done ;
+	if test x"$CC_FOR_BUILD" = x ; then
+	  CC_FOR_BUILD=no_compiler_found ;
+	fi
+	;;
+ ,,*)   CC_FOR_BUILD=$CC ;;
+ ,*,*)  CC_FOR_BUILD=$HOST_CC ;;
+esac ; set_cc_for_build= ;'
+
+# This is needed to find uname on a Pyramid OSx when run in the BSD universe.
+# (ghazi@noc.rutgers.edu 1994-08-24)
+if (test -f /.attbin/uname) >/dev/null 2>&1 ; then
+	PATH=$PATH:/.attbin ; export PATH
+fi
+
+UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown
+UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown
+UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
+UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown
+
+# Note: order is significant - the case branches are not exclusive.
+
+case "${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}" in
+    *:NetBSD:*:*)
+	# NetBSD (nbsd) targets should (where applicable) match one or
+	# more of the tupples: *-*-netbsdelf*, *-*-netbsdaout*,
+	# *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently
+	# switched to ELF, *-*-netbsd* would select the old
+	# object file format.  This provides both forward
+	# compatibility and a consistent mechanism for selecting the
+	# object file format.
+	#
+	# Note: NetBSD doesn't particularly care about the vendor
+	# portion of the name.  We always set it to "unknown".
+	sysctl="sysctl -n hw.machine_arch"
+	UNAME_MACHINE_ARCH=`(/sbin/$sysctl 2>/dev/null || \
+	    /usr/sbin/$sysctl 2>/dev/null || echo unknown)`
+	case "${UNAME_MACHINE_ARCH}" in
+	    armeb) machine=armeb-unknown ;;
+	    arm*) machine=arm-unknown ;;
+	    sh3el) machine=shl-unknown ;;
+	    sh3eb) machine=sh-unknown ;;
+	    sh5el) machine=sh5le-unknown ;;
+	    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;
+	esac
+	# The Operating System including object format, if it has switched
+	# to ELF recently, or will in the future.
+	case "${UNAME_MACHINE_ARCH}" in
+	    arm*|i386|m68k|ns32k|sh3*|sparc|vax)
+		eval $set_cc_for_build
+		if echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \
+			| grep -q __ELF__
+		then
+		    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).
+		    # Return netbsd for either.  FIX?
+		    os=netbsd
+		else
+		    os=netbsdelf
+		fi
+		;;
+	    *)
+	        os=netbsd
+		;;
+	esac
+	# The OS release
+	# Debian GNU/NetBSD machines have a different userland, and
+	# thus, need a distinct triplet. However, they do not need
+	# kernel version information, so it can be replaced with a
+	# suitable tag, in the style of linux-gnu.
+	case "${UNAME_VERSION}" in
+	    Debian*)
+		release='-gnu'
+		;;
+	    *)
+		release=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\./'`
+		;;
+	esac
+	# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:
+	# contains redundant information, the shorter form:
+	# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.
+	echo "${machine}-${os}${release}"
+	exit ;;
+    *:OpenBSD:*:*)
+	UNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`
+	echo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}
+	exit ;;
+    *:ekkoBSD:*:*)
+	echo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}
+	exit ;;
+    *:SolidBSD:*:*)
+	echo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}
+	exit ;;
+    macppc:MirBSD:*:*)
+	echo powerpc-unknown-mirbsd${UNAME_RELEASE}
+	exit ;;
+    *:MirBSD:*:*)
+	echo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}
+	exit ;;
+    alpha:OSF1:*:*)
+	case $UNAME_RELEASE in
+	*4.0)
+		UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`
+		;;
+	*5.*)
+	        UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`
+		;;
+	esac
+	# According to Compaq, /usr/sbin/psrinfo has been available on
+	# OSF/1 and Tru64 systems produced since 1995.  I hope that
+	# covers most systems running today.  This code pipes the CPU
+	# types through head -n 1, so we only detect the type of CPU 0.
+	ALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \(.*\) processor.*$/\1/p' | head -n 1`
+	case "$ALPHA_CPU_TYPE" in
+	    "EV4 (21064)")
+		UNAME_MACHINE="alpha" ;;
+	    "EV4.5 (21064)")
+		UNAME_MACHINE="alpha" ;;
+	    "LCA4 (21066/21068)")
+		UNAME_MACHINE="alpha" ;;
+	    "EV5 (21164)")
+		UNAME_MACHINE="alphaev5" ;;
+	    "EV5.6 (21164A)")
+		UNAME_MACHINE="alphaev56" ;;
+	    "EV5.6 (21164PC)")
+		UNAME_MACHINE="alphapca56" ;;
+	    "EV5.7 (21164PC)")
+		UNAME_MACHINE="alphapca57" ;;
+	    "EV6 (21264)")
+		UNAME_MACHINE="alphaev6" ;;
+	    "EV6.7 (21264A)")
+		UNAME_MACHINE="alphaev67" ;;
+	    "EV6.8CB (21264C)")
+		UNAME_MACHINE="alphaev68" ;;
+	    "EV6.8AL (21264B)")
+		UNAME_MACHINE="alphaev68" ;;
+	    "EV6.8CX (21264D)")
+		UNAME_MACHINE="alphaev68" ;;
+	    "EV6.9A (21264/EV69A)")
+		UNAME_MACHINE="alphaev69" ;;
+	    "EV7 (21364)")
+		UNAME_MACHINE="alphaev7" ;;
+	    "EV7.9 (21364A)")
+		UNAME_MACHINE="alphaev79" ;;
+	esac
+	# A Pn.n version is a patched version.
+	# A Vn.n version is a released version.
+	# A Tn.n version is a released field test version.
+	# A Xn.n version is an unreleased experimental baselevel.
+	# 1.2 uses "1.2" for uname -r.
+	echo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`
+	exit ;;
+    Alpha\ *:Windows_NT*:*)
+	# How do we know it's Interix rather than the generic POSIX subsystem?
+	# Should we change UNAME_MACHINE based on the output of uname instead
+	# of the specific Alpha model?
+	echo alpha-pc-interix
+	exit ;;
+    21064:Windows_NT:50:3)
+	echo alpha-dec-winnt3.5
+	exit ;;
+    Amiga*:UNIX_System_V:4.0:*)
+	echo m68k-unknown-sysv4
+	exit ;;
+    *:[Aa]miga[Oo][Ss]:*:*)
+	echo ${UNAME_MACHINE}-unknown-amigaos
+	exit ;;
+    *:[Mm]orph[Oo][Ss]:*:*)
+	echo ${UNAME_MACHINE}-unknown-morphos
+	exit ;;
+    *:OS/390:*:*)
+	echo i370-ibm-openedition
+	exit ;;
+    *:z/VM:*:*)
+	echo s390-ibm-zvmoe
+	exit ;;
+    *:OS400:*:*)
+        echo powerpc-ibm-os400
+	exit ;;
+    arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)
+	echo arm-acorn-riscix${UNAME_RELEASE}
+	exit ;;
+    arm:riscos:*:*|arm:RISCOS:*:*)
+	echo arm-unknown-riscos
+	exit ;;
+    SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)
+	echo hppa1.1-hitachi-hiuxmpp
+	exit ;;
+    Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)
+	# akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.
+	if test "`(/bin/universe) 2>/dev/null`" = att ; then
+		echo pyramid-pyramid-sysv3
+	else
+		echo pyramid-pyramid-bsd
+	fi
+	exit ;;
+    NILE*:*:*:dcosx)
+	echo pyramid-pyramid-svr4
+	exit ;;
+    DRS?6000:unix:4.0:6*)
+	echo sparc-icl-nx6
+	exit ;;
+    DRS?6000:UNIX_SV:4.2*:7* | DRS?6000:isis:4.2*:7*)
+	case `/usr/bin/uname -p` in
+	    sparc) echo sparc-icl-nx7; exit ;;
+	esac ;;
+    s390x:SunOS:*:*)
+	echo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
+	exit ;;
+    sun4H:SunOS:5.*:*)
+	echo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
+	exit ;;
+    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)
+	echo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
+	exit ;;
+    i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)
+	echo i386-pc-auroraux${UNAME_RELEASE}
+	exit ;;
+    i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)
+	eval $set_cc_for_build
+	SUN_ARCH="i386"
+	# If there is a compiler, see if it is configured for 64-bit objects.
+	# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.
+	# This test works for both compilers.
+	if [ "$CC_FOR_BUILD" != 'no_compiler_found' ]; then
+	    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \
+		(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \
+		grep IS_64BIT_ARCH >/dev/null
+	    then
+		SUN_ARCH="x86_64"
+	    fi
+	fi
+	echo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
+	exit ;;
+    sun4*:SunOS:6*:*)
+	# According to config.sub, this is the proper way to canonicalize
+	# SunOS6.  Hard to guess exactly what SunOS6 will be like, but
+	# it's likely to be more like Solaris than SunOS4.
+	echo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
+	exit ;;
+    sun4*:SunOS:*:*)
+	case "`/usr/bin/arch -k`" in
+	    Series*|S4*)
+		UNAME_RELEASE=`uname -v`
+		;;
+	esac
+	# Japanese Language versions have a version number like `4.1.3-JL'.
+	echo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`
+	exit ;;
+    sun3*:SunOS:*:*)
+	echo m68k-sun-sunos${UNAME_RELEASE}
+	exit ;;
+    sun*:*:4.2BSD:*)
+	UNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`
+	test "x${UNAME_RELEASE}" = "x" && UNAME_RELEASE=3
+	case "`/bin/arch`" in
+	    sun3)
+		echo m68k-sun-sunos${UNAME_RELEASE}
+		;;
+	    sun4)
+		echo sparc-sun-sunos${UNAME_RELEASE}
+		;;
+	esac
+	exit ;;
+    aushp:SunOS:*:*)
+	echo sparc-auspex-sunos${UNAME_RELEASE}
+	exit ;;
+    # The situation for MiNT is a little confusing.  The machine name
+    # can be virtually everything (everything which is not
+    # "atarist" or "atariste" at least should have a processor
+    # > m68000).  The system name ranges from "MiNT" over "FreeMiNT"
+    # to the lowercase version "mint" (or "freemint").  Finally
+    # the system name "TOS" denotes a system which is actually not
+    # MiNT.  But MiNT is downward compatible to TOS, so this should
+    # be no problem.
+    atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)
+        echo m68k-atari-mint${UNAME_RELEASE}
+	exit ;;
+    atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)
+	echo m68k-atari-mint${UNAME_RELEASE}
+        exit ;;
+    *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)
+        echo m68k-atari-mint${UNAME_RELEASE}
+	exit ;;
+    milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)
+        echo m68k-milan-mint${UNAME_RELEASE}
+        exit ;;
+    hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)
+        echo m68k-hades-mint${UNAME_RELEASE}
+        exit ;;
+    *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)
+        echo m68k-unknown-mint${UNAME_RELEASE}
+        exit ;;
+    m68k:machten:*:*)
+	echo m68k-apple-machten${UNAME_RELEASE}
+	exit ;;
+    powerpc:machten:*:*)
+	echo powerpc-apple-machten${UNAME_RELEASE}
+	exit ;;
+    RISC*:Mach:*:*)
+	echo mips-dec-mach_bsd4.3
+	exit ;;
+    RISC*:ULTRIX:*:*)
+	echo mips-dec-ultrix${UNAME_RELEASE}
+	exit ;;
+    VAX*:ULTRIX*:*:*)
+	echo vax-dec-ultrix${UNAME_RELEASE}
+	exit ;;
+    2020:CLIX:*:* | 2430:CLIX:*:*)
+	echo clipper-intergraph-clix${UNAME_RELEASE}
+	exit ;;
+    mips:*:*:UMIPS | mips:*:*:RISCos)
+	eval $set_cc_for_build
+	sed 's/^	//' << EOF >$dummy.c
+#ifdef __cplusplus
+#include <stdio.h>  /* for printf() prototype */
+	int main (int argc, char *argv[]) {
+#else
+	int main (argc, argv) int argc; char *argv[]; {
+#endif
+	#if defined (host_mips) && defined (MIPSEB)
+	#if defined (SYSTYPE_SYSV)
+	  printf ("mips-mips-riscos%ssysv\n", argv[1]); exit (0);
+	#endif
+	#if defined (SYSTYPE_SVR4)
+	  printf ("mips-mips-riscos%ssvr4\n", argv[1]); exit (0);
+	#endif
+	#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)
+	  printf ("mips-mips-riscos%sbsd\n", argv[1]); exit (0);
+	#endif
+	#endif
+	  exit (-1);
+	}
+EOF
+	$CC_FOR_BUILD -o $dummy $dummy.c &&
+	  dummyarg=`echo "${UNAME_RELEASE}" | sed -n 's/\([0-9]*\).*/\1/p'` &&
+	  SYSTEM_NAME=`$dummy $dummyarg` &&
+	    { echo "$SYSTEM_NAME"; exit; }
+	echo mips-mips-riscos${UNAME_RELEASE}
+	exit ;;
+    Motorola:PowerMAX_OS:*:*)
+	echo powerpc-motorola-powermax
+	exit ;;
+    Motorola:*:4.3:PL8-*)
+	echo powerpc-harris-powermax
+	exit ;;
+    Night_Hawk:*:*:PowerMAX_OS | Synergy:PowerMAX_OS:*:*)
+	echo powerpc-harris-powermax
+	exit ;;
+    Night_Hawk:Power_UNIX:*:*)
+	echo powerpc-harris-powerunix
+	exit ;;
+    m88k:CX/UX:7*:*)
+	echo m88k-harris-cxux7
+	exit ;;
+    m88k:*:4*:R4*)
+	echo m88k-motorola-sysv4
+	exit ;;
+    m88k:*:3*:R3*)
+	echo m88k-motorola-sysv3
+	exit ;;
+    AViiON:dgux:*:*)
+        # DG/UX returns AViiON for all architectures
+        UNAME_PROCESSOR=`/usr/bin/uname -p`
+	if [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]
+	then
+	    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \
+	       [ ${TARGET_BINARY_INTERFACE}x = x ]
+	    then
+		echo m88k-dg-dgux${UNAME_RELEASE}
+	    else
+		echo m88k-dg-dguxbcs${UNAME_RELEASE}
+	    fi
+	else
+	    echo i586-dg-dgux${UNAME_RELEASE}
+	fi
+ 	exit ;;
+    M88*:DolphinOS:*:*)	# DolphinOS (SVR3)
+	echo m88k-dolphin-sysv3
+	exit ;;
+    M88*:*:R3*:*)
+	# Delta 88k system running SVR3
+	echo m88k-motorola-sysv3
+	exit ;;
+    XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)
+	echo m88k-tektronix-sysv3
+	exit ;;
+    Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)
+	echo m68k-tektronix-bsd
+	exit ;;
+    *:IRIX*:*:*)
+	echo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`
+	exit ;;
+    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.
+	echo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id
+	exit ;;               # Note that: echo "'`uname -s`'" gives 'AIX '
+    i*86:AIX:*:*)
+	echo i386-ibm-aix
+	exit ;;
+    ia64:AIX:*:*)
+	if [ -x /usr/bin/oslevel ] ; then
+		IBM_REV=`/usr/bin/oslevel`
+	else
+		IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}
+	fi
+	echo ${UNAME_MACHINE}-ibm-aix${IBM_REV}
+	exit ;;
+    *:AIX:2:3)
+	if grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then
+		eval $set_cc_for_build
+		sed 's/^		//' << EOF >$dummy.c
+		#include <sys/systemcfg.h>
+
+		main()
+			{
+			if (!__power_pc())
+				exit(1);
+			puts("powerpc-ibm-aix3.2.5");
+			exit(0);
+			}
+EOF
+		if $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`
+		then
+			echo "$SYSTEM_NAME"
+		else
+			echo rs6000-ibm-aix3.2.5
+		fi
+	elif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then
+		echo rs6000-ibm-aix3.2.4
+	else
+		echo rs6000-ibm-aix3.2
+	fi
+	exit ;;
+    *:AIX:*:[456])
+	IBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`
+	if /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then
+		IBM_ARCH=rs6000
+	else
+		IBM_ARCH=powerpc
+	fi
+	if [ -x /usr/bin/oslevel ] ; then
+		IBM_REV=`/usr/bin/oslevel`
+	else
+		IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}
+	fi
+	echo ${IBM_ARCH}-ibm-aix${IBM_REV}
+	exit ;;
+    *:AIX:*:*)
+	echo rs6000-ibm-aix
+	exit ;;
+    ibmrt:4.4BSD:*|romp-ibm:BSD:*)
+	echo romp-ibm-bsd4.4
+	exit ;;
+    ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and
+	echo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to
+	exit ;;                             # report: romp-ibm BSD 4.3
+    *:BOSX:*:*)
+	echo rs6000-bull-bosx
+	exit ;;
+    DPX/2?00:B.O.S.:*:*)
+	echo m68k-bull-sysv3
+	exit ;;
+    9000/[34]??:4.3bsd:1.*:*)
+	echo m68k-hp-bsd
+	exit ;;
+    hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)
+	echo m68k-hp-bsd4.4
+	exit ;;
+    9000/[34678]??:HP-UX:*:*)
+	HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`
+	case "${UNAME_MACHINE}" in
+	    9000/31? )            HP_ARCH=m68000 ;;
+	    9000/[34]?? )         HP_ARCH=m68k ;;
+	    9000/[678][0-9][0-9])
+		if [ -x /usr/bin/getconf ]; then
+		    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`
+                    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`
+                    case "${sc_cpu_version}" in
+                      523) HP_ARCH="hppa1.0" ;; # CPU_PA_RISC1_0
+                      528) HP_ARCH="hppa1.1" ;; # CPU_PA_RISC1_1
+                      532)                      # CPU_PA_RISC2_0
+                        case "${sc_kernel_bits}" in
+                          32) HP_ARCH="hppa2.0n" ;;
+                          64) HP_ARCH="hppa2.0w" ;;
+			  '') HP_ARCH="hppa2.0" ;;   # HP-UX 10.20
+                        esac ;;
+                    esac
+		fi
+		if [ "${HP_ARCH}" = "" ]; then
+		    eval $set_cc_for_build
+		    sed 's/^              //' << EOF >$dummy.c
+
+              #define _HPUX_SOURCE
+              #include <stdlib.h>
+              #include <unistd.h>
+
+              int main ()
+              {
+              #if defined(_SC_KERNEL_BITS)
+                  long bits = sysconf(_SC_KERNEL_BITS);
+              #endif
+                  long cpu  = sysconf (_SC_CPU_VERSION);
+
+                  switch (cpu)
+              	{
+              	case CPU_PA_RISC1_0: puts ("hppa1.0"); break;
+              	case CPU_PA_RISC1_1: puts ("hppa1.1"); break;
+              	case CPU_PA_RISC2_0:
+              #if defined(_SC_KERNEL_BITS)
+              	    switch (bits)
+              		{
+              		case 64: puts ("hppa2.0w"); break;
+              		case 32: puts ("hppa2.0n"); break;
+              		default: puts ("hppa2.0"); break;
+              		} break;
+              #else  /* !defined(_SC_KERNEL_BITS) */
+              	    puts ("hppa2.0"); break;
+              #endif
+              	default: puts ("hppa1.0"); break;
+              	}
+                  exit (0);
+              }
+EOF
+		    (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`
+		    test -z "$HP_ARCH" && HP_ARCH=hppa
+		fi ;;
+	esac
+	if [ ${HP_ARCH} = "hppa2.0w" ]
+	then
+	    eval $set_cc_for_build
+
+	    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating
+	    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler
+	    # generating 64-bit code.  GNU and HP use different nomenclature:
+	    #
+	    # $ CC_FOR_BUILD=cc ./config.guess
+	    # => hppa2.0w-hp-hpux11.23
+	    # $ CC_FOR_BUILD="cc +DA2.0w" ./config.guess
+	    # => hppa64-hp-hpux11.23
+
+	    if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |
+		grep -q __LP64__
+	    then
+		HP_ARCH="hppa2.0w"
+	    else
+		HP_ARCH="hppa64"
+	    fi
+	fi
+	echo ${HP_ARCH}-hp-hpux${HPUX_REV}
+	exit ;;
+    ia64:HP-UX:*:*)
+	HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`
+	echo ia64-hp-hpux${HPUX_REV}
+	exit ;;
+    3050*:HI-UX:*:*)
+	eval $set_cc_for_build
+	sed 's/^	//' << EOF >$dummy.c
+	#include <unistd.h>
+	int
+	main ()
+	{
+	  long cpu = sysconf (_SC_CPU_VERSION);
+	  /* The order matters, because CPU_IS_HP_MC68K erroneously returns
+	     true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct
+	     results, however.  */
+	  if (CPU_IS_PA_RISC (cpu))
+	    {
+	      switch (cpu)
+		{
+		  case CPU_PA_RISC1_0: puts ("hppa1.0-hitachi-hiuxwe2"); break;
+		  case CPU_PA_RISC1_1: puts ("hppa1.1-hitachi-hiuxwe2"); break;
+		  case CPU_PA_RISC2_0: puts ("hppa2.0-hitachi-hiuxwe2"); break;
+		  default: puts ("hppa-hitachi-hiuxwe2"); break;
+		}
+	    }
+	  else if (CPU_IS_HP_MC68K (cpu))
+	    puts ("m68k-hitachi-hiuxwe2");
+	  else puts ("unknown-hitachi-hiuxwe2");
+	  exit (0);
+	}
+EOF
+	$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&
+		{ echo "$SYSTEM_NAME"; exit; }
+	echo unknown-hitachi-hiuxwe2
+	exit ;;
+    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )
+	echo hppa1.1-hp-bsd
+	exit ;;
+    9000/8??:4.3bsd:*:*)
+	echo hppa1.0-hp-bsd
+	exit ;;
+    *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)
+	echo hppa1.0-hp-mpeix
+	exit ;;
+    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )
+	echo hppa1.1-hp-osf
+	exit ;;
+    hp8??:OSF1:*:*)
+	echo hppa1.0-hp-osf
+	exit ;;
+    i*86:OSF1:*:*)
+	if [ -x /usr/sbin/sysversion ] ; then
+	    echo ${UNAME_MACHINE}-unknown-osf1mk
+	else
+	    echo ${UNAME_MACHINE}-unknown-osf1
+	fi
+	exit ;;
+    parisc*:Lites*:*:*)
+	echo hppa1.1-hp-lites
+	exit ;;
+    C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)
+	echo c1-convex-bsd
+        exit ;;
+    C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)
+	if getsysinfo -f scalar_acc
+	then echo c32-convex-bsd
+	else echo c2-convex-bsd
+	fi
+        exit ;;
+    C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)
+	echo c34-convex-bsd
+        exit ;;
+    C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)
+	echo c38-convex-bsd
+        exit ;;
+    C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)
+	echo c4-convex-bsd
+        exit ;;
+    CRAY*Y-MP:*:*:*)
+	echo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
+	exit ;;
+    CRAY*[A-Z]90:*:*:*)
+	echo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \
+	| sed -e 's/CRAY.*\([A-Z]90\)/\1/' \
+	      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \
+	      -e 's/\.[^.]*$/.X/'
+	exit ;;
+    CRAY*TS:*:*:*)
+	echo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
+	exit ;;
+    CRAY*T3E:*:*:*)
+	echo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
+	exit ;;
+    CRAY*SV1:*:*:*)
+	echo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
+	exit ;;
+    *:UNICOS/mp:*:*)
+	echo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
+	exit ;;
+    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)
+	FUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`
+        FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\///'`
+        FUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`
+        echo "${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}"
+        exit ;;
+    5000:UNIX_System_V:4.*:*)
+        FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\///'`
+        FUJITSU_REL=`echo ${UNAME_RELEASE} | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/ /_/'`
+        echo "sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}"
+	exit ;;
+    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\ Embedded/OS:*:*)
+	echo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}
+	exit ;;
+    sparc*:BSD/OS:*:*)
+	echo sparc-unknown-bsdi${UNAME_RELEASE}
+	exit ;;
+    *:BSD/OS:*:*)
+	echo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}
+	exit ;;
+    *:FreeBSD:*:*)
+	case ${UNAME_MACHINE} in
+	    pc98)
+		echo i386-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;
+	    amd64)
+		echo x86_64-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;
+	    *)
+		echo ${UNAME_MACHINE}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;
+	esac
+	exit ;;
+    i*:CYGWIN*:*)
+	echo ${UNAME_MACHINE}-pc-cygwin
+	exit ;;
+    *:MINGW*:*)
+	echo ${UNAME_MACHINE}-pc-mingw32
+	exit ;;
+    i*:windows32*:*)
+    	# uname -m includes "-pc" on this system.
+    	echo ${UNAME_MACHINE}-mingw32
+	exit ;;
+    i*:PW*:*)
+	echo ${UNAME_MACHINE}-pc-pw32
+	exit ;;
+    *:Interix*:*)
+    	case ${UNAME_MACHINE} in
+	    x86)
+		echo i586-pc-interix${UNAME_RELEASE}
+		exit ;;
+	    authenticamd | genuineintel | EM64T)
+		echo x86_64-unknown-interix${UNAME_RELEASE}
+		exit ;;
+	    IA64)
+		echo ia64-unknown-interix${UNAME_RELEASE}
+		exit ;;
+	esac ;;
+    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)
+	echo i${UNAME_MACHINE}-pc-mks
+	exit ;;
+    8664:Windows_NT:*)
+	echo x86_64-pc-mks
+	exit ;;
+    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)
+	# How do we know it's Interix rather than the generic POSIX subsystem?
+	# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we
+	# UNAME_MACHINE based on the output of uname instead of i386?
+	echo i586-pc-interix
+	exit ;;
+    i*:UWIN*:*)
+	echo ${UNAME_MACHINE}-pc-uwin
+	exit ;;
+    amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)
+	echo x86_64-unknown-cygwin
+	exit ;;
+    p*:CYGWIN*:*)
+	echo powerpcle-unknown-cygwin
+	exit ;;
+    prep*:SunOS:5.*:*)
+	echo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
+	exit ;;
+    *:GNU:*:*)
+	# the GNU system
+	echo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-gnu`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`
+	exit ;;
+    *:GNU/*:*:*)
+	# other systems with GNU libc and userland
+	echo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-gnu
+	exit ;;
+    i*86:Minix:*:*)
+	echo ${UNAME_MACHINE}-pc-minix
+	exit ;;
+    alpha:Linux:*:*)
+	case `sed -n '/^cpu model/s/^.*: \(.*\)/\1/p' < /proc/cpuinfo` in
+	  EV5)   UNAME_MACHINE=alphaev5 ;;
+	  EV56)  UNAME_MACHINE=alphaev56 ;;
+	  PCA56) UNAME_MACHINE=alphapca56 ;;
+	  PCA57) UNAME_MACHINE=alphapca56 ;;
+	  EV6)   UNAME_MACHINE=alphaev6 ;;
+	  EV67)  UNAME_MACHINE=alphaev67 ;;
+	  EV68*) UNAME_MACHINE=alphaev68 ;;
+        esac
+	objdump --private-headers /bin/sh | grep -q ld.so.1
+	if test "$?" = 0 ; then LIBC="libc1" ; else LIBC="" ; fi
+	echo ${UNAME_MACHINE}-unknown-linux-gnu${LIBC}
+	exit ;;
+    arm*:Linux:*:*)
+	eval $set_cc_for_build
+	if echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \
+	    | grep -q __ARM_EABI__
+	then
+	    echo ${UNAME_MACHINE}-unknown-linux-gnu
+	else
+	    echo ${UNAME_MACHINE}-unknown-linux-gnueabi
+	fi
+	exit ;;
+    avr32*:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    cris:Linux:*:*)
+	echo cris-axis-linux-gnu
+	exit ;;
+    crisv32:Linux:*:*)
+	echo crisv32-axis-linux-gnu
+	exit ;;
+    frv:Linux:*:*)
+    	echo frv-unknown-linux-gnu
+	exit ;;
+    i*86:Linux:*:*)
+	LIBC=gnu
+	eval $set_cc_for_build
+	sed 's/^	//' << EOF >$dummy.c
+	#ifdef __dietlibc__
+	LIBC=dietlibc
+	#endif
+EOF
+	eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC'`
+	echo "${UNAME_MACHINE}-pc-linux-${LIBC}"
+	exit ;;
+    ia64:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    m32r*:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    m68*:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    mips:Linux:*:* | mips64:Linux:*:*)
+	eval $set_cc_for_build
+	sed 's/^	//' << EOF >$dummy.c
+	#undef CPU
+	#undef ${UNAME_MACHINE}
+	#undef ${UNAME_MACHINE}el
+	#if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)
+	CPU=${UNAME_MACHINE}el
+	#else
+	#if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)
+	CPU=${UNAME_MACHINE}
+	#else
+	CPU=
+	#endif
+	#endif
+EOF
+	eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`
+	test x"${CPU}" != x && { echo "${CPU}-unknown-linux-gnu"; exit; }
+	;;
+    or32:Linux:*:*)
+	echo or32-unknown-linux-gnu
+	exit ;;
+    padre:Linux:*:*)
+	echo sparc-unknown-linux-gnu
+	exit ;;
+    parisc64:Linux:*:* | hppa64:Linux:*:*)
+	echo hppa64-unknown-linux-gnu
+	exit ;;
+    parisc:Linux:*:* | hppa:Linux:*:*)
+	# Look for CPU level
+	case `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in
+	  PA7*) echo hppa1.1-unknown-linux-gnu ;;
+	  PA8*) echo hppa2.0-unknown-linux-gnu ;;
+	  *)    echo hppa-unknown-linux-gnu ;;
+	esac
+	exit ;;
+    ppc64:Linux:*:*)
+	echo powerpc64-unknown-linux-gnu
+	exit ;;
+    ppc:Linux:*:*)
+	echo powerpc-unknown-linux-gnu
+	exit ;;
+    s390:Linux:*:* | s390x:Linux:*:*)
+	echo ${UNAME_MACHINE}-ibm-linux
+	exit ;;
+    sh64*:Linux:*:*)
+    	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    sh*:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    sparc:Linux:*:* | sparc64:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    vax:Linux:*:*)
+	echo ${UNAME_MACHINE}-dec-linux-gnu
+	exit ;;
+    x86_64:Linux:*:*)
+	echo x86_64-unknown-linux-gnu
+	exit ;;
+    xtensa*:Linux:*:*)
+    	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    i*86:DYNIX/ptx:4*:*)
+	# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.
+	# earlier versions are messed up and put the nodename in both
+	# sysname and nodename.
+	echo i386-sequent-sysv4
+	exit ;;
+    i*86:UNIX_SV:4.2MP:2.*)
+        # Unixware is an offshoot of SVR4, but it has its own version
+        # number series starting with 2...
+        # I am not positive that other SVR4 systems won't match this,
+	# I just have to hope.  -- rms.
+        # Use sysv4.2uw... so that sysv4* matches it.
+	echo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}
+	exit ;;
+    i*86:OS/2:*:*)
+	# If we were able to find `uname', then EMX Unix compatibility
+	# is probably installed.
+	echo ${UNAME_MACHINE}-pc-os2-emx
+	exit ;;
+    i*86:XTS-300:*:STOP)
+	echo ${UNAME_MACHINE}-unknown-stop
+	exit ;;
+    i*86:atheos:*:*)
+	echo ${UNAME_MACHINE}-unknown-atheos
+	exit ;;
+    i*86:syllable:*:*)
+	echo ${UNAME_MACHINE}-pc-syllable
+	exit ;;
+    i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)
+	echo i386-unknown-lynxos${UNAME_RELEASE}
+	exit ;;
+    i*86:*DOS:*:*)
+	echo ${UNAME_MACHINE}-pc-msdosdjgpp
+	exit ;;
+    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)
+	UNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\/MP$//'`
+	if grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then
+		echo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}
+	else
+		echo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}
+	fi
+	exit ;;
+    i*86:*:5:[678]*)
+    	# UnixWare 7.x, OpenUNIX and OpenServer 6.
+	case `/bin/uname -X | grep "^Machine"` in
+	    *486*)	     UNAME_MACHINE=i486 ;;
+	    *Pentium)	     UNAME_MACHINE=i586 ;;
+	    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;
+	esac
+	echo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}
+	exit ;;
+    i*86:*:3.2:*)
+	if test -f /usr/options/cb.name; then
+		UNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`
+		echo ${UNAME_MACHINE}-pc-isc$UNAME_REL
+	elif /bin/uname -X 2>/dev/null >/dev/null ; then
+		UNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`
+		(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486
+		(/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \
+			&& UNAME_MACHINE=i586
+		(/bin/uname -X|grep '^Machine.*Pent *II' >/dev/null) \
+			&& UNAME_MACHINE=i686
+		(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \
+			&& UNAME_MACHINE=i686
+		echo ${UNAME_MACHINE}-pc-sco$UNAME_REL
+	else
+		echo ${UNAME_MACHINE}-pc-sysv32
+	fi
+	exit ;;
+    pc:*:*:*)
+	# Left here for compatibility:
+        # uname -m prints for DJGPP always 'pc', but it prints nothing about
+        # the processor, so we play safe by assuming i586.
+	# Note: whatever this is, it MUST be the same as what config.sub
+	# prints for the "djgpp" host, or else GDB configury will decide that
+	# this is a cross-build.
+	echo i586-pc-msdosdjgpp
+        exit ;;
+    Intel:Mach:3*:*)
+	echo i386-pc-mach3
+	exit ;;
+    paragon:*:*:*)
+	echo i860-intel-osf1
+	exit ;;
+    i860:*:4.*:*) # i860-SVR4
+	if grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then
+	  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4
+	else # Add other i860-SVR4 vendors below as they are discovered.
+	  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4
+	fi
+	exit ;;
+    mini*:CTIX:SYS*5:*)
+	# "miniframe"
+	echo m68010-convergent-sysv
+	exit ;;
+    mc68k:UNIX:SYSTEM5:3.51m)
+	echo m68k-convergent-sysv
+	exit ;;
+    M680?0:D-NIX:5.3:*)
+	echo m68k-diab-dnix
+	exit ;;
+    M68*:*:R3V[5678]*:*)
+	test -r /sysV68 && { echo 'm68k-motorola-sysv'; exit; } ;;
+    3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 | S7501*:*:4.0:3.0)
+	OS_REL=''
+	test -r /etc/.relid \
+	&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \([0-9][0-9]\).*/\1/p' < /etc/.relid`
+	/bin/uname -p 2>/dev/null | grep 86 >/dev/null \
+	  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }
+	/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \
+	  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;
+    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)
+        /bin/uname -p 2>/dev/null | grep 86 >/dev/null \
+          && { echo i486-ncr-sysv4; exit; } ;;
+    NCR*:*:4.2:* | MPRAS*:*:4.2:*)
+	OS_REL='.3'
+	test -r /etc/.relid \
+	    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \([0-9][0-9]\).*/\1/p' < /etc/.relid`
+	/bin/uname -p 2>/dev/null | grep 86 >/dev/null \
+	    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }
+	/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \
+	    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }
+	/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \
+	    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;
+    m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)
+	echo m68k-unknown-lynxos${UNAME_RELEASE}
+	exit ;;
+    mc68030:UNIX_System_V:4.*:*)
+	echo m68k-atari-sysv4
+	exit ;;
+    TSUNAMI:LynxOS:2.*:*)
+	echo sparc-unknown-lynxos${UNAME_RELEASE}
+	exit ;;
+    rs6000:LynxOS:2.*:*)
+	echo rs6000-unknown-lynxos${UNAME_RELEASE}
+	exit ;;
+    PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)
+	echo powerpc-unknown-lynxos${UNAME_RELEASE}
+	exit ;;
+    SM[BE]S:UNIX_SV:*:*)
+	echo mips-dde-sysv${UNAME_RELEASE}
+	exit ;;
+    RM*:ReliantUNIX-*:*:*)
+	echo mips-sni-sysv4
+	exit ;;
+    RM*:SINIX-*:*:*)
+	echo mips-sni-sysv4
+	exit ;;
+    *:SINIX-*:*:*)
+	if uname -p 2>/dev/null >/dev/null ; then
+		UNAME_MACHINE=`(uname -p) 2>/dev/null`
+		echo ${UNAME_MACHINE}-sni-sysv4
+	else
+		echo ns32k-sni-sysv
+	fi
+	exit ;;
+    PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort
+                      # says <Richard.M.Bartel@ccMail.Census.GOV>
+        echo i586-unisys-sysv4
+        exit ;;
+    *:UNIX_System_V:4*:FTX*)
+	# From Gerald Hewes <hewes@openmarket.com>.
+	# How about differentiating between stratus architectures? -djm
+	echo hppa1.1-stratus-sysv4
+	exit ;;
+    *:*:*:FTX*)
+	# From seanf@swdc.stratus.com.
+	echo i860-stratus-sysv4
+	exit ;;
+    i*86:VOS:*:*)
+	# From Paul.Green@stratus.com.
+	echo ${UNAME_MACHINE}-stratus-vos
+	exit ;;
+    *:VOS:*:*)
+	# From Paul.Green@stratus.com.
+	echo hppa1.1-stratus-vos
+	exit ;;
+    mc68*:A/UX:*:*)
+	echo m68k-apple-aux${UNAME_RELEASE}
+	exit ;;
+    news*:NEWS-OS:6*:*)
+	echo mips-sony-newsos6
+	exit ;;
+    R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)
+	if [ -d /usr/nec ]; then
+	        echo mips-nec-sysv${UNAME_RELEASE}
+	else
+	        echo mips-unknown-sysv${UNAME_RELEASE}
+	fi
+        exit ;;
+    BeBox:BeOS:*:*)	# BeOS running on hardware made by Be, PPC only.
+	echo powerpc-be-beos
+	exit ;;
+    BeMac:BeOS:*:*)	# BeOS running on Mac or Mac clone, PPC only.
+	echo powerpc-apple-beos
+	exit ;;
+    BePC:BeOS:*:*)	# BeOS running on Intel PC compatible.
+	echo i586-pc-beos
+	exit ;;
+    BePC:Haiku:*:*)	# Haiku running on Intel PC compatible.
+	echo i586-pc-haiku
+	exit ;;
+    SX-4:SUPER-UX:*:*)
+	echo sx4-nec-superux${UNAME_RELEASE}
+	exit ;;
+    SX-5:SUPER-UX:*:*)
+	echo sx5-nec-superux${UNAME_RELEASE}
+	exit ;;
+    SX-6:SUPER-UX:*:*)
+	echo sx6-nec-superux${UNAME_RELEASE}
+	exit ;;
+    SX-7:SUPER-UX:*:*)
+	echo sx7-nec-superux${UNAME_RELEASE}
+	exit ;;
+    SX-8:SUPER-UX:*:*)
+	echo sx8-nec-superux${UNAME_RELEASE}
+	exit ;;
+    SX-8R:SUPER-UX:*:*)
+	echo sx8r-nec-superux${UNAME_RELEASE}
+	exit ;;
+    Power*:Rhapsody:*:*)
+	echo powerpc-apple-rhapsody${UNAME_RELEASE}
+	exit ;;
+    *:Rhapsody:*:*)
+	echo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}
+	exit ;;
+    *:Darwin:*:*)
+	UNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown
+	case $UNAME_PROCESSOR in
+	    i386)
+		eval $set_cc_for_build
+		if [ "$CC_FOR_BUILD" != 'no_compiler_found' ]; then
+		  if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \
+		      (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \
+		      grep IS_64BIT_ARCH >/dev/null
+		  then
+		      UNAME_PROCESSOR="x86_64"
+		  fi
+		fi ;;
+	    unknown) UNAME_PROCESSOR=powerpc ;;
+	esac
+	echo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}
+	exit ;;
+    *:procnto*:*:* | *:QNX:[0123456789]*:*)
+	UNAME_PROCESSOR=`uname -p`
+	if test "$UNAME_PROCESSOR" = "x86"; then
+		UNAME_PROCESSOR=i386
+		UNAME_MACHINE=pc
+	fi
+	echo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}
+	exit ;;
+    *:QNX:*:4*)
+	echo i386-pc-qnx
+	exit ;;
+    NSE-?:NONSTOP_KERNEL:*:*)
+	echo nse-tandem-nsk${UNAME_RELEASE}
+	exit ;;
+    NSR-?:NONSTOP_KERNEL:*:*)
+	echo nsr-tandem-nsk${UNAME_RELEASE}
+	exit ;;
+    *:NonStop-UX:*:*)
+	echo mips-compaq-nonstopux
+	exit ;;
+    BS2000:POSIX*:*:*)
+	echo bs2000-siemens-sysv
+	exit ;;
+    DS/*:UNIX_System_V:*:*)
+	echo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}
+	exit ;;
+    *:Plan9:*:*)
+	# "uname -m" is not consistent, so use $cputype instead. 386
+	# is converted to i386 for consistency with other x86
+	# operating systems.
+	if test "$cputype" = "386"; then
+	    UNAME_MACHINE=i386
+	else
+	    UNAME_MACHINE="$cputype"
+	fi
+	echo ${UNAME_MACHINE}-unknown-plan9
+	exit ;;
+    *:TOPS-10:*:*)
+	echo pdp10-unknown-tops10
+	exit ;;
+    *:TENEX:*:*)
+	echo pdp10-unknown-tenex
+	exit ;;
+    KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)
+	echo pdp10-dec-tops20
+	exit ;;
+    XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)
+	echo pdp10-xkl-tops20
+	exit ;;
+    *:TOPS-20:*:*)
+	echo pdp10-unknown-tops20
+	exit ;;
+    *:ITS:*:*)
+	echo pdp10-unknown-its
+	exit ;;
+    SEI:*:*:SEIUX)
+        echo mips-sei-seiux${UNAME_RELEASE}
+	exit ;;
+    *:DragonFly:*:*)
+	echo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`
+	exit ;;
+    *:*VMS:*:*)
+    	UNAME_MACHINE=`(uname -p) 2>/dev/null`
+	case "${UNAME_MACHINE}" in
+	    A*) echo alpha-dec-vms ; exit ;;
+	    I*) echo ia64-dec-vms ; exit ;;
+	    V*) echo vax-dec-vms ; exit ;;
+	esac ;;
+    *:XENIX:*:SysV)
+	echo i386-pc-xenix
+	exit ;;
+    i*86:skyos:*:*)
+	echo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'
+	exit ;;
+    i*86:rdos:*:*)
+	echo ${UNAME_MACHINE}-pc-rdos
+	exit ;;
+    i*86:AROS:*:*)
+	echo ${UNAME_MACHINE}-pc-aros
+	exit ;;
+esac
+
+#echo '(No uname command or uname output not recognized.)' 1>&2
+#echo "${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}" 1>&2
+
+eval $set_cc_for_build
+cat >$dummy.c <<EOF
+#ifdef _SEQUENT_
+# include <sys/types.h>
+# include <sys/utsname.h>
+#endif
+main ()
+{
+#if defined (sony)
+#if defined (MIPSEB)
+  /* BFD wants "bsd" instead of "newsos".  Perhaps BFD should be changed,
+     I don't know....  */
+  printf ("mips-sony-bsd\n"); exit (0);
+#else
+#include <sys/param.h>
+  printf ("m68k-sony-newsos%s\n",
+#ifdef NEWSOS4
+          "4"
+#else
+	  ""
+#endif
+         ); exit (0);
+#endif
+#endif
+
+#if defined (__arm) && defined (__acorn) && defined (__unix)
+  printf ("arm-acorn-riscix\n"); exit (0);
+#endif
+
+#if defined (hp300) && !defined (hpux)
+  printf ("m68k-hp-bsd\n"); exit (0);
+#endif
+
+#if defined (NeXT)
+#if !defined (__ARCHITECTURE__)
+#define __ARCHITECTURE__ "m68k"
+#endif
+  int version;
+  version=`(hostinfo | sed -n 's/.*NeXT Mach \([0-9]*\).*/\1/p') 2>/dev/null`;
+  if (version < 4)
+    printf ("%s-next-nextstep%d\n", __ARCHITECTURE__, version);
+  else
+    printf ("%s-next-openstep%d\n", __ARCHITECTURE__, version);
+  exit (0);
+#endif
+
+#if defined (MULTIMAX) || defined (n16)
+#if defined (UMAXV)
+  printf ("ns32k-encore-sysv\n"); exit (0);
+#else
+#if defined (CMU)
+  printf ("ns32k-encore-mach\n"); exit (0);
+#else
+  printf ("ns32k-encore-bsd\n"); exit (0);
+#endif
+#endif
+#endif
+
+#if defined (__386BSD__)
+  printf ("i386-pc-bsd\n"); exit (0);
+#endif
+
+#if defined (sequent)
+#if defined (i386)
+  printf ("i386-sequent-dynix\n"); exit (0);
+#endif
+#if defined (ns32000)
+  printf ("ns32k-sequent-dynix\n"); exit (0);
+#endif
+#endif
+
+#if defined (_SEQUENT_)
+    struct utsname un;
+
+    uname(&un);
+
+    if (strncmp(un.version, "V2", 2) == 0) {
+	printf ("i386-sequent-ptx2\n"); exit (0);
+    }
+    if (strncmp(un.version, "V1", 2) == 0) { /* XXX is V1 correct? */
+	printf ("i386-sequent-ptx1\n"); exit (0);
+    }
+    printf ("i386-sequent-ptx\n"); exit (0);
+
+#endif
+
+#if defined (vax)
+# if !defined (ultrix)
+#  include <sys/param.h>
+#  if defined (BSD)
+#   if BSD == 43
+      printf ("vax-dec-bsd4.3\n"); exit (0);
+#   else
+#    if BSD == 199006
+      printf ("vax-dec-bsd4.3reno\n"); exit (0);
+#    else
+      printf ("vax-dec-bsd\n"); exit (0);
+#    endif
+#   endif
+#  else
+    printf ("vax-dec-bsd\n"); exit (0);
+#  endif
+# else
+    printf ("vax-dec-ultrix\n"); exit (0);
+# endif
+#endif
+
+#if defined (alliant) && defined (i860)
+  printf ("i860-alliant-bsd\n"); exit (0);
+#endif
+
+  exit (1);
+}
+EOF
+
+$CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null && SYSTEM_NAME=`$dummy` &&
+	{ echo "$SYSTEM_NAME"; exit; }
+
+# Apollos put the system type in the environment.
+
+test -d /usr/apollo && { echo ${ISP}-apollo-${SYSTYPE}; exit; }
+
+# Convex versions that predate uname can use getsysinfo(1)
+
+if [ -x /usr/convex/getsysinfo ]
+then
+    case `getsysinfo -f cpu_type` in
+    c1*)
+	echo c1-convex-bsd
+	exit ;;
+    c2*)
+	if getsysinfo -f scalar_acc
+	then echo c32-convex-bsd
+	else echo c2-convex-bsd
+	fi
+	exit ;;
+    c34*)
+	echo c34-convex-bsd
+	exit ;;
+    c38*)
+	echo c38-convex-bsd
+	exit ;;
+    c4*)
+	echo c4-convex-bsd
+	exit ;;
+    esac
+fi
+
+cat >&2 <<EOF
+$0: unable to guess system type
+
+This script, last modified $timestamp, has failed to recognize
+the operating system you are using. It is advised that you
+download the most up to date version of the config scripts from
+
+  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD
+and
+  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD
+
+If the version you run ($0) is already up to date, please
+send the following data and any information you think might be
+pertinent to <config-patches@gnu.org> in order to provide the needed
+information to handle your system.
+
+config.guess timestamp = $timestamp
+
+uname -m = `(uname -m) 2>/dev/null || echo unknown`
+uname -r = `(uname -r) 2>/dev/null || echo unknown`
+uname -s = `(uname -s) 2>/dev/null || echo unknown`
+uname -v = `(uname -v) 2>/dev/null || echo unknown`
+
+/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`
+/bin/uname -X     = `(/bin/uname -X) 2>/dev/null`
+
+hostinfo               = `(hostinfo) 2>/dev/null`
+/bin/universe          = `(/bin/universe) 2>/dev/null`
+/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`
+/bin/arch              = `(/bin/arch) 2>/dev/null`
+/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`
+/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`
+
+UNAME_MACHINE = ${UNAME_MACHINE}
+UNAME_RELEASE = ${UNAME_RELEASE}
+UNAME_SYSTEM  = ${UNAME_SYSTEM}
+UNAME_VERSION = ${UNAME_VERSION}
+EOF
+
+exit 1
+
+# Local variables:
+# eval: (add-hook 'write-file-hooks 'time-stamp)
+# time-stamp-start: "timestamp='"
+# time-stamp-format: "%:y-%02m-%02d"
+# time-stamp-end: "'"
+# End:
diff --git a/build-aux/config.sub b/build-aux/config.sub
new file mode 100755
index 0000000..c2d1257
--- /dev/null
+++ b/build-aux/config.sub
@@ -0,0 +1,1714 @@
+#! /bin/sh
+# Configuration validation subroutine script.
+#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
+#   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
+#   Free Software Foundation, Inc.
+
+timestamp='2010-01-22'
+
+# This file is (in principle) common to ALL GNU software.
+# The presence of a machine in this file suggests that SOME GNU software
+# can handle that machine.  It does not imply ALL GNU software can.
+#
+# This file is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception to the GNU General Public License, if you
+# distribute this file as part of a program that contains a
+# configuration script generated by Autoconf, you may include it under
+# the same distribution terms that you use for the rest of that program.
+
+
+# Please send patches to <config-patches@gnu.org>.  Submit a context
+# diff and a properly formatted GNU ChangeLog entry.
+#
+# Configuration subroutine to validate and canonicalize a configuration type.
+# Supply the specified configuration type as an argument.
+# If it is invalid, we print an error message on stderr and exit with code 1.
+# Otherwise, we print the canonical config type on stdout and succeed.
+
+# You can get the latest version of this script from:
+# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD
+
+# This file is supposed to be the same for all GNU packages
+# and recognize all the CPU types, system types and aliases
+# that are meaningful with *any* GNU software.
+# Each package is responsible for reporting which valid configurations
+# it does not support.  The user should be able to distinguish
+# a failure to support a valid configuration from a meaningless
+# configuration.
+
+# The goal of this file is to map all the various variations of a given
+# machine specification into a single specification in the form:
+#	CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM
+# or in some cases, the newer four-part form:
+#	CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM
+# It is wrong to echo any other type of specification.
+
+me=`echo "$0" | sed -e 's,.*/,,'`
+
+usage="\
+Usage: $0 [OPTION] CPU-MFR-OPSYS
+       $0 [OPTION] ALIAS
+
+Canonicalize a configuration name.
+
+Operation modes:
+  -h, --help         print this help, then exit
+  -t, --time-stamp   print date of last modification, then exit
+  -v, --version      print version number, then exit
+
+Report bugs and patches to <config-patches@gnu.org>."
+
+version="\
+GNU config.sub ($timestamp)
+
+Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
+2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free
+Software Foundation, Inc.
+
+This is free software; see the source for copying conditions.  There is NO
+warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
+
+help="
+Try \`$me --help' for more information."
+
+# Parse command line
+while test $# -gt 0 ; do
+  case $1 in
+    --time-stamp | --time* | -t )
+       echo "$timestamp" ; exit ;;
+    --version | -v )
+       echo "$version" ; exit ;;
+    --help | --h* | -h )
+       echo "$usage"; exit ;;
+    -- )     # Stop option processing
+       shift; break ;;
+    - )	# Use stdin as input.
+       break ;;
+    -* )
+       echo "$me: invalid option $1$help"
+       exit 1 ;;
+
+    *local*)
+       # First pass through any local machine types.
+       echo $1
+       exit ;;
+
+    * )
+       break ;;
+  esac
+done
+
+case $# in
+ 0) echo "$me: missing argument$help" >&2
+    exit 1;;
+ 1) ;;
+ *) echo "$me: too many arguments$help" >&2
+    exit 1;;
+esac
+
+# Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).
+# Here we must recognize all the valid KERNEL-OS combinations.
+maybe_os=`echo $1 | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\2/'`
+case $maybe_os in
+  nto-qnx* | linux-gnu* | linux-dietlibc | linux-newlib* | linux-uclibc* | \
+  uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* | \
+  kopensolaris*-gnu* | \
+  storm-chaos* | os2-emx* | rtmk-nova*)
+    os=-$maybe_os
+    basic_machine=`echo $1 | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\1/'`
+    ;;
+  *)
+    basic_machine=`echo $1 | sed 's/-[^-]*$//'`
+    if [ $basic_machine != $1 ]
+    then os=`echo $1 | sed 's/.*-/-/'`
+    else os=; fi
+    ;;
+esac
+
+### Let's recognize common machines as not being operating systems so
+### that things like config.sub decstation-3100 work.  We also
+### recognize some manufacturers as not being operating systems, so we
+### can provide default operating systems below.
+case $os in
+	-sun*os*)
+		# Prevent following clause from handling this invalid input.
+		;;
+	-dec* | -mips* | -sequent* | -encore* | -pc532* | -sgi* | -sony* | \
+	-att* | -7300* | -3300* | -delta* | -motorola* | -sun[234]* | \
+	-unicom* | -ibm* | -next | -hp | -isi* | -apollo | -altos* | \
+	-convergent* | -ncr* | -news | -32* | -3600* | -3100* | -hitachi* |\
+	-c[123]* | -convex* | -sun | -crds | -omron* | -dg | -ultra | -tti* | \
+	-harris | -dolphin | -highlevel | -gould | -cbm | -ns | -masscomp | \
+	-apple | -axis | -knuth | -cray | -microblaze)
+		os=
+		basic_machine=$1
+		;;
+        -bluegene*)
+	        os=-cnk
+		;;
+	-sim | -cisco | -oki | -wec | -winbond)
+		os=
+		basic_machine=$1
+		;;
+	-scout)
+		;;
+	-wrs)
+		os=-vxworks
+		basic_machine=$1
+		;;
+	-chorusos*)
+		os=-chorusos
+		basic_machine=$1
+		;;
+ 	-chorusrdb)
+ 		os=-chorusrdb
+		basic_machine=$1
+ 		;;
+	-hiux*)
+		os=-hiuxwe2
+		;;
+	-sco6)
+		os=-sco5v6
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-sco5)
+		os=-sco3.2v5
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-sco4)
+		os=-sco3.2v4
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-sco3.2.[4-9]*)
+		os=`echo $os | sed -e 's/sco3.2./sco3.2v/'`
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-sco3.2v[4-9]*)
+		# Don't forget version if it is 3.2v4 or newer.
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-sco5v6*)
+		# Don't forget version if it is 3.2v4 or newer.
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-sco*)
+		os=-sco3.2v2
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-udk*)
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-isc)
+		os=-isc2.2
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-clix*)
+		basic_machine=clipper-intergraph
+		;;
+	-isc*)
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`
+		;;
+	-lynx*)
+		os=-lynxos
+		;;
+	-ptx*)
+		basic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`
+		;;
+	-windowsnt*)
+		os=`echo $os | sed -e 's/windowsnt/winnt/'`
+		;;
+	-psos*)
+		os=-psos
+		;;
+	-mint | -mint[0-9]*)
+		basic_machine=m68k-atari
+		os=-mint
+		;;
+esac
+
+# Decode aliases for certain CPU-COMPANY combinations.
+case $basic_machine in
+	# Recognize the basic CPU types without company name.
+	# Some are omitted here because they have special meanings below.
+	1750a | 580 \
+	| a29k \
+	| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \
+	| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \
+	| am33_2.0 \
+	| arc | arm | arm[bl]e | arme[lb] | armv[2345] | armv[345][lb] | avr | avr32 \
+	| bfin \
+	| c4x | clipper \
+	| d10v | d30v | dlx | dsp16xx \
+	| fido | fr30 | frv \
+	| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \
+	| i370 | i860 | i960 | ia64 \
+	| ip2k | iq2000 \
+	| lm32 \
+	| m32c | m32r | m32rle | m68000 | m68k | m88k \
+	| maxq | mb | microblaze | mcore | mep | metag \
+	| mips | mipsbe | mipseb | mipsel | mipsle \
+	| mips16 \
+	| mips64 | mips64el \
+	| mips64octeon | mips64octeonel \
+	| mips64orion | mips64orionel \
+	| mips64r5900 | mips64r5900el \
+	| mips64vr | mips64vrel \
+	| mips64vr4100 | mips64vr4100el \
+	| mips64vr4300 | mips64vr4300el \
+	| mips64vr5000 | mips64vr5000el \
+	| mips64vr5900 | mips64vr5900el \
+	| mipsisa32 | mipsisa32el \
+	| mipsisa32r2 | mipsisa32r2el \
+	| mipsisa64 | mipsisa64el \
+	| mipsisa64r2 | mipsisa64r2el \
+	| mipsisa64sb1 | mipsisa64sb1el \
+	| mipsisa64sr71k | mipsisa64sr71kel \
+	| mipstx39 | mipstx39el \
+	| mn10200 | mn10300 \
+	| moxie \
+	| mt \
+	| msp430 \
+	| nios | nios2 \
+	| ns16k | ns32k \
+	| or32 \
+	| pdp10 | pdp11 | pj | pjl \
+	| powerpc | powerpc64 | powerpc64le | powerpcle | ppcbe \
+	| pyramid \
+	| rx \
+	| score \
+	| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \
+	| sh64 | sh64le \
+	| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet | sparclite \
+	| sparcv8 | sparcv9 | sparcv9b | sparcv9v \
+	| spu | strongarm \
+	| tahoe | thumb | tic4x | tic80 | tron \
+	| ubicom32 \
+	| v850 | v850e \
+	| we32k \
+	| x86 | xc16x | xscale | xscalee[bl] | xstormy16 | xtensa \
+	| z8k | z80)
+		basic_machine=$basic_machine-unknown
+		;;
+	m6811 | m68hc11 | m6812 | m68hc12 | picochip)
+		# Motorola 68HC11/12.
+		basic_machine=$basic_machine-unknown
+		os=-none
+		;;
+	m88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)
+		;;
+	ms1)
+		basic_machine=mt-unknown
+		;;
+
+	# We use `pc' rather than `unknown'
+	# because (1) that's what they normally are, and
+	# (2) the word "unknown" tends to confuse beginning users.
+	i*86 | x86_64)
+	  basic_machine=$basic_machine-pc
+	  ;;
+	# Object if more than one company name word.
+	*-*-*)
+		echo Invalid configuration \`$1\': machine \`$basic_machine\' not recognized 1>&2
+		exit 1
+		;;
+	# Recognize the basic CPU types with company name.
+	580-* \
+	| a29k-* \
+	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
+	| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \
+	| avr-* | avr32-* \
+	| bfin-* | bs2000-* \
+	| c[123]* | c30-* | [cjt]90-* | c4x-* | c54x-* | c55x-* | c6x-* \
+	| clipper-* | craynv-* | cydra-* \
+	| d10v-* | d30v-* | dlx-* \
+	| elxsi-* \
+	| f30[01]-* | f700-* | fido-* | fr30-* | frv-* | fx80-* \
+	| h8300-* | h8500-* \
+	| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \
+	| i*86-* | i860-* | i960-* | ia64-* \
+	| ip2k-* | iq2000-* \
+	| lm32-* \
+	| m32c-* | m32r-* | m32rle-* \
+	| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \
+	| m88110-* | m88k-* | maxq-* | mcore-* | metag-* | microblaze-* \
+	| mips-* | mipsbe-* | mipseb-* | mipsel-* | mipsle-* \
+	| mips16-* \
+	| mips64-* | mips64el-* \
+	| mips64octeon-* | mips64octeonel-* \
+	| mips64orion-* | mips64orionel-* \
+	| mips64r5900-* | mips64r5900el-* \
+	| mips64vr-* | mips64vrel-* \
+	| mips64vr4100-* | mips64vr4100el-* \
+	| mips64vr4300-* | mips64vr4300el-* \
+	| mips64vr5000-* | mips64vr5000el-* \
+	| mips64vr5900-* | mips64vr5900el-* \
+	| mipsisa32-* | mipsisa32el-* \
+	| mipsisa32r2-* | mipsisa32r2el-* \
+	| mipsisa64-* | mipsisa64el-* \
+	| mipsisa64r2-* | mipsisa64r2el-* \
+	| mipsisa64sb1-* | mipsisa64sb1el-* \
+	| mipsisa64sr71k-* | mipsisa64sr71kel-* \
+	| mipstx39-* | mipstx39el-* \
+	| mmix-* \
+	| mt-* \
+	| msp430-* \
+	| nios-* | nios2-* \
+	| none-* | np1-* | ns16k-* | ns32k-* \
+	| orion-* \
+	| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \
+	| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* | ppcbe-* \
+	| pyramid-* \
+	| romp-* | rs6000-* | rx-* \
+	| sh-* | sh[1234]-* | sh[24]a-* | sh[24]aeb-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \
+	| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \
+	| sparc-* | sparc64-* | sparc64b-* | sparc64v-* | sparc86x-* | sparclet-* \
+	| sparclite-* \
+	| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | strongarm-* | sv1-* | sx?-* \
+	| tahoe-* | thumb-* \
+	| tic30-* | tic4x-* | tic54x-* | tic55x-* | tic6x-* | tic80-* \
+	| tile-* | tilegx-* \
+	| tron-* \
+	| ubicom32-* \
+	| v850-* | v850e-* | vax-* \
+	| we32k-* \
+	| x86-* | x86_64-* | xc16x-* | xps100-* | xscale-* | xscalee[bl]-* \
+	| xstormy16-* | xtensa*-* \
+	| ymp-* \
+	| z8k-* | z80-*)
+		;;
+	# Recognize the basic CPU types without company name, with glob match.
+	xtensa*)
+		basic_machine=$basic_machine-unknown
+		;;
+	# Recognize the various machine names and aliases which stand
+	# for a CPU type and a company and sometimes even an OS.
+	386bsd)
+		basic_machine=i386-unknown
+		os=-bsd
+		;;
+	3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)
+		basic_machine=m68000-att
+		;;
+	3b*)
+		basic_machine=we32k-att
+		;;
+	a29khif)
+		basic_machine=a29k-amd
+		os=-udi
+		;;
+    	abacus)
+		basic_machine=abacus-unknown
+		;;
+	adobe68k)
+		basic_machine=m68010-adobe
+		os=-scout
+		;;
+	alliant | fx80)
+		basic_machine=fx80-alliant
+		;;
+	altos | altos3068)
+		basic_machine=m68k-altos
+		;;
+	am29k)
+		basic_machine=a29k-none
+		os=-bsd
+		;;
+	amd64)
+		basic_machine=x86_64-pc
+		;;
+	amd64-*)
+		basic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	amdahl)
+		basic_machine=580-amdahl
+		os=-sysv
+		;;
+	amiga | amiga-*)
+		basic_machine=m68k-unknown
+		;;
+	amigaos | amigados)
+		basic_machine=m68k-unknown
+		os=-amigaos
+		;;
+	amigaunix | amix)
+		basic_machine=m68k-unknown
+		os=-sysv4
+		;;
+	apollo68)
+		basic_machine=m68k-apollo
+		os=-sysv
+		;;
+	apollo68bsd)
+		basic_machine=m68k-apollo
+		os=-bsd
+		;;
+	aros)
+		basic_machine=i386-pc
+		os=-aros
+		;;
+	aux)
+		basic_machine=m68k-apple
+		os=-aux
+		;;
+	balance)
+		basic_machine=ns32k-sequent
+		os=-dynix
+		;;
+	blackfin)
+		basic_machine=bfin-unknown
+		os=-linux
+		;;
+	blackfin-*)
+		basic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`
+		os=-linux
+		;;
+	bluegene*)
+		basic_machine=powerpc-ibm
+		os=-cnk
+		;;
+	c90)
+		basic_machine=c90-cray
+		os=-unicos
+		;;
+        cegcc)
+		basic_machine=arm-unknown
+		os=-cegcc
+		;;
+	convex-c1)
+		basic_machine=c1-convex
+		os=-bsd
+		;;
+	convex-c2)
+		basic_machine=c2-convex
+		os=-bsd
+		;;
+	convex-c32)
+		basic_machine=c32-convex
+		os=-bsd
+		;;
+	convex-c34)
+		basic_machine=c34-convex
+		os=-bsd
+		;;
+	convex-c38)
+		basic_machine=c38-convex
+		os=-bsd
+		;;
+	cray | j90)
+		basic_machine=j90-cray
+		os=-unicos
+		;;
+	craynv)
+		basic_machine=craynv-cray
+		os=-unicosmp
+		;;
+	cr16)
+		basic_machine=cr16-unknown
+		os=-elf
+		;;
+	crds | unos)
+		basic_machine=m68k-crds
+		;;
+	crisv32 | crisv32-* | etraxfs*)
+		basic_machine=crisv32-axis
+		;;
+	cris | cris-* | etrax*)
+		basic_machine=cris-axis
+		;;
+	crx)
+		basic_machine=crx-unknown
+		os=-elf
+		;;
+	da30 | da30-*)
+		basic_machine=m68k-da30
+		;;
+	decstation | decstation-3100 | pmax | pmax-* | pmin | dec3100 | decstatn)
+		basic_machine=mips-dec
+		;;
+	decsystem10* | dec10*)
+		basic_machine=pdp10-dec
+		os=-tops10
+		;;
+	decsystem20* | dec20*)
+		basic_machine=pdp10-dec
+		os=-tops20
+		;;
+	delta | 3300 | motorola-3300 | motorola-delta \
+	      | 3300-motorola | delta-motorola)
+		basic_machine=m68k-motorola
+		;;
+	delta88)
+		basic_machine=m88k-motorola
+		os=-sysv3
+		;;
+	dicos)
+		basic_machine=i686-pc
+		os=-dicos
+		;;
+	djgpp)
+		basic_machine=i586-pc
+		os=-msdosdjgpp
+		;;
+	dpx20 | dpx20-*)
+		basic_machine=rs6000-bull
+		os=-bosx
+		;;
+	dpx2* | dpx2*-bull)
+		basic_machine=m68k-bull
+		os=-sysv3
+		;;
+	ebmon29k)
+		basic_machine=a29k-amd
+		os=-ebmon
+		;;
+	elxsi)
+		basic_machine=elxsi-elxsi
+		os=-bsd
+		;;
+	encore | umax | mmax)
+		basic_machine=ns32k-encore
+		;;
+	es1800 | OSE68k | ose68k | ose | OSE)
+		basic_machine=m68k-ericsson
+		os=-ose
+		;;
+	fx2800)
+		basic_machine=i860-alliant
+		;;
+	genix)
+		basic_machine=ns32k-ns
+		;;
+	gmicro)
+		basic_machine=tron-gmicro
+		os=-sysv
+		;;
+	go32)
+		basic_machine=i386-pc
+		os=-go32
+		;;
+	h3050r* | hiux*)
+		basic_machine=hppa1.1-hitachi
+		os=-hiuxwe2
+		;;
+	h8300hms)
+		basic_machine=h8300-hitachi
+		os=-hms
+		;;
+	h8300xray)
+		basic_machine=h8300-hitachi
+		os=-xray
+		;;
+	h8500hms)
+		basic_machine=h8500-hitachi
+		os=-hms
+		;;
+	harris)
+		basic_machine=m88k-harris
+		os=-sysv3
+		;;
+	hp300-*)
+		basic_machine=m68k-hp
+		;;
+	hp300bsd)
+		basic_machine=m68k-hp
+		os=-bsd
+		;;
+	hp300hpux)
+		basic_machine=m68k-hp
+		os=-hpux
+		;;
+	hp3k9[0-9][0-9] | hp9[0-9][0-9])
+		basic_machine=hppa1.0-hp
+		;;
+	hp9k2[0-9][0-9] | hp9k31[0-9])
+		basic_machine=m68000-hp
+		;;
+	hp9k3[2-9][0-9])
+		basic_machine=m68k-hp
+		;;
+	hp9k6[0-9][0-9] | hp6[0-9][0-9])
+		basic_machine=hppa1.0-hp
+		;;
+	hp9k7[0-79][0-9] | hp7[0-79][0-9])
+		basic_machine=hppa1.1-hp
+		;;
+	hp9k78[0-9] | hp78[0-9])
+		# FIXME: really hppa2.0-hp
+		basic_machine=hppa1.1-hp
+		;;
+	hp9k8[67]1 | hp8[67]1 | hp9k80[24] | hp80[24] | hp9k8[78]9 | hp8[78]9 | hp9k893 | hp893)
+		# FIXME: really hppa2.0-hp
+		basic_machine=hppa1.1-hp
+		;;
+	hp9k8[0-9][13679] | hp8[0-9][13679])
+		basic_machine=hppa1.1-hp
+		;;
+	hp9k8[0-9][0-9] | hp8[0-9][0-9])
+		basic_machine=hppa1.0-hp
+		;;
+	hppa-next)
+		os=-nextstep3
+		;;
+	hppaosf)
+		basic_machine=hppa1.1-hp
+		os=-osf
+		;;
+	hppro)
+		basic_machine=hppa1.1-hp
+		os=-proelf
+		;;
+	i370-ibm* | ibm*)
+		basic_machine=i370-ibm
+		;;
+# I'm not sure what "Sysv32" means.  Should this be sysv3.2?
+	i*86v32)
+		basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`
+		os=-sysv32
+		;;
+	i*86v4*)
+		basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`
+		os=-sysv4
+		;;
+	i*86v)
+		basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`
+		os=-sysv
+		;;
+	i*86sol2)
+		basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`
+		os=-solaris2
+		;;
+	i386mach)
+		basic_machine=i386-mach
+		os=-mach
+		;;
+	i386-vsta | vsta)
+		basic_machine=i386-unknown
+		os=-vsta
+		;;
+	iris | iris4d)
+		basic_machine=mips-sgi
+		case $os in
+		    -irix*)
+			;;
+		    *)
+			os=-irix4
+			;;
+		esac
+		;;
+	isi68 | isi)
+		basic_machine=m68k-isi
+		os=-sysv
+		;;
+	m68knommu)
+		basic_machine=m68k-unknown
+		os=-linux
+		;;
+	m68knommu-*)
+		basic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`
+		os=-linux
+		;;
+	m88k-omron*)
+		basic_machine=m88k-omron
+		;;
+	magnum | m3230)
+		basic_machine=mips-mips
+		os=-sysv
+		;;
+	merlin)
+		basic_machine=ns32k-utek
+		os=-sysv
+		;;
+        microblaze)
+		basic_machine=microblaze-xilinx
+		;;
+	mingw32)
+		basic_machine=i386-pc
+		os=-mingw32
+		;;
+	mingw32ce)
+		basic_machine=arm-unknown
+		os=-mingw32ce
+		;;
+	miniframe)
+		basic_machine=m68000-convergent
+		;;
+	*mint | -mint[0-9]* | *MiNT | *MiNT[0-9]*)
+		basic_machine=m68k-atari
+		os=-mint
+		;;
+	mips3*-*)
+		basic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`
+		;;
+	mips3*)
+		basic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown
+		;;
+	monitor)
+		basic_machine=m68k-rom68k
+		os=-coff
+		;;
+	morphos)
+		basic_machine=powerpc-unknown
+		os=-morphos
+		;;
+	msdos)
+		basic_machine=i386-pc
+		os=-msdos
+		;;
+	ms1-*)
+		basic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`
+		;;
+	mvs)
+		basic_machine=i370-ibm
+		os=-mvs
+		;;
+	ncr3000)
+		basic_machine=i486-ncr
+		os=-sysv4
+		;;
+	netbsd386)
+		basic_machine=i386-unknown
+		os=-netbsd
+		;;
+	netwinder)
+		basic_machine=armv4l-rebel
+		os=-linux
+		;;
+	news | news700 | news800 | news900)
+		basic_machine=m68k-sony
+		os=-newsos
+		;;
+	news1000)
+		basic_machine=m68030-sony
+		os=-newsos
+		;;
+	news-3600 | risc-news)
+		basic_machine=mips-sony
+		os=-newsos
+		;;
+	necv70)
+		basic_machine=v70-nec
+		os=-sysv
+		;;
+	next | m*-next )
+		basic_machine=m68k-next
+		case $os in
+		    -nextstep* )
+			;;
+		    -ns2*)
+		      os=-nextstep2
+			;;
+		    *)
+		      os=-nextstep3
+			;;
+		esac
+		;;
+	nh3000)
+		basic_machine=m68k-harris
+		os=-cxux
+		;;
+	nh[45]000)
+		basic_machine=m88k-harris
+		os=-cxux
+		;;
+	nindy960)
+		basic_machine=i960-intel
+		os=-nindy
+		;;
+	mon960)
+		basic_machine=i960-intel
+		os=-mon960
+		;;
+	nonstopux)
+		basic_machine=mips-compaq
+		os=-nonstopux
+		;;
+	np1)
+		basic_machine=np1-gould
+		;;
+	nsr-tandem)
+		basic_machine=nsr-tandem
+		;;
+	op50n-* | op60c-*)
+		basic_machine=hppa1.1-oki
+		os=-proelf
+		;;
+	openrisc | openrisc-*)
+		basic_machine=or32-unknown
+		;;
+	os400)
+		basic_machine=powerpc-ibm
+		os=-os400
+		;;
+	OSE68000 | ose68000)
+		basic_machine=m68000-ericsson
+		os=-ose
+		;;
+	os68k)
+		basic_machine=m68k-none
+		os=-os68k
+		;;
+	pa-hitachi)
+		basic_machine=hppa1.1-hitachi
+		os=-hiuxwe2
+		;;
+	paragon)
+		basic_machine=i860-intel
+		os=-osf
+		;;
+	parisc)
+		basic_machine=hppa-unknown
+		os=-linux
+		;;
+	parisc-*)
+		basic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`
+		os=-linux
+		;;
+	pbd)
+		basic_machine=sparc-tti
+		;;
+	pbb)
+		basic_machine=m68k-tti
+		;;
+	pc532 | pc532-*)
+		basic_machine=ns32k-pc532
+		;;
+	pc98)
+		basic_machine=i386-pc
+		;;
+	pc98-*)
+		basic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	pentium | p5 | k5 | k6 | nexgen | viac3)
+		basic_machine=i586-pc
+		;;
+	pentiumpro | p6 | 6x86 | athlon | athlon_*)
+		basic_machine=i686-pc
+		;;
+	pentiumii | pentium2 | pentiumiii | pentium3)
+		basic_machine=i686-pc
+		;;
+	pentium4)
+		basic_machine=i786-pc
+		;;
+	pentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)
+		basic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	pentiumpro-* | p6-* | 6x86-* | athlon-*)
+		basic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	pentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)
+		basic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	pentium4-*)
+		basic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	pn)
+		basic_machine=pn-gould
+		;;
+	power)	basic_machine=power-ibm
+		;;
+	ppc)	basic_machine=powerpc-unknown
+		;;
+	ppc-*)	basic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	ppcle | powerpclittle | ppc-le | powerpc-little)
+		basic_machine=powerpcle-unknown
+		;;
+	ppcle-* | powerpclittle-*)
+		basic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	ppc64)	basic_machine=powerpc64-unknown
+		;;
+	ppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	ppc64le | powerpc64little | ppc64-le | powerpc64-little)
+		basic_machine=powerpc64le-unknown
+		;;
+	ppc64le-* | powerpc64little-*)
+		basic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`
+		;;
+	ps2)
+		basic_machine=i386-ibm
+		;;
+	pw32)
+		basic_machine=i586-unknown
+		os=-pw32
+		;;
+	rdos)
+		basic_machine=i386-pc
+		os=-rdos
+		;;
+	rom68k)
+		basic_machine=m68k-rom68k
+		os=-coff
+		;;
+	rm[46]00)
+		basic_machine=mips-siemens
+		;;
+	rtpc | rtpc-*)
+		basic_machine=romp-ibm
+		;;
+	s390 | s390-*)
+		basic_machine=s390-ibm
+		;;
+	s390x | s390x-*)
+		basic_machine=s390x-ibm
+		;;
+	sa29200)
+		basic_machine=a29k-amd
+		os=-udi
+		;;
+	sb1)
+		basic_machine=mipsisa64sb1-unknown
+		;;
+	sb1el)
+		basic_machine=mipsisa64sb1el-unknown
+		;;
+	sde)
+		basic_machine=mipsisa32-sde
+		os=-elf
+		;;
+	sei)
+		basic_machine=mips-sei
+		os=-seiux
+		;;
+	sequent)
+		basic_machine=i386-sequent
+		;;
+	sh)
+		basic_machine=sh-hitachi
+		os=-hms
+		;;
+	sh5el)
+		basic_machine=sh5le-unknown
+		;;
+	sh64)
+		basic_machine=sh64-unknown
+		;;
+	sparclite-wrs | simso-wrs)
+		basic_machine=sparclite-wrs
+		os=-vxworks
+		;;
+	sps7)
+		basic_machine=m68k-bull
+		os=-sysv2
+		;;
+	spur)
+		basic_machine=spur-unknown
+		;;
+	st2000)
+		basic_machine=m68k-tandem
+		;;
+	stratus)
+		basic_machine=i860-stratus
+		os=-sysv4
+		;;
+	sun2)
+		basic_machine=m68000-sun
+		;;
+	sun2os3)
+		basic_machine=m68000-sun
+		os=-sunos3
+		;;
+	sun2os4)
+		basic_machine=m68000-sun
+		os=-sunos4
+		;;
+	sun3os3)
+		basic_machine=m68k-sun
+		os=-sunos3
+		;;
+	sun3os4)
+		basic_machine=m68k-sun
+		os=-sunos4
+		;;
+	sun4os3)
+		basic_machine=sparc-sun
+		os=-sunos3
+		;;
+	sun4os4)
+		basic_machine=sparc-sun
+		os=-sunos4
+		;;
+	sun4sol2)
+		basic_machine=sparc-sun
+		os=-solaris2
+		;;
+	sun3 | sun3-*)
+		basic_machine=m68k-sun
+		;;
+	sun4)
+		basic_machine=sparc-sun
+		;;
+	sun386 | sun386i | roadrunner)
+		basic_machine=i386-sun
+		;;
+	sv1)
+		basic_machine=sv1-cray
+		os=-unicos
+		;;
+	symmetry)
+		basic_machine=i386-sequent
+		os=-dynix
+		;;
+	t3e)
+		basic_machine=alphaev5-cray
+		os=-unicos
+		;;
+	t90)
+		basic_machine=t90-cray
+		os=-unicos
+		;;
+	tic54x | c54x*)
+		basic_machine=tic54x-unknown
+		os=-coff
+		;;
+	tic55x | c55x*)
+		basic_machine=tic55x-unknown
+		os=-coff
+		;;
+	tic6x | c6x*)
+		basic_machine=tic6x-unknown
+		os=-coff
+		;;
+        # This must be matched before tile*.
+        tilegx*)
+		basic_machine=tilegx-unknown
+		os=-linux-gnu
+		;;
+	tile*)
+		basic_machine=tile-unknown
+		os=-linux-gnu
+		;;
+	tx39)
+		basic_machine=mipstx39-unknown
+		;;
+	tx39el)
+		basic_machine=mipstx39el-unknown
+		;;
+	toad1)
+		basic_machine=pdp10-xkl
+		os=-tops20
+		;;
+	tower | tower-32)
+		basic_machine=m68k-ncr
+		;;
+	tpf)
+		basic_machine=s390x-ibm
+		os=-tpf
+		;;
+	udi29k)
+		basic_machine=a29k-amd
+		os=-udi
+		;;
+	ultra3)
+		basic_machine=a29k-nyu
+		os=-sym1
+		;;
+	v810 | necv810)
+		basic_machine=v810-nec
+		os=-none
+		;;
+	vaxv)
+		basic_machine=vax-dec
+		os=-sysv
+		;;
+	vms)
+		basic_machine=vax-dec
+		os=-vms
+		;;
+	vpp*|vx|vx-*)
+		basic_machine=f301-fujitsu
+		;;
+	vxworks960)
+		basic_machine=i960-wrs
+		os=-vxworks
+		;;
+	vxworks68)
+		basic_machine=m68k-wrs
+		os=-vxworks
+		;;
+	vxworks29k)
+		basic_machine=a29k-wrs
+		os=-vxworks
+		;;
+	w65*)
+		basic_machine=w65-wdc
+		os=-none
+		;;
+	w89k-*)
+		basic_machine=hppa1.1-winbond
+		os=-proelf
+		;;
+	xbox)
+		basic_machine=i686-pc
+		os=-mingw32
+		;;
+	xps | xps100)
+		basic_machine=xps100-honeywell
+		;;
+	ymp)
+		basic_machine=ymp-cray
+		os=-unicos
+		;;
+	z8k-*-coff)
+		basic_machine=z8k-unknown
+		os=-sim
+		;;
+	z80-*-coff)
+		basic_machine=z80-unknown
+		os=-sim
+		;;
+	none)
+		basic_machine=none-none
+		os=-none
+		;;
+
+# Here we handle the default manufacturer of certain CPU types.  It is in
+# some cases the only manufacturer, in others, it is the most popular.
+	w89k)
+		basic_machine=hppa1.1-winbond
+		;;
+	op50n)
+		basic_machine=hppa1.1-oki
+		;;
+	op60c)
+		basic_machine=hppa1.1-oki
+		;;
+	romp)
+		basic_machine=romp-ibm
+		;;
+	mmix)
+		basic_machine=mmix-knuth
+		;;
+	rs6000)
+		basic_machine=rs6000-ibm
+		;;
+	vax)
+		basic_machine=vax-dec
+		;;
+	pdp10)
+		# there are many clones, so DEC is not a safe bet
+		basic_machine=pdp10-unknown
+		;;
+	pdp11)
+		basic_machine=pdp11-dec
+		;;
+	we32k)
+		basic_machine=we32k-att
+		;;
+	sh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)
+		basic_machine=sh-unknown
+		;;
+	sparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)
+		basic_machine=sparc-sun
+		;;
+	cydra)
+		basic_machine=cydra-cydrome
+		;;
+	orion)
+		basic_machine=orion-highlevel
+		;;
+	orion105)
+		basic_machine=clipper-highlevel
+		;;
+	mac | mpw | mac-mpw)
+		basic_machine=m68k-apple
+		;;
+	pmac | pmac-mpw)
+		basic_machine=powerpc-apple
+		;;
+	*-unknown)
+		# Make sure to match an already-canonicalized machine name.
+		;;
+	*)
+		echo Invalid configuration \`$1\': machine \`$basic_machine\' not recognized 1>&2
+		exit 1
+		;;
+esac
+
+# Here we canonicalize certain aliases for manufacturers.
+case $basic_machine in
+	*-digital*)
+		basic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`
+		;;
+	*-commodore*)
+		basic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`
+		;;
+	*)
+		;;
+esac
+
+# Decode manufacturer-specific aliases for certain operating systems.
+
+if [ x"$os" != x"" ]
+then
+case $os in
+        # First match some system type aliases
+        # that might get confused with valid system types.
+	# -solaris* is a basic system type, with this one exception.
+        -auroraux)
+	        os=-auroraux
+		;;
+	-solaris1 | -solaris1.*)
+		os=`echo $os | sed -e 's|solaris1|sunos4|'`
+		;;
+	-solaris)
+		os=-solaris2
+		;;
+	-svr4*)
+		os=-sysv4
+		;;
+	-unixware*)
+		os=-sysv4.2uw
+		;;
+	-gnu/linux*)
+		os=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`
+		;;
+	# First accept the basic system types.
+	# The portable systems comes first.
+	# Each alternative MUST END IN A *, to match a version number.
+	# -sysv* is not here because it comes later, after sysvr4.
+	-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \
+	      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\
+	      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -auroraux* | -solaris* \
+	      | -sym* | -kopensolaris* \
+	      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \
+	      | -aos* | -aros* \
+	      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \
+	      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \
+	      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \
+	      | -openbsd* | -solidbsd* \
+	      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \
+	      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \
+	      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \
+	      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \
+	      | -chorusos* | -chorusrdb* | -cegcc* \
+	      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \
+	      | -mingw32* | -linux-gnu* | -linux-newlib* | -linux-uclibc* \
+	      | -uxpv* | -beos* | -mpeix* | -udk* \
+	      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \
+	      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \
+	      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \
+	      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \
+	      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \
+	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \
+	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es*)
+	# Remember, each alternative MUST END IN *, to match a version number.
+		;;
+	-qnx*)
+		case $basic_machine in
+		    x86-* | i*86-*)
+			;;
+		    *)
+			os=-nto$os
+			;;
+		esac
+		;;
+	-nto-qnx*)
+		;;
+	-nto*)
+		os=`echo $os | sed -e 's|nto|nto-qnx|'`
+		;;
+	-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \
+	      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \
+	      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)
+		;;
+	-mac*)
+		os=`echo $os | sed -e 's|mac|macos|'`
+		;;
+	-linux-dietlibc)
+		os=-linux-dietlibc
+		;;
+	-linux*)
+		os=`echo $os | sed -e 's|linux|linux-gnu|'`
+		;;
+	-sunos5*)
+		os=`echo $os | sed -e 's|sunos5|solaris2|'`
+		;;
+	-sunos6*)
+		os=`echo $os | sed -e 's|sunos6|solaris3|'`
+		;;
+	-opened*)
+		os=-openedition
+		;;
+        -os400*)
+		os=-os400
+		;;
+	-wince*)
+		os=-wince
+		;;
+	-osfrose*)
+		os=-osfrose
+		;;
+	-osf*)
+		os=-osf
+		;;
+	-utek*)
+		os=-bsd
+		;;
+	-dynix*)
+		os=-bsd
+		;;
+	-acis*)
+		os=-aos
+		;;
+	-atheos*)
+		os=-atheos
+		;;
+	-syllable*)
+		os=-syllable
+		;;
+	-386bsd)
+		os=-bsd
+		;;
+	-ctix* | -uts*)
+		os=-sysv
+		;;
+	-nova*)
+		os=-rtmk-nova
+		;;
+	-ns2 )
+		os=-nextstep2
+		;;
+	-nsk*)
+		os=-nsk
+		;;
+	# Preserve the version number of sinix5.
+	-sinix5.*)
+		os=`echo $os | sed -e 's|sinix|sysv|'`
+		;;
+	-sinix*)
+		os=-sysv4
+		;;
+        -tpf*)
+		os=-tpf
+		;;
+	-triton*)
+		os=-sysv3
+		;;
+	-oss*)
+		os=-sysv3
+		;;
+	-svr4)
+		os=-sysv4
+		;;
+	-svr3)
+		os=-sysv3
+		;;
+	-sysvr4)
+		os=-sysv4
+		;;
+	# This must come after -sysvr4.
+	-sysv*)
+		;;
+	-ose*)
+		os=-ose
+		;;
+	-es1800*)
+		os=-ose
+		;;
+	-xenix)
+		os=-xenix
+		;;
+	-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)
+		os=-mint
+		;;
+	-aros*)
+		os=-aros
+		;;
+	-kaos*)
+		os=-kaos
+		;;
+	-zvmoe)
+		os=-zvmoe
+		;;
+	-dicos*)
+		os=-dicos
+		;;
+        -nacl*)
+	        ;;
+	-none)
+		;;
+	*)
+		# Get rid of the `-' at the beginning of $os.
+		os=`echo $os | sed 's/[^-]*-//'`
+		echo Invalid configuration \`$1\': system \`$os\' not recognized 1>&2
+		exit 1
+		;;
+esac
+else
+
+# Here we handle the default operating systems that come with various machines.
+# The value should be what the vendor currently ships out the door with their
+# machine or put another way, the most popular os provided with the machine.
+
+# Note that if you're going to try to match "-MANUFACTURER" here (say,
+# "-sun"), then you have to tell the case statement up towards the top
+# that MANUFACTURER isn't an operating system.  Otherwise, code above
+# will signal an error saying that MANUFACTURER isn't an operating
+# system, and we'll never get to this point.
+
+case $basic_machine in
+        score-*)
+		os=-elf
+		;;
+        spu-*)
+		os=-elf
+		;;
+	*-acorn)
+		os=-riscix1.2
+		;;
+	arm*-rebel)
+		os=-linux
+		;;
+	arm*-semi)
+		os=-aout
+		;;
+        c4x-* | tic4x-*)
+        	os=-coff
+		;;
+	# This must come before the *-dec entry.
+	pdp10-*)
+		os=-tops20
+		;;
+	pdp11-*)
+		os=-none
+		;;
+	*-dec | vax-*)
+		os=-ultrix4.2
+		;;
+	m68*-apollo)
+		os=-domain
+		;;
+	i386-sun)
+		os=-sunos4.0.2
+		;;
+	m68000-sun)
+		os=-sunos3
+		# This also exists in the configure program, but was not the
+		# default.
+		# os=-sunos4
+		;;
+	m68*-cisco)
+		os=-aout
+		;;
+        mep-*)
+		os=-elf
+		;;
+	mips*-cisco)
+		os=-elf
+		;;
+	mips*-*)
+		os=-elf
+		;;
+	or32-*)
+		os=-coff
+		;;
+	*-tti)	# must be before sparc entry or we get the wrong os.
+		os=-sysv3
+		;;
+	sparc-* | *-sun)
+		os=-sunos4.1.1
+		;;
+	*-be)
+		os=-beos
+		;;
+	*-haiku)
+		os=-haiku
+		;;
+	*-ibm)
+		os=-aix
+		;;
+    	*-knuth)
+		os=-mmixware
+		;;
+	*-wec)
+		os=-proelf
+		;;
+	*-winbond)
+		os=-proelf
+		;;
+	*-oki)
+		os=-proelf
+		;;
+	*-hp)
+		os=-hpux
+		;;
+	*-hitachi)
+		os=-hiux
+		;;
+	i860-* | *-att | *-ncr | *-altos | *-motorola | *-convergent)
+		os=-sysv
+		;;
+	*-cbm)
+		os=-amigaos
+		;;
+	*-dg)
+		os=-dgux
+		;;
+	*-dolphin)
+		os=-sysv3
+		;;
+	m68k-ccur)
+		os=-rtu
+		;;
+	m88k-omron*)
+		os=-luna
+		;;
+	*-next )
+		os=-nextstep
+		;;
+	*-sequent)
+		os=-ptx
+		;;
+	*-crds)
+		os=-unos
+		;;
+	*-ns)
+		os=-genix
+		;;
+	i370-*)
+		os=-mvs
+		;;
+	*-next)
+		os=-nextstep3
+		;;
+	*-gould)
+		os=-sysv
+		;;
+	*-highlevel)
+		os=-bsd
+		;;
+	*-encore)
+		os=-bsd
+		;;
+	*-sgi)
+		os=-irix
+		;;
+	*-siemens)
+		os=-sysv4
+		;;
+	*-masscomp)
+		os=-rtu
+		;;
+	f30[01]-fujitsu | f700-fujitsu)
+		os=-uxpv
+		;;
+	*-rom68k)
+		os=-coff
+		;;
+	*-*bug)
+		os=-coff
+		;;
+	*-apple)
+		os=-macos
+		;;
+	*-atari*)
+		os=-mint
+		;;
+	*)
+		os=-none
+		;;
+esac
+fi
+
+# Here we handle the case where we know the os, and the CPU type, but not the
+# manufacturer.  We pick the logical manufacturer.
+vendor=unknown
+case $basic_machine in
+	*-unknown)
+		case $os in
+			-riscix*)
+				vendor=acorn
+				;;
+			-sunos*)
+				vendor=sun
+				;;
+			-cnk*|-aix*)
+				vendor=ibm
+				;;
+			-beos*)
+				vendor=be
+				;;
+			-hpux*)
+				vendor=hp
+				;;
+			-mpeix*)
+				vendor=hp
+				;;
+			-hiux*)
+				vendor=hitachi
+				;;
+			-unos*)
+				vendor=crds
+				;;
+			-dgux*)
+				vendor=dg
+				;;
+			-luna*)
+				vendor=omron
+				;;
+			-genix*)
+				vendor=ns
+				;;
+			-mvs* | -opened*)
+				vendor=ibm
+				;;
+			-os400*)
+				vendor=ibm
+				;;
+			-ptx*)
+				vendor=sequent
+				;;
+			-tpf*)
+				vendor=ibm
+				;;
+			-vxsim* | -vxworks* | -windiss*)
+				vendor=wrs
+				;;
+			-aux*)
+				vendor=apple
+				;;
+			-hms*)
+				vendor=hitachi
+				;;
+			-mpw* | -macos*)
+				vendor=apple
+				;;
+			-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)
+				vendor=atari
+				;;
+			-vos*)
+				vendor=stratus
+				;;
+		esac
+		basic_machine=`echo $basic_machine | sed "s/unknown/$vendor/"`
+		;;
+esac
+
+echo $basic_machine$os
+exit
+
+# Local variables:
+# eval: (add-hook 'write-file-hooks 'time-stamp)
+# time-stamp-start: "timestamp='"
+# time-stamp-format: "%:y-%02m-%02d"
+# time-stamp-end: "'"
+# End:
diff --git a/build-aux/depcomp b/build-aux/depcomp
new file mode 100755
index 0000000..df8eea7
--- /dev/null
+++ b/build-aux/depcomp
@@ -0,0 +1,630 @@
+#! /bin/sh
+# depcomp - compile a program generating dependencies as side-effects
+
+scriptversion=2009-04-28.21; # UTC
+
+# Copyright (C) 1999, 2000, 2003, 2004, 2005, 2006, 2007, 2009 Free
+# Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# As a special exception to the GNU General Public License, if you
+# distribute this file as part of a program that contains a
+# configuration script generated by Autoconf, you may include it under
+# the same distribution terms that you use for the rest of that program.
+
+# Originally written by Alexandre Oliva <oliva@dcc.unicamp.br>.
+
+case $1 in
+  '')
+     echo "$0: No command.  Try \`$0 --help' for more information." 1>&2
+     exit 1;
+     ;;
+  -h | --h*)
+    cat <<\EOF
+Usage: depcomp [--help] [--version] PROGRAM [ARGS]
+
+Run PROGRAMS ARGS to compile a file, generating dependencies
+as side-effects.
+
+Environment variables:
+  depmode     Dependency tracking mode.
+  source      Source file read by `PROGRAMS ARGS'.
+  object      Object file output by `PROGRAMS ARGS'.
+  DEPDIR      directory where to store dependencies.
+  depfile     Dependency file to output.
+  tmpdepfile  Temporary file to use when outputing dependencies.
+  libtool     Whether libtool is used (yes/no).
+
+Report bugs to <bug-automake@gnu.org>.
+EOF
+    exit $?
+    ;;
+  -v | --v*)
+    echo "depcomp $scriptversion"
+    exit $?
+    ;;
+esac
+
+if test -z "$depmode" || test -z "$source" || test -z "$object"; then
+  echo "depcomp: Variables source, object and depmode must be set" 1>&2
+  exit 1
+fi
+
+# Dependencies for sub/bar.o or sub/bar.obj go into sub/.deps/bar.Po.
+depfile=${depfile-`echo "$object" |
+  sed 's|[^\\/]*$|'${DEPDIR-.deps}'/&|;s|\.\([^.]*\)$|.P\1|;s|Pobj$|Po|'`}
+tmpdepfile=${tmpdepfile-`echo "$depfile" | sed 's/\.\([^.]*\)$/.T\1/'`}
+
+rm -f "$tmpdepfile"
+
+# Some modes work just like other modes, but use different flags.  We
+# parameterize here, but still list the modes in the big case below,
+# to make depend.m4 easier to write.  Note that we *cannot* use a case
+# here, because this file can only contain one case statement.
+if test "$depmode" = hp; then
+  # HP compiler uses -M and no extra arg.
+  gccflag=-M
+  depmode=gcc
+fi
+
+if test "$depmode" = dashXmstdout; then
+   # This is just like dashmstdout with a different argument.
+   dashmflag=-xM
+   depmode=dashmstdout
+fi
+
+cygpath_u="cygpath -u -f -"
+if test "$depmode" = msvcmsys; then
+   # This is just like msvisualcpp but w/o cygpath translation.
+   # Just convert the backslash-escaped backslashes to single forward
+   # slashes to satisfy depend.m4
+   cygpath_u="sed s,\\\\\\\\,/,g"
+   depmode=msvisualcpp
+fi
+
+case "$depmode" in
+gcc3)
+## gcc 3 implements dependency tracking that does exactly what
+## we want.  Yay!  Note: for some reason libtool 1.4 doesn't like
+## it if -MD -MP comes after the -MF stuff.  Hmm.
+## Unfortunately, FreeBSD c89 acceptance of flags depends upon
+## the command line argument order; so add the flags where they
+## appear in depend2.am.  Note that the slowdown incurred here
+## affects only configure: in makefiles, %FASTDEP% shortcuts this.
+  for arg
+  do
+    case $arg in
+    -c) set fnord "$@" -MT "$object" -MD -MP -MF "$tmpdepfile" "$arg" ;;
+    *)  set fnord "$@" "$arg" ;;
+    esac
+    shift # fnord
+    shift # $arg
+  done
+  "$@"
+  stat=$?
+  if test $stat -eq 0; then :
+  else
+    rm -f "$tmpdepfile"
+    exit $stat
+  fi
+  mv "$tmpdepfile" "$depfile"
+  ;;
+
+gcc)
+## There are various ways to get dependency output from gcc.  Here's
+## why we pick this rather obscure method:
+## - Don't want to use -MD because we'd like the dependencies to end
+##   up in a subdir.  Having to rename by hand is ugly.
+##   (We might end up doing this anyway to support other compilers.)
+## - The DEPENDENCIES_OUTPUT environment variable makes gcc act like
+##   -MM, not -M (despite what the docs say).
+## - Using -M directly means running the compiler twice (even worse
+##   than renaming).
+  if test -z "$gccflag"; then
+    gccflag=-MD,
+  fi
+  "$@" -Wp,"$gccflag$tmpdepfile"
+  stat=$?
+  if test $stat -eq 0; then :
+  else
+    rm -f "$tmpdepfile"
+    exit $stat
+  fi
+  rm -f "$depfile"
+  echo "$object : \\" > "$depfile"
+  alpha=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
+## The second -e expression handles DOS-style file names with drive letters.
+  sed -e 's/^[^:]*: / /' \
+      -e 's/^['$alpha']:\/[^:]*: / /' < "$tmpdepfile" >> "$depfile"
+## This next piece of magic avoids the `deleted header file' problem.
+## The problem is that when a header file which appears in a .P file
+## is deleted, the dependency causes make to die (because there is
+## typically no way to rebuild the header).  We avoid this by adding
+## dummy dependencies for each header file.  Too bad gcc doesn't do
+## this for us directly.
+  tr ' ' '
+' < "$tmpdepfile" |
+## Some versions of gcc put a space before the `:'.  On the theory
+## that the space means something, we add a space to the output as
+## well.
+## Some versions of the HPUX 10.20 sed can't process this invocation
+## correctly.  Breaking it into two sed invocations is a workaround.
+    sed -e 's/^\\$//' -e '/^$/d' -e '/:$/d' | sed -e 's/$/ :/' >> "$depfile"
+  rm -f "$tmpdepfile"
+  ;;
+
+hp)
+  # This case exists only to let depend.m4 do its work.  It works by
+  # looking at the text of this script.  This case will never be run,
+  # since it is checked for above.
+  exit 1
+  ;;
+
+sgi)
+  if test "$libtool" = yes; then
+    "$@" "-Wp,-MDupdate,$tmpdepfile"
+  else
+    "$@" -MDupdate "$tmpdepfile"
+  fi
+  stat=$?
+  if test $stat -eq 0; then :
+  else
+    rm -f "$tmpdepfile"
+    exit $stat
+  fi
+  rm -f "$depfile"
+
+  if test -f "$tmpdepfile"; then  # yes, the sourcefile depend on other files
+    echo "$object : \\" > "$depfile"
+
+    # Clip off the initial element (the dependent).  Don't try to be
+    # clever and replace this with sed code, as IRIX sed won't handle
+    # lines with more than a fixed number of characters (4096 in
+    # IRIX 6.2 sed, 8192 in IRIX 6.5).  We also remove comment lines;
+    # the IRIX cc adds comments like `#:fec' to the end of the
+    # dependency line.
+    tr ' ' '
+' < "$tmpdepfile" \
+    | sed -e 's/^.*\.o://' -e 's/#.*$//' -e '/^$/ d' | \
+    tr '
+' ' ' >> "$depfile"
+    echo >> "$depfile"
+
+    # The second pass generates a dummy entry for each header file.
+    tr ' ' '
+' < "$tmpdepfile" \
+   | sed -e 's/^.*\.o://' -e 's/#.*$//' -e '/^$/ d' -e 's/$/:/' \
+   >> "$depfile"
+  else
+    # The sourcefile does not contain any dependencies, so just
+    # store a dummy comment line, to avoid errors with the Makefile
+    # "include basename.Plo" scheme.
+    echo "#dummy" > "$depfile"
+  fi
+  rm -f "$tmpdepfile"
+  ;;
+
+aix)
+  # The C for AIX Compiler uses -M and outputs the dependencies
+  # in a .u file.  In older versions, this file always lives in the
+  # current directory.  Also, the AIX compiler puts `$object:' at the
+  # start of each line; $object doesn't have directory information.
+  # Version 6 uses the directory in both cases.
+  dir=`echo "$object" | sed -e 's|/[^/]*$|/|'`
+  test "x$dir" = "x$object" && dir=
+  base=`echo "$object" | sed -e 's|^.*/||' -e 's/\.o$//' -e 's/\.lo$//'`
+  if test "$libtool" = yes; then
+    tmpdepfile1=$dir$base.u
+    tmpdepfile2=$base.u
+    tmpdepfile3=$dir.libs/$base.u
+    "$@" -Wc,-M
+  else
+    tmpdepfile1=$dir$base.u
+    tmpdepfile2=$dir$base.u
+    tmpdepfile3=$dir$base.u
+    "$@" -M
+  fi
+  stat=$?
+
+  if test $stat -eq 0; then :
+  else
+    rm -f "$tmpdepfile1" "$tmpdepfile2" "$tmpdepfile3"
+    exit $stat
+  fi
+
+  for tmpdepfile in "$tmpdepfile1" "$tmpdepfile2" "$tmpdepfile3"
+  do
+    test -f "$tmpdepfile" && break
+  done
+  if test -f "$tmpdepfile"; then
+    # Each line is of the form `foo.o: dependent.h'.
+    # Do two passes, one to just change these to
+    # `$object: dependent.h' and one to simply `dependent.h:'.
+    sed -e "s,^.*\.[a-z]*:,$object:," < "$tmpdepfile" > "$depfile"
+    # That's a tab and a space in the [].
+    sed -e 's,^.*\.[a-z]*:[	 ]*,,' -e 's,$,:,' < "$tmpdepfile" >> "$depfile"
+  else
+    # The sourcefile does not contain any dependencies, so just
+    # store a dummy comment line, to avoid errors with the Makefile
+    # "include basename.Plo" scheme.
+    echo "#dummy" > "$depfile"
+  fi
+  rm -f "$tmpdepfile"
+  ;;
+
+icc)
+  # Intel's C compiler understands `-MD -MF file'.  However on
+  #    icc -MD -MF foo.d -c -o sub/foo.o sub/foo.c
+  # ICC 7.0 will fill foo.d with something like
+  #    foo.o: sub/foo.c
+  #    foo.o: sub/foo.h
+  # which is wrong.  We want:
+  #    sub/foo.o: sub/foo.c
+  #    sub/foo.o: sub/foo.h
+  #    sub/foo.c:
+  #    sub/foo.h:
+  # ICC 7.1 will output
+  #    foo.o: sub/foo.c sub/foo.h
+  # and will wrap long lines using \ :
+  #    foo.o: sub/foo.c ... \
+  #     sub/foo.h ... \
+  #     ...
+
+  "$@" -MD -MF "$tmpdepfile"
+  stat=$?
+  if test $stat -eq 0; then :
+  else
+    rm -f "$tmpdepfile"
+    exit $stat
+  fi
+  rm -f "$depfile"
+  # Each line is of the form `foo.o: dependent.h',
+  # or `foo.o: dep1.h dep2.h \', or ` dep3.h dep4.h \'.
+  # Do two passes, one to just change these to
+  # `$object: dependent.h' and one to simply `dependent.h:'.
+  sed "s,^[^:]*:,$object :," < "$tmpdepfile" > "$depfile"
+  # Some versions of the HPUX 10.20 sed can't process this invocation
+  # correctly.  Breaking it into two sed invocations is a workaround.
+  sed 's,^[^:]*: \(.*\)$,\1,;s/^\\$//;/^$/d;/:$/d' < "$tmpdepfile" |
+    sed -e 's/$/ :/' >> "$depfile"
+  rm -f "$tmpdepfile"
+  ;;
+
+hp2)
+  # The "hp" stanza above does not work with aCC (C++) and HP's ia64
+  # compilers, which have integrated preprocessors.  The correct option
+  # to use with these is +Maked; it writes dependencies to a file named
+  # 'foo.d', which lands next to the object file, wherever that
+  # happens to be.
+  # Much of this is similar to the tru64 case; see comments there.
+  dir=`echo "$object" | sed -e 's|/[^/]*$|/|'`
+  test "x$dir" = "x$object" && dir=
+  base=`echo "$object" | sed -e 's|^.*/||' -e 's/\.o$//' -e 's/\.lo$//'`
+  if test "$libtool" = yes; then
+    tmpdepfile1=$dir$base.d
+    tmpdepfile2=$dir.libs/$base.d
+    "$@" -Wc,+Maked
+  else
+    tmpdepfile1=$dir$base.d
+    tmpdepfile2=$dir$base.d
+    "$@" +Maked
+  fi
+  stat=$?
+  if test $stat -eq 0; then :
+  else
+     rm -f "$tmpdepfile1" "$tmpdepfile2"
+     exit $stat
+  fi
+
+  for tmpdepfile in "$tmpdepfile1" "$tmpdepfile2"
+  do
+    test -f "$tmpdepfile" && break
+  done
+  if test -f "$tmpdepfile"; then
+    sed -e "s,^.*\.[a-z]*:,$object:," "$tmpdepfile" > "$depfile"
+    # Add `dependent.h:' lines.
+    sed -ne '2,${
+	       s/^ *//
+	       s/ \\*$//
+	       s/$/:/
+	       p
+	     }' "$tmpdepfile" >> "$depfile"
+  else
+    echo "#dummy" > "$depfile"
+  fi
+  rm -f "$tmpdepfile" "$tmpdepfile2"
+  ;;
+
+tru64)
+   # The Tru64 compiler uses -MD to generate dependencies as a side
+   # effect.  `cc -MD -o foo.o ...' puts the dependencies into `foo.o.d'.
+   # At least on Alpha/Redhat 6.1, Compaq CCC V6.2-504 seems to put
+   # dependencies in `foo.d' instead, so we check for that too.
+   # Subdirectories are respected.
+   dir=`echo "$object" | sed -e 's|/[^/]*$|/|'`
+   test "x$dir" = "x$object" && dir=
+   base=`echo "$object" | sed -e 's|^.*/||' -e 's/\.o$//' -e 's/\.lo$//'`
+
+   if test "$libtool" = yes; then
+      # With Tru64 cc, shared objects can also be used to make a
+      # static library.  This mechanism is used in libtool 1.4 series to
+      # handle both shared and static libraries in a single compilation.
+      # With libtool 1.4, dependencies were output in $dir.libs/$base.lo.d.
+      #
+      # With libtool 1.5 this exception was removed, and libtool now
+      # generates 2 separate objects for the 2 libraries.  These two
+      # compilations output dependencies in $dir.libs/$base.o.d and
+      # in $dir$base.o.d.  We have to check for both files, because
+      # one of the two compilations can be disabled.  We should prefer
+      # $dir$base.o.d over $dir.libs/$base.o.d because the latter is
+      # automatically cleaned when .libs/ is deleted, while ignoring
+      # the former would cause a distcleancheck panic.
+      tmpdepfile1=$dir.libs/$base.lo.d   # libtool 1.4
+      tmpdepfile2=$dir$base.o.d          # libtool 1.5
+      tmpdepfile3=$dir.libs/$base.o.d    # libtool 1.5
+      tmpdepfile4=$dir.libs/$base.d      # Compaq CCC V6.2-504
+      "$@" -Wc,-MD
+   else
+      tmpdepfile1=$dir$base.o.d
+      tmpdepfile2=$dir$base.d
+      tmpdepfile3=$dir$base.d
+      tmpdepfile4=$dir$base.d
+      "$@" -MD
+   fi
+
+   stat=$?
+   if test $stat -eq 0; then :
+   else
+      rm -f "$tmpdepfile1" "$tmpdepfile2" "$tmpdepfile3" "$tmpdepfile4"
+      exit $stat
+   fi
+
+   for tmpdepfile in "$tmpdepfile1" "$tmpdepfile2" "$tmpdepfile3" "$tmpdepfile4"
+   do
+     test -f "$tmpdepfile" && break
+   done
+   if test -f "$tmpdepfile"; then
+      sed -e "s,^.*\.[a-z]*:,$object:," < "$tmpdepfile" > "$depfile"
+      # That's a tab and a space in the [].
+      sed -e 's,^.*\.[a-z]*:[	 ]*,,' -e 's,$,:,' < "$tmpdepfile" >> "$depfile"
+   else
+      echo "#dummy" > "$depfile"
+   fi
+   rm -f "$tmpdepfile"
+   ;;
+
+#nosideeffect)
+  # This comment above is used by automake to tell side-effect
+  # dependency tracking mechanisms from slower ones.
+
+dashmstdout)
+  # Important note: in order to support this mode, a compiler *must*
+  # always write the preprocessed file to stdout, regardless of -o.
+  "$@" || exit $?
+
+  # Remove the call to Libtool.
+  if test "$libtool" = yes; then
+    while test "X$1" != 'X--mode=compile'; do
+      shift
+    done
+    shift
+  fi
+
+  # Remove `-o $object'.
+  IFS=" "
+  for arg
+  do
+    case $arg in
+    -o)
+      shift
+      ;;
+    $object)
+      shift
+      ;;
+    *)
+      set fnord "$@" "$arg"
+      shift # fnord
+      shift # $arg
+      ;;
+    esac
+  done
+
+  test -z "$dashmflag" && dashmflag=-M
+  # Require at least two characters before searching for `:'
+  # in the target name.  This is to cope with DOS-style filenames:
+  # a dependency such as `c:/foo/bar' could be seen as target `c' otherwise.
+  "$@" $dashmflag |
+    sed 's:^[  ]*[^: ][^:][^:]*\:[    ]*:'"$object"'\: :' > "$tmpdepfile"
+  rm -f "$depfile"
+  cat < "$tmpdepfile" > "$depfile"
+  tr ' ' '
+' < "$tmpdepfile" | \
+## Some versions of the HPUX 10.20 sed can't process this invocation
+## correctly.  Breaking it into two sed invocations is a workaround.
+    sed -e 's/^\\$//' -e '/^$/d' -e '/:$/d' | sed -e 's/$/ :/' >> "$depfile"
+  rm -f "$tmpdepfile"
+  ;;
+
+dashXmstdout)
+  # This case only exists to satisfy depend.m4.  It is never actually
+  # run, as this mode is specially recognized in the preamble.
+  exit 1
+  ;;
+
+makedepend)
+  "$@" || exit $?
+  # Remove any Libtool call
+  if test "$libtool" = yes; then
+    while test "X$1" != 'X--mode=compile'; do
+      shift
+    done
+    shift
+  fi
+  # X makedepend
+  shift
+  cleared=no eat=no
+  for arg
+  do
+    case $cleared in
+    no)
+      set ""; shift
+      cleared=yes ;;
+    esac
+    if test $eat = yes; then
+      eat=no
+      continue
+    fi
+    case "$arg" in
+    -D*|-I*)
+      set fnord "$@" "$arg"; shift ;;
+    # Strip any option that makedepend may not understand.  Remove
+    # the object too, otherwise makedepend will parse it as a source file.
+    -arch)
+      eat=yes ;;
+    -*|$object)
+      ;;
+    *)
+      set fnord "$@" "$arg"; shift ;;
+    esac
+  done
+  obj_suffix=`echo "$object" | sed 's/^.*\././'`
+  touch "$tmpdepfile"
+  ${MAKEDEPEND-makedepend} -o"$obj_suffix" -f"$tmpdepfile" "$@"
+  rm -f "$depfile"
+  cat < "$tmpdepfile" > "$depfile"
+  sed '1,2d' "$tmpdepfile" | tr ' ' '
+' | \
+## Some versions of the HPUX 10.20 sed can't process this invocation
+## correctly.  Breaking it into two sed invocations is a workaround.
+    sed -e 's/^\\$//' -e '/^$/d' -e '/:$/d' | sed -e 's/$/ :/' >> "$depfile"
+  rm -f "$tmpdepfile" "$tmpdepfile".bak
+  ;;
+
+cpp)
+  # Important note: in order to support this mode, a compiler *must*
+  # always write the preprocessed file to stdout.
+  "$@" || exit $?
+
+  # Remove the call to Libtool.
+  if test "$libtool" = yes; then
+    while test "X$1" != 'X--mode=compile'; do
+      shift
+    done
+    shift
+  fi
+
+  # Remove `-o $object'.
+  IFS=" "
+  for arg
+  do
+    case $arg in
+    -o)
+      shift
+      ;;
+    $object)
+      shift
+      ;;
+    *)
+      set fnord "$@" "$arg"
+      shift # fnord
+      shift # $arg
+      ;;
+    esac
+  done
+
+  "$@" -E |
+    sed -n -e '/^# [0-9][0-9]* "\([^"]*\)".*/ s:: \1 \\:p' \
+       -e '/^#line [0-9][0-9]* "\([^"]*\)".*/ s:: \1 \\:p' |
+    sed '$ s: \\$::' > "$tmpdepfile"
+  rm -f "$depfile"
+  echo "$object : \\" > "$depfile"
+  cat < "$tmpdepfile" >> "$depfile"
+  sed < "$tmpdepfile" '/^$/d;s/^ //;s/ \\$//;s/$/ :/' >> "$depfile"
+  rm -f "$tmpdepfile"
+  ;;
+
+msvisualcpp)
+  # Important note: in order to support this mode, a compiler *must*
+  # always write the preprocessed file to stdout.
+  "$@" || exit $?
+
+  # Remove the call to Libtool.
+  if test "$libtool" = yes; then
+    while test "X$1" != 'X--mode=compile'; do
+      shift
+    done
+    shift
+  fi
+
+  IFS=" "
+  for arg
+  do
+    case "$arg" in
+    -o)
+      shift
+      ;;
+    $object)
+      shift
+      ;;
+    "-Gm"|"/Gm"|"-Gi"|"/Gi"|"-ZI"|"/ZI")
+	set fnord "$@"
+	shift
+	shift
+	;;
+    *)
+	set fnord "$@" "$arg"
+	shift
+	shift
+	;;
+    esac
+  done
+  "$@" -E 2>/dev/null |
+  sed -n '/^#line [0-9][0-9]* "\([^"]*\)"/ s::\1:p' | $cygpath_u | sort -u > "$tmpdepfile"
+  rm -f "$depfile"
+  echo "$object : \\" > "$depfile"
+  sed < "$tmpdepfile" -n -e 's% %\\ %g' -e '/^\(.*\)$/ s::	\1 \\:p' >> "$depfile"
+  echo "	" >> "$depfile"
+  sed < "$tmpdepfile" -n -e 's% %\\ %g' -e '/^\(.*\)$/ s::\1\::p' >> "$depfile"
+  rm -f "$tmpdepfile"
+  ;;
+
+msvcmsys)
+  # This case exists only to let depend.m4 do its work.  It works by
+  # looking at the text of this script.  This case will never be run,
+  # since it is checked for above.
+  exit 1
+  ;;
+
+none)
+  exec "$@"
+  ;;
+
+*)
+  echo "Unknown depmode $depmode" 1>&2
+  exit 1
+  ;;
+esac
+
+exit 0
+
+# Local Variables:
+# mode: shell-script
+# sh-indentation: 2
+# eval: (add-hook 'write-file-hooks 'time-stamp)
+# time-stamp-start: "scriptversion="
+# time-stamp-format: "%:y-%02m-%02d.%02H"
+# time-stamp-time-zone: "UTC"
+# time-stamp-end: "; # UTC"
+# End:
diff --git a/build-aux/install-sh b/build-aux/install-sh
new file mode 100755
index 0000000..6781b98
--- /dev/null
+++ b/build-aux/install-sh
@@ -0,0 +1,520 @@
+#!/bin/sh
+# install - install a program, script, or datafile
+
+scriptversion=2009-04-28.21; # UTC
+
+# This originates from X11R5 (mit/util/scripts/install.sh), which was
+# later released in X11R6 (xc/config/util/install.sh) with the
+# following copyright and license.
+#
+# Copyright (C) 1994 X Consortium
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to
+# deal in the Software without restriction, including without limitation the
+# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+# sell copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
+# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-
+# TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+# Except as contained in this notice, the name of the X Consortium shall not
+# be used in advertising or otherwise to promote the sale, use or other deal-
+# ings in this Software without prior written authorization from the X Consor-
+# tium.
+#
+#
+# FSF changes to this file are in the public domain.
+#
+# Calling this script install-sh is preferred over install.sh, to prevent
+# `make' implicit rules from creating a file called install from it
+# when there is no Makefile.
+#
+# This script is compatible with the BSD install script, but was written
+# from scratch.
+
+nl='
+'
+IFS=" ""	$nl"
+
+# set DOITPROG to echo to test this script
+
+# Don't use :- since 4.3BSD and earlier shells don't like it.
+doit=${DOITPROG-}
+if test -z "$doit"; then
+  doit_exec=exec
+else
+  doit_exec=$doit
+fi
+
+# Put in absolute file names if you don't have them in your path;
+# or use environment vars.
+
+chgrpprog=${CHGRPPROG-chgrp}
+chmodprog=${CHMODPROG-chmod}
+chownprog=${CHOWNPROG-chown}
+cmpprog=${CMPPROG-cmp}
+cpprog=${CPPROG-cp}
+mkdirprog=${MKDIRPROG-mkdir}
+mvprog=${MVPROG-mv}
+rmprog=${RMPROG-rm}
+stripprog=${STRIPPROG-strip}
+
+posix_glob='?'
+initialize_posix_glob='
+  test "$posix_glob" != "?" || {
+    if (set -f) 2>/dev/null; then
+      posix_glob=
+    else
+      posix_glob=:
+    fi
+  }
+'
+
+posix_mkdir=
+
+# Desired mode of installed file.
+mode=0755
+
+chgrpcmd=
+chmodcmd=$chmodprog
+chowncmd=
+mvcmd=$mvprog
+rmcmd="$rmprog -f"
+stripcmd=
+
+src=
+dst=
+dir_arg=
+dst_arg=
+
+copy_on_change=false
+no_target_directory=
+
+usage="\
+Usage: $0 [OPTION]... [-T] SRCFILE DSTFILE
+   or: $0 [OPTION]... SRCFILES... DIRECTORY
+   or: $0 [OPTION]... -t DIRECTORY SRCFILES...
+   or: $0 [OPTION]... -d DIRECTORIES...
+
+In the 1st form, copy SRCFILE to DSTFILE.
+In the 2nd and 3rd, copy all SRCFILES to DIRECTORY.
+In the 4th, create DIRECTORIES.
+
+Options:
+     --help     display this help and exit.
+     --version  display version info and exit.
+
+  -c            (ignored)
+  -C            install only if different (preserve the last data modification time)
+  -d            create directories instead of installing files.
+  -g GROUP      $chgrpprog installed files to GROUP.
+  -m MODE       $chmodprog installed files to MODE.
+  -o USER       $chownprog installed files to USER.
+  -s            $stripprog installed files.
+  -t DIRECTORY  install into DIRECTORY.
+  -T            report an error if DSTFILE is a directory.
+
+Environment variables override the default commands:
+  CHGRPPROG CHMODPROG CHOWNPROG CMPPROG CPPROG MKDIRPROG MVPROG
+  RMPROG STRIPPROG
+"
+
+while test $# -ne 0; do
+  case $1 in
+    -c) ;;
+
+    -C) copy_on_change=true;;
+
+    -d) dir_arg=true;;
+
+    -g) chgrpcmd="$chgrpprog $2"
+	shift;;
+
+    --help) echo "$usage"; exit $?;;
+
+    -m) mode=$2
+	case $mode in
+	  *' '* | *'	'* | *'
+'*	  | *'*'* | *'?'* | *'['*)
+	    echo "$0: invalid mode: $mode" >&2
+	    exit 1;;
+	esac
+	shift;;
+
+    -o) chowncmd="$chownprog $2"
+	shift;;
+
+    -s) stripcmd=$stripprog;;
+
+    -t) dst_arg=$2
+	shift;;
+
+    -T) no_target_directory=true;;
+
+    --version) echo "$0 $scriptversion"; exit $?;;
+
+    --)	shift
+	break;;
+
+    -*)	echo "$0: invalid option: $1" >&2
+	exit 1;;
+
+    *)  break;;
+  esac
+  shift
+done
+
+if test $# -ne 0 && test -z "$dir_arg$dst_arg"; then
+  # When -d is used, all remaining arguments are directories to create.
+  # When -t is used, the destination is already specified.
+  # Otherwise, the last argument is the destination.  Remove it from $@.
+  for arg
+  do
+    if test -n "$dst_arg"; then
+      # $@ is not empty: it contains at least $arg.
+      set fnord "$@" "$dst_arg"
+      shift # fnord
+    fi
+    shift # arg
+    dst_arg=$arg
+  done
+fi
+
+if test $# -eq 0; then
+  if test -z "$dir_arg"; then
+    echo "$0: no input file specified." >&2
+    exit 1
+  fi
+  # It's OK to call `install-sh -d' without argument.
+  # This can happen when creating conditional directories.
+  exit 0
+fi
+
+if test -z "$dir_arg"; then
+  trap '(exit $?); exit' 1 2 13 15
+
+  # Set umask so as not to create temps with too-generous modes.
+  # However, 'strip' requires both read and write access to temps.
+  case $mode in
+    # Optimize common cases.
+    *644) cp_umask=133;;
+    *755) cp_umask=22;;
+
+    *[0-7])
+      if test -z "$stripcmd"; then
+	u_plus_rw=
+      else
+	u_plus_rw='% 200'
+      fi
+      cp_umask=`expr '(' 777 - $mode % 1000 ')' $u_plus_rw`;;
+    *)
+      if test -z "$stripcmd"; then
+	u_plus_rw=
+      else
+	u_plus_rw=,u+rw
+      fi
+      cp_umask=$mode$u_plus_rw;;
+  esac
+fi
+
+for src
+do
+  # Protect names starting with `-'.
+  case $src in
+    -*) src=./$src;;
+  esac
+
+  if test -n "$dir_arg"; then
+    dst=$src
+    dstdir=$dst
+    test -d "$dstdir"
+    dstdir_status=$?
+  else
+
+    # Waiting for this to be detected by the "$cpprog $src $dsttmp" command
+    # might cause directories to be created, which would be especially bad
+    # if $src (and thus $dsttmp) contains '*'.
+    if test ! -f "$src" && test ! -d "$src"; then
+      echo "$0: $src does not exist." >&2
+      exit 1
+    fi
+
+    if test -z "$dst_arg"; then
+      echo "$0: no destination specified." >&2
+      exit 1
+    fi
+
+    dst=$dst_arg
+    # Protect names starting with `-'.
+    case $dst in
+      -*) dst=./$dst;;
+    esac
+
+    # If destination is a directory, append the input filename; won't work
+    # if double slashes aren't ignored.
+    if test -d "$dst"; then
+      if test -n "$no_target_directory"; then
+	echo "$0: $dst_arg: Is a directory" >&2
+	exit 1
+      fi
+      dstdir=$dst
+      dst=$dstdir/`basename "$src"`
+      dstdir_status=0
+    else
+      # Prefer dirname, but fall back on a substitute if dirname fails.
+      dstdir=`
+	(dirname "$dst") 2>/dev/null ||
+	expr X"$dst" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	     X"$dst" : 'X\(//\)[^/]' \| \
+	     X"$dst" : 'X\(//\)$' \| \
+	     X"$dst" : 'X\(/\)' \| . 2>/dev/null ||
+	echo X"$dst" |
+	    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+		   s//\1/
+		   q
+		 }
+		 /^X\(\/\/\)[^/].*/{
+		   s//\1/
+		   q
+		 }
+		 /^X\(\/\/\)$/{
+		   s//\1/
+		   q
+		 }
+		 /^X\(\/\).*/{
+		   s//\1/
+		   q
+		 }
+		 s/.*/./; q'
+      `
+
+      test -d "$dstdir"
+      dstdir_status=$?
+    fi
+  fi
+
+  obsolete_mkdir_used=false
+
+  if test $dstdir_status != 0; then
+    case $posix_mkdir in
+      '')
+	# Create intermediate dirs using mode 755 as modified by the umask.
+	# This is like FreeBSD 'install' as of 1997-10-28.
+	umask=`umask`
+	case $stripcmd.$umask in
+	  # Optimize common cases.
+	  *[2367][2367]) mkdir_umask=$umask;;
+	  .*0[02][02] | .[02][02] | .[02]) mkdir_umask=22;;
+
+	  *[0-7])
+	    mkdir_umask=`expr $umask + 22 \
+	      - $umask % 100 % 40 + $umask % 20 \
+	      - $umask % 10 % 4 + $umask % 2
+	    `;;
+	  *) mkdir_umask=$umask,go-w;;
+	esac
+
+	# With -d, create the new directory with the user-specified mode.
+	# Otherwise, rely on $mkdir_umask.
+	if test -n "$dir_arg"; then
+	  mkdir_mode=-m$mode
+	else
+	  mkdir_mode=
+	fi
+
+	posix_mkdir=false
+	case $umask in
+	  *[123567][0-7][0-7])
+	    # POSIX mkdir -p sets u+wx bits regardless of umask, which
+	    # is incompatible with FreeBSD 'install' when (umask & 300) != 0.
+	    ;;
+	  *)
+	    tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$
+	    trap 'ret=$?; rmdir "$tmpdir/d" "$tmpdir" 2>/dev/null; exit $ret' 0
+
+	    if (umask $mkdir_umask &&
+		exec $mkdirprog $mkdir_mode -p -- "$tmpdir/d") >/dev/null 2>&1
+	    then
+	      if test -z "$dir_arg" || {
+		   # Check for POSIX incompatibilities with -m.
+		   # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or
+		   # other-writeable bit of parent directory when it shouldn't.
+		   # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.
+		   ls_ld_tmpdir=`ls -ld "$tmpdir"`
+		   case $ls_ld_tmpdir in
+		     d????-?r-*) different_mode=700;;
+		     d????-?--*) different_mode=755;;
+		     *) false;;
+		   esac &&
+		   $mkdirprog -m$different_mode -p -- "$tmpdir" && {
+		     ls_ld_tmpdir_1=`ls -ld "$tmpdir"`
+		     test "$ls_ld_tmpdir" = "$ls_ld_tmpdir_1"
+		   }
+		 }
+	      then posix_mkdir=:
+	      fi
+	      rmdir "$tmpdir/d" "$tmpdir"
+	    else
+	      # Remove any dirs left behind by ancient mkdir implementations.
+	      rmdir ./$mkdir_mode ./-p ./-- 2>/dev/null
+	    fi
+	    trap '' 0;;
+	esac;;
+    esac
+
+    if
+      $posix_mkdir && (
+	umask $mkdir_umask &&
+	$doit_exec $mkdirprog $mkdir_mode -p -- "$dstdir"
+      )
+    then :
+    else
+
+      # The umask is ridiculous, or mkdir does not conform to POSIX,
+      # or it failed possibly due to a race condition.  Create the
+      # directory the slow way, step by step, checking for races as we go.
+
+      case $dstdir in
+	/*) prefix='/';;
+	-*) prefix='./';;
+	*)  prefix='';;
+      esac
+
+      eval "$initialize_posix_glob"
+
+      oIFS=$IFS
+      IFS=/
+      $posix_glob set -f
+      set fnord $dstdir
+      shift
+      $posix_glob set +f
+      IFS=$oIFS
+
+      prefixes=
+
+      for d
+      do
+	test -z "$d" && continue
+
+	prefix=$prefix$d
+	if test -d "$prefix"; then
+	  prefixes=
+	else
+	  if $posix_mkdir; then
+	    (umask=$mkdir_umask &&
+	     $doit_exec $mkdirprog $mkdir_mode -p -- "$dstdir") && break
+	    # Don't fail if two instances are running concurrently.
+	    test -d "$prefix" || exit 1
+	  else
+	    case $prefix in
+	      *\'*) qprefix=`echo "$prefix" | sed "s/'/'\\\\\\\\''/g"`;;
+	      *) qprefix=$prefix;;
+	    esac
+	    prefixes="$prefixes '$qprefix'"
+	  fi
+	fi
+	prefix=$prefix/
+      done
+
+      if test -n "$prefixes"; then
+	# Don't fail if two instances are running concurrently.
+	(umask $mkdir_umask &&
+	 eval "\$doit_exec \$mkdirprog $prefixes") ||
+	  test -d "$dstdir" || exit 1
+	obsolete_mkdir_used=true
+      fi
+    fi
+  fi
+
+  if test -n "$dir_arg"; then
+    { test -z "$chowncmd" || $doit $chowncmd "$dst"; } &&
+    { test -z "$chgrpcmd" || $doit $chgrpcmd "$dst"; } &&
+    { test "$obsolete_mkdir_used$chowncmd$chgrpcmd" = false ||
+      test -z "$chmodcmd" || $doit $chmodcmd $mode "$dst"; } || exit 1
+  else
+
+    # Make a couple of temp file names in the proper directory.
+    dsttmp=$dstdir/_inst.$$_
+    rmtmp=$dstdir/_rm.$$_
+
+    # Trap to clean up those temp files at exit.
+    trap 'ret=$?; rm -f "$dsttmp" "$rmtmp" && exit $ret' 0
+
+    # Copy the file name to the temp name.
+    (umask $cp_umask && $doit_exec $cpprog "$src" "$dsttmp") &&
+
+    # and set any options; do chmod last to preserve setuid bits.
+    #
+    # If any of these fail, we abort the whole thing.  If we want to
+    # ignore errors from any of these, just make sure not to ignore
+    # errors from the above "$doit $cpprog $src $dsttmp" command.
+    #
+    { test -z "$chowncmd" || $doit $chowncmd "$dsttmp"; } &&
+    { test -z "$chgrpcmd" || $doit $chgrpcmd "$dsttmp"; } &&
+    { test -z "$stripcmd" || $doit $stripcmd "$dsttmp"; } &&
+    { test -z "$chmodcmd" || $doit $chmodcmd $mode "$dsttmp"; } &&
+
+    # If -C, don't bother to copy if it wouldn't change the file.
+    if $copy_on_change &&
+       old=`LC_ALL=C ls -dlL "$dst"	2>/dev/null` &&
+       new=`LC_ALL=C ls -dlL "$dsttmp"	2>/dev/null` &&
+
+       eval "$initialize_posix_glob" &&
+       $posix_glob set -f &&
+       set X $old && old=:$2:$4:$5:$6 &&
+       set X $new && new=:$2:$4:$5:$6 &&
+       $posix_glob set +f &&
+
+       test "$old" = "$new" &&
+       $cmpprog "$dst" "$dsttmp" >/dev/null 2>&1
+    then
+      rm -f "$dsttmp"
+    else
+      # Rename the file to the real destination.
+      $doit $mvcmd -f "$dsttmp" "$dst" 2>/dev/null ||
+
+      # The rename failed, perhaps because mv can't rename something else
+      # to itself, or perhaps because mv is so ancient that it does not
+      # support -f.
+      {
+	# Now remove or move aside any old file at destination location.
+	# We try this two ways since rm can't unlink itself on some
+	# systems and the destination file might be busy for other
+	# reasons.  In this case, the final cleanup might fail but the new
+	# file should still install successfully.
+	{
+	  test ! -f "$dst" ||
+	  $doit $rmcmd -f "$dst" 2>/dev/null ||
+	  { $doit $mvcmd -f "$dst" "$rmtmp" 2>/dev/null &&
+	    { $doit $rmcmd -f "$rmtmp" 2>/dev/null; :; }
+	  } ||
+	  { echo "$0: cannot unlink or rename $dst" >&2
+	    (exit 1); exit 1
+	  }
+	} &&
+
+	# Now rename the file to the real destination.
+	$doit $mvcmd "$dsttmp" "$dst"
+      }
+    fi || exit 1
+
+    trap '' 0
+  fi
+done
+
+# Local variables:
+# eval: (add-hook 'write-file-hooks 'time-stamp)
+# time-stamp-start: "scriptversion="
+# time-stamp-format: "%:y-%02m-%02d.%02H"
+# time-stamp-time-zone: "UTC"
+# time-stamp-end: "; # UTC"
+# End:
diff --git a/build-aux/ltmain.sh b/build-aux/ltmain.sh
new file mode 100755
index 0000000..d88da2c
--- /dev/null
+++ b/build-aux/ltmain.sh
@@ -0,0 +1,8413 @@
+# Generated from ltmain.m4sh.
+
+# ltmain.sh (GNU libtool) 2.2.6b
+# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996
+
+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007 2008 Free Software Foundation, Inc.
+# This is free software; see the source for copying conditions.  There is NO
+# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+
+# GNU Libtool is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# As a special exception to the GNU General Public License,
+# if you distribute this file as part of a program or library that
+# is built using GNU Libtool, you may include this file under the
+# same distribution terms that you use for the rest of that program.
+#
+# GNU Libtool is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GNU Libtool; see the file COPYING.  If not, a copy
+# can be downloaded from http://www.gnu.org/licenses/gpl.html,
+# or obtained by writing to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+# Usage: $progname [OPTION]... [MODE-ARG]...
+#
+# Provide generalized library-building support services.
+#
+#     --config             show all configuration variables
+#     --debug              enable verbose shell tracing
+# -n, --dry-run            display commands without modifying any files
+#     --features           display basic configuration information and exit
+#     --mode=MODE          use operation mode MODE
+#     --preserve-dup-deps  don't remove duplicate dependency libraries
+#     --quiet, --silent    don't print informational messages
+#     --tag=TAG            use configuration variables from tag TAG
+# -v, --verbose            print informational messages (default)
+#     --version            print version information
+# -h, --help               print short or long help message
+#
+# MODE must be one of the following:
+#
+#       clean              remove files from the build directory
+#       compile            compile a source file into a libtool object
+#       execute            automatically set library path, then run a program
+#       finish             complete the installation of libtool libraries
+#       install            install libraries or executables
+#       link               create a library or an executable
+#       uninstall          remove libraries from an installed directory
+#
+# MODE-ARGS vary depending on the MODE.
+# Try `$progname --help --mode=MODE' for a more detailed description of MODE.
+#
+# When reporting a bug, please describe a test case to reproduce it and
+# include the following information:
+#
+#       host-triplet:	$host
+#       shell:		$SHELL
+#       compiler:		$LTCC
+#       compiler flags:		$LTCFLAGS
+#       linker:		$LD (gnu? $with_gnu_ld)
+#       $progname:		(GNU libtool) 2.2.6b Debian-2.2.6b-2
+#       automake:		$automake_version
+#       autoconf:		$autoconf_version
+#
+# Report bugs to <bug-libtool@gnu.org>.
+
+PROGRAM=ltmain.sh
+PACKAGE=libtool
+VERSION="2.2.6b Debian-2.2.6b-2"
+TIMESTAMP=""
+package_revision=1.3017
+
+# Be Bourne compatible
+if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
+  emulate sh
+  NULLCMD=:
+  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
+  # is contrary to our usage.  Disable this feature.
+  alias -g '${1+"$@"}'='"$@"'
+  setopt NO_GLOB_SUBST
+else
+  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
+fi
+BIN_SH=xpg4; export BIN_SH # for Tru64
+DUALCASE=1; export DUALCASE # for MKS sh
+
+# NLS nuisances: We save the old values to restore during execute mode.
+# Only set LANG and LC_ALL to C if already set.
+# These must not be set unconditionally because not all systems understand
+# e.g. LANG=C (notably SCO).
+lt_user_locale=
+lt_safe_locale=
+for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES
+do
+  eval "if test \"\${$lt_var+set}\" = set; then
+          save_$lt_var=\$$lt_var
+          $lt_var=C
+	  export $lt_var
+	  lt_user_locale=\"$lt_var=\\\$save_\$lt_var; \$lt_user_locale\"
+	  lt_safe_locale=\"$lt_var=C; \$lt_safe_locale\"
+	fi"
+done
+
+$lt_unset CDPATH
+
+
+
+
+
+: ${CP="cp -f"}
+: ${ECHO="echo"}
+: ${EGREP="/bin/grep -E"}
+: ${FGREP="/bin/grep -F"}
+: ${GREP="/bin/grep"}
+: ${LN_S="ln -s"}
+: ${MAKE="make"}
+: ${MKDIR="mkdir"}
+: ${MV="mv -f"}
+: ${RM="rm -f"}
+: ${SED="/bin/sed"}
+: ${SHELL="${CONFIG_SHELL-/bin/sh}"}
+: ${Xsed="$SED -e 1s/^X//"}
+
+# Global variables:
+EXIT_SUCCESS=0
+EXIT_FAILURE=1
+EXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.
+EXIT_SKIP=77	  # $? = 77 is used to indicate a skipped test to automake.
+
+exit_status=$EXIT_SUCCESS
+
+# Make sure IFS has a sensible default
+lt_nl='
+'
+IFS=" 	$lt_nl"
+
+dirname="s,/[^/]*$,,"
+basename="s,^.*/,,"
+
+# func_dirname_and_basename file append nondir_replacement
+# perform func_basename and func_dirname in a single function
+# call:
+#   dirname:  Compute the dirname of FILE.  If nonempty,
+#             add APPEND to the result, otherwise set result
+#             to NONDIR_REPLACEMENT.
+#             value returned in "$func_dirname_result"
+#   basename: Compute filename of FILE.
+#             value retuned in "$func_basename_result"
+# Implementation must be kept synchronized with func_dirname
+# and func_basename. For efficiency, we do not delegate to
+# those functions but instead duplicate the functionality here.
+func_dirname_and_basename ()
+{
+  # Extract subdirectory from the argument.
+  func_dirname_result=`$ECHO "X${1}" | $Xsed -e "$dirname"`
+  if test "X$func_dirname_result" = "X${1}"; then
+    func_dirname_result="${3}"
+  else
+    func_dirname_result="$func_dirname_result${2}"
+  fi
+  func_basename_result=`$ECHO "X${1}" | $Xsed -e "$basename"`
+}
+
+# Generated shell functions inserted here.
+
+# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh
+# is ksh but when the shell is invoked as "sh" and the current value of
+# the _XPG environment variable is not equal to 1 (one), the special
+# positional parameter $0, within a function call, is the name of the
+# function.
+progpath="$0"
+
+# The name of this program:
+# In the unlikely event $progname began with a '-', it would play havoc with
+# func_echo (imagine progname=-n), so we prepend ./ in that case:
+func_dirname_and_basename "$progpath"
+progname=$func_basename_result
+case $progname in
+  -*) progname=./$progname ;;
+esac
+
+# Make sure we have an absolute path for reexecution:
+case $progpath in
+  [\\/]*|[A-Za-z]:\\*) ;;
+  *[\\/]*)
+     progdir=$func_dirname_result
+     progdir=`cd "$progdir" && pwd`
+     progpath="$progdir/$progname"
+     ;;
+  *)
+     save_IFS="$IFS"
+     IFS=:
+     for progdir in $PATH; do
+       IFS="$save_IFS"
+       test -x "$progdir/$progname" && break
+     done
+     IFS="$save_IFS"
+     test -n "$progdir" || progdir=`pwd`
+     progpath="$progdir/$progname"
+     ;;
+esac
+
+# Sed substitution that helps us do robust quoting.  It backslashifies
+# metacharacters that are still active within double-quoted strings.
+Xsed="${SED}"' -e 1s/^X//'
+sed_quote_subst='s/\([`"$\\]\)/\\\1/g'
+
+# Same as above, but do not quote variable references.
+double_quote_subst='s/\(["`\\]\)/\\\1/g'
+
+# Re-`\' parameter expansions in output of double_quote_subst that were
+# `\'-ed in input to the same.  If an odd number of `\' preceded a '$'
+# in input to double_quote_subst, that '$' was protected from expansion.
+# Since each input `\' is now two `\'s, look for any number of runs of
+# four `\'s followed by two `\'s and then a '$'.  `\' that '$'.
+bs='\\'
+bs2='\\\\'
+bs4='\\\\\\\\'
+dollar='\$'
+sed_double_backslash="\
+  s/$bs4/&\\
+/g
+  s/^$bs2$dollar/$bs&/
+  s/\\([^$bs]\\)$bs2$dollar/\\1$bs2$bs$dollar/g
+  s/\n//g"
+
+# Standard options:
+opt_dry_run=false
+opt_help=false
+opt_quiet=false
+opt_verbose=false
+opt_warning=:
+
+# func_echo arg...
+# Echo program name prefixed message, along with the current mode
+# name if it has been set yet.
+func_echo ()
+{
+    $ECHO "$progname${mode+: }$mode: $*"
+}
+
+# func_verbose arg...
+# Echo program name prefixed message in verbose mode only.
+func_verbose ()
+{
+    $opt_verbose && func_echo ${1+"$@"}
+
+    # A bug in bash halts the script if the last line of a function
+    # fails when set -e is in force, so we need another command to
+    # work around that:
+    :
+}
+
+# func_error arg...
+# Echo program name prefixed message to standard error.
+func_error ()
+{
+    $ECHO "$progname${mode+: }$mode: "${1+"$@"} 1>&2
+}
+
+# func_warning arg...
+# Echo program name prefixed warning message to standard error.
+func_warning ()
+{
+    $opt_warning && $ECHO "$progname${mode+: }$mode: warning: "${1+"$@"} 1>&2
+
+    # bash bug again:
+    :
+}
+
+# func_fatal_error arg...
+# Echo program name prefixed message to standard error, and exit.
+func_fatal_error ()
+{
+    func_error ${1+"$@"}
+    exit $EXIT_FAILURE
+}
+
+# func_fatal_help arg...
+# Echo program name prefixed message to standard error, followed by
+# a help hint, and exit.
+func_fatal_help ()
+{
+    func_error ${1+"$@"}
+    func_fatal_error "$help"
+}
+help="Try \`$progname --help' for more information."  ## default
+
+
+# func_grep expression filename
+# Check whether EXPRESSION matches any line of FILENAME, without output.
+func_grep ()
+{
+    $GREP "$1" "$2" >/dev/null 2>&1
+}
+
+
+# func_mkdir_p directory-path
+# Make sure the entire path to DIRECTORY-PATH is available.
+func_mkdir_p ()
+{
+    my_directory_path="$1"
+    my_dir_list=
+
+    if test -n "$my_directory_path" && test "$opt_dry_run" != ":"; then
+
+      # Protect directory names starting with `-'
+      case $my_directory_path in
+        -*) my_directory_path="./$my_directory_path" ;;
+      esac
+
+      # While some portion of DIR does not yet exist...
+      while test ! -d "$my_directory_path"; do
+        # ...make a list in topmost first order.  Use a colon delimited
+	# list incase some portion of path contains whitespace.
+        my_dir_list="$my_directory_path:$my_dir_list"
+
+        # If the last portion added has no slash in it, the list is done
+        case $my_directory_path in */*) ;; *) break ;; esac
+
+        # ...otherwise throw away the child directory and loop
+        my_directory_path=`$ECHO "X$my_directory_path" | $Xsed -e "$dirname"`
+      done
+      my_dir_list=`$ECHO "X$my_dir_list" | $Xsed -e 's,:*$,,'`
+
+      save_mkdir_p_IFS="$IFS"; IFS=':'
+      for my_dir in $my_dir_list; do
+	IFS="$save_mkdir_p_IFS"
+        # mkdir can fail with a `File exist' error if two processes
+        # try to create one of the directories concurrently.  Don't
+        # stop in that case!
+        $MKDIR "$my_dir" 2>/dev/null || :
+      done
+      IFS="$save_mkdir_p_IFS"
+
+      # Bail out if we (or some other process) failed to create a directory.
+      test -d "$my_directory_path" || \
+        func_fatal_error "Failed to create \`$1'"
+    fi
+}
+
+
+# func_mktempdir [string]
+# Make a temporary directory that won't clash with other running
+# libtool processes, and avoids race conditions if possible.  If
+# given, STRING is the basename for that directory.
+func_mktempdir ()
+{
+    my_template="${TMPDIR-/tmp}/${1-$progname}"
+
+    if test "$opt_dry_run" = ":"; then
+      # Return a directory name, but don't create it in dry-run mode
+      my_tmpdir="${my_template}-$$"
+    else
+
+      # If mktemp works, use that first and foremost
+      my_tmpdir=`mktemp -d "${my_template}-XXXXXXXX" 2>/dev/null`
+
+      if test ! -d "$my_tmpdir"; then
+        # Failing that, at least try and use $RANDOM to avoid a race
+        my_tmpdir="${my_template}-${RANDOM-0}$$"
+
+        save_mktempdir_umask=`umask`
+        umask 0077
+        $MKDIR "$my_tmpdir"
+        umask $save_mktempdir_umask
+      fi
+
+      # If we're not in dry-run mode, bomb out on failure
+      test -d "$my_tmpdir" || \
+        func_fatal_error "cannot create temporary directory \`$my_tmpdir'"
+    fi
+
+    $ECHO "X$my_tmpdir" | $Xsed
+}
+
+
+# func_quote_for_eval arg
+# Aesthetically quote ARG to be evaled later.
+# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT
+# is double-quoted, suitable for a subsequent eval, whereas
+# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters
+# which are still active within double quotes backslashified.
+func_quote_for_eval ()
+{
+    case $1 in
+      *[\\\`\"\$]*)
+	func_quote_for_eval_unquoted_result=`$ECHO "X$1" | $Xsed -e "$sed_quote_subst"` ;;
+      *)
+        func_quote_for_eval_unquoted_result="$1" ;;
+    esac
+
+    case $func_quote_for_eval_unquoted_result in
+      # Double-quote args containing shell metacharacters to delay
+      # word splitting, command substitution and and variable
+      # expansion for a subsequent eval.
+      # Many Bourne shells cannot handle close brackets correctly
+      # in scan sets, so we specify it separately.
+      *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
+        func_quote_for_eval_result="\"$func_quote_for_eval_unquoted_result\""
+        ;;
+      *)
+        func_quote_for_eval_result="$func_quote_for_eval_unquoted_result"
+    esac
+}
+
+
+# func_quote_for_expand arg
+# Aesthetically quote ARG to be evaled later; same as above,
+# but do not quote variable references.
+func_quote_for_expand ()
+{
+    case $1 in
+      *[\\\`\"]*)
+	my_arg=`$ECHO "X$1" | $Xsed \
+	    -e "$double_quote_subst" -e "$sed_double_backslash"` ;;
+      *)
+        my_arg="$1" ;;
+    esac
+
+    case $my_arg in
+      # Double-quote args containing shell metacharacters to delay
+      # word splitting and command substitution for a subsequent eval.
+      # Many Bourne shells cannot handle close brackets correctly
+      # in scan sets, so we specify it separately.
+      *[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
+        my_arg="\"$my_arg\""
+        ;;
+    esac
+
+    func_quote_for_expand_result="$my_arg"
+}
+
+
+# func_show_eval cmd [fail_exp]
+# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is
+# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP
+# is given, then evaluate it.
+func_show_eval ()
+{
+    my_cmd="$1"
+    my_fail_exp="${2-:}"
+
+    ${opt_silent-false} || {
+      func_quote_for_expand "$my_cmd"
+      eval "func_echo $func_quote_for_expand_result"
+    }
+
+    if ${opt_dry_run-false}; then :; else
+      eval "$my_cmd"
+      my_status=$?
+      if test "$my_status" -eq 0; then :; else
+	eval "(exit $my_status); $my_fail_exp"
+      fi
+    fi
+}
+
+
+# func_show_eval_locale cmd [fail_exp]
+# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is
+# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP
+# is given, then evaluate it.  Use the saved locale for evaluation.
+func_show_eval_locale ()
+{
+    my_cmd="$1"
+    my_fail_exp="${2-:}"
+
+    ${opt_silent-false} || {
+      func_quote_for_expand "$my_cmd"
+      eval "func_echo $func_quote_for_expand_result"
+    }
+
+    if ${opt_dry_run-false}; then :; else
+      eval "$lt_user_locale
+	    $my_cmd"
+      my_status=$?
+      eval "$lt_safe_locale"
+      if test "$my_status" -eq 0; then :; else
+	eval "(exit $my_status); $my_fail_exp"
+      fi
+    fi
+}
+
+
+
+
+
+# func_version
+# Echo version message to standard output and exit.
+func_version ()
+{
+    $SED -n '/^# '$PROGRAM' (GNU /,/# warranty; / {
+        s/^# //
+	s/^# *$//
+        s/\((C)\)[ 0-9,-]*\( [1-9][0-9]*\)/\1\2/
+        p
+     }' < "$progpath"
+     exit $?
+}
+
+# func_usage
+# Echo short help message to standard output and exit.
+func_usage ()
+{
+    $SED -n '/^# Usage:/,/# -h/ {
+        s/^# //
+	s/^# *$//
+	s/\$progname/'$progname'/
+	p
+    }' < "$progpath"
+    $ECHO
+    $ECHO "run \`$progname --help | more' for full usage"
+    exit $?
+}
+
+# func_help
+# Echo long help message to standard output and exit.
+func_help ()
+{
+    $SED -n '/^# Usage:/,/# Report bugs to/ {
+        s/^# //
+	s/^# *$//
+	s*\$progname*'$progname'*
+	s*\$host*'"$host"'*
+	s*\$SHELL*'"$SHELL"'*
+	s*\$LTCC*'"$LTCC"'*
+	s*\$LTCFLAGS*'"$LTCFLAGS"'*
+	s*\$LD*'"$LD"'*
+	s/\$with_gnu_ld/'"$with_gnu_ld"'/
+	s/\$automake_version/'"`(automake --version) 2>/dev/null |$SED 1q`"'/
+	s/\$autoconf_version/'"`(autoconf --version) 2>/dev/null |$SED 1q`"'/
+	p
+     }' < "$progpath"
+    exit $?
+}
+
+# func_missing_arg argname
+# Echo program name prefixed message to standard error and set global
+# exit_cmd.
+func_missing_arg ()
+{
+    func_error "missing argument for $1"
+    exit_cmd=exit
+}
+
+exit_cmd=:
+
+
+
+
+
+# Check that we have a working $ECHO.
+if test "X$1" = X--no-reexec; then
+  # Discard the --no-reexec flag, and continue.
+  shift
+elif test "X$1" = X--fallback-echo; then
+  # Avoid inline document here, it may be left over
+  :
+elif test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t'; then
+  # Yippee, $ECHO works!
+  :
+else
+  # Restart under the correct shell, and then maybe $ECHO will work.
+  exec $SHELL "$progpath" --no-reexec ${1+"$@"}
+fi
+
+if test "X$1" = X--fallback-echo; then
+  # used as fallback echo
+  shift
+  cat <<EOF
+$*
+EOF
+  exit $EXIT_SUCCESS
+fi
+
+magic="%%%MAGIC variable%%%"
+magic_exe="%%%MAGIC EXE variable%%%"
+
+# Global variables.
+# $mode is unset
+nonopt=
+execute_dlfiles=
+preserve_args=
+lo2o="s/\\.lo\$/.${objext}/"
+o2lo="s/\\.${objext}\$/.lo/"
+extracted_archives=
+extracted_serial=0
+
+opt_dry_run=false
+opt_duplicate_deps=false
+opt_silent=false
+opt_debug=:
+
+# If this variable is set in any of the actions, the command in it
+# will be execed at the end.  This prevents here-documents from being
+# left over by shells.
+exec_cmd=
+
+# func_fatal_configuration arg...
+# Echo program name prefixed message to standard error, followed by
+# a configuration failure hint, and exit.
+func_fatal_configuration ()
+{
+    func_error ${1+"$@"}
+    func_error "See the $PACKAGE documentation for more information."
+    func_fatal_error "Fatal configuration error."
+}
+
+
+# func_config
+# Display the configuration for all the tags in this script.
+func_config ()
+{
+    re_begincf='^# ### BEGIN LIBTOOL'
+    re_endcf='^# ### END LIBTOOL'
+
+    # Default configuration.
+    $SED "1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\$d" < "$progpath"
+
+    # Now print the configurations for the tags.
+    for tagname in $taglist; do
+      $SED -n "/$re_begincf TAG CONFIG: $tagname\$/,/$re_endcf TAG CONFIG: $tagname\$/p" < "$progpath"
+    done
+
+    exit $?
+}
+
+# func_features
+# Display the features supported by this script.
+func_features ()
+{
+    $ECHO "host: $host"
+    if test "$build_libtool_libs" = yes; then
+      $ECHO "enable shared libraries"
+    else
+      $ECHO "disable shared libraries"
+    fi
+    if test "$build_old_libs" = yes; then
+      $ECHO "enable static libraries"
+    else
+      $ECHO "disable static libraries"
+    fi
+
+    exit $?
+}
+
+# func_enable_tag tagname
+# Verify that TAGNAME is valid, and either flag an error and exit, or
+# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist
+# variable here.
+func_enable_tag ()
+{
+  # Global variable:
+  tagname="$1"
+
+  re_begincf="^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\$"
+  re_endcf="^# ### END LIBTOOL TAG CONFIG: $tagname\$"
+  sed_extractcf="/$re_begincf/,/$re_endcf/p"
+
+  # Validate tagname.
+  case $tagname in
+    *[!-_A-Za-z0-9,/]*)
+      func_fatal_error "invalid tag name: $tagname"
+      ;;
+  esac
+
+  # Don't test for the "default" C tag, as we know it's
+  # there but not specially marked.
+  case $tagname in
+    CC) ;;
+    *)
+      if $GREP "$re_begincf" "$progpath" >/dev/null 2>&1; then
+	taglist="$taglist $tagname"
+
+	# Evaluate the configuration.  Be careful to quote the path
+	# and the sed script, to avoid splitting on whitespace, but
+	# also don't use non-portable quotes within backquotes within
+	# quotes we have to do it in 2 steps:
+	extractedcf=`$SED -n -e "$sed_extractcf" < "$progpath"`
+	eval "$extractedcf"
+      else
+	func_error "ignoring unknown tag $tagname"
+      fi
+      ;;
+  esac
+}
+
+# Parse options once, thoroughly.  This comes as soon as possible in
+# the script to make things like `libtool --version' happen quickly.
+{
+
+  # Shorthand for --mode=foo, only valid as the first argument
+  case $1 in
+  clean|clea|cle|cl)
+    shift; set dummy --mode clean ${1+"$@"}; shift
+    ;;
+  compile|compil|compi|comp|com|co|c)
+    shift; set dummy --mode compile ${1+"$@"}; shift
+    ;;
+  execute|execut|execu|exec|exe|ex|e)
+    shift; set dummy --mode execute ${1+"$@"}; shift
+    ;;
+  finish|finis|fini|fin|fi|f)
+    shift; set dummy --mode finish ${1+"$@"}; shift
+    ;;
+  install|instal|insta|inst|ins|in|i)
+    shift; set dummy --mode install ${1+"$@"}; shift
+    ;;
+  link|lin|li|l)
+    shift; set dummy --mode link ${1+"$@"}; shift
+    ;;
+  uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)
+    shift; set dummy --mode uninstall ${1+"$@"}; shift
+    ;;
+  esac
+
+  # Parse non-mode specific arguments:
+  while test "$#" -gt 0; do
+    opt="$1"
+    shift
+
+    case $opt in
+      --config)		func_config					;;
+
+      --debug)		preserve_args="$preserve_args $opt"
+			func_echo "enabling shell trace mode"
+			opt_debug='set -x'
+			$opt_debug
+			;;
+
+      -dlopen)		test "$#" -eq 0 && func_missing_arg "$opt" && break
+			execute_dlfiles="$execute_dlfiles $1"
+			shift
+			;;
+
+      --dry-run | -n)	opt_dry_run=:					;;
+      --features)       func_features					;;
+      --finish)		mode="finish"					;;
+
+      --mode)		test "$#" -eq 0 && func_missing_arg "$opt" && break
+			case $1 in
+			  # Valid mode arguments:
+			  clean)	;;
+			  compile)	;;
+			  execute)	;;
+			  finish)	;;
+			  install)	;;
+			  link)		;;
+			  relink)	;;
+			  uninstall)	;;
+
+			  # Catch anything else as an error
+			  *) func_error "invalid argument for $opt"
+			     exit_cmd=exit
+			     break
+			     ;;
+		        esac
+
+			mode="$1"
+			shift
+			;;
+
+      --preserve-dup-deps)
+			opt_duplicate_deps=:				;;
+
+      --quiet|--silent)	preserve_args="$preserve_args $opt"
+			opt_silent=:
+			;;
+
+      --verbose| -v)	preserve_args="$preserve_args $opt"
+			opt_silent=false
+			;;
+
+      --tag)		test "$#" -eq 0 && func_missing_arg "$opt" && break
+			preserve_args="$preserve_args $opt $1"
+			func_enable_tag "$1"	# tagname is set here
+			shift
+			;;
+
+      # Separate optargs to long options:
+      -dlopen=*|--mode=*|--tag=*)
+			func_opt_split "$opt"
+			set dummy "$func_opt_split_opt" "$func_opt_split_arg" ${1+"$@"}
+			shift
+			;;
+
+      -\?|-h)		func_usage					;;
+      --help)		opt_help=:					;;
+      --version)	func_version					;;
+
+      -*)		func_fatal_help "unrecognized option \`$opt'"	;;
+
+      *)		nonopt="$opt"
+			break
+			;;
+    esac
+  done
+
+
+  case $host in
+    *cygwin* | *mingw* | *pw32* | *cegcc*)
+      # don't eliminate duplications in $postdeps and $predeps
+      opt_duplicate_compiler_generated_deps=:
+      ;;
+    *)
+      opt_duplicate_compiler_generated_deps=$opt_duplicate_deps
+      ;;
+  esac
+
+  # Having warned about all mis-specified options, bail out if
+  # anything was wrong.
+  $exit_cmd $EXIT_FAILURE
+}
+
+# func_check_version_match
+# Ensure that we are using m4 macros, and libtool script from the same
+# release of libtool.
+func_check_version_match ()
+{
+  if test "$package_revision" != "$macro_revision"; then
+    if test "$VERSION" != "$macro_version"; then
+      if test -z "$macro_version"; then
+        cat >&2 <<_LT_EOF
+$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the
+$progname: definition of this LT_INIT comes from an older release.
+$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION
+$progname: and run autoconf again.
+_LT_EOF
+      else
+        cat >&2 <<_LT_EOF
+$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the
+$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.
+$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION
+$progname: and run autoconf again.
+_LT_EOF
+      fi
+    else
+      cat >&2 <<_LT_EOF
+$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,
+$progname: but the definition of this LT_INIT comes from revision $macro_revision.
+$progname: You should recreate aclocal.m4 with macros from revision $package_revision
+$progname: of $PACKAGE $VERSION and run autoconf again.
+_LT_EOF
+    fi
+
+    exit $EXIT_MISMATCH
+  fi
+}
+
+
+## ----------- ##
+##    Main.    ##
+## ----------- ##
+
+$opt_help || {
+  # Sanity checks first:
+  func_check_version_match
+
+  if test "$build_libtool_libs" != yes && test "$build_old_libs" != yes; then
+    func_fatal_configuration "not configured to build any kind of library"
+  fi
+
+  test -z "$mode" && func_fatal_error "error: you must specify a MODE."
+
+
+  # Darwin sucks
+  eval std_shrext=\"$shrext_cmds\"
+
+
+  # Only execute mode is allowed to have -dlopen flags.
+  if test -n "$execute_dlfiles" && test "$mode" != execute; then
+    func_error "unrecognized option \`-dlopen'"
+    $ECHO "$help" 1>&2
+    exit $EXIT_FAILURE
+  fi
+
+  # Change the help message to a mode-specific one.
+  generic_help="$help"
+  help="Try \`$progname --help --mode=$mode' for more information."
+}
+
+
+# func_lalib_p file
+# True iff FILE is a libtool `.la' library or `.lo' object file.
+# This function is only a basic sanity check; it will hardly flush out
+# determined imposters.
+func_lalib_p ()
+{
+    test -f "$1" &&
+      $SED -e 4q "$1" 2>/dev/null \
+        | $GREP "^# Generated by .*$PACKAGE" > /dev/null 2>&1
+}
+
+# func_lalib_unsafe_p file
+# True iff FILE is a libtool `.la' library or `.lo' object file.
+# This function implements the same check as func_lalib_p without
+# resorting to external programs.  To this end, it redirects stdin and
+# closes it afterwards, without saving the original file descriptor.
+# As a safety measure, use it only where a negative result would be
+# fatal anyway.  Works if `file' does not exist.
+func_lalib_unsafe_p ()
+{
+    lalib_p=no
+    if test -f "$1" && test -r "$1" && exec 5<&0 <"$1"; then
+	for lalib_p_l in 1 2 3 4
+	do
+	    read lalib_p_line
+	    case "$lalib_p_line" in
+		\#\ Generated\ by\ *$PACKAGE* ) lalib_p=yes; break;;
+	    esac
+	done
+	exec 0<&5 5<&-
+    fi
+    test "$lalib_p" = yes
+}
+
+# func_ltwrapper_script_p file
+# True iff FILE is a libtool wrapper script
+# This function is only a basic sanity check; it will hardly flush out
+# determined imposters.
+func_ltwrapper_script_p ()
+{
+    func_lalib_p "$1"
+}
+
+# func_ltwrapper_executable_p file
+# True iff FILE is a libtool wrapper executable
+# This function is only a basic sanity check; it will hardly flush out
+# determined imposters.
+func_ltwrapper_executable_p ()
+{
+    func_ltwrapper_exec_suffix=
+    case $1 in
+    *.exe) ;;
+    *) func_ltwrapper_exec_suffix=.exe ;;
+    esac
+    $GREP "$magic_exe" "$1$func_ltwrapper_exec_suffix" >/dev/null 2>&1
+}
+
+# func_ltwrapper_scriptname file
+# Assumes file is an ltwrapper_executable
+# uses $file to determine the appropriate filename for a
+# temporary ltwrapper_script.
+func_ltwrapper_scriptname ()
+{
+    func_ltwrapper_scriptname_result=""
+    if func_ltwrapper_executable_p "$1"; then
+	func_dirname_and_basename "$1" "" "."
+	func_stripname '' '.exe' "$func_basename_result"
+	func_ltwrapper_scriptname_result="$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper"
+    fi
+}
+
+# func_ltwrapper_p file
+# True iff FILE is a libtool wrapper script or wrapper executable
+# This function is only a basic sanity check; it will hardly flush out
+# determined imposters.
+func_ltwrapper_p ()
+{
+    func_ltwrapper_script_p "$1" || func_ltwrapper_executable_p "$1"
+}
+
+
+# func_execute_cmds commands fail_cmd
+# Execute tilde-delimited COMMANDS.
+# If FAIL_CMD is given, eval that upon failure.
+# FAIL_CMD may read-access the current command in variable CMD!
+func_execute_cmds ()
+{
+    $opt_debug
+    save_ifs=$IFS; IFS='~'
+    for cmd in $1; do
+      IFS=$save_ifs
+      eval cmd=\"$cmd\"
+      func_show_eval "$cmd" "${2-:}"
+    done
+    IFS=$save_ifs
+}
+
+
+# func_source file
+# Source FILE, adding directory component if necessary.
+# Note that it is not necessary on cygwin/mingw to append a dot to
+# FILE even if both FILE and FILE.exe exist: automatic-append-.exe
+# behavior happens only for exec(3), not for open(2)!  Also, sourcing
+# `FILE.' does not work on cygwin managed mounts.
+func_source ()
+{
+    $opt_debug
+    case $1 in
+    */* | *\\*)	. "$1" ;;
+    *)		. "./$1" ;;
+    esac
+}
+
+
+# func_infer_tag arg
+# Infer tagged configuration to use if any are available and
+# if one wasn't chosen via the "--tag" command line option.
+# Only attempt this if the compiler in the base compile
+# command doesn't match the default compiler.
+# arg is usually of the form 'gcc ...'
+func_infer_tag ()
+{
+    $opt_debug
+    if test -n "$available_tags" && test -z "$tagname"; then
+      CC_quoted=
+      for arg in $CC; do
+        func_quote_for_eval "$arg"
+	CC_quoted="$CC_quoted $func_quote_for_eval_result"
+      done
+      case $@ in
+      # Blanks in the command may have been stripped by the calling shell,
+      # but not from the CC environment variable when configure was run.
+      " $CC "* | "$CC "* | " `$ECHO $CC` "* | "`$ECHO $CC` "* | " $CC_quoted"* | "$CC_quoted "* | " `$ECHO $CC_quoted` "* | "`$ECHO $CC_quoted` "*) ;;
+      # Blanks at the start of $base_compile will cause this to fail
+      # if we don't check for them as well.
+      *)
+	for z in $available_tags; do
+	  if $GREP "^# ### BEGIN LIBTOOL TAG CONFIG: $z$" < "$progpath" > /dev/null; then
+	    # Evaluate the configuration.
+	    eval "`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`"
+	    CC_quoted=
+	    for arg in $CC; do
+	      # Double-quote args containing other shell metacharacters.
+	      func_quote_for_eval "$arg"
+	      CC_quoted="$CC_quoted $func_quote_for_eval_result"
+	    done
+	    case "$@ " in
+	      " $CC "* | "$CC "* | " `$ECHO $CC` "* | "`$ECHO $CC` "* | " $CC_quoted"* | "$CC_quoted "* | " `$ECHO $CC_quoted` "* | "`$ECHO $CC_quoted` "*)
+	      # The compiler in the base compile command matches
+	      # the one in the tagged configuration.
+	      # Assume this is the tagged configuration we want.
+	      tagname=$z
+	      break
+	      ;;
+	    esac
+	  fi
+	done
+	# If $tagname still isn't set, then no tagged configuration
+	# was found and let the user know that the "--tag" command
+	# line option must be used.
+	if test -z "$tagname"; then
+	  func_echo "unable to infer tagged configuration"
+	  func_fatal_error "specify a tag with \`--tag'"
+#	else
+#	  func_verbose "using $tagname tagged configuration"
+	fi
+	;;
+      esac
+    fi
+}
+
+
+
+# func_write_libtool_object output_name pic_name nonpic_name
+# Create a libtool object file (analogous to a ".la" file),
+# but don't create it if we're doing a dry run.
+func_write_libtool_object ()
+{
+    write_libobj=${1}
+    if test "$build_libtool_libs" = yes; then
+      write_lobj=\'${2}\'
+    else
+      write_lobj=none
+    fi
+
+    if test "$build_old_libs" = yes; then
+      write_oldobj=\'${3}\'
+    else
+      write_oldobj=none
+    fi
+
+    $opt_dry_run || {
+      cat >${write_libobj}T <<EOF
+# $write_libobj - a libtool object file
+# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION
+#
+# Please DO NOT delete this file!
+# It is necessary for linking the library.
+
+# Name of the PIC object.
+pic_object=$write_lobj
+
+# Name of the non-PIC object
+non_pic_object=$write_oldobj
+
+EOF
+      $MV "${write_libobj}T" "${write_libobj}"
+    }
+}
+
+# func_mode_compile arg...
+func_mode_compile ()
+{
+    $opt_debug
+    # Get the compilation command and the source file.
+    base_compile=
+    srcfile="$nonopt"  #  always keep a non-empty value in "srcfile"
+    suppress_opt=yes
+    suppress_output=
+    arg_mode=normal
+    libobj=
+    later=
+    pie_flag=
+
+    for arg
+    do
+      case $arg_mode in
+      arg  )
+	# do not "continue".  Instead, add this to base_compile
+	lastarg="$arg"
+	arg_mode=normal
+	;;
+
+      target )
+	libobj="$arg"
+	arg_mode=normal
+	continue
+	;;
+
+      normal )
+	# Accept any command-line options.
+	case $arg in
+	-o)
+	  test -n "$libobj" && \
+	    func_fatal_error "you cannot specify \`-o' more than once"
+	  arg_mode=target
+	  continue
+	  ;;
+
+	-pie | -fpie | -fPIE)
+          pie_flag="$pie_flag $arg"
+	  continue
+	  ;;
+
+	-shared | -static | -prefer-pic | -prefer-non-pic)
+	  later="$later $arg"
+	  continue
+	  ;;
+
+	-no-suppress)
+	  suppress_opt=no
+	  continue
+	  ;;
+
+	-Xcompiler)
+	  arg_mode=arg  #  the next one goes into the "base_compile" arg list
+	  continue      #  The current "srcfile" will either be retained or
+	  ;;            #  replaced later.  I would guess that would be a bug.
+
+	-Wc,*)
+	  func_stripname '-Wc,' '' "$arg"
+	  args=$func_stripname_result
+	  lastarg=
+	  save_ifs="$IFS"; IFS=','
+	  for arg in $args; do
+	    IFS="$save_ifs"
+	    func_quote_for_eval "$arg"
+	    lastarg="$lastarg $func_quote_for_eval_result"
+	  done
+	  IFS="$save_ifs"
+	  func_stripname ' ' '' "$lastarg"
+	  lastarg=$func_stripname_result
+
+	  # Add the arguments to base_compile.
+	  base_compile="$base_compile $lastarg"
+	  continue
+	  ;;
+
+	*)
+	  # Accept the current argument as the source file.
+	  # The previous "srcfile" becomes the current argument.
+	  #
+	  lastarg="$srcfile"
+	  srcfile="$arg"
+	  ;;
+	esac  #  case $arg
+	;;
+      esac    #  case $arg_mode
+
+      # Aesthetically quote the previous argument.
+      func_quote_for_eval "$lastarg"
+      base_compile="$base_compile $func_quote_for_eval_result"
+    done # for arg
+
+    case $arg_mode in
+    arg)
+      func_fatal_error "you must specify an argument for -Xcompile"
+      ;;
+    target)
+      func_fatal_error "you must specify a target with \`-o'"
+      ;;
+    *)
+      # Get the name of the library object.
+      test -z "$libobj" && {
+	func_basename "$srcfile"
+	libobj="$func_basename_result"
+      }
+      ;;
+    esac
+
+    # Recognize several different file suffixes.
+    # If the user specifies -o file.o, it is replaced with file.lo
+    case $libobj in
+    *.[cCFSifmso] | \
+    *.ada | *.adb | *.ads | *.asm | \
+    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \
+    *.[fF][09]? | *.for | *.java | *.obj | *.sx)
+      func_xform "$libobj"
+      libobj=$func_xform_result
+      ;;
+    esac
+
+    case $libobj in
+    *.lo) func_lo2o "$libobj"; obj=$func_lo2o_result ;;
+    *)
+      func_fatal_error "cannot determine name of library object from \`$libobj'"
+      ;;
+    esac
+
+    func_infer_tag $base_compile
+
+    for arg in $later; do
+      case $arg in
+      -shared)
+	test "$build_libtool_libs" != yes && \
+	  func_fatal_configuration "can not build a shared library"
+	build_old_libs=no
+	continue
+	;;
+
+      -static)
+	build_libtool_libs=no
+	build_old_libs=yes
+	continue
+	;;
+
+      -prefer-pic)
+	pic_mode=yes
+	continue
+	;;
+
+      -prefer-non-pic)
+	pic_mode=no
+	continue
+	;;
+      esac
+    done
+
+    func_quote_for_eval "$libobj"
+    test "X$libobj" != "X$func_quote_for_eval_result" \
+      && $ECHO "X$libobj" | $GREP '[]~#^*{};<>?"'"'"'	 &()|`$[]' \
+      && func_warning "libobj name \`$libobj' may not contain shell special characters."
+    func_dirname_and_basename "$obj" "/" ""
+    objname="$func_basename_result"
+    xdir="$func_dirname_result"
+    lobj=${xdir}$objdir/$objname
+
+    test -z "$base_compile" && \
+      func_fatal_help "you must specify a compilation command"
+
+    # Delete any leftover library objects.
+    if test "$build_old_libs" = yes; then
+      removelist="$obj $lobj $libobj ${libobj}T"
+    else
+      removelist="$lobj $libobj ${libobj}T"
+    fi
+
+    # On Cygwin there's no "real" PIC flag so we must build both object types
+    case $host_os in
+    cygwin* | mingw* | pw32* | os2* | cegcc*)
+      pic_mode=default
+      ;;
+    esac
+    if test "$pic_mode" = no && test "$deplibs_check_method" != pass_all; then
+      # non-PIC code in shared libraries is not supported
+      pic_mode=default
+    fi
+
+    # Calculate the filename of the output object if compiler does
+    # not support -o with -c
+    if test "$compiler_c_o" = no; then
+      output_obj=`$ECHO "X$srcfile" | $Xsed -e 's%^.*/%%' -e 's%\.[^.]*$%%'`.${objext}
+      lockfile="$output_obj.lock"
+    else
+      output_obj=
+      need_locks=no
+      lockfile=
+    fi
+
+    # Lock this critical section if it is needed
+    # We use this script file to make the link, it avoids creating a new file
+    if test "$need_locks" = yes; then
+      until $opt_dry_run || ln "$progpath" "$lockfile" 2>/dev/null; do
+	func_echo "Waiting for $lockfile to be removed"
+	sleep 2
+      done
+    elif test "$need_locks" = warn; then
+      if test -f "$lockfile"; then
+	$ECHO "\
+*** ERROR, $lockfile exists and contains:
+`cat $lockfile 2>/dev/null`
+
+This indicates that another process is trying to use the same
+temporary object file, and libtool could not work around it because
+your compiler does not support \`-c' and \`-o' together.  If you
+repeat this compilation, it may succeed, by chance, but you had better
+avoid parallel builds (make -j) in this platform, or get a better
+compiler."
+
+	$opt_dry_run || $RM $removelist
+	exit $EXIT_FAILURE
+      fi
+      removelist="$removelist $output_obj"
+      $ECHO "$srcfile" > "$lockfile"
+    fi
+
+    $opt_dry_run || $RM $removelist
+    removelist="$removelist $lockfile"
+    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15
+
+    if test -n "$fix_srcfile_path"; then
+      eval srcfile=\"$fix_srcfile_path\"
+    fi
+    func_quote_for_eval "$srcfile"
+    qsrcfile=$func_quote_for_eval_result
+
+    # Only build a PIC object if we are building libtool libraries.
+    if test "$build_libtool_libs" = yes; then
+      # Without this assignment, base_compile gets emptied.
+      fbsd_hideous_sh_bug=$base_compile
+
+      if test "$pic_mode" != no; then
+	command="$base_compile $qsrcfile $pic_flag"
+      else
+	# Don't build PIC code
+	command="$base_compile $qsrcfile"
+      fi
+
+      func_mkdir_p "$xdir$objdir"
+
+      if test -z "$output_obj"; then
+	# Place PIC objects in $objdir
+	command="$command -o $lobj"
+      fi
+
+      func_show_eval_locale "$command"	\
+          'test -n "$output_obj" && $RM $removelist; exit $EXIT_FAILURE'
+
+      if test "$need_locks" = warn &&
+	 test "X`cat $lockfile 2>/dev/null`" != "X$srcfile"; then
+	$ECHO "\
+*** ERROR, $lockfile contains:
+`cat $lockfile 2>/dev/null`
+
+but it should contain:
+$srcfile
+
+This indicates that another process is trying to use the same
+temporary object file, and libtool could not work around it because
+your compiler does not support \`-c' and \`-o' together.  If you
+repeat this compilation, it may succeed, by chance, but you had better
+avoid parallel builds (make -j) in this platform, or get a better
+compiler."
+
+	$opt_dry_run || $RM $removelist
+	exit $EXIT_FAILURE
+      fi
+
+      # Just move the object if needed, then go on to compile the next one
+      if test -n "$output_obj" && test "X$output_obj" != "X$lobj"; then
+	func_show_eval '$MV "$output_obj" "$lobj"' \
+	  'error=$?; $opt_dry_run || $RM $removelist; exit $error'
+      fi
+
+      # Allow error messages only from the first compilation.
+      if test "$suppress_opt" = yes; then
+	suppress_output=' >/dev/null 2>&1'
+      fi
+    fi
+
+    # Only build a position-dependent object if we build old libraries.
+    if test "$build_old_libs" = yes; then
+      if test "$pic_mode" != yes; then
+	# Don't build PIC code
+	command="$base_compile $qsrcfile$pie_flag"
+      else
+	command="$base_compile $qsrcfile $pic_flag"
+      fi
+      if test "$compiler_c_o" = yes; then
+	command="$command -o $obj"
+      fi
+
+      # Suppress compiler output if we already did a PIC compilation.
+      command="$command$suppress_output"
+      func_show_eval_locale "$command" \
+        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'
+
+      if test "$need_locks" = warn &&
+	 test "X`cat $lockfile 2>/dev/null`" != "X$srcfile"; then
+	$ECHO "\
+*** ERROR, $lockfile contains:
+`cat $lockfile 2>/dev/null`
+
+but it should contain:
+$srcfile
+
+This indicates that another process is trying to use the same
+temporary object file, and libtool could not work around it because
+your compiler does not support \`-c' and \`-o' together.  If you
+repeat this compilation, it may succeed, by chance, but you had better
+avoid parallel builds (make -j) in this platform, or get a better
+compiler."
+
+	$opt_dry_run || $RM $removelist
+	exit $EXIT_FAILURE
+      fi
+
+      # Just move the object if needed
+      if test -n "$output_obj" && test "X$output_obj" != "X$obj"; then
+	func_show_eval '$MV "$output_obj" "$obj"' \
+	  'error=$?; $opt_dry_run || $RM $removelist; exit $error'
+      fi
+    fi
+
+    $opt_dry_run || {
+      func_write_libtool_object "$libobj" "$objdir/$objname" "$objname"
+
+      # Unlock the critical section if it was locked
+      if test "$need_locks" != no; then
+	removelist=$lockfile
+        $RM "$lockfile"
+      fi
+    }
+
+    exit $EXIT_SUCCESS
+}
+
+$opt_help || {
+test "$mode" = compile && func_mode_compile ${1+"$@"}
+}
+
+func_mode_help ()
+{
+    # We need to display help for each of the modes.
+    case $mode in
+      "")
+        # Generic help is extracted from the usage comments
+        # at the start of this file.
+        func_help
+        ;;
+
+      clean)
+        $ECHO \
+"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...
+
+Remove files from the build directory.
+
+RM is the name of the program to use to delete files associated with each FILE
+(typically \`/bin/rm').  RM-OPTIONS are options (such as \`-f') to be passed
+to RM.
+
+If FILE is a libtool library, object or program, all the files associated
+with it are deleted. Otherwise, only FILE itself is deleted using RM."
+        ;;
+
+      compile)
+      $ECHO \
+"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE
+
+Compile a source file into a libtool library object.
+
+This mode accepts the following additional options:
+
+  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE
+  -no-suppress      do not suppress compiler output for multiple passes
+  -prefer-pic       try to building PIC objects only
+  -prefer-non-pic   try to building non-PIC objects only
+  -shared           do not build a \`.o' file suitable for static linking
+  -static           only build a \`.o' file suitable for static linking
+
+COMPILE-COMMAND is a command to be used in creating a \`standard' object file
+from the given SOURCEFILE.
+
+The output file name is determined by removing the directory component from
+SOURCEFILE, then substituting the C source code suffix \`.c' with the
+library object suffix, \`.lo'."
+        ;;
+
+      execute)
+        $ECHO \
+"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...
+
+Automatically set library path, then run a program.
+
+This mode accepts the following additional options:
+
+  -dlopen FILE      add the directory containing FILE to the library path
+
+This mode sets the library path environment variable according to \`-dlopen'
+flags.
+
+If any of the ARGS are libtool executable wrappers, then they are translated
+into their corresponding uninstalled binary, and any of their required library
+directories are added to the library path.
+
+Then, COMMAND is executed, with ARGS as arguments."
+        ;;
+
+      finish)
+        $ECHO \
+"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...
+
+Complete the installation of libtool libraries.
+
+Each LIBDIR is a directory that contains libtool libraries.
+
+The commands that this mode executes may require superuser privileges.  Use
+the \`--dry-run' option if you just want to see what would be executed."
+        ;;
+
+      install)
+        $ECHO \
+"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...
+
+Install executables or libraries.
+
+INSTALL-COMMAND is the installation command.  The first component should be
+either the \`install' or \`cp' program.
+
+The following components of INSTALL-COMMAND are treated specially:
+
+  -inst-prefix PREFIX-DIR  Use PREFIX-DIR as a staging area for installation
+
+The rest of the components are interpreted as arguments to that command (only
+BSD-compatible install options are recognized)."
+        ;;
+
+      link)
+        $ECHO \
+"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...
+
+Link object files or libraries together to form another library, or to
+create an executable program.
+
+LINK-COMMAND is a command using the C compiler that you would use to create
+a program from several object files.
+
+The following components of LINK-COMMAND are treated specially:
+
+  -all-static       do not do any dynamic linking at all
+  -avoid-version    do not add a version suffix if possible
+  -dlopen FILE      \`-dlpreopen' FILE if it cannot be dlopened at runtime
+  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols
+  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)
+  -export-symbols SYMFILE
+                    try to export only the symbols listed in SYMFILE
+  -export-symbols-regex REGEX
+                    try to export only the symbols matching REGEX
+  -LLIBDIR          search LIBDIR for required installed libraries
+  -lNAME            OUTPUT-FILE requires the installed library libNAME
+  -module           build a library that can dlopened
+  -no-fast-install  disable the fast-install mode
+  -no-install       link a not-installable executable
+  -no-undefined     declare that a library does not refer to external symbols
+  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects
+  -objectlist FILE  Use a list of object files found in FILE to specify objects
+  -precious-files-regex REGEX
+                    don't remove output files matching REGEX
+  -release RELEASE  specify package release information
+  -rpath LIBDIR     the created library will eventually be installed in LIBDIR
+  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries
+  -shared           only do dynamic linking of libtool libraries
+  -shrext SUFFIX    override the standard shared library file extension
+  -static           do not do any dynamic linking of uninstalled libtool libraries
+  -static-libtool-libs
+                    do not do any dynamic linking of libtool libraries
+  -version-info CURRENT[:REVISION[:AGE]]
+                    specify library version info [each variable defaults to 0]
+  -weak LIBNAME     declare that the target provides the LIBNAME interface
+
+All other options (arguments beginning with \`-') are ignored.
+
+Every other argument is treated as a filename.  Files ending in \`.la' are
+treated as uninstalled libtool libraries, other files are standard or library
+object files.
+
+If the OUTPUT-FILE ends in \`.la', then a libtool library is created,
+only library objects (\`.lo' files) may be specified, and \`-rpath' is
+required, except when creating a convenience library.
+
+If OUTPUT-FILE ends in \`.a' or \`.lib', then a standard library is created
+using \`ar' and \`ranlib', or on Windows using \`lib'.
+
+If OUTPUT-FILE ends in \`.lo' or \`.${objext}', then a reloadable object file
+is created, otherwise an executable program is created."
+        ;;
+
+      uninstall)
+        $ECHO \
+"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...
+
+Remove libraries from an installation directory.
+
+RM is the name of the program to use to delete files associated with each FILE
+(typically \`/bin/rm').  RM-OPTIONS are options (such as \`-f') to be passed
+to RM.
+
+If FILE is a libtool library, all the files associated with it are deleted.
+Otherwise, only FILE itself is deleted using RM."
+        ;;
+
+      *)
+        func_fatal_help "invalid operation mode \`$mode'"
+        ;;
+    esac
+
+    $ECHO
+    $ECHO "Try \`$progname --help' for more information about other modes."
+
+    exit $?
+}
+
+  # Now that we've collected a possible --mode arg, show help if necessary
+  $opt_help && func_mode_help
+
+
+# func_mode_execute arg...
+func_mode_execute ()
+{
+    $opt_debug
+    # The first argument is the command name.
+    cmd="$nonopt"
+    test -z "$cmd" && \
+      func_fatal_help "you must specify a COMMAND"
+
+    # Handle -dlopen flags immediately.
+    for file in $execute_dlfiles; do
+      test -f "$file" \
+	|| func_fatal_help "\`$file' is not a file"
+
+      dir=
+      case $file in
+      *.la)
+	# Check to see that this really is a libtool archive.
+	func_lalib_unsafe_p "$file" \
+	  || func_fatal_help "\`$lib' is not a valid libtool archive"
+
+	# Read the libtool library.
+	dlname=
+	library_names=
+	func_source "$file"
+
+	# Skip this library if it cannot be dlopened.
+	if test -z "$dlname"; then
+	  # Warn if it was a shared library.
+	  test -n "$library_names" && \
+	    func_warning "\`$file' was not linked with \`-export-dynamic'"
+	  continue
+	fi
+
+	func_dirname "$file" "" "."
+	dir="$func_dirname_result"
+
+	if test -f "$dir/$objdir/$dlname"; then
+	  dir="$dir/$objdir"
+	else
+	  if test ! -f "$dir/$dlname"; then
+	    func_fatal_error "cannot find \`$dlname' in \`$dir' or \`$dir/$objdir'"
+	  fi
+	fi
+	;;
+
+      *.lo)
+	# Just add the directory containing the .lo file.
+	func_dirname "$file" "" "."
+	dir="$func_dirname_result"
+	;;
+
+      *)
+	func_warning "\`-dlopen' is ignored for non-libtool libraries and objects"
+	continue
+	;;
+      esac
+
+      # Get the absolute pathname.
+      absdir=`cd "$dir" && pwd`
+      test -n "$absdir" && dir="$absdir"
+
+      # Now add the directory to shlibpath_var.
+      if eval "test -z \"\$$shlibpath_var\""; then
+	eval "$shlibpath_var=\"\$dir\""
+      else
+	eval "$shlibpath_var=\"\$dir:\$$shlibpath_var\""
+      fi
+    done
+
+    # This variable tells wrapper scripts just to set shlibpath_var
+    # rather than running their programs.
+    libtool_execute_magic="$magic"
+
+    # Check if any of the arguments is a wrapper script.
+    args=
+    for file
+    do
+      case $file in
+      -*) ;;
+      *)
+	# Do a test to see if this is really a libtool program.
+	if func_ltwrapper_script_p "$file"; then
+	  func_source "$file"
+	  # Transform arg to wrapped name.
+	  file="$progdir/$program"
+	elif func_ltwrapper_executable_p "$file"; then
+	  func_ltwrapper_scriptname "$file"
+	  func_source "$func_ltwrapper_scriptname_result"
+	  # Transform arg to wrapped name.
+	  file="$progdir/$program"
+	fi
+	;;
+      esac
+      # Quote arguments (to preserve shell metacharacters).
+      func_quote_for_eval "$file"
+      args="$args $func_quote_for_eval_result"
+    done
+
+    if test "X$opt_dry_run" = Xfalse; then
+      if test -n "$shlibpath_var"; then
+	# Export the shlibpath_var.
+	eval "export $shlibpath_var"
+      fi
+
+      # Restore saved environment variables
+      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES
+      do
+	eval "if test \"\${save_$lt_var+set}\" = set; then
+                $lt_var=\$save_$lt_var; export $lt_var
+	      else
+		$lt_unset $lt_var
+	      fi"
+      done
+
+      # Now prepare to actually exec the command.
+      exec_cmd="\$cmd$args"
+    else
+      # Display what would be done.
+      if test -n "$shlibpath_var"; then
+	eval "\$ECHO \"\$shlibpath_var=\$$shlibpath_var\""
+	$ECHO "export $shlibpath_var"
+      fi
+      $ECHO "$cmd$args"
+      exit $EXIT_SUCCESS
+    fi
+}
+
+test "$mode" = execute && func_mode_execute ${1+"$@"}
+
+
+# func_mode_finish arg...
+func_mode_finish ()
+{
+    $opt_debug
+    libdirs="$nonopt"
+    admincmds=
+
+    if test -n "$finish_cmds$finish_eval" && test -n "$libdirs"; then
+      for dir
+      do
+	libdirs="$libdirs $dir"
+      done
+
+      for libdir in $libdirs; do
+	if test -n "$finish_cmds"; then
+	  # Do each command in the finish commands.
+	  func_execute_cmds "$finish_cmds" 'admincmds="$admincmds
+'"$cmd"'"'
+	fi
+	if test -n "$finish_eval"; then
+	  # Do the single finish_eval.
+	  eval cmds=\"$finish_eval\"
+	  $opt_dry_run || eval "$cmds" || admincmds="$admincmds
+       $cmds"
+	fi
+      done
+    fi
+
+    # Exit here if they wanted silent mode.
+    $opt_silent && exit $EXIT_SUCCESS
+
+    $ECHO "X----------------------------------------------------------------------" | $Xsed
+    $ECHO "Libraries have been installed in:"
+    for libdir in $libdirs; do
+      $ECHO "   $libdir"
+    done
+    $ECHO
+    $ECHO "If you ever happen to want to link against installed libraries"
+    $ECHO "in a given directory, LIBDIR, you must either use libtool, and"
+    $ECHO "specify the full pathname of the library, or use the \`-LLIBDIR'"
+    $ECHO "flag during linking and do at least one of the following:"
+    if test -n "$shlibpath_var"; then
+      $ECHO "   - add LIBDIR to the \`$shlibpath_var' environment variable"
+      $ECHO "     during execution"
+    fi
+    if test -n "$runpath_var"; then
+      $ECHO "   - add LIBDIR to the \`$runpath_var' environment variable"
+      $ECHO "     during linking"
+    fi
+    if test -n "$hardcode_libdir_flag_spec"; then
+      libdir=LIBDIR
+      eval flag=\"$hardcode_libdir_flag_spec\"
+
+      $ECHO "   - use the \`$flag' linker flag"
+    fi
+    if test -n "$admincmds"; then
+      $ECHO "   - have your system administrator run these commands:$admincmds"
+    fi
+    if test -f /etc/ld.so.conf; then
+      $ECHO "   - have your system administrator add LIBDIR to \`/etc/ld.so.conf'"
+    fi
+    $ECHO
+
+    $ECHO "See any operating system documentation about shared libraries for"
+    case $host in
+      solaris2.[6789]|solaris2.1[0-9])
+        $ECHO "more information, such as the ld(1), crle(1) and ld.so(8) manual"
+	$ECHO "pages."
+	;;
+      *)
+        $ECHO "more information, such as the ld(1) and ld.so(8) manual pages."
+        ;;
+    esac
+    $ECHO "X----------------------------------------------------------------------" | $Xsed
+    exit $EXIT_SUCCESS
+}
+
+test "$mode" = finish && func_mode_finish ${1+"$@"}
+
+
+# func_mode_install arg...
+func_mode_install ()
+{
+    $opt_debug
+    # There may be an optional sh(1) argument at the beginning of
+    # install_prog (especially on Windows NT).
+    if test "$nonopt" = "$SHELL" || test "$nonopt" = /bin/sh ||
+       # Allow the use of GNU shtool's install command.
+       $ECHO "X$nonopt" | $GREP shtool >/dev/null; then
+      # Aesthetically quote it.
+      func_quote_for_eval "$nonopt"
+      install_prog="$func_quote_for_eval_result "
+      arg=$1
+      shift
+    else
+      install_prog=
+      arg=$nonopt
+    fi
+
+    # The real first argument should be the name of the installation program.
+    # Aesthetically quote it.
+    func_quote_for_eval "$arg"
+    install_prog="$install_prog$func_quote_for_eval_result"
+
+    # We need to accept at least all the BSD install flags.
+    dest=
+    files=
+    opts=
+    prev=
+    install_type=
+    isdir=no
+    stripme=
+    for arg
+    do
+      if test -n "$dest"; then
+	files="$files $dest"
+	dest=$arg
+	continue
+      fi
+
+      case $arg in
+      -d) isdir=yes ;;
+      -f)
+	case " $install_prog " in
+	*[\\\ /]cp\ *) ;;
+	*) prev=$arg ;;
+	esac
+	;;
+      -g | -m | -o)
+	prev=$arg
+	;;
+      -s)
+	stripme=" -s"
+	continue
+	;;
+      -*)
+	;;
+      *)
+	# If the previous option needed an argument, then skip it.
+	if test -n "$prev"; then
+	  prev=
+	else
+	  dest=$arg
+	  continue
+	fi
+	;;
+      esac
+
+      # Aesthetically quote the argument.
+      func_quote_for_eval "$arg"
+      install_prog="$install_prog $func_quote_for_eval_result"
+    done
+
+    test -z "$install_prog" && \
+      func_fatal_help "you must specify an install program"
+
+    test -n "$prev" && \
+      func_fatal_help "the \`$prev' option requires an argument"
+
+    if test -z "$files"; then
+      if test -z "$dest"; then
+	func_fatal_help "no file or destination specified"
+      else
+	func_fatal_help "you must specify a destination"
+      fi
+    fi
+
+    # Strip any trailing slash from the destination.
+    func_stripname '' '/' "$dest"
+    dest=$func_stripname_result
+
+    # Check to see that the destination is a directory.
+    test -d "$dest" && isdir=yes
+    if test "$isdir" = yes; then
+      destdir="$dest"
+      destname=
+    else
+      func_dirname_and_basename "$dest" "" "."
+      destdir="$func_dirname_result"
+      destname="$func_basename_result"
+
+      # Not a directory, so check to see that there is only one file specified.
+      set dummy $files; shift
+      test "$#" -gt 1 && \
+	func_fatal_help "\`$dest' is not a directory"
+    fi
+    case $destdir in
+    [\\/]* | [A-Za-z]:[\\/]*) ;;
+    *)
+      for file in $files; do
+	case $file in
+	*.lo) ;;
+	*)
+	  func_fatal_help "\`$destdir' must be an absolute directory name"
+	  ;;
+	esac
+      done
+      ;;
+    esac
+
+    # This variable tells wrapper scripts just to set variables rather
+    # than running their programs.
+    libtool_install_magic="$magic"
+
+    staticlibs=
+    future_libdirs=
+    current_libdirs=
+    for file in $files; do
+
+      # Do each installation.
+      case $file in
+      *.$libext)
+	# Do the static libraries later.
+	staticlibs="$staticlibs $file"
+	;;
+
+      *.la)
+	# Check to see that this really is a libtool archive.
+	func_lalib_unsafe_p "$file" \
+	  || func_fatal_help "\`$file' is not a valid libtool archive"
+
+	library_names=
+	old_library=
+	relink_command=
+	func_source "$file"
+
+	# Add the libdir to current_libdirs if it is the destination.
+	if test "X$destdir" = "X$libdir"; then
+	  case "$current_libdirs " in
+	  *" $libdir "*) ;;
+	  *) current_libdirs="$current_libdirs $libdir" ;;
+	  esac
+	else
+	  # Note the libdir as a future libdir.
+	  case "$future_libdirs " in
+	  *" $libdir "*) ;;
+	  *) future_libdirs="$future_libdirs $libdir" ;;
+	  esac
+	fi
+
+	func_dirname "$file" "/" ""
+	dir="$func_dirname_result"
+	dir="$dir$objdir"
+
+	if test -n "$relink_command"; then
+	  # Determine the prefix the user has applied to our future dir.
+	  inst_prefix_dir=`$ECHO "X$destdir" | $Xsed -e "s%$libdir\$%%"`
+
+	  # Don't allow the user to place us outside of our expected
+	  # location b/c this prevents finding dependent libraries that
+	  # are installed to the same prefix.
+	  # At present, this check doesn't affect windows .dll's that
+	  # are installed into $libdir/../bin (currently, that works fine)
+	  # but it's something to keep an eye on.
+	  test "$inst_prefix_dir" = "$destdir" && \
+	    func_fatal_error "error: cannot install \`$file' to a directory not ending in $libdir"
+
+	  if test -n "$inst_prefix_dir"; then
+	    # Stick the inst_prefix_dir data into the link command.
+	    relink_command=`$ECHO "X$relink_command" | $Xsed -e "s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%"`
+	  else
+	    relink_command=`$ECHO "X$relink_command" | $Xsed -e "s%@inst_prefix_dir@%%"`
+	  fi
+
+	  func_warning "relinking \`$file'"
+	  func_show_eval "$relink_command" \
+	    'func_fatal_error "error: relink \`$file'\'' with the above command before installing it"'
+	fi
+
+	# See the names of the shared library.
+	set dummy $library_names; shift
+	if test -n "$1"; then
+	  realname="$1"
+	  shift
+
+	  srcname="$realname"
+	  test -n "$relink_command" && srcname="$realname"T
+
+	  # Install the shared library and build the symlinks.
+	  func_show_eval "$install_prog $dir/$srcname $destdir/$realname" \
+	      'exit $?'
+	  tstripme="$stripme"
+	  case $host_os in
+	  cygwin* | mingw* | pw32* | cegcc*)
+	    case $realname in
+	    *.dll.a)
+	      tstripme=""
+	      ;;
+	    esac
+	    ;;
+	  esac
+	  if test -n "$tstripme" && test -n "$striplib"; then
+	    func_show_eval "$striplib $destdir/$realname" 'exit $?'
+	  fi
+
+	  if test "$#" -gt 0; then
+	    # Delete the old symlinks, and create new ones.
+	    # Try `ln -sf' first, because the `ln' binary might depend on
+	    # the symlink we replace!  Solaris /bin/ln does not understand -f,
+	    # so we also need to try rm && ln -s.
+	    for linkname
+	    do
+	      test "$linkname" != "$realname" \
+		&& func_show_eval "(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })"
+	    done
+	  fi
+
+	  # Do each command in the postinstall commands.
+	  lib="$destdir/$realname"
+	  func_execute_cmds "$postinstall_cmds" 'exit $?'
+	fi
+
+	# Install the pseudo-library for information purposes.
+	func_basename "$file"
+	name="$func_basename_result"
+	instname="$dir/$name"i
+	func_show_eval "$install_prog $instname $destdir/$name" 'exit $?'
+
+	# Maybe install the static library, too.
+	test -n "$old_library" && staticlibs="$staticlibs $dir/$old_library"
+	;;
+
+      *.lo)
+	# Install (i.e. copy) a libtool object.
+
+	# Figure out destination file name, if it wasn't already specified.
+	if test -n "$destname"; then
+	  destfile="$destdir/$destname"
+	else
+	  func_basename "$file"
+	  destfile="$func_basename_result"
+	  destfile="$destdir/$destfile"
+	fi
+
+	# Deduce the name of the destination old-style object file.
+	case $destfile in
+	*.lo)
+	  func_lo2o "$destfile"
+	  staticdest=$func_lo2o_result
+	  ;;
+	*.$objext)
+	  staticdest="$destfile"
+	  destfile=
+	  ;;
+	*)
+	  func_fatal_help "cannot copy a libtool object to \`$destfile'"
+	  ;;
+	esac
+
+	# Install the libtool object if requested.
+	test -n "$destfile" && \
+	  func_show_eval "$install_prog $file $destfile" 'exit $?'
+
+	# Install the old object if enabled.
+	if test "$build_old_libs" = yes; then
+	  # Deduce the name of the old-style object file.
+	  func_lo2o "$file"
+	  staticobj=$func_lo2o_result
+	  func_show_eval "$install_prog \$staticobj \$staticdest" 'exit $?'
+	fi
+	exit $EXIT_SUCCESS
+	;;
+
+      *)
+	# Figure out destination file name, if it wasn't already specified.
+	if test -n "$destname"; then
+	  destfile="$destdir/$destname"
+	else
+	  func_basename "$file"
+	  destfile="$func_basename_result"
+	  destfile="$destdir/$destfile"
+	fi
+
+	# If the file is missing, and there is a .exe on the end, strip it
+	# because it is most likely a libtool script we actually want to
+	# install
+	stripped_ext=""
+	case $file in
+	  *.exe)
+	    if test ! -f "$file"; then
+	      func_stripname '' '.exe' "$file"
+	      file=$func_stripname_result
+	      stripped_ext=".exe"
+	    fi
+	    ;;
+	esac
+
+	# Do a test to see if this is really a libtool program.
+	case $host in
+	*cygwin* | *mingw*)
+	    if func_ltwrapper_executable_p "$file"; then
+	      func_ltwrapper_scriptname "$file"
+	      wrapper=$func_ltwrapper_scriptname_result
+	    else
+	      func_stripname '' '.exe' "$file"
+	      wrapper=$func_stripname_result
+	    fi
+	    ;;
+	*)
+	    wrapper=$file
+	    ;;
+	esac
+	if func_ltwrapper_script_p "$wrapper"; then
+	  notinst_deplibs=
+	  relink_command=
+
+	  func_source "$wrapper"
+
+	  # Check the variables that should have been set.
+	  test -z "$generated_by_libtool_version" && \
+	    func_fatal_error "invalid libtool wrapper script \`$wrapper'"
+
+	  finalize=yes
+	  for lib in $notinst_deplibs; do
+	    # Check to see that each library is installed.
+	    libdir=
+	    if test -f "$lib"; then
+	      func_source "$lib"
+	    fi
+	    libfile="$libdir/"`$ECHO "X$lib" | $Xsed -e 's%^.*/%%g'` ### testsuite: skip nested quoting test
+	    if test -n "$libdir" && test ! -f "$libfile"; then
+	      func_warning "\`$lib' has not been installed in \`$libdir'"
+	      finalize=no
+	    fi
+	  done
+
+	  relink_command=
+	  func_source "$wrapper"
+
+	  outputname=
+	  if test "$fast_install" = no && test -n "$relink_command"; then
+	    $opt_dry_run || {
+	      if test "$finalize" = yes; then
+	        tmpdir=`func_mktempdir`
+		func_basename "$file$stripped_ext"
+		file="$func_basename_result"
+	        outputname="$tmpdir/$file"
+	        # Replace the output file specification.
+	        relink_command=`$ECHO "X$relink_command" | $Xsed -e 's%@OUTPUT@%'"$outputname"'%g'`
+
+	        $opt_silent || {
+	          func_quote_for_expand "$relink_command"
+		  eval "func_echo $func_quote_for_expand_result"
+	        }
+	        if eval "$relink_command"; then :
+	          else
+		  func_error "error: relink \`$file' with the above command before installing it"
+		  $opt_dry_run || ${RM}r "$tmpdir"
+		  continue
+	        fi
+	        file="$outputname"
+	      else
+	        func_warning "cannot relink \`$file'"
+	      fi
+	    }
+	  else
+	    # Install the binary that we compiled earlier.
+	    file=`$ECHO "X$file$stripped_ext" | $Xsed -e "s%\([^/]*\)$%$objdir/\1%"`
+	  fi
+	fi
+
+	# remove .exe since cygwin /usr/bin/install will append another
+	# one anyway
+	case $install_prog,$host in
+	*/usr/bin/install*,*cygwin*)
+	  case $file:$destfile in
+	  *.exe:*.exe)
+	    # this is ok
+	    ;;
+	  *.exe:*)
+	    destfile=$destfile.exe
+	    ;;
+	  *:*.exe)
+	    func_stripname '' '.exe' "$destfile"
+	    destfile=$func_stripname_result
+	    ;;
+	  esac
+	  ;;
+	esac
+	func_show_eval "$install_prog\$stripme \$file \$destfile" 'exit $?'
+	$opt_dry_run || if test -n "$outputname"; then
+	  ${RM}r "$tmpdir"
+	fi
+	;;
+      esac
+    done
+
+    for file in $staticlibs; do
+      func_basename "$file"
+      name="$func_basename_result"
+
+      # Set up the ranlib parameters.
+      oldlib="$destdir/$name"
+
+      func_show_eval "$install_prog \$file \$oldlib" 'exit $?'
+
+      if test -n "$stripme" && test -n "$old_striplib"; then
+	func_show_eval "$old_striplib $oldlib" 'exit $?'
+      fi
+
+      # Do each command in the postinstall commands.
+      func_execute_cmds "$old_postinstall_cmds" 'exit $?'
+    done
+
+    test -n "$future_libdirs" && \
+      func_warning "remember to run \`$progname --finish$future_libdirs'"
+
+    if test -n "$current_libdirs"; then
+      # Maybe just do a dry run.
+      $opt_dry_run && current_libdirs=" -n$current_libdirs"
+      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'
+    else
+      exit $EXIT_SUCCESS
+    fi
+}
+
+test "$mode" = install && func_mode_install ${1+"$@"}
+
+
+# func_generate_dlsyms outputname originator pic_p
+# Extract symbols from dlprefiles and create ${outputname}S.o with
+# a dlpreopen symbol table.
+func_generate_dlsyms ()
+{
+    $opt_debug
+    my_outputname="$1"
+    my_originator="$2"
+    my_pic_p="${3-no}"
+    my_prefix=`$ECHO "$my_originator" | sed 's%[^a-zA-Z0-9]%_%g'`
+    my_dlsyms=
+
+    if test -n "$dlfiles$dlprefiles" || test "$dlself" != no; then
+      if test -n "$NM" && test -n "$global_symbol_pipe"; then
+	my_dlsyms="${my_outputname}S.c"
+      else
+	func_error "not configured to extract global symbols from dlpreopened files"
+      fi
+    fi
+
+    if test -n "$my_dlsyms"; then
+      case $my_dlsyms in
+      "") ;;
+      *.c)
+	# Discover the nlist of each of the dlfiles.
+	nlist="$output_objdir/${my_outputname}.nm"
+
+	func_show_eval "$RM $nlist ${nlist}S ${nlist}T"
+
+	# Parse the name list into a source file.
+	func_verbose "creating $output_objdir/$my_dlsyms"
+
+	$opt_dry_run || $ECHO > "$output_objdir/$my_dlsyms" "\
+/* $my_dlsyms - symbol resolution table for \`$my_outputname' dlsym emulation. */
+/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */
+
+#ifdef __cplusplus
+extern \"C\" {
+#endif
+
+/* External symbol declarations for the compiler. */\
+"
+
+	if test "$dlself" = yes; then
+	  func_verbose "generating symbol list for \`$output'"
+
+	  $opt_dry_run || echo ': @PROGRAM@ ' > "$nlist"
+
+	  # Add our own program objects to the symbol list.
+	  progfiles=`$ECHO "X$objs$old_deplibs" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
+	  for progfile in $progfiles; do
+	    func_verbose "extracting global C symbols from \`$progfile'"
+	    $opt_dry_run || eval "$NM $progfile | $global_symbol_pipe >> '$nlist'"
+	  done
+
+	  if test -n "$exclude_expsyms"; then
+	    $opt_dry_run || {
+	      eval '$EGREP -v " ($exclude_expsyms)$" "$nlist" > "$nlist"T'
+	      eval '$MV "$nlist"T "$nlist"'
+	    }
+	  fi
+
+	  if test -n "$export_symbols_regex"; then
+	    $opt_dry_run || {
+	      eval '$EGREP -e "$export_symbols_regex" "$nlist" > "$nlist"T'
+	      eval '$MV "$nlist"T "$nlist"'
+	    }
+	  fi
+
+	  # Prepare the list of exported symbols
+	  if test -z "$export_symbols"; then
+	    export_symbols="$output_objdir/$outputname.exp"
+	    $opt_dry_run || {
+	      $RM $export_symbols
+	      eval "${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \(.*\)$/\1/p' "'< "$nlist" > "$export_symbols"'
+	      case $host in
+	      *cygwin* | *mingw* | *cegcc* )
+                eval "echo EXPORTS "'> "$output_objdir/$outputname.def"'
+                eval 'cat "$export_symbols" >> "$output_objdir/$outputname.def"'
+	        ;;
+	      esac
+	    }
+	  else
+	    $opt_dry_run || {
+	      eval "${SED} -e 's/\([].[*^$]\)/\\\\\1/g' -e 's/^/ /' -e 's/$/$/'"' < "$export_symbols" > "$output_objdir/$outputname.exp"'
+	      eval '$GREP -f "$output_objdir/$outputname.exp" < "$nlist" > "$nlist"T'
+	      eval '$MV "$nlist"T "$nlist"'
+	      case $host in
+	        *cygwin | *mingw* | *cegcc* )
+	          eval "echo EXPORTS "'> "$output_objdir/$outputname.def"'
+	          eval 'cat "$nlist" >> "$output_objdir/$outputname.def"'
+	          ;;
+	      esac
+	    }
+	  fi
+	fi
+
+	for dlprefile in $dlprefiles; do
+	  func_verbose "extracting global C symbols from \`$dlprefile'"
+	  func_basename "$dlprefile"
+	  name="$func_basename_result"
+	  $opt_dry_run || {
+	    eval '$ECHO ": $name " >> "$nlist"'
+	    eval "$NM $dlprefile 2>/dev/null | $global_symbol_pipe >> '$nlist'"
+	  }
+	done
+
+	$opt_dry_run || {
+	  # Make sure we have at least an empty file.
+	  test -f "$nlist" || : > "$nlist"
+
+	  if test -n "$exclude_expsyms"; then
+	    $EGREP -v " ($exclude_expsyms)$" "$nlist" > "$nlist"T
+	    $MV "$nlist"T "$nlist"
+	  fi
+
+	  # Try sorting and uniquifying the output.
+	  if $GREP -v "^: " < "$nlist" |
+	      if sort -k 3 </dev/null >/dev/null 2>&1; then
+		sort -k 3
+	      else
+		sort +2
+	      fi |
+	      uniq > "$nlist"S; then
+	    :
+	  else
+	    $GREP -v "^: " < "$nlist" > "$nlist"S
+	  fi
+
+	  if test -f "$nlist"S; then
+	    eval "$global_symbol_to_cdecl"' < "$nlist"S >> "$output_objdir/$my_dlsyms"'
+	  else
+	    $ECHO '/* NONE */' >> "$output_objdir/$my_dlsyms"
+	  fi
+
+	  $ECHO >> "$output_objdir/$my_dlsyms" "\
+
+/* The mapping between symbol names and symbols.  */
+typedef struct {
+  const char *name;
+  void *address;
+} lt_dlsymlist;
+"
+	  case $host in
+	  *cygwin* | *mingw* | *cegcc* )
+	    $ECHO >> "$output_objdir/$my_dlsyms" "\
+/* DATA imports from DLLs on WIN32 con't be const, because
+   runtime relocations are performed -- see ld's documentation
+   on pseudo-relocs.  */"
+	    lt_dlsym_const= ;;
+	  *osf5*)
+	    echo >> "$output_objdir/$my_dlsyms" "\
+/* This system does not cope well with relocations in const data */"
+	    lt_dlsym_const= ;;
+	  *)
+	    lt_dlsym_const=const ;;
+	  esac
+
+	  $ECHO >> "$output_objdir/$my_dlsyms" "\
+extern $lt_dlsym_const lt_dlsymlist
+lt_${my_prefix}_LTX_preloaded_symbols[];
+$lt_dlsym_const lt_dlsymlist
+lt_${my_prefix}_LTX_preloaded_symbols[] =
+{\
+  { \"$my_originator\", (void *) 0 },"
+
+	  case $need_lib_prefix in
+	  no)
+	    eval "$global_symbol_to_c_name_address" < "$nlist" >> "$output_objdir/$my_dlsyms"
+	    ;;
+	  *)
+	    eval "$global_symbol_to_c_name_address_lib_prefix" < "$nlist" >> "$output_objdir/$my_dlsyms"
+	    ;;
+	  esac
+	  $ECHO >> "$output_objdir/$my_dlsyms" "\
+  {0, (void *) 0}
+};
+
+/* This works around a problem in FreeBSD linker */
+#ifdef FREEBSD_WORKAROUND
+static const void *lt_preloaded_setup() {
+  return lt_${my_prefix}_LTX_preloaded_symbols;
+}
+#endif
+
+#ifdef __cplusplus
+}
+#endif\
+"
+	} # !$opt_dry_run
+
+	pic_flag_for_symtable=
+	case "$compile_command " in
+	*" -static "*) ;;
+	*)
+	  case $host in
+	  # compiling the symbol table file with pic_flag works around
+	  # a FreeBSD bug that causes programs to crash when -lm is
+	  # linked before any other PIC object.  But we must not use
+	  # pic_flag when linking with -static.  The problem exists in
+	  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.
+	  *-*-freebsd2*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)
+	    pic_flag_for_symtable=" $pic_flag -DFREEBSD_WORKAROUND" ;;
+	  *-*-hpux*)
+	    pic_flag_for_symtable=" $pic_flag"  ;;
+	  *)
+	    if test "X$my_pic_p" != Xno; then
+	      pic_flag_for_symtable=" $pic_flag"
+	    fi
+	    ;;
+	  esac
+	  ;;
+	esac
+	symtab_cflags=
+	for arg in $LTCFLAGS; do
+	  case $arg in
+	  -pie | -fpie | -fPIE) ;;
+	  *) symtab_cflags="$symtab_cflags $arg" ;;
+	  esac
+	done
+
+	# Now compile the dynamic symbol file.
+	func_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable "$my_dlsyms")' 'exit $?'
+
+	# Clean up the generated files.
+	func_show_eval '$RM "$output_objdir/$my_dlsyms" "$nlist" "${nlist}S" "${nlist}T"'
+
+	# Transform the symbol file into the correct name.
+	symfileobj="$output_objdir/${my_outputname}S.$objext"
+	case $host in
+	*cygwin* | *mingw* | *cegcc* )
+	  if test -f "$output_objdir/$my_outputname.def"; then
+	    compile_command=`$ECHO "X$compile_command" | $Xsed -e "s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%"`
+	    finalize_command=`$ECHO "X$finalize_command" | $Xsed -e "s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%"`
+	  else
+	    compile_command=`$ECHO "X$compile_command" | $Xsed -e "s%@SYMFILE@%$symfileobj%"`
+	    finalize_command=`$ECHO "X$finalize_command" | $Xsed -e "s%@SYMFILE@%$symfileobj%"`
+	  fi
+	  ;;
+	*)
+	  compile_command=`$ECHO "X$compile_command" | $Xsed -e "s%@SYMFILE@%$symfileobj%"`
+	  finalize_command=`$ECHO "X$finalize_command" | $Xsed -e "s%@SYMFILE@%$symfileobj%"`
+	  ;;
+	esac
+	;;
+      *)
+	func_fatal_error "unknown suffix for \`$my_dlsyms'"
+	;;
+      esac
+    else
+      # We keep going just in case the user didn't refer to
+      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe
+      # really was required.
+
+      # Nullify the symbol file.
+      compile_command=`$ECHO "X$compile_command" | $Xsed -e "s% @SYMFILE@%%"`
+      finalize_command=`$ECHO "X$finalize_command" | $Xsed -e "s% @SYMFILE@%%"`
+    fi
+}
+
+# func_win32_libid arg
+# return the library type of file 'arg'
+#
+# Need a lot of goo to handle *both* DLLs and import libs
+# Has to be a shell function in order to 'eat' the argument
+# that is supplied when $file_magic_command is called.
+func_win32_libid ()
+{
+  $opt_debug
+  win32_libid_type="unknown"
+  win32_fileres=`file -L $1 2>/dev/null`
+  case $win32_fileres in
+  *ar\ archive\ import\ library*) # definitely import
+    win32_libid_type="x86 archive import"
+    ;;
+  *ar\ archive*) # could be an import, or static
+    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |
+       $EGREP 'file format pe-i386(.*architecture: i386)?' >/dev/null ; then
+      win32_nmres=`eval $NM -f posix -A $1 |
+	$SED -n -e '
+	    1,100{
+		/ I /{
+		    s,.*,import,
+		    p
+		    q
+		}
+	    }'`
+      case $win32_nmres in
+      import*)  win32_libid_type="x86 archive import";;
+      *)        win32_libid_type="x86 archive static";;
+      esac
+    fi
+    ;;
+  *DLL*)
+    win32_libid_type="x86 DLL"
+    ;;
+  *executable*) # but shell scripts are "executable" too...
+    case $win32_fileres in
+    *MS\ Windows\ PE\ Intel*)
+      win32_libid_type="x86 DLL"
+      ;;
+    esac
+    ;;
+  esac
+  $ECHO "$win32_libid_type"
+}
+
+
+
+# func_extract_an_archive dir oldlib
+func_extract_an_archive ()
+{
+    $opt_debug
+    f_ex_an_ar_dir="$1"; shift
+    f_ex_an_ar_oldlib="$1"
+    func_show_eval "(cd \$f_ex_an_ar_dir && $AR x \"\$f_ex_an_ar_oldlib\")" 'exit $?'
+    if ($AR t "$f_ex_an_ar_oldlib" | sort | sort -uc >/dev/null 2>&1); then
+     :
+    else
+      func_fatal_error "object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib"
+    fi
+}
+
+
+# func_extract_archives gentop oldlib ...
+func_extract_archives ()
+{
+    $opt_debug
+    my_gentop="$1"; shift
+    my_oldlibs=${1+"$@"}
+    my_oldobjs=""
+    my_xlib=""
+    my_xabs=""
+    my_xdir=""
+
+    for my_xlib in $my_oldlibs; do
+      # Extract the objects.
+      case $my_xlib in
+	[\\/]* | [A-Za-z]:[\\/]*) my_xabs="$my_xlib" ;;
+	*) my_xabs=`pwd`"/$my_xlib" ;;
+      esac
+      func_basename "$my_xlib"
+      my_xlib="$func_basename_result"
+      my_xlib_u=$my_xlib
+      while :; do
+        case " $extracted_archives " in
+	*" $my_xlib_u "*)
+	  func_arith $extracted_serial + 1
+	  extracted_serial=$func_arith_result
+	  my_xlib_u=lt$extracted_serial-$my_xlib ;;
+	*) break ;;
+	esac
+      done
+      extracted_archives="$extracted_archives $my_xlib_u"
+      my_xdir="$my_gentop/$my_xlib_u"
+
+      func_mkdir_p "$my_xdir"
+
+      case $host in
+      *-darwin*)
+	func_verbose "Extracting $my_xabs"
+	# Do not bother doing anything if just a dry run
+	$opt_dry_run || {
+	  darwin_orig_dir=`pwd`
+	  cd $my_xdir || exit $?
+	  darwin_archive=$my_xabs
+	  darwin_curdir=`pwd`
+	  darwin_base_archive=`basename "$darwin_archive"`
+	  darwin_arches=`$LIPO -info "$darwin_archive" 2>/dev/null | $GREP Architectures 2>/dev/null || true`
+	  if test -n "$darwin_arches"; then
+	    darwin_arches=`$ECHO "$darwin_arches" | $SED -e 's/.*are://'`
+	    darwin_arch=
+	    func_verbose "$darwin_base_archive has multiple architectures $darwin_arches"
+	    for darwin_arch in  $darwin_arches ; do
+	      func_mkdir_p "unfat-$$/${darwin_base_archive}-${darwin_arch}"
+	      $LIPO -thin $darwin_arch -output "unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}" "${darwin_archive}"
+	      cd "unfat-$$/${darwin_base_archive}-${darwin_arch}"
+	      func_extract_an_archive "`pwd`" "${darwin_base_archive}"
+	      cd "$darwin_curdir"
+	      $RM "unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}"
+	    done # $darwin_arches
+            ## Okay now we've a bunch of thin objects, gotta fatten them up :)
+	    darwin_filelist=`find unfat-$$ -type f -name \*.o -print -o -name \*.lo -print | $SED -e "$basename" | sort -u`
+	    darwin_file=
+	    darwin_files=
+	    for darwin_file in $darwin_filelist; do
+	      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`
+	      $LIPO -create -output "$darwin_file" $darwin_files
+	    done # $darwin_filelist
+	    $RM -rf unfat-$$
+	    cd "$darwin_orig_dir"
+	  else
+	    cd $darwin_orig_dir
+	    func_extract_an_archive "$my_xdir" "$my_xabs"
+	  fi # $darwin_arches
+	} # !$opt_dry_run
+	;;
+      *)
+        func_extract_an_archive "$my_xdir" "$my_xabs"
+	;;
+      esac
+      my_oldobjs="$my_oldobjs "`find $my_xdir -name \*.$objext -print -o -name \*.lo -print | $NL2SP`
+    done
+
+    func_extract_archives_result="$my_oldobjs"
+}
+
+
+
+# func_emit_wrapper_part1 [arg=no]
+#
+# Emit the first part of a libtool wrapper script on stdout.
+# For more information, see the description associated with
+# func_emit_wrapper(), below.
+func_emit_wrapper_part1 ()
+{
+	func_emit_wrapper_part1_arg1=no
+	if test -n "$1" ; then
+	  func_emit_wrapper_part1_arg1=$1
+	fi
+
+	$ECHO "\
+#! $SHELL
+
+# $output - temporary wrapper script for $objdir/$outputname
+# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION
+#
+# The $output program cannot be directly executed until all the libtool
+# libraries that it depends on are installed.
+#
+# This wrapper script should never be moved out of the build directory.
+# If it is, it will not operate correctly.
+
+# Sed substitution that helps us do robust quoting.  It backslashifies
+# metacharacters that are still active within double-quoted strings.
+Xsed='${SED} -e 1s/^X//'
+sed_quote_subst='$sed_quote_subst'
+
+# Be Bourne compatible
+if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then
+  emulate sh
+  NULLCMD=:
+  # Zsh 3.x and 4.x performs word splitting on \${1+\"\$@\"}, which
+  # is contrary to our usage.  Disable this feature.
+  alias -g '\${1+\"\$@\"}'='\"\$@\"'
+  setopt NO_GLOB_SUBST
+else
+  case \`(set -o) 2>/dev/null\` in *posix*) set -o posix;; esac
+fi
+BIN_SH=xpg4; export BIN_SH # for Tru64
+DUALCASE=1; export DUALCASE # for MKS sh
+
+# The HP-UX ksh and POSIX shell print the target directory to stdout
+# if CDPATH is set.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+relink_command=\"$relink_command\"
+
+# This environment variable determines our operation mode.
+if test \"\$libtool_install_magic\" = \"$magic\"; then
+  # install mode needs the following variables:
+  generated_by_libtool_version='$macro_version'
+  notinst_deplibs='$notinst_deplibs'
+else
+  # When we are sourced in execute mode, \$file and \$ECHO are already set.
+  if test \"\$libtool_execute_magic\" != \"$magic\"; then
+    ECHO=\"$qecho\"
+    file=\"\$0\"
+    # Make sure echo works.
+    if test \"X\$1\" = X--no-reexec; then
+      # Discard the --no-reexec flag, and continue.
+      shift
+    elif test \"X\`{ \$ECHO '\t'; } 2>/dev/null\`\" = 'X\t'; then
+      # Yippee, \$ECHO works!
+      :
+    else
+      # Restart under the correct shell, and then maybe \$ECHO will work.
+      exec $SHELL \"\$0\" --no-reexec \${1+\"\$@\"}
+    fi
+  fi\
+"
+	$ECHO "\
+
+  # Find the directory that this script lives in.
+  thisdir=\`\$ECHO \"X\$file\" | \$Xsed -e 's%/[^/]*$%%'\`
+  test \"x\$thisdir\" = \"x\$file\" && thisdir=.
+
+  # Follow symbolic links until we get to the real thisdir.
+  file=\`ls -ld \"\$file\" | ${SED} -n 's/.*-> //p'\`
+  while test -n \"\$file\"; do
+    destdir=\`\$ECHO \"X\$file\" | \$Xsed -e 's%/[^/]*\$%%'\`
+
+    # If there was a directory component, then change thisdir.
+    if test \"x\$destdir\" != \"x\$file\"; then
+      case \"\$destdir\" in
+      [\\\\/]* | [A-Za-z]:[\\\\/]*) thisdir=\"\$destdir\" ;;
+      *) thisdir=\"\$thisdir/\$destdir\" ;;
+      esac
+    fi
+
+    file=\`\$ECHO \"X\$file\" | \$Xsed -e 's%^.*/%%'\`
+    file=\`ls -ld \"\$thisdir/\$file\" | ${SED} -n 's/.*-> //p'\`
+  done
+"
+}
+# end: func_emit_wrapper_part1
+
+# func_emit_wrapper_part2 [arg=no]
+#
+# Emit the second part of a libtool wrapper script on stdout.
+# For more information, see the description associated with
+# func_emit_wrapper(), below.
+func_emit_wrapper_part2 ()
+{
+	func_emit_wrapper_part2_arg1=no
+	if test -n "$1" ; then
+	  func_emit_wrapper_part2_arg1=$1
+	fi
+
+	$ECHO "\
+
+  # Usually 'no', except on cygwin/mingw when embedded into
+  # the cwrapper.
+  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_part2_arg1
+  if test \"\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\" = \"yes\"; then
+    # special case for '.'
+    if test \"\$thisdir\" = \".\"; then
+      thisdir=\`pwd\`
+    fi
+    # remove .libs from thisdir
+    case \"\$thisdir\" in
+    *[\\\\/]$objdir ) thisdir=\`\$ECHO \"X\$thisdir\" | \$Xsed -e 's%[\\\\/][^\\\\/]*$%%'\` ;;
+    $objdir )   thisdir=. ;;
+    esac
+  fi
+
+  # Try to get the absolute directory name.
+  absdir=\`cd \"\$thisdir\" && pwd\`
+  test -n \"\$absdir\" && thisdir=\"\$absdir\"
+"
+
+	if test "$fast_install" = yes; then
+	  $ECHO "\
+  program=lt-'$outputname'$exeext
+  progdir=\"\$thisdir/$objdir\"
+
+  if test ! -f \"\$progdir/\$program\" ||
+     { file=\`ls -1dt \"\$progdir/\$program\" \"\$progdir/../\$program\" 2>/dev/null | ${SED} 1q\`; \\
+       test \"X\$file\" != \"X\$progdir/\$program\"; }; then
+
+    file=\"\$\$-\$program\"
+
+    if test ! -d \"\$progdir\"; then
+      $MKDIR \"\$progdir\"
+    else
+      $RM \"\$progdir/\$file\"
+    fi"
+
+	  $ECHO "\
+
+    # relink executable if necessary
+    if test -n \"\$relink_command\"; then
+      if relink_command_output=\`eval \$relink_command 2>&1\`; then :
+      else
+	$ECHO \"\$relink_command_output\" >&2
+	$RM \"\$progdir/\$file\"
+	exit 1
+      fi
+    fi
+
+    $MV \"\$progdir/\$file\" \"\$progdir/\$program\" 2>/dev/null ||
+    { $RM \"\$progdir/\$program\";
+      $MV \"\$progdir/\$file\" \"\$progdir/\$program\"; }
+    $RM \"\$progdir/\$file\"
+  fi"
+	else
+	  $ECHO "\
+  program='$outputname'
+  progdir=\"\$thisdir/$objdir\"
+"
+	fi
+
+	$ECHO "\
+
+  if test -f \"\$progdir/\$program\"; then"
+
+	# Export our shlibpath_var if we have one.
+	if test "$shlibpath_overrides_runpath" = yes && test -n "$shlibpath_var" && test -n "$temp_rpath"; then
+	  $ECHO "\
+    # Add our own library path to $shlibpath_var
+    $shlibpath_var=\"$temp_rpath\$$shlibpath_var\"
+
+    # Some systems cannot cope with colon-terminated $shlibpath_var
+    # The second colon is a workaround for a bug in BeOS R4 sed
+    $shlibpath_var=\`\$ECHO \"X\$$shlibpath_var\" | \$Xsed -e 's/::*\$//'\`
+
+    export $shlibpath_var
+"
+	fi
+
+	# fixup the dll searchpath if we need to.
+	if test -n "$dllsearchpath"; then
+	  $ECHO "\
+    # Add the dll search path components to the executable PATH
+    PATH=$dllsearchpath:\$PATH
+"
+	fi
+
+	$ECHO "\
+    if test \"\$libtool_execute_magic\" != \"$magic\"; then
+      # Run the actual program with our arguments.
+"
+	case $host in
+	# Backslashes separate directories on plain windows
+	*-*-mingw | *-*-os2* | *-cegcc*)
+	  $ECHO "\
+      exec \"\$progdir\\\\\$program\" \${1+\"\$@\"}
+"
+	  ;;
+
+	*)
+	  $ECHO "\
+      exec \"\$progdir/\$program\" \${1+\"\$@\"}
+"
+	  ;;
+	esac
+	$ECHO "\
+      \$ECHO \"\$0: cannot exec \$program \$*\" 1>&2
+      exit 1
+    fi
+  else
+    # The program doesn't exist.
+    \$ECHO \"\$0: error: \\\`\$progdir/\$program' does not exist\" 1>&2
+    \$ECHO \"This script is just a wrapper for \$program.\" 1>&2
+    $ECHO \"See the $PACKAGE documentation for more information.\" 1>&2
+    exit 1
+  fi
+fi\
+"
+}
+# end: func_emit_wrapper_part2
+
+
+# func_emit_wrapper [arg=no]
+#
+# Emit a libtool wrapper script on stdout.
+# Don't directly open a file because we may want to
+# incorporate the script contents within a cygwin/mingw
+# wrapper executable.  Must ONLY be called from within
+# func_mode_link because it depends on a number of variables
+# set therein.
+#
+# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR
+# variable will take.  If 'yes', then the emitted script
+# will assume that the directory in which it is stored is
+# the $objdir directory.  This is a cygwin/mingw-specific
+# behavior.
+func_emit_wrapper ()
+{
+	func_emit_wrapper_arg1=no
+	if test -n "$1" ; then
+	  func_emit_wrapper_arg1=$1
+	fi
+
+	# split this up so that func_emit_cwrapperexe_src
+	# can call each part independently.
+	func_emit_wrapper_part1 "${func_emit_wrapper_arg1}"
+	func_emit_wrapper_part2 "${func_emit_wrapper_arg1}"
+}
+
+
+# func_to_host_path arg
+#
+# Convert paths to host format when used with build tools.
+# Intended for use with "native" mingw (where libtool itself
+# is running under the msys shell), or in the following cross-
+# build environments:
+#    $build          $host
+#    mingw (msys)    mingw  [e.g. native]
+#    cygwin          mingw
+#    *nix + wine     mingw
+# where wine is equipped with the `winepath' executable.
+# In the native mingw case, the (msys) shell automatically
+# converts paths for any non-msys applications it launches,
+# but that facility isn't available from inside the cwrapper.
+# Similar accommodations are necessary for $host mingw and
+# $build cygwin.  Calling this function does no harm for other
+# $host/$build combinations not listed above.
+#
+# ARG is the path (on $build) that should be converted to
+# the proper representation for $host. The result is stored
+# in $func_to_host_path_result.
+func_to_host_path ()
+{
+  func_to_host_path_result="$1"
+  if test -n "$1" ; then
+    case $host in
+      *mingw* )
+        lt_sed_naive_backslashify='s|\\\\*|\\|g;s|/|\\|g;s|\\|\\\\|g'
+        case $build in
+          *mingw* ) # actually, msys
+            # awkward: cmd appends spaces to result
+            lt_sed_strip_trailing_spaces="s/[ ]*\$//"
+            func_to_host_path_tmp1=`( cmd //c echo "$1" |\
+              $SED -e "$lt_sed_strip_trailing_spaces" ) 2>/dev/null || echo ""`
+            func_to_host_path_result=`echo "$func_to_host_path_tmp1" |\
+              $SED -e "$lt_sed_naive_backslashify"`
+            ;;
+          *cygwin* )
+            func_to_host_path_tmp1=`cygpath -w "$1"`
+            func_to_host_path_result=`echo "$func_to_host_path_tmp1" |\
+              $SED -e "$lt_sed_naive_backslashify"`
+            ;;
+          * )
+            # Unfortunately, winepath does not exit with a non-zero
+            # error code, so we are forced to check the contents of
+            # stdout. On the other hand, if the command is not
+            # found, the shell will set an exit code of 127 and print
+            # *an error message* to stdout. So we must check for both
+            # error code of zero AND non-empty stdout, which explains
+            # the odd construction:
+            func_to_host_path_tmp1=`winepath -w "$1" 2>/dev/null`
+            if test "$?" -eq 0 && test -n "${func_to_host_path_tmp1}"; then
+              func_to_host_path_result=`echo "$func_to_host_path_tmp1" |\
+                $SED -e "$lt_sed_naive_backslashify"`
+            else
+              # Allow warning below.
+              func_to_host_path_result=""
+            fi
+            ;;
+        esac
+        if test -z "$func_to_host_path_result" ; then
+          func_error "Could not determine host path corresponding to"
+          func_error "  '$1'"
+          func_error "Continuing, but uninstalled executables may not work."
+          # Fallback:
+          func_to_host_path_result="$1"
+        fi
+        ;;
+    esac
+  fi
+}
+# end: func_to_host_path
+
+# func_to_host_pathlist arg
+#
+# Convert pathlists to host format when used with build tools.
+# See func_to_host_path(), above. This function supports the
+# following $build/$host combinations (but does no harm for
+# combinations not listed here):
+#    $build          $host
+#    mingw (msys)    mingw  [e.g. native]
+#    cygwin          mingw
+#    *nix + wine     mingw
+#
+# Path separators are also converted from $build format to
+# $host format. If ARG begins or ends with a path separator
+# character, it is preserved (but converted to $host format)
+# on output.
+#
+# ARG is a pathlist (on $build) that should be converted to
+# the proper representation on $host. The result is stored
+# in $func_to_host_pathlist_result.
+func_to_host_pathlist ()
+{
+  func_to_host_pathlist_result="$1"
+  if test -n "$1" ; then
+    case $host in
+      *mingw* )
+        lt_sed_naive_backslashify='s|\\\\*|\\|g;s|/|\\|g;s|\\|\\\\|g'
+        # Remove leading and trailing path separator characters from
+        # ARG. msys behavior is inconsistent here, cygpath turns them
+        # into '.;' and ';.', and winepath ignores them completely.
+        func_to_host_pathlist_tmp2="$1"
+        # Once set for this call, this variable should not be
+        # reassigned. It is used in tha fallback case.
+        func_to_host_pathlist_tmp1=`echo "$func_to_host_pathlist_tmp2" |\
+          $SED -e 's|^:*||' -e 's|:*$||'`
+        case $build in
+          *mingw* ) # Actually, msys.
+            # Awkward: cmd appends spaces to result.
+            lt_sed_strip_trailing_spaces="s/[ ]*\$//"
+            func_to_host_pathlist_tmp2=`( cmd //c echo "$func_to_host_pathlist_tmp1" |\
+              $SED -e "$lt_sed_strip_trailing_spaces" ) 2>/dev/null || echo ""`
+            func_to_host_pathlist_result=`echo "$func_to_host_pathlist_tmp2" |\
+              $SED -e "$lt_sed_naive_backslashify"`
+            ;;
+          *cygwin* )
+            func_to_host_pathlist_tmp2=`cygpath -w -p "$func_to_host_pathlist_tmp1"`
+            func_to_host_pathlist_result=`echo "$func_to_host_pathlist_tmp2" |\
+              $SED -e "$lt_sed_naive_backslashify"`
+            ;;
+          * )
+            # unfortunately, winepath doesn't convert pathlists
+            func_to_host_pathlist_result=""
+            func_to_host_pathlist_oldIFS=$IFS
+            IFS=:
+            for func_to_host_pathlist_f in $func_to_host_pathlist_tmp1 ; do
+              IFS=$func_to_host_pathlist_oldIFS
+              if test -n "$func_to_host_pathlist_f" ; then
+                func_to_host_path "$func_to_host_pathlist_f"
+                if test -n "$func_to_host_path_result" ; then
+                  if test -z "$func_to_host_pathlist_result" ; then
+                    func_to_host_pathlist_result="$func_to_host_path_result"
+                  else
+                    func_to_host_pathlist_result="$func_to_host_pathlist_result;$func_to_host_path_result"
+                  fi
+                fi
+              fi
+              IFS=:
+            done
+            IFS=$func_to_host_pathlist_oldIFS
+            ;;
+        esac
+        if test -z "$func_to_host_pathlist_result" ; then
+          func_error "Could not determine the host path(s) corresponding to"
+          func_error "  '$1'"
+          func_error "Continuing, but uninstalled executables may not work."
+          # Fallback. This may break if $1 contains DOS-style drive
+          # specifications. The fix is not to complicate the expression
+          # below, but for the user to provide a working wine installation
+          # with winepath so that path translation in the cross-to-mingw
+          # case works properly.
+          lt_replace_pathsep_nix_to_dos="s|:|;|g"
+          func_to_host_pathlist_result=`echo "$func_to_host_pathlist_tmp1" |\
+            $SED -e "$lt_replace_pathsep_nix_to_dos"`
+        fi
+        # Now, add the leading and trailing path separators back
+        case "$1" in
+          :* ) func_to_host_pathlist_result=";$func_to_host_pathlist_result"
+            ;;
+        esac
+        case "$1" in
+          *: ) func_to_host_pathlist_result="$func_to_host_pathlist_result;"
+            ;;
+        esac
+        ;;
+    esac
+  fi
+}
+# end: func_to_host_pathlist
+
+# func_emit_cwrapperexe_src
+# emit the source code for a wrapper executable on stdout
+# Must ONLY be called from within func_mode_link because
+# it depends on a number of variable set therein.
+func_emit_cwrapperexe_src ()
+{
+	cat <<EOF
+
+/* $cwrappersource - temporary wrapper executable for $objdir/$outputname
+   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION
+
+   The $output program cannot be directly executed until all the libtool
+   libraries that it depends on are installed.
+
+   This wrapper executable should never be moved out of the build directory.
+   If it is, it will not operate correctly.
+
+   Currently, it simply execs the wrapper *script* "$SHELL $output",
+   but could eventually absorb all of the scripts functionality and
+   exec $objdir/$outputname directly.
+*/
+EOF
+	    cat <<"EOF"
+#include <stdio.h>
+#include <stdlib.h>
+#ifdef _MSC_VER
+# include <direct.h>
+# include <process.h>
+# include <io.h>
+# define setmode _setmode
+#else
+# include <unistd.h>
+# include <stdint.h>
+# ifdef __CYGWIN__
+#  include <io.h>
+#  define HAVE_SETENV
+#  ifdef __STRICT_ANSI__
+char *realpath (const char *, char *);
+int putenv (char *);
+int setenv (const char *, const char *, int);
+#  endif
+# endif
+#endif
+#include <malloc.h>
+#include <stdarg.h>
+#include <assert.h>
+#include <string.h>
+#include <ctype.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/stat.h>
+
+#if defined(PATH_MAX)
+# define LT_PATHMAX PATH_MAX
+#elif defined(MAXPATHLEN)
+# define LT_PATHMAX MAXPATHLEN
+#else
+# define LT_PATHMAX 1024
+#endif
+
+#ifndef S_IXOTH
+# define S_IXOTH 0
+#endif
+#ifndef S_IXGRP
+# define S_IXGRP 0
+#endif
+
+#ifdef _MSC_VER
+# define S_IXUSR _S_IEXEC
+# define stat _stat
+# ifndef _INTPTR_T_DEFINED
+#  define intptr_t int
+# endif
+#endif
+
+#ifndef DIR_SEPARATOR
+# define DIR_SEPARATOR '/'
+# define PATH_SEPARATOR ':'
+#endif
+
+#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \
+  defined (__OS2__)
+# define HAVE_DOS_BASED_FILE_SYSTEM
+# define FOPEN_WB "wb"
+# ifndef DIR_SEPARATOR_2
+#  define DIR_SEPARATOR_2 '\\'
+# endif
+# ifndef PATH_SEPARATOR_2
+#  define PATH_SEPARATOR_2 ';'
+# endif
+#endif
+
+#ifndef DIR_SEPARATOR_2
+# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)
+#else /* DIR_SEPARATOR_2 */
+# define IS_DIR_SEPARATOR(ch) \
+	(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))
+#endif /* DIR_SEPARATOR_2 */
+
+#ifndef PATH_SEPARATOR_2
+# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)
+#else /* PATH_SEPARATOR_2 */
+# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)
+#endif /* PATH_SEPARATOR_2 */
+
+#ifdef __CYGWIN__
+# define FOPEN_WB "wb"
+#endif
+
+#ifndef FOPEN_WB
+# define FOPEN_WB "w"
+#endif
+#ifndef _O_BINARY
+# define _O_BINARY 0
+#endif
+
+#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))
+#define XFREE(stale) do { \
+  if (stale) { free ((void *) stale); stale = 0; } \
+} while (0)
+
+#undef LTWRAPPER_DEBUGPRINTF
+#if defined DEBUGWRAPPER
+# define LTWRAPPER_DEBUGPRINTF(args) ltwrapper_debugprintf args
+static void
+ltwrapper_debugprintf (const char *fmt, ...)
+{
+    va_list args;
+    va_start (args, fmt);
+    (void) vfprintf (stderr, fmt, args);
+    va_end (args);
+}
+#else
+# define LTWRAPPER_DEBUGPRINTF(args)
+#endif
+
+const char *program_name = NULL;
+
+void *xmalloc (size_t num);
+char *xstrdup (const char *string);
+const char *base_name (const char *name);
+char *find_executable (const char *wrapper);
+char *chase_symlinks (const char *pathspec);
+int make_executable (const char *path);
+int check_executable (const char *path);
+char *strendzap (char *str, const char *pat);
+void lt_fatal (const char *message, ...);
+void lt_setenv (const char *name, const char *value);
+char *lt_extend_str (const char *orig_value, const char *add, int to_end);
+void lt_opt_process_env_set (const char *arg);
+void lt_opt_process_env_prepend (const char *arg);
+void lt_opt_process_env_append (const char *arg);
+int lt_split_name_value (const char *arg, char** name, char** value);
+void lt_update_exe_path (const char *name, const char *value);
+void lt_update_lib_path (const char *name, const char *value);
+
+static const char *script_text_part1 =
+EOF
+
+	    func_emit_wrapper_part1 yes |
+	        $SED -e 's/\([\\"]\)/\\\1/g' \
+	             -e 's/^/  "/' -e 's/$/\\n"/'
+	    echo ";"
+	    cat <<EOF
+
+static const char *script_text_part2 =
+EOF
+	    func_emit_wrapper_part2 yes |
+	        $SED -e 's/\([\\"]\)/\\\1/g' \
+	             -e 's/^/  "/' -e 's/$/\\n"/'
+	    echo ";"
+
+	    cat <<EOF
+const char * MAGIC_EXE = "$magic_exe";
+const char * LIB_PATH_VARNAME = "$shlibpath_var";
+EOF
+
+	    if test "$shlibpath_overrides_runpath" = yes && test -n "$shlibpath_var" && test -n "$temp_rpath"; then
+              func_to_host_pathlist "$temp_rpath"
+	      cat <<EOF
+const char * LIB_PATH_VALUE   = "$func_to_host_pathlist_result";
+EOF
+	    else
+	      cat <<"EOF"
+const char * LIB_PATH_VALUE   = "";
+EOF
+	    fi
+
+	    if test -n "$dllsearchpath"; then
+              func_to_host_pathlist "$dllsearchpath:"
+	      cat <<EOF
+const char * EXE_PATH_VARNAME = "PATH";
+const char * EXE_PATH_VALUE   = "$func_to_host_pathlist_result";
+EOF
+	    else
+	      cat <<"EOF"
+const char * EXE_PATH_VARNAME = "";
+const char * EXE_PATH_VALUE   = "";
+EOF
+	    fi
+
+	    if test "$fast_install" = yes; then
+	      cat <<EOF
+const char * TARGET_PROGRAM_NAME = "lt-$outputname"; /* hopefully, no .exe */
+EOF
+	    else
+	      cat <<EOF
+const char * TARGET_PROGRAM_NAME = "$outputname"; /* hopefully, no .exe */
+EOF
+	    fi
+
+
+	    cat <<"EOF"
+
+#define LTWRAPPER_OPTION_PREFIX         "--lt-"
+#define LTWRAPPER_OPTION_PREFIX_LENGTH  5
+
+static const size_t opt_prefix_len         = LTWRAPPER_OPTION_PREFIX_LENGTH;
+static const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;
+
+static const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX "dump-script";
+
+static const size_t env_set_opt_len     = LTWRAPPER_OPTION_PREFIX_LENGTH + 7;
+static const char *env_set_opt          = LTWRAPPER_OPTION_PREFIX "env-set";
+  /* argument is putenv-style "foo=bar", value of foo is set to bar */
+
+static const size_t env_prepend_opt_len = LTWRAPPER_OPTION_PREFIX_LENGTH + 11;
+static const char *env_prepend_opt      = LTWRAPPER_OPTION_PREFIX "env-prepend";
+  /* argument is putenv-style "foo=bar", new value of foo is bar${foo} */
+
+static const size_t env_append_opt_len  = LTWRAPPER_OPTION_PREFIX_LENGTH + 10;
+static const char *env_append_opt       = LTWRAPPER_OPTION_PREFIX "env-append";
+  /* argument is putenv-style "foo=bar", new value of foo is ${foo}bar */
+
+int
+main (int argc, char *argv[])
+{
+  char **newargz;
+  int  newargc;
+  char *tmp_pathspec;
+  char *actual_cwrapper_path;
+  char *actual_cwrapper_name;
+  char *target_name;
+  char *lt_argv_zero;
+  intptr_t rval = 127;
+
+  int i;
+
+  program_name = (char *) xstrdup (base_name (argv[0]));
+  LTWRAPPER_DEBUGPRINTF (("(main) argv[0]      : %s\n", argv[0]));
+  LTWRAPPER_DEBUGPRINTF (("(main) program_name : %s\n", program_name));
+
+  /* very simple arg parsing; don't want to rely on getopt */
+  for (i = 1; i < argc; i++)
+    {
+      if (strcmp (argv[i], dumpscript_opt) == 0)
+	{
+EOF
+	    case "$host" in
+	      *mingw* | *cygwin* )
+		# make stdout use "unix" line endings
+		echo "          setmode(1,_O_BINARY);"
+		;;
+	      esac
+
+	    cat <<"EOF"
+	  printf ("%s", script_text_part1);
+	  printf ("%s", script_text_part2);
+	  return 0;
+	}
+    }
+
+  newargz = XMALLOC (char *, argc + 1);
+  tmp_pathspec = find_executable (argv[0]);
+  if (tmp_pathspec == NULL)
+    lt_fatal ("Couldn't find %s", argv[0]);
+  LTWRAPPER_DEBUGPRINTF (("(main) found exe (before symlink chase) at : %s\n",
+			  tmp_pathspec));
+
+  actual_cwrapper_path = chase_symlinks (tmp_pathspec);
+  LTWRAPPER_DEBUGPRINTF (("(main) found exe (after symlink chase) at : %s\n",
+			  actual_cwrapper_path));
+  XFREE (tmp_pathspec);
+
+  actual_cwrapper_name = xstrdup( base_name (actual_cwrapper_path));
+  strendzap (actual_cwrapper_path, actual_cwrapper_name);
+
+  /* wrapper name transforms */
+  strendzap (actual_cwrapper_name, ".exe");
+  tmp_pathspec = lt_extend_str (actual_cwrapper_name, ".exe", 1);
+  XFREE (actual_cwrapper_name);
+  actual_cwrapper_name = tmp_pathspec;
+  tmp_pathspec = 0;
+
+  /* target_name transforms -- use actual target program name; might have lt- prefix */
+  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));
+  strendzap (target_name, ".exe");
+  tmp_pathspec = lt_extend_str (target_name, ".exe", 1);
+  XFREE (target_name);
+  target_name = tmp_pathspec;
+  tmp_pathspec = 0;
+
+  LTWRAPPER_DEBUGPRINTF (("(main) libtool target name: %s\n",
+			  target_name));
+EOF
+
+	    cat <<EOF
+  newargz[0] =
+    XMALLOC (char, (strlen (actual_cwrapper_path) +
+		    strlen ("$objdir") + 1 + strlen (actual_cwrapper_name) + 1));
+  strcpy (newargz[0], actual_cwrapper_path);
+  strcat (newargz[0], "$objdir");
+  strcat (newargz[0], "/");
+EOF
+
+	    cat <<"EOF"
+  /* stop here, and copy so we don't have to do this twice */
+  tmp_pathspec = xstrdup (newargz[0]);
+
+  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */
+  strcat (newargz[0], actual_cwrapper_name);
+
+  /* DO want the lt- prefix here if it exists, so use target_name */
+  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);
+  XFREE (tmp_pathspec);
+  tmp_pathspec = NULL;
+EOF
+
+	    case $host_os in
+	      mingw*)
+	    cat <<"EOF"
+  {
+    char* p;
+    while ((p = strchr (newargz[0], '\\')) != NULL)
+      {
+	*p = '/';
+      }
+    while ((p = strchr (lt_argv_zero, '\\')) != NULL)
+      {
+	*p = '/';
+      }
+  }
+EOF
+	    ;;
+	    esac
+
+	    cat <<"EOF"
+  XFREE (target_name);
+  XFREE (actual_cwrapper_path);
+  XFREE (actual_cwrapper_name);
+
+  lt_setenv ("BIN_SH", "xpg4"); /* for Tru64 */
+  lt_setenv ("DUALCASE", "1");  /* for MSK sh */
+  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);
+  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);
+
+  newargc=0;
+  for (i = 1; i < argc; i++)
+    {
+      if (strncmp (argv[i], env_set_opt, env_set_opt_len) == 0)
+        {
+          if (argv[i][env_set_opt_len] == '=')
+            {
+              const char *p = argv[i] + env_set_opt_len + 1;
+              lt_opt_process_env_set (p);
+            }
+          else if (argv[i][env_set_opt_len] == '\0' && i + 1 < argc)
+            {
+              lt_opt_process_env_set (argv[++i]); /* don't copy */
+            }
+          else
+            lt_fatal ("%s missing required argument", env_set_opt);
+          continue;
+        }
+      if (strncmp (argv[i], env_prepend_opt, env_prepend_opt_len) == 0)
+        {
+          if (argv[i][env_prepend_opt_len] == '=')
+            {
+              const char *p = argv[i] + env_prepend_opt_len + 1;
+              lt_opt_process_env_prepend (p);
+            }
+          else if (argv[i][env_prepend_opt_len] == '\0' && i + 1 < argc)
+            {
+              lt_opt_process_env_prepend (argv[++i]); /* don't copy */
+            }
+          else
+            lt_fatal ("%s missing required argument", env_prepend_opt);
+          continue;
+        }
+      if (strncmp (argv[i], env_append_opt, env_append_opt_len) == 0)
+        {
+          if (argv[i][env_append_opt_len] == '=')
+            {
+              const char *p = argv[i] + env_append_opt_len + 1;
+              lt_opt_process_env_append (p);
+            }
+          else if (argv[i][env_append_opt_len] == '\0' && i + 1 < argc)
+            {
+              lt_opt_process_env_append (argv[++i]); /* don't copy */
+            }
+          else
+            lt_fatal ("%s missing required argument", env_append_opt);
+          continue;
+        }
+      if (strncmp (argv[i], ltwrapper_option_prefix, opt_prefix_len) == 0)
+        {
+          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX
+             namespace, but it is not one of the ones we know about and
+             have already dealt with, above (inluding dump-script), then
+             report an error. Otherwise, targets might begin to believe
+             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX
+             namespace. The first time any user complains about this, we'll
+             need to make LTWRAPPER_OPTION_PREFIX a configure-time option
+             or a configure.ac-settable value.
+           */
+          lt_fatal ("Unrecognized option in %s namespace: '%s'",
+                    ltwrapper_option_prefix, argv[i]);
+        }
+      /* otherwise ... */
+      newargz[++newargc] = xstrdup (argv[i]);
+    }
+  newargz[++newargc] = NULL;
+
+  LTWRAPPER_DEBUGPRINTF     (("(main) lt_argv_zero : %s\n", (lt_argv_zero ? lt_argv_zero : "<NULL>")));
+  for (i = 0; i < newargc; i++)
+    {
+      LTWRAPPER_DEBUGPRINTF (("(main) newargz[%d]   : %s\n", i, (newargz[i] ? newargz[i] : "<NULL>")));
+    }
+
+EOF
+
+	    case $host_os in
+	      mingw*)
+		cat <<"EOF"
+  /* execv doesn't actually work on mingw as expected on unix */
+  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);
+  if (rval == -1)
+    {
+      /* failed to start process */
+      LTWRAPPER_DEBUGPRINTF (("(main) failed to launch target \"%s\": errno = %d\n", lt_argv_zero, errno));
+      return 127;
+    }
+  return rval;
+EOF
+		;;
+	      *)
+		cat <<"EOF"
+  execv (lt_argv_zero, newargz);
+  return rval; /* =127, but avoids unused variable warning */
+EOF
+		;;
+	    esac
+
+	    cat <<"EOF"
+}
+
+void *
+xmalloc (size_t num)
+{
+  void *p = (void *) malloc (num);
+  if (!p)
+    lt_fatal ("Memory exhausted");
+
+  return p;
+}
+
+char *
+xstrdup (const char *string)
+{
+  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),
+			  string) : NULL;
+}
+
+const char *
+base_name (const char *name)
+{
+  const char *base;
+
+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)
+  /* Skip over the disk name in MSDOS pathnames. */
+  if (isalpha ((unsigned char) name[0]) && name[1] == ':')
+    name += 2;
+#endif
+
+  for (base = name; *name; name++)
+    if (IS_DIR_SEPARATOR (*name))
+      base = name + 1;
+  return base;
+}
+
+int
+check_executable (const char *path)
+{
+  struct stat st;
+
+  LTWRAPPER_DEBUGPRINTF (("(check_executable)  : %s\n",
+			  path ? (*path ? path : "EMPTY!") : "NULL!"));
+  if ((!path) || (!*path))
+    return 0;
+
+  if ((stat (path, &st) >= 0)
+      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))
+    return 1;
+  else
+    return 0;
+}
+
+int
+make_executable (const char *path)
+{
+  int rval = 0;
+  struct stat st;
+
+  LTWRAPPER_DEBUGPRINTF (("(make_executable)   : %s\n",
+			  path ? (*path ? path : "EMPTY!") : "NULL!"));
+  if ((!path) || (!*path))
+    return 0;
+
+  if (stat (path, &st) >= 0)
+    {
+      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);
+    }
+  return rval;
+}
+
+/* Searches for the full path of the wrapper.  Returns
+   newly allocated full path name if found, NULL otherwise
+   Does not chase symlinks, even on platforms that support them.
+*/
+char *
+find_executable (const char *wrapper)
+{
+  int has_slash = 0;
+  const char *p;
+  const char *p_next;
+  /* static buffer for getcwd */
+  char tmp[LT_PATHMAX + 1];
+  int tmp_len;
+  char *concat_name;
+
+  LTWRAPPER_DEBUGPRINTF (("(find_executable)   : %s\n",
+			  wrapper ? (*wrapper ? wrapper : "EMPTY!") : "NULL!"));
+
+  if ((wrapper == NULL) || (*wrapper == '\0'))
+    return NULL;
+
+  /* Absolute path? */
+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)
+  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')
+    {
+      concat_name = xstrdup (wrapper);
+      if (check_executable (concat_name))
+	return concat_name;
+      XFREE (concat_name);
+    }
+  else
+    {
+#endif
+      if (IS_DIR_SEPARATOR (wrapper[0]))
+	{
+	  concat_name = xstrdup (wrapper);
+	  if (check_executable (concat_name))
+	    return concat_name;
+	  XFREE (concat_name);
+	}
+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)
+    }
+#endif
+
+  for (p = wrapper; *p; p++)
+    if (*p == '/')
+      {
+	has_slash = 1;
+	break;
+      }
+  if (!has_slash)
+    {
+      /* no slashes; search PATH */
+      const char *path = getenv ("PATH");
+      if (path != NULL)
+	{
+	  for (p = path; *p; p = p_next)
+	    {
+	      const char *q;
+	      size_t p_len;
+	      for (q = p; *q; q++)
+		if (IS_PATH_SEPARATOR (*q))
+		  break;
+	      p_len = q - p;
+	      p_next = (*q == '\0' ? q : q + 1);
+	      if (p_len == 0)
+		{
+		  /* empty path: current directory */
+		  if (getcwd (tmp, LT_PATHMAX) == NULL)
+		    lt_fatal ("getcwd failed");
+		  tmp_len = strlen (tmp);
+		  concat_name =
+		    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);
+		  memcpy (concat_name, tmp, tmp_len);
+		  concat_name[tmp_len] = '/';
+		  strcpy (concat_name + tmp_len + 1, wrapper);
+		}
+	      else
+		{
+		  concat_name =
+		    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);
+		  memcpy (concat_name, p, p_len);
+		  concat_name[p_len] = '/';
+		  strcpy (concat_name + p_len + 1, wrapper);
+		}
+	      if (check_executable (concat_name))
+		return concat_name;
+	      XFREE (concat_name);
+	    }
+	}
+      /* not found in PATH; assume curdir */
+    }
+  /* Relative path | not found in path: prepend cwd */
+  if (getcwd (tmp, LT_PATHMAX) == NULL)
+    lt_fatal ("getcwd failed");
+  tmp_len = strlen (tmp);
+  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);
+  memcpy (concat_name, tmp, tmp_len);
+  concat_name[tmp_len] = '/';
+  strcpy (concat_name + tmp_len + 1, wrapper);
+
+  if (check_executable (concat_name))
+    return concat_name;
+  XFREE (concat_name);
+  return NULL;
+}
+
+char *
+chase_symlinks (const char *pathspec)
+{
+#ifndef S_ISLNK
+  return xstrdup (pathspec);
+#else
+  char buf[LT_PATHMAX];
+  struct stat s;
+  char *tmp_pathspec = xstrdup (pathspec);
+  char *p;
+  int has_symlinks = 0;
+  while (strlen (tmp_pathspec) && !has_symlinks)
+    {
+      LTWRAPPER_DEBUGPRINTF (("checking path component for symlinks: %s\n",
+			      tmp_pathspec));
+      if (lstat (tmp_pathspec, &s) == 0)
+	{
+	  if (S_ISLNK (s.st_mode) != 0)
+	    {
+	      has_symlinks = 1;
+	      break;
+	    }
+
+	  /* search backwards for last DIR_SEPARATOR */
+	  p = tmp_pathspec + strlen (tmp_pathspec) - 1;
+	  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))
+	    p--;
+	  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))
+	    {
+	      /* no more DIR_SEPARATORS left */
+	      break;
+	    }
+	  *p = '\0';
+	}
+      else
+	{
+	  char *errstr = strerror (errno);
+	  lt_fatal ("Error accessing file %s (%s)", tmp_pathspec, errstr);
+	}
+    }
+  XFREE (tmp_pathspec);
+
+  if (!has_symlinks)
+    {
+      return xstrdup (pathspec);
+    }
+
+  tmp_pathspec = realpath (pathspec, buf);
+  if (tmp_pathspec == 0)
+    {
+      lt_fatal ("Could not follow symlinks for %s", pathspec);
+    }
+  return xstrdup (tmp_pathspec);
+#endif
+}
+
+char *
+strendzap (char *str, const char *pat)
+{
+  size_t len, patlen;
+
+  assert (str != NULL);
+  assert (pat != NULL);
+
+  len = strlen (str);
+  patlen = strlen (pat);
+
+  if (patlen <= len)
+    {
+      str += len - patlen;
+      if (strcmp (str, pat) == 0)
+	*str = '\0';
+    }
+  return str;
+}
+
+static void
+lt_error_core (int exit_status, const char *mode,
+	       const char *message, va_list ap)
+{
+  fprintf (stderr, "%s: %s: ", program_name, mode);
+  vfprintf (stderr, message, ap);
+  fprintf (stderr, ".\n");
+
+  if (exit_status >= 0)
+    exit (exit_status);
+}
+
+void
+lt_fatal (const char *message, ...)
+{
+  va_list ap;
+  va_start (ap, message);
+  lt_error_core (EXIT_FAILURE, "FATAL", message, ap);
+  va_end (ap);
+}
+
+void
+lt_setenv (const char *name, const char *value)
+{
+  LTWRAPPER_DEBUGPRINTF (("(lt_setenv) setting '%s' to '%s'\n",
+                          (name ? name : "<NULL>"),
+                          (value ? value : "<NULL>")));
+  {
+#ifdef HAVE_SETENV
+    /* always make a copy, for consistency with !HAVE_SETENV */
+    char *str = xstrdup (value);
+    setenv (name, str, 1);
+#else
+    int len = strlen (name) + 1 + strlen (value) + 1;
+    char *str = XMALLOC (char, len);
+    sprintf (str, "%s=%s", name, value);
+    if (putenv (str) != EXIT_SUCCESS)
+      {
+        XFREE (str);
+      }
+#endif
+  }
+}
+
+char *
+lt_extend_str (const char *orig_value, const char *add, int to_end)
+{
+  char *new_value;
+  if (orig_value && *orig_value)
+    {
+      int orig_value_len = strlen (orig_value);
+      int add_len = strlen (add);
+      new_value = XMALLOC (char, add_len + orig_value_len + 1);
+      if (to_end)
+        {
+          strcpy (new_value, orig_value);
+          strcpy (new_value + orig_value_len, add);
+        }
+      else
+        {
+          strcpy (new_value, add);
+          strcpy (new_value + add_len, orig_value);
+        }
+    }
+  else
+    {
+      new_value = xstrdup (add);
+    }
+  return new_value;
+}
+
+int
+lt_split_name_value (const char *arg, char** name, char** value)
+{
+  const char *p;
+  int len;
+  if (!arg || !*arg)
+    return 1;
+
+  p = strchr (arg, (int)'=');
+
+  if (!p)
+    return 1;
+
+  *value = xstrdup (++p);
+
+  len = strlen (arg) - strlen (*value);
+  *name = XMALLOC (char, len);
+  strncpy (*name, arg, len-1);
+  (*name)[len - 1] = '\0';
+
+  return 0;
+}
+
+void
+lt_opt_process_env_set (const char *arg)
+{
+  char *name = NULL;
+  char *value = NULL;
+
+  if (lt_split_name_value (arg, &name, &value) != 0)
+    {
+      XFREE (name);
+      XFREE (value);
+      lt_fatal ("bad argument for %s: '%s'", env_set_opt, arg);
+    }
+
+  lt_setenv (name, value);
+  XFREE (name);
+  XFREE (value);
+}
+
+void
+lt_opt_process_env_prepend (const char *arg)
+{
+  char *name = NULL;
+  char *value = NULL;
+  char *new_value = NULL;
+
+  if (lt_split_name_value (arg, &name, &value) != 0)
+    {
+      XFREE (name);
+      XFREE (value);
+      lt_fatal ("bad argument for %s: '%s'", env_prepend_opt, arg);
+    }
+
+  new_value = lt_extend_str (getenv (name), value, 0);
+  lt_setenv (name, new_value);
+  XFREE (new_value);
+  XFREE (name);
+  XFREE (value);
+}
+
+void
+lt_opt_process_env_append (const char *arg)
+{
+  char *name = NULL;
+  char *value = NULL;
+  char *new_value = NULL;
+
+  if (lt_split_name_value (arg, &name, &value) != 0)
+    {
+      XFREE (name);
+      XFREE (value);
+      lt_fatal ("bad argument for %s: '%s'", env_append_opt, arg);
+    }
+
+  new_value = lt_extend_str (getenv (name), value, 1);
+  lt_setenv (name, new_value);
+  XFREE (new_value);
+  XFREE (name);
+  XFREE (value);
+}
+
+void
+lt_update_exe_path (const char *name, const char *value)
+{
+  LTWRAPPER_DEBUGPRINTF (("(lt_update_exe_path) modifying '%s' by prepending '%s'\n",
+                          (name ? name : "<NULL>"),
+                          (value ? value : "<NULL>")));
+
+  if (name && *name && value && *value)
+    {
+      char *new_value = lt_extend_str (getenv (name), value, 0);
+      /* some systems can't cope with a ':'-terminated path #' */
+      int len = strlen (new_value);
+      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))
+        {
+          new_value[len-1] = '\0';
+        }
+      lt_setenv (name, new_value);
+      XFREE (new_value);
+    }
+}
+
+void
+lt_update_lib_path (const char *name, const char *value)
+{
+  LTWRAPPER_DEBUGPRINTF (("(lt_update_lib_path) modifying '%s' by prepending '%s'\n",
+                          (name ? name : "<NULL>"),
+                          (value ? value : "<NULL>")));
+
+  if (name && *name && value && *value)
+    {
+      char *new_value = lt_extend_str (getenv (name), value, 0);
+      lt_setenv (name, new_value);
+      XFREE (new_value);
+    }
+}
+
+
+EOF
+}
+# end: func_emit_cwrapperexe_src
+
+# func_mode_link arg...
+func_mode_link ()
+{
+    $opt_debug
+    case $host in
+    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)
+      # It is impossible to link a dll without this setting, and
+      # we shouldn't force the makefile maintainer to figure out
+      # which system we are compiling for in order to pass an extra
+      # flag for every libtool invocation.
+      # allow_undefined=no
+
+      # FIXME: Unfortunately, there are problems with the above when trying
+      # to make a dll which has undefined symbols, in which case not
+      # even a static library is built.  For now, we need to specify
+      # -no-undefined on the libtool link line when we can be certain
+      # that all symbols are satisfied, otherwise we get a static library.
+      allow_undefined=yes
+      ;;
+    *)
+      allow_undefined=yes
+      ;;
+    esac
+    libtool_args=$nonopt
+    base_compile="$nonopt $@"
+    compile_command=$nonopt
+    finalize_command=$nonopt
+
+    compile_rpath=
+    finalize_rpath=
+    compile_shlibpath=
+    finalize_shlibpath=
+    convenience=
+    old_convenience=
+    deplibs=
+    old_deplibs=
+    compiler_flags=
+    linker_flags=
+    dllsearchpath=
+    lib_search_path=`pwd`
+    inst_prefix_dir=
+    new_inherited_linker_flags=
+
+    avoid_version=no
+    dlfiles=
+    dlprefiles=
+    dlself=no
+    export_dynamic=no
+    export_symbols=
+    export_symbols_regex=
+    generated=
+    libobjs=
+    ltlibs=
+    module=no
+    no_install=no
+    objs=
+    non_pic_objects=
+    precious_files_regex=
+    prefer_static_libs=no
+    preload=no
+    prev=
+    prevarg=
+    release=
+    rpath=
+    xrpath=
+    perm_rpath=
+    temp_rpath=
+    thread_safe=no
+    vinfo=
+    vinfo_number=no
+    weak_libs=
+    single_module="${wl}-single_module"
+    func_infer_tag $base_compile
+
+    # We need to know -static, to get the right output filenames.
+    for arg
+    do
+      case $arg in
+      -shared)
+	test "$build_libtool_libs" != yes && \
+	  func_fatal_configuration "can not build a shared library"
+	build_old_libs=no
+	break
+	;;
+      -all-static | -static | -static-libtool-libs)
+	case $arg in
+	-all-static)
+	  if test "$build_libtool_libs" = yes && test -z "$link_static_flag"; then
+	    func_warning "complete static linking is impossible in this configuration"
+	  fi
+	  if test -n "$link_static_flag"; then
+	    dlopen_self=$dlopen_self_static
+	  fi
+	  prefer_static_libs=yes
+	  ;;
+	-static)
+	  if test -z "$pic_flag" && test -n "$link_static_flag"; then
+	    dlopen_self=$dlopen_self_static
+	  fi
+	  prefer_static_libs=built
+	  ;;
+	-static-libtool-libs)
+	  if test -z "$pic_flag" && test -n "$link_static_flag"; then
+	    dlopen_self=$dlopen_self_static
+	  fi
+	  prefer_static_libs=yes
+	  ;;
+	esac
+	build_libtool_libs=no
+	build_old_libs=yes
+	break
+	;;
+      esac
+    done
+
+    # See if our shared archives depend on static archives.
+    test -n "$old_archive_from_new_cmds" && build_old_libs=yes
+
+    # Go through the arguments, transforming them on the way.
+    while test "$#" -gt 0; do
+      arg="$1"
+      shift
+      func_quote_for_eval "$arg"
+      qarg=$func_quote_for_eval_unquoted_result
+      func_append libtool_args " $func_quote_for_eval_result"
+
+      # If the previous option needs an argument, assign it.
+      if test -n "$prev"; then
+	case $prev in
+	output)
+	  func_append compile_command " @OUTPUT@"
+	  func_append finalize_command " @OUTPUT@"
+	  ;;
+	esac
+
+	case $prev in
+	dlfiles|dlprefiles)
+	  if test "$preload" = no; then
+	    # Add the symbol object into the linking commands.
+	    func_append compile_command " @SYMFILE@"
+	    func_append finalize_command " @SYMFILE@"
+	    preload=yes
+	  fi
+	  case $arg in
+	  *.la | *.lo) ;;  # We handle these cases below.
+	  force)
+	    if test "$dlself" = no; then
+	      dlself=needless
+	      export_dynamic=yes
+	    fi
+	    prev=
+	    continue
+	    ;;
+	  self)
+	    if test "$prev" = dlprefiles; then
+	      dlself=yes
+	    elif test "$prev" = dlfiles && test "$dlopen_self" != yes; then
+	      dlself=yes
+	    else
+	      dlself=needless
+	      export_dynamic=yes
+	    fi
+	    prev=
+	    continue
+	    ;;
+	  *)
+	    if test "$prev" = dlfiles; then
+	      dlfiles="$dlfiles $arg"
+	    else
+	      dlprefiles="$dlprefiles $arg"
+	    fi
+	    prev=
+	    continue
+	    ;;
+	  esac
+	  ;;
+	expsyms)
+	  export_symbols="$arg"
+	  test -f "$arg" \
+	    || func_fatal_error "symbol file \`$arg' does not exist"
+	  prev=
+	  continue
+	  ;;
+	expsyms_regex)
+	  export_symbols_regex="$arg"
+	  prev=
+	  continue
+	  ;;
+	framework)
+	  case $host in
+	    *-*-darwin*)
+	      case "$deplibs " in
+		*" $qarg.ltframework "*) ;;
+		*) deplibs="$deplibs $qarg.ltframework" # this is fixed later
+		   ;;
+	      esac
+	      ;;
+	  esac
+	  prev=
+	  continue
+	  ;;
+	inst_prefix)
+	  inst_prefix_dir="$arg"
+	  prev=
+	  continue
+	  ;;
+	objectlist)
+	  if test -f "$arg"; then
+	    save_arg=$arg
+	    moreargs=
+	    for fil in `cat "$save_arg"`
+	    do
+#	      moreargs="$moreargs $fil"
+	      arg=$fil
+	      # A libtool-controlled object.
+
+	      # Check to see that this really is a libtool object.
+	      if func_lalib_unsafe_p "$arg"; then
+		pic_object=
+		non_pic_object=
+
+		# Read the .lo file
+		func_source "$arg"
+
+		if test -z "$pic_object" ||
+		   test -z "$non_pic_object" ||
+		   test "$pic_object" = none &&
+		   test "$non_pic_object" = none; then
+		  func_fatal_error "cannot find name of object for \`$arg'"
+		fi
+
+		# Extract subdirectory from the argument.
+		func_dirname "$arg" "/" ""
+		xdir="$func_dirname_result"
+
+		if test "$pic_object" != none; then
+		  # Prepend the subdirectory the object is found in.
+		  pic_object="$xdir$pic_object"
+
+		  if test "$prev" = dlfiles; then
+		    if test "$build_libtool_libs" = yes && test "$dlopen_support" = yes; then
+		      dlfiles="$dlfiles $pic_object"
+		      prev=
+		      continue
+		    else
+		      # If libtool objects are unsupported, then we need to preload.
+		      prev=dlprefiles
+		    fi
+		  fi
+
+		  # CHECK ME:  I think I busted this.  -Ossama
+		  if test "$prev" = dlprefiles; then
+		    # Preload the old-style object.
+		    dlprefiles="$dlprefiles $pic_object"
+		    prev=
+		  fi
+
+		  # A PIC object.
+		  func_append libobjs " $pic_object"
+		  arg="$pic_object"
+		fi
+
+		# Non-PIC object.
+		if test "$non_pic_object" != none; then
+		  # Prepend the subdirectory the object is found in.
+		  non_pic_object="$xdir$non_pic_object"
+
+		  # A standard non-PIC object
+		  func_append non_pic_objects " $non_pic_object"
+		  if test -z "$pic_object" || test "$pic_object" = none ; then
+		    arg="$non_pic_object"
+		  fi
+		else
+		  # If the PIC object exists, use it instead.
+		  # $xdir was prepended to $pic_object above.
+		  non_pic_object="$pic_object"
+		  func_append non_pic_objects " $non_pic_object"
+		fi
+	      else
+		# Only an error if not doing a dry-run.
+		if $opt_dry_run; then
+		  # Extract subdirectory from the argument.
+		  func_dirname "$arg" "/" ""
+		  xdir="$func_dirname_result"
+
+		  func_lo2o "$arg"
+		  pic_object=$xdir$objdir/$func_lo2o_result
+		  non_pic_object=$xdir$func_lo2o_result
+		  func_append libobjs " $pic_object"
+		  func_append non_pic_objects " $non_pic_object"
+	        else
+		  func_fatal_error "\`$arg' is not a valid libtool object"
+		fi
+	      fi
+	    done
+	  else
+	    func_fatal_error "link input file \`$arg' does not exist"
+	  fi
+	  arg=$save_arg
+	  prev=
+	  continue
+	  ;;
+	precious_regex)
+	  precious_files_regex="$arg"
+	  prev=
+	  continue
+	  ;;
+	release)
+	  release="-$arg"
+	  prev=
+	  continue
+	  ;;
+	rpath | xrpath)
+	  # We need an absolute path.
+	  case $arg in
+	  [\\/]* | [A-Za-z]:[\\/]*) ;;
+	  *)
+	    func_fatal_error "only absolute run-paths are allowed"
+	    ;;
+	  esac
+	  if test "$prev" = rpath; then
+	    case "$rpath " in
+	    *" $arg "*) ;;
+	    *) rpath="$rpath $arg" ;;
+	    esac
+	  else
+	    case "$xrpath " in
+	    *" $arg "*) ;;
+	    *) xrpath="$xrpath $arg" ;;
+	    esac
+	  fi
+	  prev=
+	  continue
+	  ;;
+	shrext)
+	  shrext_cmds="$arg"
+	  prev=
+	  continue
+	  ;;
+	weak)
+	  weak_libs="$weak_libs $arg"
+	  prev=
+	  continue
+	  ;;
+	xcclinker)
+	  linker_flags="$linker_flags $qarg"
+	  compiler_flags="$compiler_flags $qarg"
+	  prev=
+	  func_append compile_command " $qarg"
+	  func_append finalize_command " $qarg"
+	  continue
+	  ;;
+	xcompiler)
+	  compiler_flags="$compiler_flags $qarg"
+	  prev=
+	  func_append compile_command " $qarg"
+	  func_append finalize_command " $qarg"
+	  continue
+	  ;;
+	xlinker)
+	  linker_flags="$linker_flags $qarg"
+	  compiler_flags="$compiler_flags $wl$qarg"
+	  prev=
+	  func_append compile_command " $wl$qarg"
+	  func_append finalize_command " $wl$qarg"
+	  continue
+	  ;;
+	*)
+	  eval "$prev=\"\$arg\""
+	  prev=
+	  continue
+	  ;;
+	esac
+      fi # test -n "$prev"
+
+      prevarg="$arg"
+
+      case $arg in
+      -all-static)
+	if test -n "$link_static_flag"; then
+	  # See comment for -static flag below, for more details.
+	  func_append compile_command " $link_static_flag"
+	  func_append finalize_command " $link_static_flag"
+	fi
+	continue
+	;;
+
+      -allow-undefined)
+	# FIXME: remove this flag sometime in the future.
+	func_fatal_error "\`-allow-undefined' must not be used because it is the default"
+	;;
+
+      -avoid-version)
+	avoid_version=yes
+	continue
+	;;
+
+      -dlopen)
+	prev=dlfiles
+	continue
+	;;
+
+      -dlpreopen)
+	prev=dlprefiles
+	continue
+	;;
+
+      -export-dynamic)
+	export_dynamic=yes
+	continue
+	;;
+
+      -export-symbols | -export-symbols-regex)
+	if test -n "$export_symbols" || test -n "$export_symbols_regex"; then
+	  func_fatal_error "more than one -exported-symbols argument is not allowed"
+	fi
+	if test "X$arg" = "X-export-symbols"; then
+	  prev=expsyms
+	else
+	  prev=expsyms_regex
+	fi
+	continue
+	;;
+
+      -framework)
+	prev=framework
+	continue
+	;;
+
+      -inst-prefix-dir)
+	prev=inst_prefix
+	continue
+	;;
+
+      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*
+      # so, if we see these flags be careful not to treat them like -L
+      -L[A-Z][A-Z]*:*)
+	case $with_gcc/$host in
+	no/*-*-irix* | /*-*-irix*)
+	  func_append compile_command " $arg"
+	  func_append finalize_command " $arg"
+	  ;;
+	esac
+	continue
+	;;
+
+      -L*)
+	func_stripname '-L' '' "$arg"
+	dir=$func_stripname_result
+	if test -z "$dir"; then
+	  if test "$#" -gt 0; then
+	    func_fatal_error "require no space between \`-L' and \`$1'"
+	  else
+	    func_fatal_error "need path for \`-L' option"
+	  fi
+	fi
+	# We need an absolute path.
+	case $dir in
+	[\\/]* | [A-Za-z]:[\\/]*) ;;
+	*)
+	  absdir=`cd "$dir" && pwd`
+	  test -z "$absdir" && \
+	    func_fatal_error "cannot determine absolute directory name of \`$dir'"
+	  dir="$absdir"
+	  ;;
+	esac
+	case "$deplibs " in
+	*" -L$dir "*) ;;
+	*)
+	  deplibs="$deplibs -L$dir"
+	  lib_search_path="$lib_search_path $dir"
+	  ;;
+	esac
+	case $host in
+	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)
+	  testbindir=`$ECHO "X$dir" | $Xsed -e 's*/lib$*/bin*'`
+	  case :$dllsearchpath: in
+	  *":$dir:"*) ;;
+	  ::) dllsearchpath=$dir;;
+	  *) dllsearchpath="$dllsearchpath:$dir";;
+	  esac
+	  case :$dllsearchpath: in
+	  *":$testbindir:"*) ;;
+	  ::) dllsearchpath=$testbindir;;
+	  *) dllsearchpath="$dllsearchpath:$testbindir";;
+	  esac
+	  ;;
+	esac
+	continue
+	;;
+
+      -l*)
+	if test "X$arg" = "X-lc" || test "X$arg" = "X-lm"; then
+	  case $host in
+	  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc*)
+	    # These systems don't actually have a C or math library (as such)
+	    continue
+	    ;;
+	  *-*-os2*)
+	    # These systems don't actually have a C library (as such)
+	    test "X$arg" = "X-lc" && continue
+	    ;;
+	  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)
+	    # Do not include libc due to us having libc/libc_r.
+	    test "X$arg" = "X-lc" && continue
+	    ;;
+	  *-*-rhapsody* | *-*-darwin1.[012])
+	    # Rhapsody C and math libraries are in the System framework
+	    deplibs="$deplibs System.ltframework"
+	    continue
+	    ;;
+	  *-*-sco3.2v5* | *-*-sco5v6*)
+	    # Causes problems with __ctype
+	    test "X$arg" = "X-lc" && continue
+	    ;;
+	  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)
+	    # Compiler inserts libc in the correct place for threads to work
+	    test "X$arg" = "X-lc" && continue
+	    ;;
+	  esac
+	elif test "X$arg" = "X-lc_r"; then
+	 case $host in
+	 *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)
+	   # Do not include libc_r directly, use -pthread flag.
+	   continue
+	   ;;
+	 esac
+	fi
+	deplibs="$deplibs $arg"
+	continue
+	;;
+
+      -module)
+	module=yes
+	continue
+	;;
+
+      # Tru64 UNIX uses -model [arg] to determine the layout of C++
+      # classes, name mangling, and exception handling.
+      # Darwin uses the -arch flag to determine output architecture.
+      -model|-arch|-isysroot)
+	compiler_flags="$compiler_flags $arg"
+	func_append compile_command " $arg"
+	func_append finalize_command " $arg"
+	prev=xcompiler
+	continue
+	;;
+
+      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)
+	compiler_flags="$compiler_flags $arg"
+	func_append compile_command " $arg"
+	func_append finalize_command " $arg"
+	case "$new_inherited_linker_flags " in
+	    *" $arg "*) ;;
+	    * ) new_inherited_linker_flags="$new_inherited_linker_flags $arg" ;;
+	esac
+	continue
+	;;
+
+      -multi_module)
+	single_module="${wl}-multi_module"
+	continue
+	;;
+
+      -no-fast-install)
+	fast_install=no
+	continue
+	;;
+
+      -no-install)
+	case $host in
+	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)
+	  # The PATH hackery in wrapper scripts is required on Windows
+	  # and Darwin in order for the loader to find any dlls it needs.
+	  func_warning "\`-no-install' is ignored for $host"
+	  func_warning "assuming \`-no-fast-install' instead"
+	  fast_install=no
+	  ;;
+	*) no_install=yes ;;
+	esac
+	continue
+	;;
+
+      -no-undefined)
+	allow_undefined=no
+	continue
+	;;
+
+      -objectlist)
+	prev=objectlist
+	continue
+	;;
+
+      -o) prev=output ;;
+
+      -precious-files-regex)
+	prev=precious_regex
+	continue
+	;;
+
+      -release)
+	prev=release
+	continue
+	;;
+
+      -rpath)
+	prev=rpath
+	continue
+	;;
+
+      -R)
+	prev=xrpath
+	continue
+	;;
+
+      -R*)
+	func_stripname '-R' '' "$arg"
+	dir=$func_stripname_result
+	# We need an absolute path.
+	case $dir in
+	[\\/]* | [A-Za-z]:[\\/]*) ;;
+	*)
+	  func_fatal_error "only absolute run-paths are allowed"
+	  ;;
+	esac
+	case "$xrpath " in
+	*" $dir "*) ;;
+	*) xrpath="$xrpath $dir" ;;
+	esac
+	continue
+	;;
+
+      -shared)
+	# The effects of -shared are defined in a previous loop.
+	continue
+	;;
+
+      -shrext)
+	prev=shrext
+	continue
+	;;
+
+      -static | -static-libtool-libs)
+	# The effects of -static are defined in a previous loop.
+	# We used to do the same as -all-static on platforms that
+	# didn't have a PIC flag, but the assumption that the effects
+	# would be equivalent was wrong.  It would break on at least
+	# Digital Unix and AIX.
+	continue
+	;;
+
+      -thread-safe)
+	thread_safe=yes
+	continue
+	;;
+
+      -version-info)
+	prev=vinfo
+	continue
+	;;
+
+      -version-number)
+	prev=vinfo
+	vinfo_number=yes
+	continue
+	;;
+
+      -weak)
+        prev=weak
+	continue
+	;;
+
+      -Wc,*)
+	func_stripname '-Wc,' '' "$arg"
+	args=$func_stripname_result
+	arg=
+	save_ifs="$IFS"; IFS=','
+	for flag in $args; do
+	  IFS="$save_ifs"
+          func_quote_for_eval "$flag"
+	  arg="$arg $wl$func_quote_for_eval_result"
+	  compiler_flags="$compiler_flags $func_quote_for_eval_result"
+	done
+	IFS="$save_ifs"
+	func_stripname ' ' '' "$arg"
+	arg=$func_stripname_result
+	;;
+
+      -Wl,*)
+	func_stripname '-Wl,' '' "$arg"
+	args=$func_stripname_result
+	arg=
+	save_ifs="$IFS"; IFS=','
+	for flag in $args; do
+	  IFS="$save_ifs"
+          func_quote_for_eval "$flag"
+	  arg="$arg $wl$func_quote_for_eval_result"
+	  compiler_flags="$compiler_flags $wl$func_quote_for_eval_result"
+	  linker_flags="$linker_flags $func_quote_for_eval_result"
+	done
+	IFS="$save_ifs"
+	func_stripname ' ' '' "$arg"
+	arg=$func_stripname_result
+	;;
+
+      -Xcompiler)
+	prev=xcompiler
+	continue
+	;;
+
+      -Xlinker)
+	prev=xlinker
+	continue
+	;;
+
+      -XCClinker)
+	prev=xcclinker
+	continue
+	;;
+
+      # -msg_* for osf cc
+      -msg_*)
+	func_quote_for_eval "$arg"
+	arg="$func_quote_for_eval_result"
+	;;
+
+      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler
+      # -r[0-9][0-9]* specifies the processor on the SGI compiler
+      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler
+      # +DA*, +DD* enable 64-bit mode on the HP compiler
+      # -q* pass through compiler args for the IBM compiler
+      # -m*, -t[45]*, -txscale* pass through architecture-specific
+      # compiler args for GCC
+      # -F/path gives path to uninstalled frameworks, gcc on darwin
+      # -p, -pg, --coverage, -fprofile-* pass through profiling flag for GCC
+      # @file GCC response files
+      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \
+      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*)
+        func_quote_for_eval "$arg"
+	arg="$func_quote_for_eval_result"
+        func_append compile_command " $arg"
+        func_append finalize_command " $arg"
+        compiler_flags="$compiler_flags $arg"
+        continue
+        ;;
+
+      # Some other compiler flag.
+      -* | +*)
+        func_quote_for_eval "$arg"
+	arg="$func_quote_for_eval_result"
+	;;
+
+      *.$objext)
+	# A standard object.
+	objs="$objs $arg"
+	;;
+
+      *.lo)
+	# A libtool-controlled object.
+
+	# Check to see that this really is a libtool object.
+	if func_lalib_unsafe_p "$arg"; then
+	  pic_object=
+	  non_pic_object=
+
+	  # Read the .lo file
+	  func_source "$arg"
+
+	  if test -z "$pic_object" ||
+	     test -z "$non_pic_object" ||
+	     test "$pic_object" = none &&
+	     test "$non_pic_object" = none; then
+	    func_fatal_error "cannot find name of object for \`$arg'"
+	  fi
+
+	  # Extract subdirectory from the argument.
+	  func_dirname "$arg" "/" ""
+	  xdir="$func_dirname_result"
+
+	  if test "$pic_object" != none; then
+	    # Prepend the subdirectory the object is found in.
+	    pic_object="$xdir$pic_object"
+
+	    if test "$prev" = dlfiles; then
+	      if test "$build_libtool_libs" = yes && test "$dlopen_support" = yes; then
+		dlfiles="$dlfiles $pic_object"
+		prev=
+		continue
+	      else
+		# If libtool objects are unsupported, then we need to preload.
+		prev=dlprefiles
+	      fi
+	    fi
+
+	    # CHECK ME:  I think I busted this.  -Ossama
+	    if test "$prev" = dlprefiles; then
+	      # Preload the old-style object.
+	      dlprefiles="$dlprefiles $pic_object"
+	      prev=
+	    fi
+
+	    # A PIC object.
+	    func_append libobjs " $pic_object"
+	    arg="$pic_object"
+	  fi
+
+	  # Non-PIC object.
+	  if test "$non_pic_object" != none; then
+	    # Prepend the subdirectory the object is found in.
+	    non_pic_object="$xdir$non_pic_object"
+
+	    # A standard non-PIC object
+	    func_append non_pic_objects " $non_pic_object"
+	    if test -z "$pic_object" || test "$pic_object" = none ; then
+	      arg="$non_pic_object"
+	    fi
+	  else
+	    # If the PIC object exists, use it instead.
+	    # $xdir was prepended to $pic_object above.
+	    non_pic_object="$pic_object"
+	    func_append non_pic_objects " $non_pic_object"
+	  fi
+	else
+	  # Only an error if not doing a dry-run.
+	  if $opt_dry_run; then
+	    # Extract subdirectory from the argument.
+	    func_dirname "$arg" "/" ""
+	    xdir="$func_dirname_result"
+
+	    func_lo2o "$arg"
+	    pic_object=$xdir$objdir/$func_lo2o_result
+	    non_pic_object=$xdir$func_lo2o_result
+	    func_append libobjs " $pic_object"
+	    func_append non_pic_objects " $non_pic_object"
+	  else
+	    func_fatal_error "\`$arg' is not a valid libtool object"
+	  fi
+	fi
+	;;
+
+      *.$libext)
+	# An archive.
+	deplibs="$deplibs $arg"
+	old_deplibs="$old_deplibs $arg"
+	continue
+	;;
+
+      *.la)
+	# A libtool-controlled library.
+
+	if test "$prev" = dlfiles; then
+	  # This library was specified with -dlopen.
+	  dlfiles="$dlfiles $arg"
+	  prev=
+	elif test "$prev" = dlprefiles; then
+	  # The library was specified with -dlpreopen.
+	  dlprefiles="$dlprefiles $arg"
+	  prev=
+	else
+	  deplibs="$deplibs $arg"
+	fi
+	continue
+	;;
+
+      # Some other compiler argument.
+      *)
+	# Unknown arguments in both finalize_command and compile_command need
+	# to be aesthetically quoted because they are evaled later.
+	func_quote_for_eval "$arg"
+	arg="$func_quote_for_eval_result"
+	;;
+      esac # arg
+
+      # Now actually substitute the argument into the commands.
+      if test -n "$arg"; then
+	func_append compile_command " $arg"
+	func_append finalize_command " $arg"
+      fi
+    done # argument parsing loop
+
+    test -n "$prev" && \
+      func_fatal_help "the \`$prevarg' option requires an argument"
+
+    if test "$export_dynamic" = yes && test -n "$export_dynamic_flag_spec"; then
+      eval arg=\"$export_dynamic_flag_spec\"
+      func_append compile_command " $arg"
+      func_append finalize_command " $arg"
+    fi
+
+    oldlibs=
+    # calculate the name of the file, without its directory
+    func_basename "$output"
+    outputname="$func_basename_result"
+    libobjs_save="$libobjs"
+
+    if test -n "$shlibpath_var"; then
+      # get the directories listed in $shlibpath_var
+      eval shlib_search_path=\`\$ECHO \"X\${$shlibpath_var}\" \| \$Xsed -e \'s/:/ /g\'\`
+    else
+      shlib_search_path=
+    fi
+    eval sys_lib_search_path=\"$sys_lib_search_path_spec\"
+    eval sys_lib_dlsearch_path=\"$sys_lib_dlsearch_path_spec\"
+
+    func_dirname "$output" "/" ""
+    output_objdir="$func_dirname_result$objdir"
+    # Create the object directory.
+    func_mkdir_p "$output_objdir"
+
+    # Determine the type of output
+    case $output in
+    "")
+      func_fatal_help "you must specify an output file"
+      ;;
+    *.$libext) linkmode=oldlib ;;
+    *.lo | *.$objext) linkmode=obj ;;
+    *.la) linkmode=lib ;;
+    *) linkmode=prog ;; # Anything else should be a program.
+    esac
+
+    specialdeplibs=
+
+    libs=
+    # Find all interdependent deplibs by searching for libraries
+    # that are linked more than once (e.g. -la -lb -la)
+    for deplib in $deplibs; do
+      if $opt_duplicate_deps ; then
+	case "$libs " in
+	*" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
+	esac
+      fi
+      libs="$libs $deplib"
+    done
+
+    if test "$linkmode" = lib; then
+      libs="$predeps $libs $compiler_lib_search_path $postdeps"
+
+      # Compute libraries that are listed more than once in $predeps
+      # $postdeps and mark them as special (i.e., whose duplicates are
+      # not to be eliminated).
+      pre_post_deps=
+      if $opt_duplicate_compiler_generated_deps; then
+	for pre_post_dep in $predeps $postdeps; do
+	  case "$pre_post_deps " in
+	  *" $pre_post_dep "*) specialdeplibs="$specialdeplibs $pre_post_deps" ;;
+	  esac
+	  pre_post_deps="$pre_post_deps $pre_post_dep"
+	done
+      fi
+      pre_post_deps=
+    fi
+
+    deplibs=
+    newdependency_libs=
+    newlib_search_path=
+    need_relink=no # whether we're linking any uninstalled libtool libraries
+    notinst_deplibs= # not-installed libtool libraries
+    notinst_path= # paths that contain not-installed libtool libraries
+
+    case $linkmode in
+    lib)
+	passes="conv dlpreopen link"
+	for file in $dlfiles $dlprefiles; do
+	  case $file in
+	  *.la) ;;
+	  *)
+	    func_fatal_help "libraries can \`-dlopen' only libtool libraries: $file"
+	    ;;
+	  esac
+	done
+	;;
+    prog)
+	compile_deplibs=
+	finalize_deplibs=
+	alldeplibs=no
+	newdlfiles=
+	newdlprefiles=
+	passes="conv scan dlopen dlpreopen link"
+	;;
+    *)  passes="conv"
+	;;
+    esac
+
+    for pass in $passes; do
+      # The preopen pass in lib mode reverses $deplibs; put it back here
+      # so that -L comes before libs that need it for instance...
+      if test "$linkmode,$pass" = "lib,link"; then
+	## FIXME: Find the place where the list is rebuilt in the wrong
+	##        order, and fix it there properly
+        tmp_deplibs=
+	for deplib in $deplibs; do
+	  tmp_deplibs="$deplib $tmp_deplibs"
+	done
+	deplibs="$tmp_deplibs"
+      fi
+
+      if test "$linkmode,$pass" = "lib,link" ||
+	 test "$linkmode,$pass" = "prog,scan"; then
+	libs="$deplibs"
+	deplibs=
+      fi
+      if test "$linkmode" = prog; then
+	case $pass in
+	dlopen) libs="$dlfiles" ;;
+	dlpreopen) libs="$dlprefiles" ;;
+	link)
+	  libs="$deplibs %DEPLIBS%"
+	  test "X$link_all_deplibs" != Xno && libs="$libs $dependency_libs"
+	  ;;
+	esac
+      fi
+      if test "$linkmode,$pass" = "lib,dlpreopen"; then
+	# Collect and forward deplibs of preopened libtool libs
+	for lib in $dlprefiles; do
+	  # Ignore non-libtool-libs
+	  dependency_libs=
+	  case $lib in
+	  *.la)	func_source "$lib" ;;
+	  esac
+
+	  # Collect preopened libtool deplibs, except any this library
+	  # has declared as weak libs
+	  for deplib in $dependency_libs; do
+            deplib_base=`$ECHO "X$deplib" | $Xsed -e "$basename"`
+	    case " $weak_libs " in
+	    *" $deplib_base "*) ;;
+	    *) deplibs="$deplibs $deplib" ;;
+	    esac
+	  done
+	done
+	libs="$dlprefiles"
+      fi
+      if test "$pass" = dlopen; then
+	# Collect dlpreopened libraries
+	save_deplibs="$deplibs"
+	deplibs=
+      fi
+
+      for deplib in $libs; do
+	lib=
+	found=no
+	case $deplib in
+	-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)
+	  if test "$linkmode,$pass" = "prog,link"; then
+	    compile_deplibs="$deplib $compile_deplibs"
+	    finalize_deplibs="$deplib $finalize_deplibs"
+	  else
+	    compiler_flags="$compiler_flags $deplib"
+	    if test "$linkmode" = lib ; then
+		case "$new_inherited_linker_flags " in
+		    *" $deplib "*) ;;
+		    * ) new_inherited_linker_flags="$new_inherited_linker_flags $deplib" ;;
+		esac
+	    fi
+	  fi
+	  continue
+	  ;;
+	-l*)
+	  if test "$linkmode" != lib && test "$linkmode" != prog; then
+	    func_warning "\`-l' is ignored for archives/objects"
+	    continue
+	  fi
+	  func_stripname '-l' '' "$deplib"
+	  name=$func_stripname_result
+	  if test "$linkmode" = lib; then
+	    searchdirs="$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path"
+	  else
+	    searchdirs="$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path"
+	  fi
+	  for searchdir in $searchdirs; do
+	    for search_ext in .la $std_shrext .so .a; do
+	      # Search the libtool library
+	      lib="$searchdir/lib${name}${search_ext}"
+	      if test -f "$lib"; then
+		if test "$search_ext" = ".la"; then
+		  found=yes
+		else
+		  found=no
+		fi
+		break 2
+	      fi
+	    done
+	  done
+	  if test "$found" != yes; then
+	    # deplib doesn't seem to be a libtool library
+	    if test "$linkmode,$pass" = "prog,link"; then
+	      compile_deplibs="$deplib $compile_deplibs"
+	      finalize_deplibs="$deplib $finalize_deplibs"
+	    else
+	      deplibs="$deplib $deplibs"
+	      test "$linkmode" = lib && newdependency_libs="$deplib $newdependency_libs"
+	    fi
+	    continue
+	  else # deplib is a libtool library
+	    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,
+	    # We need to do some special things here, and not later.
+	    if test "X$allow_libtool_libs_with_static_runtimes" = "Xyes" ; then
+	      case " $predeps $postdeps " in
+	      *" $deplib "*)
+		if func_lalib_p "$lib"; then
+		  library_names=
+		  old_library=
+		  func_source "$lib"
+		  for l in $old_library $library_names; do
+		    ll="$l"
+		  done
+		  if test "X$ll" = "X$old_library" ; then # only static version available
+		    found=no
+		    func_dirname "$lib" "" "."
+		    ladir="$func_dirname_result"
+		    lib=$ladir/$old_library
+		    if test "$linkmode,$pass" = "prog,link"; then
+		      compile_deplibs="$deplib $compile_deplibs"
+		      finalize_deplibs="$deplib $finalize_deplibs"
+		    else
+		      deplibs="$deplib $deplibs"
+		      test "$linkmode" = lib && newdependency_libs="$deplib $newdependency_libs"
+		    fi
+		    continue
+		  fi
+		fi
+		;;
+	      *) ;;
+	      esac
+	    fi
+	  fi
+	  ;; # -l
+	*.ltframework)
+	  if test "$linkmode,$pass" = "prog,link"; then
+	    compile_deplibs="$deplib $compile_deplibs"
+	    finalize_deplibs="$deplib $finalize_deplibs"
+	  else
+	    deplibs="$deplib $deplibs"
+	    if test "$linkmode" = lib ; then
+		case "$new_inherited_linker_flags " in
+		    *" $deplib "*) ;;
+		    * ) new_inherited_linker_flags="$new_inherited_linker_flags $deplib" ;;
+		esac
+	    fi
+	  fi
+	  continue
+	  ;;
+	-L*)
+	  case $linkmode in
+	  lib)
+	    deplibs="$deplib $deplibs"
+	    test "$pass" = conv && continue
+	    newdependency_libs="$deplib $newdependency_libs"
+	    func_stripname '-L' '' "$deplib"
+	    newlib_search_path="$newlib_search_path $func_stripname_result"
+	    ;;
+	  prog)
+	    if test "$pass" = conv; then
+	      deplibs="$deplib $deplibs"
+	      continue
+	    fi
+	    if test "$pass" = scan; then
+	      deplibs="$deplib $deplibs"
+	    else
+	      compile_deplibs="$deplib $compile_deplibs"
+	      finalize_deplibs="$deplib $finalize_deplibs"
+	    fi
+	    func_stripname '-L' '' "$deplib"
+	    newlib_search_path="$newlib_search_path $func_stripname_result"
+	    ;;
+	  *)
+	    func_warning "\`-L' is ignored for archives/objects"
+	    ;;
+	  esac # linkmode
+	  continue
+	  ;; # -L
+	-R*)
+	  if test "$pass" = link; then
+	    func_stripname '-R' '' "$deplib"
+	    dir=$func_stripname_result
+	    # Make sure the xrpath contains only unique directories.
+	    case "$xrpath " in
+	    *" $dir "*) ;;
+	    *) xrpath="$xrpath $dir" ;;
+	    esac
+	  fi
+	  deplibs="$deplib $deplibs"
+	  continue
+	  ;;
+	*.la) lib="$deplib" ;;
+	*.$libext)
+	  if test "$pass" = conv; then
+	    deplibs="$deplib $deplibs"
+	    continue
+	  fi
+	  case $linkmode in
+	  lib)
+	    # Linking convenience modules into shared libraries is allowed,
+	    # but linking other static libraries is non-portable.
+	    case " $dlpreconveniencelibs " in
+	    *" $deplib "*) ;;
+	    *)
+	      valid_a_lib=no
+	      case $deplibs_check_method in
+		match_pattern*)
+		  set dummy $deplibs_check_method; shift
+		  match_pattern_regex=`expr "$deplibs_check_method" : "$1 \(.*\)"`
+		  if eval "\$ECHO \"X$deplib\"" 2>/dev/null | $Xsed -e 10q \
+		    | $EGREP "$match_pattern_regex" > /dev/null; then
+		    valid_a_lib=yes
+		  fi
+		;;
+		pass_all)
+		  valid_a_lib=yes
+		;;
+	      esac
+	      if test "$valid_a_lib" != yes; then
+		$ECHO
+		$ECHO "*** Warning: Trying to link with static lib archive $deplib."
+		$ECHO "*** I have the capability to make that library automatically link in when"
+		$ECHO "*** you link to this library.  But I can only do this if you have a"
+		$ECHO "*** shared version of the library, which you do not appear to have"
+		$ECHO "*** because the file extensions .$libext of this argument makes me believe"
+		$ECHO "*** that it is just a static archive that I should not use here."
+	      else
+		$ECHO
+		$ECHO "*** Warning: Linking the shared library $output against the"
+		$ECHO "*** static library $deplib is not portable!"
+		deplibs="$deplib $deplibs"
+	      fi
+	      ;;
+	    esac
+	    continue
+	    ;;
+	  prog)
+	    if test "$pass" != link; then
+	      deplibs="$deplib $deplibs"
+	    else
+	      compile_deplibs="$deplib $compile_deplibs"
+	      finalize_deplibs="$deplib $finalize_deplibs"
+	    fi
+	    continue
+	    ;;
+	  esac # linkmode
+	  ;; # *.$libext
+	*.lo | *.$objext)
+	  if test "$pass" = conv; then
+	    deplibs="$deplib $deplibs"
+	  elif test "$linkmode" = prog; then
+	    if test "$pass" = dlpreopen || test "$dlopen_support" != yes || test "$build_libtool_libs" = no; then
+	      # If there is no dlopen support or we're linking statically,
+	      # we need to preload.
+	      newdlprefiles="$newdlprefiles $deplib"
+	      compile_deplibs="$deplib $compile_deplibs"
+	      finalize_deplibs="$deplib $finalize_deplibs"
+	    else
+	      newdlfiles="$newdlfiles $deplib"
+	    fi
+	  fi
+	  continue
+	  ;;
+	%DEPLIBS%)
+	  alldeplibs=yes
+	  continue
+	  ;;
+	esac # case $deplib
+
+	if test "$found" = yes || test -f "$lib"; then :
+	else
+	  func_fatal_error "cannot find the library \`$lib' or unhandled argument \`$deplib'"
+	fi
+
+	# Check to see that this really is a libtool archive.
+	func_lalib_unsafe_p "$lib" \
+	  || func_fatal_error "\`$lib' is not a valid libtool archive"
+
+	func_dirname "$lib" "" "."
+	ladir="$func_dirname_result"
+
+	dlname=
+	dlopen=
+	dlpreopen=
+	libdir=
+	library_names=
+	old_library=
+	inherited_linker_flags=
+	# If the library was installed with an old release of libtool,
+	# it will not redefine variables installed, or shouldnotlink
+	installed=yes
+	shouldnotlink=no
+	avoidtemprpath=
+
+
+	# Read the .la file
+	func_source "$lib"
+
+	# Convert "-framework foo" to "foo.ltframework"
+	if test -n "$inherited_linker_flags"; then
+	  tmp_inherited_linker_flags=`$ECHO "X$inherited_linker_flags" | $Xsed -e 's/-framework \([^ $]*\)/\1.ltframework/g'`
+	  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do
+	    case " $new_inherited_linker_flags " in
+	      *" $tmp_inherited_linker_flag "*) ;;
+	      *) new_inherited_linker_flags="$new_inherited_linker_flags $tmp_inherited_linker_flag";;
+	    esac
+	  done
+	fi
+	dependency_libs=`$ECHO "X $dependency_libs" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	if test "$linkmode,$pass" = "lib,link" ||
+	   test "$linkmode,$pass" = "prog,scan" ||
+	   { test "$linkmode" != prog && test "$linkmode" != lib; }; then
+	  test -n "$dlopen" && dlfiles="$dlfiles $dlopen"
+	  test -n "$dlpreopen" && dlprefiles="$dlprefiles $dlpreopen"
+	fi
+
+	if test "$pass" = conv; then
+	  # Only check for convenience libraries
+	  deplibs="$lib $deplibs"
+	  if test -z "$libdir"; then
+	    if test -z "$old_library"; then
+	      func_fatal_error "cannot find name of link library for \`$lib'"
+	    fi
+	    # It is a libtool convenience library, so add in its objects.
+	    convenience="$convenience $ladir/$objdir/$old_library"
+	    old_convenience="$old_convenience $ladir/$objdir/$old_library"
+	    tmp_libs=
+	    for deplib in $dependency_libs; do
+	      deplibs="$deplib $deplibs"
+	      if $opt_duplicate_deps ; then
+		case "$tmp_libs " in
+		*" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
+		esac
+	      fi
+	      tmp_libs="$tmp_libs $deplib"
+	    done
+	  elif test "$linkmode" != prog && test "$linkmode" != lib; then
+	    func_fatal_error "\`$lib' is not a convenience library"
+	  fi
+	  continue
+	fi # $pass = conv
+
+
+	# Get the name of the library we link against.
+	linklib=
+	for l in $old_library $library_names; do
+	  linklib="$l"
+	done
+	if test -z "$linklib"; then
+	  func_fatal_error "cannot find name of link library for \`$lib'"
+	fi
+
+	# This library was specified with -dlopen.
+	if test "$pass" = dlopen; then
+	  if test -z "$libdir"; then
+	    func_fatal_error "cannot -dlopen a convenience library: \`$lib'"
+	  fi
+	  if test -z "$dlname" ||
+	     test "$dlopen_support" != yes ||
+	     test "$build_libtool_libs" = no; then
+	    # If there is no dlname, no dlopen support or we're linking
+	    # statically, we need to preload.  We also need to preload any
+	    # dependent libraries so libltdl's deplib preloader doesn't
+	    # bomb out in the load deplibs phase.
+	    dlprefiles="$dlprefiles $lib $dependency_libs"
+	  else
+	    newdlfiles="$newdlfiles $lib"
+	  fi
+	  continue
+	fi # $pass = dlopen
+
+	# We need an absolute path.
+	case $ladir in
+	[\\/]* | [A-Za-z]:[\\/]*) abs_ladir="$ladir" ;;
+	*)
+	  abs_ladir=`cd "$ladir" && pwd`
+	  if test -z "$abs_ladir"; then
+	    func_warning "cannot determine absolute directory name of \`$ladir'"
+	    func_warning "passing it literally to the linker, although it might fail"
+	    abs_ladir="$ladir"
+	  fi
+	  ;;
+	esac
+	func_basename "$lib"
+	laname="$func_basename_result"
+
+	# Find the relevant object directory and library name.
+	if test "X$installed" = Xyes; then
+	  if test ! -f "$libdir/$linklib" && test -f "$abs_ladir/$linklib"; then
+	    func_warning "library \`$lib' was moved."
+	    dir="$ladir"
+	    absdir="$abs_ladir"
+	    libdir="$abs_ladir"
+	  else
+	    dir="$libdir"
+	    absdir="$libdir"
+	  fi
+	  test "X$hardcode_automatic" = Xyes && avoidtemprpath=yes
+	else
+	  if test ! -f "$ladir/$objdir/$linklib" && test -f "$abs_ladir/$linklib"; then
+	    dir="$ladir"
+	    absdir="$abs_ladir"
+	    # Remove this search path later
+	    notinst_path="$notinst_path $abs_ladir"
+	  else
+	    dir="$ladir/$objdir"
+	    absdir="$abs_ladir/$objdir"
+	    # Remove this search path later
+	    notinst_path="$notinst_path $abs_ladir"
+	  fi
+	fi # $installed = yes
+	func_stripname 'lib' '.la' "$laname"
+	name=$func_stripname_result
+
+	# This library was specified with -dlpreopen.
+	if test "$pass" = dlpreopen; then
+	  if test -z "$libdir" && test "$linkmode" = prog; then
+	    func_fatal_error "only libraries may -dlpreopen a convenience library: \`$lib'"
+	  fi
+	  # Prefer using a static library (so that no silly _DYNAMIC symbols
+	  # are required to link).
+	  if test -n "$old_library"; then
+	    newdlprefiles="$newdlprefiles $dir/$old_library"
+	    # Keep a list of preopened convenience libraries to check
+	    # that they are being used correctly in the link pass.
+	    test -z "$libdir" && \
+		dlpreconveniencelibs="$dlpreconveniencelibs $dir/$old_library"
+	  # Otherwise, use the dlname, so that lt_dlopen finds it.
+	  elif test -n "$dlname"; then
+	    newdlprefiles="$newdlprefiles $dir/$dlname"
+	  else
+	    newdlprefiles="$newdlprefiles $dir/$linklib"
+	  fi
+	fi # $pass = dlpreopen
+
+	if test -z "$libdir"; then
+	  # Link the convenience library
+	  if test "$linkmode" = lib; then
+	    deplibs="$dir/$old_library $deplibs"
+	  elif test "$linkmode,$pass" = "prog,link"; then
+	    compile_deplibs="$dir/$old_library $compile_deplibs"
+	    finalize_deplibs="$dir/$old_library $finalize_deplibs"
+	  else
+	    deplibs="$lib $deplibs" # used for prog,scan pass
+	  fi
+	  continue
+	fi
+
+
+	if test "$linkmode" = prog && test "$pass" != link; then
+	  newlib_search_path="$newlib_search_path $ladir"
+	  deplibs="$lib $deplibs"
+
+	  linkalldeplibs=no
+	  if test "$link_all_deplibs" != no || test -z "$library_names" ||
+	     test "$build_libtool_libs" = no; then
+	    linkalldeplibs=yes
+	  fi
+
+	  tmp_libs=
+	  for deplib in $dependency_libs; do
+	    case $deplib in
+	    -L*) func_stripname '-L' '' "$deplib"
+	         newlib_search_path="$newlib_search_path $func_stripname_result"
+		 ;;
+	    esac
+	    # Need to link against all dependency_libs?
+	    if test "$linkalldeplibs" = yes; then
+	      deplibs="$deplib $deplibs"
+	    else
+	      # Need to hardcode shared library paths
+	      # or/and link against static libraries
+	      newdependency_libs="$deplib $newdependency_libs"
+	    fi
+	    if $opt_duplicate_deps ; then
+	      case "$tmp_libs " in
+	      *" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
+	      esac
+	    fi
+	    tmp_libs="$tmp_libs $deplib"
+	  done # for deplib
+	  continue
+	fi # $linkmode = prog...
+
+	if test "$linkmode,$pass" = "prog,link"; then
+	  if test -n "$library_names" &&
+	     { { test "$prefer_static_libs" = no ||
+	         test "$prefer_static_libs,$installed" = "built,yes"; } ||
+	       test -z "$old_library"; }; then
+	    # We need to hardcode the library path
+	    if test -n "$shlibpath_var" && test -z "$avoidtemprpath" ; then
+	      # Make sure the rpath contains only unique directories.
+	      case "$temp_rpath:" in
+	      *"$absdir:"*) ;;
+	      *) temp_rpath="$temp_rpath$absdir:" ;;
+	      esac
+	    fi
+
+	    # Hardcode the library path.
+	    # Skip directories that are in the system default run-time
+	    # search path.
+	    case " $sys_lib_dlsearch_path " in
+	    *" $absdir "*) ;;
+	    *)
+	      case "$compile_rpath " in
+	      *" $absdir "*) ;;
+	      *) compile_rpath="$compile_rpath $absdir"
+	      esac
+	      ;;
+	    esac
+	    case " $sys_lib_dlsearch_path " in
+	    *" $libdir "*) ;;
+	    *)
+	      case "$finalize_rpath " in
+	      *" $libdir "*) ;;
+	      *) finalize_rpath="$finalize_rpath $libdir"
+	      esac
+	      ;;
+	    esac
+	  fi # $linkmode,$pass = prog,link...
+
+	  if test "$alldeplibs" = yes &&
+	     { test "$deplibs_check_method" = pass_all ||
+	       { test "$build_libtool_libs" = yes &&
+		 test -n "$library_names"; }; }; then
+	    # We only need to search for static libraries
+	    continue
+	  fi
+	fi
+
+	link_static=no # Whether the deplib will be linked statically
+	use_static_libs=$prefer_static_libs
+	if test "$use_static_libs" = built && test "$installed" = yes; then
+	  use_static_libs=no
+	fi
+	if test -n "$library_names" &&
+	   { test "$use_static_libs" = no || test -z "$old_library"; }; then
+	  case $host in
+	  *cygwin* | *mingw* | *cegcc*)
+	      # No point in relinking DLLs because paths are not encoded
+	      notinst_deplibs="$notinst_deplibs $lib"
+	      need_relink=no
+	    ;;
+	  *)
+	    if test "$installed" = no; then
+	      notinst_deplibs="$notinst_deplibs $lib"
+	      need_relink=yes
+	    fi
+	    ;;
+	  esac
+	  # This is a shared library
+
+	  # Warn about portability, can't link against -module's on some
+	  # systems (darwin).  Don't bleat about dlopened modules though!
+	  dlopenmodule=""
+	  for dlpremoduletest in $dlprefiles; do
+	    if test "X$dlpremoduletest" = "X$lib"; then
+	      dlopenmodule="$dlpremoduletest"
+	      break
+	    fi
+	  done
+	  if test -z "$dlopenmodule" && test "$shouldnotlink" = yes && test "$pass" = link; then
+	    $ECHO
+	    if test "$linkmode" = prog; then
+	      $ECHO "*** Warning: Linking the executable $output against the loadable module"
+	    else
+	      $ECHO "*** Warning: Linking the shared library $output against the loadable module"
+	    fi
+	    $ECHO "*** $linklib is not portable!"
+	  fi
+	  if test "$linkmode" = lib &&
+	     test "$hardcode_into_libs" = yes; then
+	    # Hardcode the library path.
+	    # Skip directories that are in the system default run-time
+	    # search path.
+	    case " $sys_lib_dlsearch_path " in
+	    *" $absdir "*) ;;
+	    *)
+	      case "$compile_rpath " in
+	      *" $absdir "*) ;;
+	      *) compile_rpath="$compile_rpath $absdir"
+	      esac
+	      ;;
+	    esac
+	    case " $sys_lib_dlsearch_path " in
+	    *" $libdir "*) ;;
+	    *)
+	      case "$finalize_rpath " in
+	      *" $libdir "*) ;;
+	      *) finalize_rpath="$finalize_rpath $libdir"
+	      esac
+	      ;;
+	    esac
+	  fi
+
+	  if test -n "$old_archive_from_expsyms_cmds"; then
+	    # figure out the soname
+	    set dummy $library_names
+	    shift
+	    realname="$1"
+	    shift
+	    libname=`eval "\\$ECHO \"$libname_spec\""`
+	    # use dlname if we got it. it's perfectly good, no?
+	    if test -n "$dlname"; then
+	      soname="$dlname"
+	    elif test -n "$soname_spec"; then
+	      # bleh windows
+	      case $host in
+	      *cygwin* | mingw* | *cegcc*)
+	        func_arith $current - $age
+		major=$func_arith_result
+		versuffix="-$major"
+		;;
+	      esac
+	      eval soname=\"$soname_spec\"
+	    else
+	      soname="$realname"
+	    fi
+
+	    # Make a new name for the extract_expsyms_cmds to use
+	    soroot="$soname"
+	    func_basename "$soroot"
+	    soname="$func_basename_result"
+	    func_stripname 'lib' '.dll' "$soname"
+	    newlib=libimp-$func_stripname_result.a
+
+	    # If the library has no export list, then create one now
+	    if test -f "$output_objdir/$soname-def"; then :
+	    else
+	      func_verbose "extracting exported symbol list from \`$soname'"
+	      func_execute_cmds "$extract_expsyms_cmds" 'exit $?'
+	    fi
+
+	    # Create $newlib
+	    if test -f "$output_objdir/$newlib"; then :; else
+	      func_verbose "generating import library for \`$soname'"
+	      func_execute_cmds "$old_archive_from_expsyms_cmds" 'exit $?'
+	    fi
+	    # make sure the library variables are pointing to the new library
+	    dir=$output_objdir
+	    linklib=$newlib
+	  fi # test -n "$old_archive_from_expsyms_cmds"
+
+	  if test "$linkmode" = prog || test "$mode" != relink; then
+	    add_shlibpath=
+	    add_dir=
+	    add=
+	    lib_linked=yes
+	    case $hardcode_action in
+	    immediate | unsupported)
+	      if test "$hardcode_direct" = no; then
+		add="$dir/$linklib"
+		case $host in
+		  *-*-sco3.2v5.0.[024]*) add_dir="-L$dir" ;;
+		  *-*-sysv4*uw2*) add_dir="-L$dir" ;;
+		  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \
+		    *-*-unixware7*) add_dir="-L$dir" ;;
+		  *-*-darwin* )
+		    # if the lib is a (non-dlopened) module then we can not
+		    # link against it, someone is ignoring the earlier warnings
+		    if /usr/bin/file -L $add 2> /dev/null |
+			 $GREP ": [^:]* bundle" >/dev/null ; then
+		      if test "X$dlopenmodule" != "X$lib"; then
+			$ECHO "*** Warning: lib $linklib is a module, not a shared library"
+			if test -z "$old_library" ; then
+			  $ECHO
+			  $ECHO "*** And there doesn't seem to be a static archive available"
+			  $ECHO "*** The link will probably fail, sorry"
+			else
+			  add="$dir/$old_library"
+			fi
+		      elif test -n "$old_library"; then
+			add="$dir/$old_library"
+		      fi
+		    fi
+		esac
+	      elif test "$hardcode_minus_L" = no; then
+		case $host in
+		*-*-sunos*) add_shlibpath="$dir" ;;
+		esac
+		add_dir="-L$dir"
+		add="-l$name"
+	      elif test "$hardcode_shlibpath_var" = no; then
+		add_shlibpath="$dir"
+		add="-l$name"
+	      else
+		lib_linked=no
+	      fi
+	      ;;
+	    relink)
+	      if test "$hardcode_direct" = yes &&
+	         test "$hardcode_direct_absolute" = no; then
+		add="$dir/$linklib"
+	      elif test "$hardcode_minus_L" = yes; then
+		add_dir="-L$dir"
+		# Try looking first in the location we're being installed to.
+		if test -n "$inst_prefix_dir"; then
+		  case $libdir in
+		    [\\/]*)
+		      add_dir="$add_dir -L$inst_prefix_dir$libdir"
+		      ;;
+		  esac
+		fi
+		add="-l$name"
+	      elif test "$hardcode_shlibpath_var" = yes; then
+		add_shlibpath="$dir"
+		add="-l$name"
+	      else
+		lib_linked=no
+	      fi
+	      ;;
+	    *) lib_linked=no ;;
+	    esac
+
+	    if test "$lib_linked" != yes; then
+	      func_fatal_configuration "unsupported hardcode properties"
+	    fi
+
+	    if test -n "$add_shlibpath"; then
+	      case :$compile_shlibpath: in
+	      *":$add_shlibpath:"*) ;;
+	      *) compile_shlibpath="$compile_shlibpath$add_shlibpath:" ;;
+	      esac
+	    fi
+	    if test "$linkmode" = prog; then
+	      test -n "$add_dir" && compile_deplibs="$add_dir $compile_deplibs"
+	      test -n "$add" && compile_deplibs="$add $compile_deplibs"
+	    else
+	      test -n "$add_dir" && deplibs="$add_dir $deplibs"
+	      test -n "$add" && deplibs="$add $deplibs"
+	      if test "$hardcode_direct" != yes &&
+		 test "$hardcode_minus_L" != yes &&
+		 test "$hardcode_shlibpath_var" = yes; then
+		case :$finalize_shlibpath: in
+		*":$libdir:"*) ;;
+		*) finalize_shlibpath="$finalize_shlibpath$libdir:" ;;
+		esac
+	      fi
+	    fi
+	  fi
+
+	  if test "$linkmode" = prog || test "$mode" = relink; then
+	    add_shlibpath=
+	    add_dir=
+	    add=
+	    # Finalize command for both is simple: just hardcode it.
+	    if test "$hardcode_direct" = yes &&
+	       test "$hardcode_direct_absolute" = no; then
+	      add="$libdir/$linklib"
+	    elif test "$hardcode_minus_L" = yes; then
+	      add_dir="-L$libdir"
+	      add="-l$name"
+	    elif test "$hardcode_shlibpath_var" = yes; then
+	      case :$finalize_shlibpath: in
+	      *":$libdir:"*) ;;
+	      *) finalize_shlibpath="$finalize_shlibpath$libdir:" ;;
+	      esac
+	      add="-l$name"
+	    elif test "$hardcode_automatic" = yes; then
+	      if test -n "$inst_prefix_dir" &&
+		 test -f "$inst_prefix_dir$libdir/$linklib" ; then
+		add="$inst_prefix_dir$libdir/$linklib"
+	      else
+		add="$libdir/$linklib"
+	      fi
+	    else
+	      # We cannot seem to hardcode it, guess we'll fake it.
+	      add_dir="-L$libdir"
+	      # Try looking first in the location we're being installed to.
+	      if test -n "$inst_prefix_dir"; then
+		case $libdir in
+		  [\\/]*)
+		    add_dir="$add_dir -L$inst_prefix_dir$libdir"
+		    ;;
+		esac
+	      fi
+	      add="-l$name"
+	    fi
+
+	    if test "$linkmode" = prog; then
+	      test -n "$add_dir" && finalize_deplibs="$add_dir $finalize_deplibs"
+	      test -n "$add" && finalize_deplibs="$add $finalize_deplibs"
+	    else
+	      test -n "$add_dir" && deplibs="$add_dir $deplibs"
+	      test -n "$add" && deplibs="$add $deplibs"
+	    fi
+	  fi
+	elif test "$linkmode" = prog; then
+	  # Here we assume that one of hardcode_direct or hardcode_minus_L
+	  # is not unsupported.  This is valid on all known static and
+	  # shared platforms.
+	  if test "$hardcode_direct" != unsupported; then
+	    test -n "$old_library" && linklib="$old_library"
+	    compile_deplibs="$dir/$linklib $compile_deplibs"
+	    finalize_deplibs="$dir/$linklib $finalize_deplibs"
+	  else
+	    compile_deplibs="-l$name -L$dir $compile_deplibs"
+	    finalize_deplibs="-l$name -L$dir $finalize_deplibs"
+	  fi
+	elif test "$build_libtool_libs" = yes; then
+	  # Not a shared library
+	  if test "$deplibs_check_method" != pass_all; then
+	    # We're trying link a shared library against a static one
+	    # but the system doesn't support it.
+
+	    # Just print a warning and add the library to dependency_libs so
+	    # that the program can be linked against the static library.
+	    $ECHO
+	    $ECHO "*** Warning: This system can not link to static lib archive $lib."
+	    $ECHO "*** I have the capability to make that library automatically link in when"
+	    $ECHO "*** you link to this library.  But I can only do this if you have a"
+	    $ECHO "*** shared version of the library, which you do not appear to have."
+	    if test "$module" = yes; then
+	      $ECHO "*** But as you try to build a module library, libtool will still create "
+	      $ECHO "*** a static module, that should work as long as the dlopening application"
+	      $ECHO "*** is linked with the -dlopen flag to resolve symbols at runtime."
+	      if test -z "$global_symbol_pipe"; then
+		$ECHO
+		$ECHO "*** However, this would only work if libtool was able to extract symbol"
+		$ECHO "*** lists from a program, using \`nm' or equivalent, but libtool could"
+		$ECHO "*** not find such a program.  So, this module is probably useless."
+		$ECHO "*** \`nm' from GNU binutils and a full rebuild may help."
+	      fi
+	      if test "$build_old_libs" = no; then
+		build_libtool_libs=module
+		build_old_libs=yes
+	      else
+		build_libtool_libs=no
+	      fi
+	    fi
+	  else
+	    deplibs="$dir/$old_library $deplibs"
+	    link_static=yes
+	  fi
+	fi # link shared/static library?
+
+	if test "$linkmode" = lib; then
+	  if test -n "$dependency_libs" &&
+	     { test "$hardcode_into_libs" != yes ||
+	       test "$build_old_libs" = yes ||
+	       test "$link_static" = yes; }; then
+	    # Extract -R from dependency_libs
+	    temp_deplibs=
+	    for libdir in $dependency_libs; do
+	      case $libdir in
+	      -R*) func_stripname '-R' '' "$libdir"
+	           temp_xrpath=$func_stripname_result
+		   case " $xrpath " in
+		   *" $temp_xrpath "*) ;;
+		   *) xrpath="$xrpath $temp_xrpath";;
+		   esac;;
+	      *) temp_deplibs="$temp_deplibs $libdir";;
+	      esac
+	    done
+	    dependency_libs="$temp_deplibs"
+	  fi
+
+	  newlib_search_path="$newlib_search_path $absdir"
+	  # Link against this library
+	  test "$link_static" = no && newdependency_libs="$abs_ladir/$laname $newdependency_libs"
+	  # ... and its dependency_libs
+	  tmp_libs=
+	  for deplib in $dependency_libs; do
+	    newdependency_libs="$deplib $newdependency_libs"
+	    if $opt_duplicate_deps ; then
+	      case "$tmp_libs " in
+	      *" $deplib "*) specialdeplibs="$specialdeplibs $deplib" ;;
+	      esac
+	    fi
+	    tmp_libs="$tmp_libs $deplib"
+	  done
+
+	  if test "$link_all_deplibs" != no; then
+	    # Add the search paths of all dependency libraries
+	    for deplib in $dependency_libs; do
+	      path=
+	      case $deplib in
+	      -L*) path="$deplib" ;;
+	      *.la)
+	        func_dirname "$deplib" "" "."
+		dir="$func_dirname_result"
+		# We need an absolute path.
+		case $dir in
+		[\\/]* | [A-Za-z]:[\\/]*) absdir="$dir" ;;
+		*)
+		  absdir=`cd "$dir" && pwd`
+		  if test -z "$absdir"; then
+		    func_warning "cannot determine absolute directory name of \`$dir'"
+		    absdir="$dir"
+		  fi
+		  ;;
+		esac
+		if $GREP "^installed=no" $deplib > /dev/null; then
+		case $host in
+		*-*-darwin*)
+		  depdepl=
+		  eval deplibrary_names=`${SED} -n -e 's/^library_names=\(.*\)$/\1/p' $deplib`
+		  if test -n "$deplibrary_names" ; then
+		    for tmp in $deplibrary_names ; do
+		      depdepl=$tmp
+		    done
+		    if test -f "$absdir/$objdir/$depdepl" ; then
+		      depdepl="$absdir/$objdir/$depdepl"
+		      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`
+                      if test -z "$darwin_install_name"; then
+                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`
+                      fi
+		      compiler_flags="$compiler_flags ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}"
+		      linker_flags="$linker_flags -dylib_file ${darwin_install_name}:${depdepl}"
+		      path=
+		    fi
+		  fi
+		  ;;
+		*)
+		  path="-L$absdir/$objdir"
+		  ;;
+		esac
+		else
+		  eval libdir=`${SED} -n -e 's/^libdir=\(.*\)$/\1/p' $deplib`
+		  test -z "$libdir" && \
+		    func_fatal_error "\`$deplib' is not a valid libtool archive"
+		  test "$absdir" != "$libdir" && \
+		    func_warning "\`$deplib' seems to be moved"
+
+		  path="-L$absdir"
+		fi
+		;;
+	      esac
+	      case " $deplibs " in
+	      *" $path "*) ;;
+	      *) deplibs="$path $deplibs" ;;
+	      esac
+	    done
+	  fi # link_all_deplibs != no
+	fi # linkmode = lib
+      done # for deplib in $libs
+      if test "$pass" = link; then
+	if test "$linkmode" = "prog"; then
+	  compile_deplibs="$new_inherited_linker_flags $compile_deplibs"
+	  finalize_deplibs="$new_inherited_linker_flags $finalize_deplibs"
+	else
+	  compiler_flags="$compiler_flags "`$ECHO "X $new_inherited_linker_flags" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	fi
+      fi
+      dependency_libs="$newdependency_libs"
+      if test "$pass" = dlpreopen; then
+	# Link the dlpreopened libraries before other libraries
+	for deplib in $save_deplibs; do
+	  deplibs="$deplib $deplibs"
+	done
+      fi
+      if test "$pass" != dlopen; then
+	if test "$pass" != conv; then
+	  # Make sure lib_search_path contains only unique directories.
+	  lib_search_path=
+	  for dir in $newlib_search_path; do
+	    case "$lib_search_path " in
+	    *" $dir "*) ;;
+	    *) lib_search_path="$lib_search_path $dir" ;;
+	    esac
+	  done
+	  newlib_search_path=
+	fi
+
+	if test "$linkmode,$pass" != "prog,link"; then
+	  vars="deplibs"
+	else
+	  vars="compile_deplibs finalize_deplibs"
+	fi
+	for var in $vars dependency_libs; do
+	  # Add libraries to $var in reverse order
+	  eval tmp_libs=\"\$$var\"
+	  new_libs=
+	  for deplib in $tmp_libs; do
+	    # FIXME: Pedantically, this is the right thing to do, so
+	    #        that some nasty dependency loop isn't accidentally
+	    #        broken:
+	    #new_libs="$deplib $new_libs"
+	    # Pragmatically, this seems to cause very few problems in
+	    # practice:
+	    case $deplib in
+	    -L*) new_libs="$deplib $new_libs" ;;
+	    -R*) ;;
+	    *)
+	      # And here is the reason: when a library appears more
+	      # than once as an explicit dependence of a library, or
+	      # is implicitly linked in more than once by the
+	      # compiler, it is considered special, and multiple
+	      # occurrences thereof are not removed.  Compare this
+	      # with having the same library being listed as a
+	      # dependency of multiple other libraries: in this case,
+	      # we know (pedantically, we assume) the library does not
+	      # need to be listed more than once, so we keep only the
+	      # last copy.  This is not always right, but it is rare
+	      # enough that we require users that really mean to play
+	      # such unportable linking tricks to link the library
+	      # using -Wl,-lname, so that libtool does not consider it
+	      # for duplicate removal.
+	      case " $specialdeplibs " in
+	      *" $deplib "*) new_libs="$deplib $new_libs" ;;
+	      *)
+		case " $new_libs " in
+		*" $deplib "*) ;;
+		*) new_libs="$deplib $new_libs" ;;
+		esac
+		;;
+	      esac
+	      ;;
+	    esac
+	  done
+	  tmp_libs=
+	  for deplib in $new_libs; do
+	    case $deplib in
+	    -L*)
+	      case " $tmp_libs " in
+	      *" $deplib "*) ;;
+	      *) tmp_libs="$tmp_libs $deplib" ;;
+	      esac
+	      ;;
+	    *) tmp_libs="$tmp_libs $deplib" ;;
+	    esac
+	  done
+	  eval $var=\"$tmp_libs\"
+	done # for var
+      fi
+      # Last step: remove runtime libs from dependency_libs
+      # (they stay in deplibs)
+      tmp_libs=
+      for i in $dependency_libs ; do
+	case " $predeps $postdeps $compiler_lib_search_path " in
+	*" $i "*)
+	  i=""
+	  ;;
+	esac
+	if test -n "$i" ; then
+	  tmp_libs="$tmp_libs $i"
+	fi
+      done
+      dependency_libs=$tmp_libs
+    done # for pass
+    if test "$linkmode" = prog; then
+      dlfiles="$newdlfiles"
+    fi
+    if test "$linkmode" = prog || test "$linkmode" = lib; then
+      dlprefiles="$newdlprefiles"
+    fi
+
+    case $linkmode in
+    oldlib)
+      if test -n "$dlfiles$dlprefiles" || test "$dlself" != no; then
+	func_warning "\`-dlopen' is ignored for archives"
+      fi
+
+      case " $deplibs" in
+      *\ -l* | *\ -L*)
+	func_warning "\`-l' and \`-L' are ignored for archives" ;;
+      esac
+
+      test -n "$rpath" && \
+	func_warning "\`-rpath' is ignored for archives"
+
+      test -n "$xrpath" && \
+	func_warning "\`-R' is ignored for archives"
+
+      test -n "$vinfo" && \
+	func_warning "\`-version-info/-version-number' is ignored for archives"
+
+      test -n "$release" && \
+	func_warning "\`-release' is ignored for archives"
+
+      test -n "$export_symbols$export_symbols_regex" && \
+	func_warning "\`-export-symbols' is ignored for archives"
+
+      # Now set the variables for building old libraries.
+      build_libtool_libs=no
+      oldlibs="$output"
+      objs="$objs$old_deplibs"
+      ;;
+
+    lib)
+      # Make sure we only generate libraries of the form `libNAME.la'.
+      case $outputname in
+      lib*)
+	func_stripname 'lib' '.la' "$outputname"
+	name=$func_stripname_result
+	eval shared_ext=\"$shrext_cmds\"
+	eval libname=\"$libname_spec\"
+	;;
+      *)
+	test "$module" = no && \
+	  func_fatal_help "libtool library \`$output' must begin with \`lib'"
+
+	if test "$need_lib_prefix" != no; then
+	  # Add the "lib" prefix for modules if required
+	  func_stripname '' '.la' "$outputname"
+	  name=$func_stripname_result
+	  eval shared_ext=\"$shrext_cmds\"
+	  eval libname=\"$libname_spec\"
+	else
+	  func_stripname '' '.la' "$outputname"
+	  libname=$func_stripname_result
+	fi
+	;;
+      esac
+
+      if test -n "$objs"; then
+	if test "$deplibs_check_method" != pass_all; then
+	  func_fatal_error "cannot build libtool library \`$output' from non-libtool objects on this host:$objs"
+	else
+	  $ECHO
+	  $ECHO "*** Warning: Linking the shared library $output against the non-libtool"
+	  $ECHO "*** objects $objs is not portable!"
+	  libobjs="$libobjs $objs"
+	fi
+      fi
+
+      test "$dlself" != no && \
+	func_warning "\`-dlopen self' is ignored for libtool libraries"
+
+      set dummy $rpath
+      shift
+      test "$#" -gt 1 && \
+	func_warning "ignoring multiple \`-rpath's for a libtool library"
+
+      install_libdir="$1"
+
+      oldlibs=
+      if test -z "$rpath"; then
+	if test "$build_libtool_libs" = yes; then
+	  # Building a libtool convenience library.
+	  # Some compilers have problems with a `.al' extension so
+	  # convenience libraries should have the same extension an
+	  # archive normally would.
+	  oldlibs="$output_objdir/$libname.$libext $oldlibs"
+	  build_libtool_libs=convenience
+	  build_old_libs=yes
+	fi
+
+	test -n "$vinfo" && \
+	  func_warning "\`-version-info/-version-number' is ignored for convenience libraries"
+
+	test -n "$release" && \
+	  func_warning "\`-release' is ignored for convenience libraries"
+      else
+
+	# Parse the version information argument.
+	save_ifs="$IFS"; IFS=':'
+	set dummy $vinfo 0 0 0
+	shift
+	IFS="$save_ifs"
+
+	test -n "$7" && \
+	  func_fatal_help "too many parameters to \`-version-info'"
+
+	# convert absolute version numbers to libtool ages
+	# this retains compatibility with .la files and attempts
+	# to make the code below a bit more comprehensible
+
+	case $vinfo_number in
+	yes)
+	  number_major="$1"
+	  number_minor="$2"
+	  number_revision="$3"
+	  #
+	  # There are really only two kinds -- those that
+	  # use the current revision as the major version
+	  # and those that subtract age and use age as
+	  # a minor version.  But, then there is irix
+	  # which has an extra 1 added just for fun
+	  #
+	  case $version_type in
+	  darwin|linux|osf|windows|none)
+	    func_arith $number_major + $number_minor
+	    current=$func_arith_result
+	    age="$number_minor"
+	    revision="$number_revision"
+	    ;;
+	  freebsd-aout|freebsd-elf|sunos)
+	    current="$number_major"
+	    revision="$number_minor"
+	    age="0"
+	    ;;
+	  irix|nonstopux)
+	    func_arith $number_major + $number_minor
+	    current=$func_arith_result
+	    age="$number_minor"
+	    revision="$number_minor"
+	    lt_irix_increment=no
+	    ;;
+	  *)
+	    func_fatal_configuration "$modename: unknown library version type \`$version_type'"
+	    ;;
+	  esac
+	  ;;
+	no)
+	  current="$1"
+	  revision="$2"
+	  age="$3"
+	  ;;
+	esac
+
+	# Check that each of the things are valid numbers.
+	case $current in
+	0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;
+	*)
+	  func_error "CURRENT \`$current' must be a nonnegative integer"
+	  func_fatal_error "\`$vinfo' is not valid version information"
+	  ;;
+	esac
+
+	case $revision in
+	0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;
+	*)
+	  func_error "REVISION \`$revision' must be a nonnegative integer"
+	  func_fatal_error "\`$vinfo' is not valid version information"
+	  ;;
+	esac
+
+	case $age in
+	0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;
+	*)
+	  func_error "AGE \`$age' must be a nonnegative integer"
+	  func_fatal_error "\`$vinfo' is not valid version information"
+	  ;;
+	esac
+
+	if test "$age" -gt "$current"; then
+	  func_error "AGE \`$age' is greater than the current interface number \`$current'"
+	  func_fatal_error "\`$vinfo' is not valid version information"
+	fi
+
+	# Calculate the version variables.
+	major=
+	versuffix=
+	verstring=
+	case $version_type in
+	none) ;;
+
+	darwin)
+	  # Like Linux, but with the current version available in
+	  # verstring for coding it into the library header
+	  func_arith $current - $age
+	  major=.$func_arith_result
+	  versuffix="$major.$age.$revision"
+	  # Darwin ld doesn't like 0 for these options...
+	  func_arith $current + 1
+	  minor_current=$func_arith_result
+	  xlcverstring="${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision"
+	  verstring="-compatibility_version $minor_current -current_version $minor_current.$revision"
+	  ;;
+
+	freebsd-aout)
+	  major=".$current"
+	  versuffix=".$current.$revision";
+	  ;;
+
+	freebsd-elf)
+	  major=".$current"
+	  versuffix=".$current"
+	  ;;
+
+	irix | nonstopux)
+	  if test "X$lt_irix_increment" = "Xno"; then
+	    func_arith $current - $age
+	  else
+	    func_arith $current - $age + 1
+	  fi
+	  major=$func_arith_result
+
+	  case $version_type in
+	    nonstopux) verstring_prefix=nonstopux ;;
+	    *)         verstring_prefix=sgi ;;
+	  esac
+	  verstring="$verstring_prefix$major.$revision"
+
+	  # Add in all the interfaces that we are compatible with.
+	  loop=$revision
+	  while test "$loop" -ne 0; do
+	    func_arith $revision - $loop
+	    iface=$func_arith_result
+	    func_arith $loop - 1
+	    loop=$func_arith_result
+	    verstring="$verstring_prefix$major.$iface:$verstring"
+	  done
+
+	  # Before this point, $major must not contain `.'.
+	  major=.$major
+	  versuffix="$major.$revision"
+	  ;;
+
+	linux)
+	  func_arith $current - $age
+	  major=.$func_arith_result
+	  versuffix="$major.$age.$revision"
+	  ;;
+
+	osf)
+	  func_arith $current - $age
+	  major=.$func_arith_result
+	  versuffix=".$current.$age.$revision"
+	  verstring="$current.$age.$revision"
+
+	  # Add in all the interfaces that we are compatible with.
+	  loop=$age
+	  while test "$loop" -ne 0; do
+	    func_arith $current - $loop
+	    iface=$func_arith_result
+	    func_arith $loop - 1
+	    loop=$func_arith_result
+	    verstring="$verstring:${iface}.0"
+	  done
+
+	  # Make executables depend on our current version.
+	  verstring="$verstring:${current}.0"
+	  ;;
+
+	qnx)
+	  major=".$current"
+	  versuffix=".$current"
+	  ;;
+
+	sunos)
+	  major=".$current"
+	  versuffix=".$current.$revision"
+	  ;;
+
+	windows)
+	  # Use '-' rather than '.', since we only want one
+	  # extension on DOS 8.3 filesystems.
+	  func_arith $current - $age
+	  major=$func_arith_result
+	  versuffix="-$major"
+	  ;;
+
+	*)
+	  func_fatal_configuration "unknown library version type \`$version_type'"
+	  ;;
+	esac
+
+	# Clear the version info if we defaulted, and they specified a release.
+	if test -z "$vinfo" && test -n "$release"; then
+	  major=
+	  case $version_type in
+	  darwin)
+	    # we can't check for "0.0" in archive_cmds due to quoting
+	    # problems, so we reset it completely
+	    verstring=
+	    ;;
+	  *)
+	    verstring="0.0"
+	    ;;
+	  esac
+	  if test "$need_version" = no; then
+	    versuffix=
+	  else
+	    versuffix=".0.0"
+	  fi
+	fi
+
+	# Remove version info from name if versioning should be avoided
+	if test "$avoid_version" = yes && test "$need_version" = no; then
+	  major=
+	  versuffix=
+	  verstring=""
+	fi
+
+	# Check to see if the archive will have undefined symbols.
+	if test "$allow_undefined" = yes; then
+	  if test "$allow_undefined_flag" = unsupported; then
+	    func_warning "undefined symbols not allowed in $host shared libraries"
+	    build_libtool_libs=no
+	    build_old_libs=yes
+	  fi
+	else
+	  # Don't allow undefined symbols.
+	  allow_undefined_flag="$no_undefined_flag"
+	fi
+
+      fi
+
+      func_generate_dlsyms "$libname" "$libname" "yes"
+      libobjs="$libobjs $symfileobj"
+      test "X$libobjs" = "X " && libobjs=
+
+      if test "$mode" != relink; then
+	# Remove our outputs, but don't remove object files since they
+	# may have been created when compiling PIC objects.
+	removelist=
+	tempremovelist=`$ECHO "$output_objdir/*"`
+	for p in $tempremovelist; do
+	  case $p in
+	    *.$objext | *.gcno)
+	       ;;
+	    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)
+	       if test "X$precious_files_regex" != "X"; then
+		 if $ECHO "$p" | $EGREP -e "$precious_files_regex" >/dev/null 2>&1
+		 then
+		   continue
+		 fi
+	       fi
+	       removelist="$removelist $p"
+	       ;;
+	    *) ;;
+	  esac
+	done
+	test -n "$removelist" && \
+	  func_show_eval "${RM}r \$removelist"
+      fi
+
+      # Now set the variables for building old libraries.
+      if test "$build_old_libs" = yes && test "$build_libtool_libs" != convenience ; then
+	oldlibs="$oldlibs $output_objdir/$libname.$libext"
+
+	# Transform .lo files to .o files.
+	oldobjs="$objs "`$ECHO "X$libobjs" | $SP2NL | $Xsed -e '/\.'${libext}'$/d' -e "$lo2o" | $NL2SP`
+      fi
+
+      # Eliminate all temporary directories.
+      #for path in $notinst_path; do
+      #	lib_search_path=`$ECHO "X$lib_search_path " | $Xsed -e "s% $path % %g"`
+      #	deplibs=`$ECHO "X$deplibs " | $Xsed -e "s% -L$path % %g"`
+      #	dependency_libs=`$ECHO "X$dependency_libs " | $Xsed -e "s% -L$path % %g"`
+      #done
+
+      if test -n "$xrpath"; then
+	# If the user specified any rpath flags, then add them.
+	temp_xrpath=
+	for libdir in $xrpath; do
+	  temp_xrpath="$temp_xrpath -R$libdir"
+	  case "$finalize_rpath " in
+	  *" $libdir "*) ;;
+	  *) finalize_rpath="$finalize_rpath $libdir" ;;
+	  esac
+	done
+	if test "$hardcode_into_libs" != yes || test "$build_old_libs" = yes; then
+	  dependency_libs="$temp_xrpath $dependency_libs"
+	fi
+      fi
+
+      # Make sure dlfiles contains only unique files that won't be dlpreopened
+      old_dlfiles="$dlfiles"
+      dlfiles=
+      for lib in $old_dlfiles; do
+	case " $dlprefiles $dlfiles " in
+	*" $lib "*) ;;
+	*) dlfiles="$dlfiles $lib" ;;
+	esac
+      done
+
+      # Make sure dlprefiles contains only unique files
+      old_dlprefiles="$dlprefiles"
+      dlprefiles=
+      for lib in $old_dlprefiles; do
+	case "$dlprefiles " in
+	*" $lib "*) ;;
+	*) dlprefiles="$dlprefiles $lib" ;;
+	esac
+      done
+
+      if test "$build_libtool_libs" = yes; then
+	if test -n "$rpath"; then
+	  case $host in
+	  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc*)
+	    # these systems don't actually have a c library (as such)!
+	    ;;
+	  *-*-rhapsody* | *-*-darwin1.[012])
+	    # Rhapsody C library is in the System framework
+	    deplibs="$deplibs System.ltframework"
+	    ;;
+	  *-*-netbsd*)
+	    # Don't link with libc until the a.out ld.so is fixed.
+	    ;;
+	  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)
+	    # Do not include libc due to us having libc/libc_r.
+	    ;;
+	  *-*-sco3.2v5* | *-*-sco5v6*)
+	    # Causes problems with __ctype
+	    ;;
+	  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)
+	    # Compiler inserts libc in the correct place for threads to work
+	    ;;
+	  *)
+	    # Add libc to deplibs on all other systems if necessary.
+	    if test "$build_libtool_need_lc" = "yes"; then
+	      deplibs="$deplibs -lc"
+	    fi
+	    ;;
+	  esac
+	fi
+
+	# Transform deplibs into only deplibs that can be linked in shared.
+	name_save=$name
+	libname_save=$libname
+	release_save=$release
+	versuffix_save=$versuffix
+	major_save=$major
+	# I'm not sure if I'm treating the release correctly.  I think
+	# release should show up in the -l (ie -lgmp5) so we don't want to
+	# add it in twice.  Is that correct?
+	release=""
+	versuffix=""
+	major=""
+	newdeplibs=
+	droppeddeps=no
+	case $deplibs_check_method in
+	pass_all)
+	  # Don't check for shared/static.  Everything works.
+	  # This might be a little naive.  We might want to check
+	  # whether the library exists or not.  But this is on
+	  # osf3 & osf4 and I'm not really sure... Just
+	  # implementing what was already the behavior.
+	  newdeplibs=$deplibs
+	  ;;
+	test_compile)
+	  # This code stresses the "libraries are programs" paradigm to its
+	  # limits. Maybe even breaks it.  We compile a program, linking it
+	  # against the deplibs as a proxy for the library.  Then we can check
+	  # whether they linked in statically or dynamically with ldd.
+	  $opt_dry_run || $RM conftest.c
+	  cat > conftest.c <<EOF
+	  int main() { return 0; }
+EOF
+	  $opt_dry_run || $RM conftest
+	  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then
+	    ldd_output=`ldd conftest`
+	    for i in $deplibs; do
+	      case $i in
+	      -l*)
+		func_stripname -l '' "$i"
+		name=$func_stripname_result
+		if test "X$allow_libtool_libs_with_static_runtimes" = "Xyes" ; then
+		  case " $predeps $postdeps " in
+		  *" $i "*)
+		    newdeplibs="$newdeplibs $i"
+		    i=""
+		    ;;
+		  esac
+		fi
+		if test -n "$i" ; then
+		  libname=`eval "\\$ECHO \"$libname_spec\""`
+		  deplib_matches=`eval "\\$ECHO \"$library_names_spec\""`
+		  set dummy $deplib_matches; shift
+		  deplib_match=$1
+		  if test `expr "$ldd_output" : ".*$deplib_match"` -ne 0 ; then
+		    newdeplibs="$newdeplibs $i"
+		  else
+		    droppeddeps=yes
+		    $ECHO
+		    $ECHO "*** Warning: dynamic linker does not accept needed library $i."
+		    $ECHO "*** I have the capability to make that library automatically link in when"
+		    $ECHO "*** you link to this library.  But I can only do this if you have a"
+		    $ECHO "*** shared version of the library, which I believe you do not have"
+		    $ECHO "*** because a test_compile did reveal that the linker did not use it for"
+		    $ECHO "*** its dynamic dependency list that programs get resolved with at runtime."
+		  fi
+		fi
+		;;
+	      *)
+		newdeplibs="$newdeplibs $i"
+		;;
+	      esac
+	    done
+	  else
+	    # Error occurred in the first compile.  Let's try to salvage
+	    # the situation: Compile a separate program for each library.
+	    for i in $deplibs; do
+	      case $i in
+	      -l*)
+		func_stripname -l '' "$i"
+		name=$func_stripname_result
+		$opt_dry_run || $RM conftest
+		if $LTCC $LTCFLAGS -o conftest conftest.c $i; then
+		  ldd_output=`ldd conftest`
+		  if test "X$allow_libtool_libs_with_static_runtimes" = "Xyes" ; then
+		    case " $predeps $postdeps " in
+		    *" $i "*)
+		      newdeplibs="$newdeplibs $i"
+		      i=""
+		      ;;
+		    esac
+		  fi
+		  if test -n "$i" ; then
+		    libname=`eval "\\$ECHO \"$libname_spec\""`
+		    deplib_matches=`eval "\\$ECHO \"$library_names_spec\""`
+		    set dummy $deplib_matches; shift
+		    deplib_match=$1
+		    if test `expr "$ldd_output" : ".*$deplib_match"` -ne 0 ; then
+		      newdeplibs="$newdeplibs $i"
+		    else
+		      droppeddeps=yes
+		      $ECHO
+		      $ECHO "*** Warning: dynamic linker does not accept needed library $i."
+		      $ECHO "*** I have the capability to make that library automatically link in when"
+		      $ECHO "*** you link to this library.  But I can only do this if you have a"
+		      $ECHO "*** shared version of the library, which you do not appear to have"
+		      $ECHO "*** because a test_compile did reveal that the linker did not use this one"
+		      $ECHO "*** as a dynamic dependency that programs can get resolved with at runtime."
+		    fi
+		  fi
+		else
+		  droppeddeps=yes
+		  $ECHO
+		  $ECHO "*** Warning!  Library $i is needed by this library but I was not able to"
+		  $ECHO "*** make it link in!  You will probably need to install it or some"
+		  $ECHO "*** library that it depends on before this library will be fully"
+		  $ECHO "*** functional.  Installing it before continuing would be even better."
+		fi
+		;;
+	      *)
+		newdeplibs="$newdeplibs $i"
+		;;
+	      esac
+	    done
+	  fi
+	  ;;
+	file_magic*)
+	  set dummy $deplibs_check_method; shift
+	  file_magic_regex=`expr "$deplibs_check_method" : "$1 \(.*\)"`
+	  for a_deplib in $deplibs; do
+	    case $a_deplib in
+	    -l*)
+	      func_stripname -l '' "$a_deplib"
+	      name=$func_stripname_result
+	      if test "X$allow_libtool_libs_with_static_runtimes" = "Xyes" ; then
+		case " $predeps $postdeps " in
+		*" $a_deplib "*)
+		  newdeplibs="$newdeplibs $a_deplib"
+		  a_deplib=""
+		  ;;
+		esac
+	      fi
+	      if test -n "$a_deplib" ; then
+		libname=`eval "\\$ECHO \"$libname_spec\""`
+		for i in $lib_search_path $sys_lib_search_path $shlib_search_path; do
+		  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`
+		  for potent_lib in $potential_libs; do
+		      # Follow soft links.
+		      if ls -lLd "$potent_lib" 2>/dev/null |
+			 $GREP " -> " >/dev/null; then
+			continue
+		      fi
+		      # The statement above tries to avoid entering an
+		      # endless loop below, in case of cyclic links.
+		      # We might still enter an endless loop, since a link
+		      # loop can be closed while we follow links,
+		      # but so what?
+		      potlib="$potent_lib"
+		      while test -h "$potlib" 2>/dev/null; do
+			potliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`
+			case $potliblink in
+			[\\/]* | [A-Za-z]:[\\/]*) potlib="$potliblink";;
+			*) potlib=`$ECHO "X$potlib" | $Xsed -e 's,[^/]*$,,'`"$potliblink";;
+			esac
+		      done
+		      if eval $file_magic_cmd \"\$potlib\" 2>/dev/null |
+			 $SED -e 10q |
+			 $EGREP "$file_magic_regex" > /dev/null; then
+			newdeplibs="$newdeplibs $a_deplib"
+			a_deplib=""
+			break 2
+		      fi
+		  done
+		done
+	      fi
+	      if test -n "$a_deplib" ; then
+		droppeddeps=yes
+		$ECHO
+		$ECHO "*** Warning: linker path does not have real file for library $a_deplib."
+		$ECHO "*** I have the capability to make that library automatically link in when"
+		$ECHO "*** you link to this library.  But I can only do this if you have a"
+		$ECHO "*** shared version of the library, which you do not appear to have"
+		$ECHO "*** because I did check the linker path looking for a file starting"
+		if test -z "$potlib" ; then
+		  $ECHO "*** with $libname but no candidates were found. (...for file magic test)"
+		else
+		  $ECHO "*** with $libname and none of the candidates passed a file format test"
+		  $ECHO "*** using a file magic. Last file checked: $potlib"
+		fi
+	      fi
+	      ;;
+	    *)
+	      # Add a -L argument.
+	      newdeplibs="$newdeplibs $a_deplib"
+	      ;;
+	    esac
+	  done # Gone through all deplibs.
+	  ;;
+	match_pattern*)
+	  set dummy $deplibs_check_method; shift
+	  match_pattern_regex=`expr "$deplibs_check_method" : "$1 \(.*\)"`
+	  for a_deplib in $deplibs; do
+	    case $a_deplib in
+	    -l*)
+	      func_stripname -l '' "$a_deplib"
+	      name=$func_stripname_result
+	      if test "X$allow_libtool_libs_with_static_runtimes" = "Xyes" ; then
+		case " $predeps $postdeps " in
+		*" $a_deplib "*)
+		  newdeplibs="$newdeplibs $a_deplib"
+		  a_deplib=""
+		  ;;
+		esac
+	      fi
+	      if test -n "$a_deplib" ; then
+		libname=`eval "\\$ECHO \"$libname_spec\""`
+		for i in $lib_search_path $sys_lib_search_path $shlib_search_path; do
+		  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`
+		  for potent_lib in $potential_libs; do
+		    potlib="$potent_lib" # see symlink-check above in file_magic test
+		    if eval "\$ECHO \"X$potent_lib\"" 2>/dev/null | $Xsed -e 10q | \
+		       $EGREP "$match_pattern_regex" > /dev/null; then
+		      newdeplibs="$newdeplibs $a_deplib"
+		      a_deplib=""
+		      break 2
+		    fi
+		  done
+		done
+	      fi
+	      if test -n "$a_deplib" ; then
+		droppeddeps=yes
+		$ECHO
+		$ECHO "*** Warning: linker path does not have real file for library $a_deplib."
+		$ECHO "*** I have the capability to make that library automatically link in when"
+		$ECHO "*** you link to this library.  But I can only do this if you have a"
+		$ECHO "*** shared version of the library, which you do not appear to have"
+		$ECHO "*** because I did check the linker path looking for a file starting"
+		if test -z "$potlib" ; then
+		  $ECHO "*** with $libname but no candidates were found. (...for regex pattern test)"
+		else
+		  $ECHO "*** with $libname and none of the candidates passed a file format test"
+		  $ECHO "*** using a regex pattern. Last file checked: $potlib"
+		fi
+	      fi
+	      ;;
+	    *)
+	      # Add a -L argument.
+	      newdeplibs="$newdeplibs $a_deplib"
+	      ;;
+	    esac
+	  done # Gone through all deplibs.
+	  ;;
+	none | unknown | *)
+	  newdeplibs=""
+	  tmp_deplibs=`$ECHO "X $deplibs" | $Xsed \
+	      -e 's/ -lc$//' -e 's/ -[LR][^ ]*//g'`
+	  if test "X$allow_libtool_libs_with_static_runtimes" = "Xyes" ; then
+	    for i in $predeps $postdeps ; do
+	      # can't use Xsed below, because $i might contain '/'
+	      tmp_deplibs=`$ECHO "X $tmp_deplibs" | $Xsed -e "s,$i,,"`
+	    done
+	  fi
+	  if $ECHO "X $tmp_deplibs" | $Xsed -e 's/[	 ]//g' |
+	     $GREP . >/dev/null; then
+	    $ECHO
+	    if test "X$deplibs_check_method" = "Xnone"; then
+	      $ECHO "*** Warning: inter-library dependencies are not supported in this platform."
+	    else
+	      $ECHO "*** Warning: inter-library dependencies are not known to be supported."
+	    fi
+	    $ECHO "*** All declared inter-library dependencies are being dropped."
+	    droppeddeps=yes
+	  fi
+	  ;;
+	esac
+	versuffix=$versuffix_save
+	major=$major_save
+	release=$release_save
+	libname=$libname_save
+	name=$name_save
+
+	case $host in
+	*-*-rhapsody* | *-*-darwin1.[012])
+	  # On Rhapsody replace the C library with the System framework
+	  newdeplibs=`$ECHO "X $newdeplibs" | $Xsed -e 's/ -lc / System.ltframework /'`
+	  ;;
+	esac
+
+	if test "$droppeddeps" = yes; then
+	  if test "$module" = yes; then
+	    $ECHO
+	    $ECHO "*** Warning: libtool could not satisfy all declared inter-library"
+	    $ECHO "*** dependencies of module $libname.  Therefore, libtool will create"
+	    $ECHO "*** a static module, that should work as long as the dlopening"
+	    $ECHO "*** application is linked with the -dlopen flag."
+	    if test -z "$global_symbol_pipe"; then
+	      $ECHO
+	      $ECHO "*** However, this would only work if libtool was able to extract symbol"
+	      $ECHO "*** lists from a program, using \`nm' or equivalent, but libtool could"
+	      $ECHO "*** not find such a program.  So, this module is probably useless."
+	      $ECHO "*** \`nm' from GNU binutils and a full rebuild may help."
+	    fi
+	    if test "$build_old_libs" = no; then
+	      oldlibs="$output_objdir/$libname.$libext"
+	      build_libtool_libs=module
+	      build_old_libs=yes
+	    else
+	      build_libtool_libs=no
+	    fi
+	  else
+	    $ECHO "*** The inter-library dependencies that have been dropped here will be"
+	    $ECHO "*** automatically added whenever a program is linked with this library"
+	    $ECHO "*** or is declared to -dlopen it."
+
+	    if test "$allow_undefined" = no; then
+	      $ECHO
+	      $ECHO "*** Since this library must not contain undefined symbols,"
+	      $ECHO "*** because either the platform does not support them or"
+	      $ECHO "*** it was explicitly requested with -no-undefined,"
+	      $ECHO "*** libtool will only create a static version of it."
+	      if test "$build_old_libs" = no; then
+		oldlibs="$output_objdir/$libname.$libext"
+		build_libtool_libs=module
+		build_old_libs=yes
+	      else
+		build_libtool_libs=no
+	      fi
+	    fi
+	  fi
+	fi
+	# Done checking deplibs!
+	deplibs=$newdeplibs
+      fi
+      # Time to change all our "foo.ltframework" stuff back to "-framework foo"
+      case $host in
+	*-*-darwin*)
+	  newdeplibs=`$ECHO "X $newdeplibs" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	  new_inherited_linker_flags=`$ECHO "X $new_inherited_linker_flags" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	  deplibs=`$ECHO "X $deplibs" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	  ;;
+      esac
+
+      # move library search paths that coincide with paths to not yet
+      # installed libraries to the beginning of the library search list
+      new_libs=
+      for path in $notinst_path; do
+	case " $new_libs " in
+	*" -L$path/$objdir "*) ;;
+	*)
+	  case " $deplibs " in
+	  *" -L$path/$objdir "*)
+	    new_libs="$new_libs -L$path/$objdir" ;;
+	  esac
+	  ;;
+	esac
+      done
+      for deplib in $deplibs; do
+	case $deplib in
+	-L*)
+	  case " $new_libs " in
+	  *" $deplib "*) ;;
+	  *) new_libs="$new_libs $deplib" ;;
+	  esac
+	  ;;
+	*) new_libs="$new_libs $deplib" ;;
+	esac
+      done
+      deplibs="$new_libs"
+
+      # All the library-specific variables (install_libdir is set above).
+      library_names=
+      old_library=
+      dlname=
+
+      # Test again, we may have decided not to build it any more
+      if test "$build_libtool_libs" = yes; then
+	if test "$hardcode_into_libs" = yes; then
+	  # Hardcode the library paths
+	  hardcode_libdirs=
+	  dep_rpath=
+	  rpath="$finalize_rpath"
+	  test "$mode" != relink && rpath="$compile_rpath$rpath"
+	  for libdir in $rpath; do
+	    if test -n "$hardcode_libdir_flag_spec"; then
+	      if test -n "$hardcode_libdir_separator"; then
+		if test -z "$hardcode_libdirs"; then
+		  hardcode_libdirs="$libdir"
+		else
+		  # Just accumulate the unique libdirs.
+		  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in
+		  *"$hardcode_libdir_separator$libdir$hardcode_libdir_separator"*)
+		    ;;
+		  *)
+		    hardcode_libdirs="$hardcode_libdirs$hardcode_libdir_separator$libdir"
+		    ;;
+		  esac
+		fi
+	      else
+		eval flag=\"$hardcode_libdir_flag_spec\"
+		dep_rpath="$dep_rpath $flag"
+	      fi
+	    elif test -n "$runpath_var"; then
+	      case "$perm_rpath " in
+	      *" $libdir "*) ;;
+	      *) perm_rpath="$perm_rpath $libdir" ;;
+	      esac
+	    fi
+	  done
+	  # Substitute the hardcoded libdirs into the rpath.
+	  if test -n "$hardcode_libdir_separator" &&
+	     test -n "$hardcode_libdirs"; then
+	    libdir="$hardcode_libdirs"
+	    if test -n "$hardcode_libdir_flag_spec_ld"; then
+	      eval dep_rpath=\"$hardcode_libdir_flag_spec_ld\"
+	    else
+	      eval dep_rpath=\"$hardcode_libdir_flag_spec\"
+	    fi
+	  fi
+	  if test -n "$runpath_var" && test -n "$perm_rpath"; then
+	    # We should set the runpath_var.
+	    rpath=
+	    for dir in $perm_rpath; do
+	      rpath="$rpath$dir:"
+	    done
+	    eval "$runpath_var='$rpath\$$runpath_var'; export $runpath_var"
+	  fi
+	  test -n "$dep_rpath" && deplibs="$dep_rpath $deplibs"
+	fi
+
+	shlibpath="$finalize_shlibpath"
+	test "$mode" != relink && shlibpath="$compile_shlibpath$shlibpath"
+	if test -n "$shlibpath"; then
+	  eval "$shlibpath_var='$shlibpath\$$shlibpath_var'; export $shlibpath_var"
+	fi
+
+	# Get the real and link names of the library.
+	eval shared_ext=\"$shrext_cmds\"
+	eval library_names=\"$library_names_spec\"
+	set dummy $library_names
+	shift
+	realname="$1"
+	shift
+
+	if test -n "$soname_spec"; then
+	  eval soname=\"$soname_spec\"
+	else
+	  soname="$realname"
+	fi
+	if test -z "$dlname"; then
+	  dlname=$soname
+	fi
+
+	lib="$output_objdir/$realname"
+	linknames=
+	for link
+	do
+	  linknames="$linknames $link"
+	done
+
+	# Use standard objects if they are pic
+	test -z "$pic_flag" && libobjs=`$ECHO "X$libobjs" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
+	test "X$libobjs" = "X " && libobjs=
+
+	delfiles=
+	if test -n "$export_symbols" && test -n "$include_expsyms"; then
+	  $opt_dry_run || cp "$export_symbols" "$output_objdir/$libname.uexp"
+	  export_symbols="$output_objdir/$libname.uexp"
+	  delfiles="$delfiles $export_symbols"
+	fi
+
+	orig_export_symbols=
+	case $host_os in
+	cygwin* | mingw* | cegcc*)
+	  if test -n "$export_symbols" && test -z "$export_symbols_regex"; then
+	    # exporting using user supplied symfile
+	    if test "x`$SED 1q $export_symbols`" != xEXPORTS; then
+	      # and it's NOT already a .def file. Must figure out
+	      # which of the given symbols are data symbols and tag
+	      # them as such. So, trigger use of export_symbols_cmds.
+	      # export_symbols gets reassigned inside the "prepare
+	      # the list of exported symbols" if statement, so the
+	      # include_expsyms logic still works.
+	      orig_export_symbols="$export_symbols"
+	      export_symbols=
+	      always_export_symbols=yes
+	    fi
+	  fi
+	  ;;
+	esac
+
+	# Prepare the list of exported symbols
+	if test -z "$export_symbols"; then
+	  if test "$always_export_symbols" = yes || test -n "$export_symbols_regex"; then
+	    func_verbose "generating symbol list for \`$libname.la'"
+	    export_symbols="$output_objdir/$libname.exp"
+	    $opt_dry_run || $RM $export_symbols
+	    cmds=$export_symbols_cmds
+	    save_ifs="$IFS"; IFS='~'
+	    for cmd in $cmds; do
+	      IFS="$save_ifs"
+	      eval cmd=\"$cmd\"
+	      func_len " $cmd"
+	      len=$func_len_result
+	      if test "$len" -lt "$max_cmd_len" || test "$max_cmd_len" -le -1; then
+		func_show_eval "$cmd" 'exit $?'
+		skipped_export=false
+	      else
+		# The command line is too long to execute in one step.
+		func_verbose "using reloadable object file for export list..."
+		skipped_export=:
+		# Break out early, otherwise skipped_export may be
+		# set to false by a later but shorter cmd.
+		break
+	      fi
+	    done
+	    IFS="$save_ifs"
+	    if test -n "$export_symbols_regex" && test "X$skipped_export" != "X:"; then
+	      func_show_eval '$EGREP -e "$export_symbols_regex" "$export_symbols" > "${export_symbols}T"'
+	      func_show_eval '$MV "${export_symbols}T" "$export_symbols"'
+	    fi
+	  fi
+	fi
+
+	if test -n "$export_symbols" && test -n "$include_expsyms"; then
+	  tmp_export_symbols="$export_symbols"
+	  test -n "$orig_export_symbols" && tmp_export_symbols="$orig_export_symbols"
+	  $opt_dry_run || eval '$ECHO "X$include_expsyms" | $Xsed | $SP2NL >> "$tmp_export_symbols"'
+	fi
+
+	if test "X$skipped_export" != "X:" && test -n "$orig_export_symbols"; then
+	  # The given exports_symbols file has to be filtered, so filter it.
+	  func_verbose "filter symbol list for \`$libname.la' to tag DATA exports"
+	  # FIXME: $output_objdir/$libname.filter potentially contains lots of
+	  # 's' commands which not all seds can handle. GNU sed should be fine
+	  # though. Also, the filter scales superlinearly with the number of
+	  # global variables. join(1) would be nice here, but unfortunately
+	  # isn't a blessed tool.
+	  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\(.*\)\([ \,].*\),s|^\1$|\1\2|,' < $export_symbols > $output_objdir/$libname.filter
+	  delfiles="$delfiles $export_symbols $output_objdir/$libname.filter"
+	  export_symbols=$output_objdir/$libname.def
+	  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols
+	fi
+
+	tmp_deplibs=
+	for test_deplib in $deplibs; do
+	  case " $convenience " in
+	  *" $test_deplib "*) ;;
+	  *)
+	    tmp_deplibs="$tmp_deplibs $test_deplib"
+	    ;;
+	  esac
+	done
+	deplibs="$tmp_deplibs"
+
+	if test -n "$convenience"; then
+	  if test -n "$whole_archive_flag_spec" &&
+	    test "$compiler_needs_object" = yes &&
+	    test -z "$libobjs"; then
+	    # extract the archives, so we have objects to list.
+	    # TODO: could optimize this to just extract one archive.
+	    whole_archive_flag_spec=
+	  fi
+	  if test -n "$whole_archive_flag_spec"; then
+	    save_libobjs=$libobjs
+	    eval libobjs=\"\$libobjs $whole_archive_flag_spec\"
+	    test "X$libobjs" = "X " && libobjs=
+	  else
+	    gentop="$output_objdir/${outputname}x"
+	    generated="$generated $gentop"
+
+	    func_extract_archives $gentop $convenience
+	    libobjs="$libobjs $func_extract_archives_result"
+	    test "X$libobjs" = "X " && libobjs=
+	  fi
+	fi
+
+	if test "$thread_safe" = yes && test -n "$thread_safe_flag_spec"; then
+	  eval flag=\"$thread_safe_flag_spec\"
+	  linker_flags="$linker_flags $flag"
+	fi
+
+	# Make a backup of the uninstalled library when relinking
+	if test "$mode" = relink; then
+	  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?
+	fi
+
+	# Do each of the archive commands.
+	if test "$module" = yes && test -n "$module_cmds" ; then
+	  if test -n "$export_symbols" && test -n "$module_expsym_cmds"; then
+	    eval test_cmds=\"$module_expsym_cmds\"
+	    cmds=$module_expsym_cmds
+	  else
+	    eval test_cmds=\"$module_cmds\"
+	    cmds=$module_cmds
+	  fi
+	else
+	  if test -n "$export_symbols" && test -n "$archive_expsym_cmds"; then
+	    eval test_cmds=\"$archive_expsym_cmds\"
+	    cmds=$archive_expsym_cmds
+	  else
+	    eval test_cmds=\"$archive_cmds\"
+	    cmds=$archive_cmds
+	  fi
+	fi
+
+	if test "X$skipped_export" != "X:" &&
+	   func_len " $test_cmds" &&
+	   len=$func_len_result &&
+	   test "$len" -lt "$max_cmd_len" || test "$max_cmd_len" -le -1; then
+	  :
+	else
+	  # The command line is too long to link in one step, link piecewise
+	  # or, if using GNU ld and skipped_export is not :, use a linker
+	  # script.
+
+	  # Save the value of $output and $libobjs because we want to
+	  # use them later.  If we have whole_archive_flag_spec, we
+	  # want to use save_libobjs as it was before
+	  # whole_archive_flag_spec was expanded, because we can't
+	  # assume the linker understands whole_archive_flag_spec.
+	  # This may have to be revisited, in case too many
+	  # convenience libraries get linked in and end up exceeding
+	  # the spec.
+	  if test -z "$convenience" || test -z "$whole_archive_flag_spec"; then
+	    save_libobjs=$libobjs
+	  fi
+	  save_output=$output
+	  output_la=`$ECHO "X$output" | $Xsed -e "$basename"`
+
+	  # Clear the reloadable object creation command queue and
+	  # initialize k to one.
+	  test_cmds=
+	  concat_cmds=
+	  objlist=
+	  last_robj=
+	  k=1
+
+	  if test -n "$save_libobjs" && test "X$skipped_export" != "X:" && test "$with_gnu_ld" = yes; then
+	    output=${output_objdir}/${output_la}.lnkscript
+	    func_verbose "creating GNU ld script: $output"
+	    $ECHO 'INPUT (' > $output
+	    for obj in $save_libobjs
+	    do
+	      $ECHO "$obj" >> $output
+	    done
+	    $ECHO ')' >> $output
+	    delfiles="$delfiles $output"
+	  elif test -n "$save_libobjs" && test "X$skipped_export" != "X:" && test "X$file_list_spec" != X; then
+	    output=${output_objdir}/${output_la}.lnk
+	    func_verbose "creating linker input file list: $output"
+	    : > $output
+	    set x $save_libobjs
+	    shift
+	    firstobj=
+	    if test "$compiler_needs_object" = yes; then
+	      firstobj="$1 "
+	      shift
+	    fi
+	    for obj
+	    do
+	      $ECHO "$obj" >> $output
+	    done
+	    delfiles="$delfiles $output"
+	    output=$firstobj\"$file_list_spec$output\"
+	  else
+	    if test -n "$save_libobjs"; then
+	      func_verbose "creating reloadable object files..."
+	      output=$output_objdir/$output_la-${k}.$objext
+	      eval test_cmds=\"$reload_cmds\"
+	      func_len " $test_cmds"
+	      len0=$func_len_result
+	      len=$len0
+
+	      # Loop over the list of objects to be linked.
+	      for obj in $save_libobjs
+	      do
+		func_len " $obj"
+		func_arith $len + $func_len_result
+		len=$func_arith_result
+		if test "X$objlist" = X ||
+		   test "$len" -lt "$max_cmd_len"; then
+		  func_append objlist " $obj"
+		else
+		  # The command $test_cmds is almost too long, add a
+		  # command to the queue.
+		  if test "$k" -eq 1 ; then
+		    # The first file doesn't have a previous command to add.
+		    eval concat_cmds=\"$reload_cmds $objlist $last_robj\"
+		  else
+		    # All subsequent reloadable object files will link in
+		    # the last one created.
+		    eval concat_cmds=\"\$concat_cmds~$reload_cmds $objlist $last_robj~\$RM $last_robj\"
+		  fi
+		  last_robj=$output_objdir/$output_la-${k}.$objext
+		  func_arith $k + 1
+		  k=$func_arith_result
+		  output=$output_objdir/$output_la-${k}.$objext
+		  objlist=$obj
+		  func_len " $last_robj"
+		  func_arith $len0 + $func_len_result
+		  len=$func_arith_result
+		fi
+	      done
+	      # Handle the remaining objects by creating one last
+	      # reloadable object file.  All subsequent reloadable object
+	      # files will link in the last one created.
+	      test -z "$concat_cmds" || concat_cmds=$concat_cmds~
+	      eval concat_cmds=\"\${concat_cmds}$reload_cmds $objlist $last_robj\"
+	      if test -n "$last_robj"; then
+	        eval concat_cmds=\"\${concat_cmds}~\$RM $last_robj\"
+	      fi
+	      delfiles="$delfiles $output"
+
+	    else
+	      output=
+	    fi
+
+	    if ${skipped_export-false}; then
+	      func_verbose "generating symbol list for \`$libname.la'"
+	      export_symbols="$output_objdir/$libname.exp"
+	      $opt_dry_run || $RM $export_symbols
+	      libobjs=$output
+	      # Append the command to create the export file.
+	      test -z "$concat_cmds" || concat_cmds=$concat_cmds~
+	      eval concat_cmds=\"\$concat_cmds$export_symbols_cmds\"
+	      if test -n "$last_robj"; then
+		eval concat_cmds=\"\$concat_cmds~\$RM $last_robj\"
+	      fi
+	    fi
+
+	    test -n "$save_libobjs" &&
+	      func_verbose "creating a temporary reloadable object file: $output"
+
+	    # Loop through the commands generated above and execute them.
+	    save_ifs="$IFS"; IFS='~'
+	    for cmd in $concat_cmds; do
+	      IFS="$save_ifs"
+	      $opt_silent || {
+		  func_quote_for_expand "$cmd"
+		  eval "func_echo $func_quote_for_expand_result"
+	      }
+	      $opt_dry_run || eval "$cmd" || {
+		lt_exit=$?
+
+		# Restore the uninstalled library and exit
+		if test "$mode" = relink; then
+		  ( cd "$output_objdir" && \
+		    $RM "${realname}T" && \
+		    $MV "${realname}U" "$realname" )
+		fi
+
+		exit $lt_exit
+	      }
+	    done
+	    IFS="$save_ifs"
+
+	    if test -n "$export_symbols_regex" && ${skipped_export-false}; then
+	      func_show_eval '$EGREP -e "$export_symbols_regex" "$export_symbols" > "${export_symbols}T"'
+	      func_show_eval '$MV "${export_symbols}T" "$export_symbols"'
+	    fi
+	  fi
+
+          if ${skipped_export-false}; then
+	    if test -n "$export_symbols" && test -n "$include_expsyms"; then
+	      tmp_export_symbols="$export_symbols"
+	      test -n "$orig_export_symbols" && tmp_export_symbols="$orig_export_symbols"
+	      $opt_dry_run || eval '$ECHO "X$include_expsyms" | $Xsed | $SP2NL >> "$tmp_export_symbols"'
+	    fi
+
+	    if test -n "$orig_export_symbols"; then
+	      # The given exports_symbols file has to be filtered, so filter it.
+	      func_verbose "filter symbol list for \`$libname.la' to tag DATA exports"
+	      # FIXME: $output_objdir/$libname.filter potentially contains lots of
+	      # 's' commands which not all seds can handle. GNU sed should be fine
+	      # though. Also, the filter scales superlinearly with the number of
+	      # global variables. join(1) would be nice here, but unfortunately
+	      # isn't a blessed tool.
+	      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\(.*\)\([ \,].*\),s|^\1$|\1\2|,' < $export_symbols > $output_objdir/$libname.filter
+	      delfiles="$delfiles $export_symbols $output_objdir/$libname.filter"
+	      export_symbols=$output_objdir/$libname.def
+	      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols
+	    fi
+	  fi
+
+	  libobjs=$output
+	  # Restore the value of output.
+	  output=$save_output
+
+	  if test -n "$convenience" && test -n "$whole_archive_flag_spec"; then
+	    eval libobjs=\"\$libobjs $whole_archive_flag_spec\"
+	    test "X$libobjs" = "X " && libobjs=
+	  fi
+	  # Expand the library linking commands again to reset the
+	  # value of $libobjs for piecewise linking.
+
+	  # Do each of the archive commands.
+	  if test "$module" = yes && test -n "$module_cmds" ; then
+	    if test -n "$export_symbols" && test -n "$module_expsym_cmds"; then
+	      cmds=$module_expsym_cmds
+	    else
+	      cmds=$module_cmds
+	    fi
+	  else
+	    if test -n "$export_symbols" && test -n "$archive_expsym_cmds"; then
+	      cmds=$archive_expsym_cmds
+	    else
+	      cmds=$archive_cmds
+	    fi
+	  fi
+	fi
+
+	if test -n "$delfiles"; then
+	  # Append the command to remove temporary files to $cmds.
+	  eval cmds=\"\$cmds~\$RM $delfiles\"
+	fi
+
+	# Add any objects from preloaded convenience libraries
+	if test -n "$dlprefiles"; then
+	  gentop="$output_objdir/${outputname}x"
+	  generated="$generated $gentop"
+
+	  func_extract_archives $gentop $dlprefiles
+	  libobjs="$libobjs $func_extract_archives_result"
+	  test "X$libobjs" = "X " && libobjs=
+	fi
+
+	save_ifs="$IFS"; IFS='~'
+	for cmd in $cmds; do
+	  IFS="$save_ifs"
+	  eval cmd=\"$cmd\"
+	  $opt_silent || {
+	    func_quote_for_expand "$cmd"
+	    eval "func_echo $func_quote_for_expand_result"
+	  }
+	  $opt_dry_run || eval "$cmd" || {
+	    lt_exit=$?
+
+	    # Restore the uninstalled library and exit
+	    if test "$mode" = relink; then
+	      ( cd "$output_objdir" && \
+	        $RM "${realname}T" && \
+		$MV "${realname}U" "$realname" )
+	    fi
+
+	    exit $lt_exit
+	  }
+	done
+	IFS="$save_ifs"
+
+	# Restore the uninstalled library and exit
+	if test "$mode" = relink; then
+	  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?
+
+	  if test -n "$convenience"; then
+	    if test -z "$whole_archive_flag_spec"; then
+	      func_show_eval '${RM}r "$gentop"'
+	    fi
+	  fi
+
+	  exit $EXIT_SUCCESS
+	fi
+
+	# Create links to the real library.
+	for linkname in $linknames; do
+	  if test "$realname" != "$linkname"; then
+	    func_show_eval '(cd "$output_objdir" && $RM "$linkname" && $LN_S "$realname" "$linkname")' 'exit $?'
+	  fi
+	done
+
+	# If -module or -export-dynamic was specified, set the dlname.
+	if test "$module" = yes || test "$export_dynamic" = yes; then
+	  # On all known operating systems, these are identical.
+	  dlname="$soname"
+	fi
+      fi
+      ;;
+
+    obj)
+      if test -n "$dlfiles$dlprefiles" || test "$dlself" != no; then
+	func_warning "\`-dlopen' is ignored for objects"
+      fi
+
+      case " $deplibs" in
+      *\ -l* | *\ -L*)
+	func_warning "\`-l' and \`-L' are ignored for objects" ;;
+      esac
+
+      test -n "$rpath" && \
+	func_warning "\`-rpath' is ignored for objects"
+
+      test -n "$xrpath" && \
+	func_warning "\`-R' is ignored for objects"
+
+      test -n "$vinfo" && \
+	func_warning "\`-version-info' is ignored for objects"
+
+      test -n "$release" && \
+	func_warning "\`-release' is ignored for objects"
+
+      case $output in
+      *.lo)
+	test -n "$objs$old_deplibs" && \
+	  func_fatal_error "cannot build library object \`$output' from non-libtool objects"
+
+	libobj=$output
+	func_lo2o "$libobj"
+	obj=$func_lo2o_result
+	;;
+      *)
+	libobj=
+	obj="$output"
+	;;
+      esac
+
+      # Delete the old objects.
+      $opt_dry_run || $RM $obj $libobj
+
+      # Objects from convenience libraries.  This assumes
+      # single-version convenience libraries.  Whenever we create
+      # different ones for PIC/non-PIC, this we'll have to duplicate
+      # the extraction.
+      reload_conv_objs=
+      gentop=
+      # reload_cmds runs $LD directly, so let us get rid of
+      # -Wl from whole_archive_flag_spec and hope we can get by with
+      # turning comma into space..
+      wl=
+
+      if test -n "$convenience"; then
+	if test -n "$whole_archive_flag_spec"; then
+	  eval tmp_whole_archive_flags=\"$whole_archive_flag_spec\"
+	  reload_conv_objs=$reload_objs\ `$ECHO "X$tmp_whole_archive_flags" | $Xsed -e 's|,| |g'`
+	else
+	  gentop="$output_objdir/${obj}x"
+	  generated="$generated $gentop"
+
+	  func_extract_archives $gentop $convenience
+	  reload_conv_objs="$reload_objs $func_extract_archives_result"
+	fi
+      fi
+
+      # Create the old-style object.
+      reload_objs="$objs$old_deplibs "`$ECHO "X$libobjs" | $SP2NL | $Xsed -e '/\.'${libext}$'/d' -e '/\.lib$/d' -e "$lo2o" | $NL2SP`" $reload_conv_objs" ### testsuite: skip nested quoting test
+
+      output="$obj"
+      func_execute_cmds "$reload_cmds" 'exit $?'
+
+      # Exit if we aren't doing a library object file.
+      if test -z "$libobj"; then
+	if test -n "$gentop"; then
+	  func_show_eval '${RM}r "$gentop"'
+	fi
+
+	exit $EXIT_SUCCESS
+      fi
+
+      if test "$build_libtool_libs" != yes; then
+	if test -n "$gentop"; then
+	  func_show_eval '${RM}r "$gentop"'
+	fi
+
+	# Create an invalid libtool object if no PIC, so that we don't
+	# accidentally link it into a program.
+	# $show "echo timestamp > $libobj"
+	# $opt_dry_run || eval "echo timestamp > $libobj" || exit $?
+	exit $EXIT_SUCCESS
+      fi
+
+      if test -n "$pic_flag" || test "$pic_mode" != default; then
+	# Only do commands if we really have different PIC objects.
+	reload_objs="$libobjs $reload_conv_objs"
+	output="$libobj"
+	func_execute_cmds "$reload_cmds" 'exit $?'
+      fi
+
+      if test -n "$gentop"; then
+	func_show_eval '${RM}r "$gentop"'
+      fi
+
+      exit $EXIT_SUCCESS
+      ;;
+
+    prog)
+      case $host in
+	*cygwin*) func_stripname '' '.exe' "$output"
+	          output=$func_stripname_result.exe;;
+      esac
+      test -n "$vinfo" && \
+	func_warning "\`-version-info' is ignored for programs"
+
+      test -n "$release" && \
+	func_warning "\`-release' is ignored for programs"
+
+      test "$preload" = yes \
+        && test "$dlopen_support" = unknown \
+	&& test "$dlopen_self" = unknown \
+	&& test "$dlopen_self_static" = unknown && \
+	  func_warning "\`LT_INIT([dlopen])' not used. Assuming no dlopen support."
+
+      case $host in
+      *-*-rhapsody* | *-*-darwin1.[012])
+	# On Rhapsody replace the C library is the System framework
+	compile_deplibs=`$ECHO "X $compile_deplibs" | $Xsed -e 's/ -lc / System.ltframework /'`
+	finalize_deplibs=`$ECHO "X $finalize_deplibs" | $Xsed -e 's/ -lc / System.ltframework /'`
+	;;
+      esac
+
+      case $host in
+      *-*-darwin*)
+	# Don't allow lazy linking, it breaks C++ global constructors
+	# But is supposedly fixed on 10.4 or later (yay!).
+	if test "$tagname" = CXX ; then
+	  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in
+	    10.[0123])
+	      compile_command="$compile_command ${wl}-bind_at_load"
+	      finalize_command="$finalize_command ${wl}-bind_at_load"
+	    ;;
+	  esac
+	fi
+	# Time to change all our "foo.ltframework" stuff back to "-framework foo"
+	compile_deplibs=`$ECHO "X $compile_deplibs" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	finalize_deplibs=`$ECHO "X $finalize_deplibs" | $Xsed -e 's% \([^ $]*\).ltframework% -framework \1%g'`
+	;;
+      esac
+
+
+      # move library search paths that coincide with paths to not yet
+      # installed libraries to the beginning of the library search list
+      new_libs=
+      for path in $notinst_path; do
+	case " $new_libs " in
+	*" -L$path/$objdir "*) ;;
+	*)
+	  case " $compile_deplibs " in
+	  *" -L$path/$objdir "*)
+	    new_libs="$new_libs -L$path/$objdir" ;;
+	  esac
+	  ;;
+	esac
+      done
+      for deplib in $compile_deplibs; do
+	case $deplib in
+	-L*)
+	  case " $new_libs " in
+	  *" $deplib "*) ;;
+	  *) new_libs="$new_libs $deplib" ;;
+	  esac
+	  ;;
+	*) new_libs="$new_libs $deplib" ;;
+	esac
+      done
+      compile_deplibs="$new_libs"
+
+
+      compile_command="$compile_command $compile_deplibs"
+      finalize_command="$finalize_command $finalize_deplibs"
+
+      if test -n "$rpath$xrpath"; then
+	# If the user specified any rpath flags, then add them.
+	for libdir in $rpath $xrpath; do
+	  # This is the magic to use -rpath.
+	  case "$finalize_rpath " in
+	  *" $libdir "*) ;;
+	  *) finalize_rpath="$finalize_rpath $libdir" ;;
+	  esac
+	done
+      fi
+
+      # Now hardcode the library paths
+      rpath=
+      hardcode_libdirs=
+      for libdir in $compile_rpath $finalize_rpath; do
+	if test -n "$hardcode_libdir_flag_spec"; then
+	  if test -n "$hardcode_libdir_separator"; then
+	    if test -z "$hardcode_libdirs"; then
+	      hardcode_libdirs="$libdir"
+	    else
+	      # Just accumulate the unique libdirs.
+	      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in
+	      *"$hardcode_libdir_separator$libdir$hardcode_libdir_separator"*)
+		;;
+	      *)
+		hardcode_libdirs="$hardcode_libdirs$hardcode_libdir_separator$libdir"
+		;;
+	      esac
+	    fi
+	  else
+	    eval flag=\"$hardcode_libdir_flag_spec\"
+	    rpath="$rpath $flag"
+	  fi
+	elif test -n "$runpath_var"; then
+	  case "$perm_rpath " in
+	  *" $libdir "*) ;;
+	  *) perm_rpath="$perm_rpath $libdir" ;;
+	  esac
+	fi
+	case $host in
+	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)
+	  testbindir=`${ECHO} "$libdir" | ${SED} -e 's*/lib$*/bin*'`
+	  case :$dllsearchpath: in
+	  *":$libdir:"*) ;;
+	  ::) dllsearchpath=$libdir;;
+	  *) dllsearchpath="$dllsearchpath:$libdir";;
+	  esac
+	  case :$dllsearchpath: in
+	  *":$testbindir:"*) ;;
+	  ::) dllsearchpath=$testbindir;;
+	  *) dllsearchpath="$dllsearchpath:$testbindir";;
+	  esac
+	  ;;
+	esac
+      done
+      # Substitute the hardcoded libdirs into the rpath.
+      if test -n "$hardcode_libdir_separator" &&
+	 test -n "$hardcode_libdirs"; then
+	libdir="$hardcode_libdirs"
+	eval rpath=\" $hardcode_libdir_flag_spec\"
+      fi
+      compile_rpath="$rpath"
+
+      rpath=
+      hardcode_libdirs=
+      for libdir in $finalize_rpath; do
+	if test -n "$hardcode_libdir_flag_spec"; then
+	  if test -n "$hardcode_libdir_separator"; then
+	    if test -z "$hardcode_libdirs"; then
+	      hardcode_libdirs="$libdir"
+	    else
+	      # Just accumulate the unique libdirs.
+	      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in
+	      *"$hardcode_libdir_separator$libdir$hardcode_libdir_separator"*)
+		;;
+	      *)
+		hardcode_libdirs="$hardcode_libdirs$hardcode_libdir_separator$libdir"
+		;;
+	      esac
+	    fi
+	  else
+	    eval flag=\"$hardcode_libdir_flag_spec\"
+	    rpath="$rpath $flag"
+	  fi
+	elif test -n "$runpath_var"; then
+	  case "$finalize_perm_rpath " in
+	  *" $libdir "*) ;;
+	  *) finalize_perm_rpath="$finalize_perm_rpath $libdir" ;;
+	  esac
+	fi
+      done
+      # Substitute the hardcoded libdirs into the rpath.
+      if test -n "$hardcode_libdir_separator" &&
+	 test -n "$hardcode_libdirs"; then
+	libdir="$hardcode_libdirs"
+	eval rpath=\" $hardcode_libdir_flag_spec\"
+      fi
+      finalize_rpath="$rpath"
+
+      if test -n "$libobjs" && test "$build_old_libs" = yes; then
+	# Transform all the library objects into standard objects.
+	compile_command=`$ECHO "X$compile_command" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
+	finalize_command=`$ECHO "X$finalize_command" | $SP2NL | $Xsed -e "$lo2o" | $NL2SP`
+      fi
+
+      func_generate_dlsyms "$outputname" "@PROGRAM@" "no"
+
+      # template prelinking step
+      if test -n "$prelink_cmds"; then
+	func_execute_cmds "$prelink_cmds" 'exit $?'
+      fi
+
+      wrappers_required=yes
+      case $host in
+      *cygwin* | *mingw* )
+        if test "$build_libtool_libs" != yes; then
+          wrappers_required=no
+        fi
+        ;;
+      *cegcc)
+        # Disable wrappers for cegcc, we are cross compiling anyway.
+        wrappers_required=no
+        ;;
+      *)
+        if test "$need_relink" = no || test "$build_libtool_libs" != yes; then
+          wrappers_required=no
+        fi
+        ;;
+      esac
+      if test "$wrappers_required" = no; then
+	# Replace the output file specification.
+	compile_command=`$ECHO "X$compile_command" | $Xsed -e 's%@OUTPUT@%'"$output"'%g'`
+	link_command="$compile_command$compile_rpath"
+
+	# We have no uninstalled library dependencies, so finalize right now.
+	exit_status=0
+	func_show_eval "$link_command" 'exit_status=$?'
+
+	# Delete the generated files.
+	if test -f "$output_objdir/${outputname}S.${objext}"; then
+	  func_show_eval '$RM "$output_objdir/${outputname}S.${objext}"'
+	fi
+
+	exit $exit_status
+      fi
+
+      if test -n "$compile_shlibpath$finalize_shlibpath"; then
+	compile_command="$shlibpath_var=\"$compile_shlibpath$finalize_shlibpath\$$shlibpath_var\" $compile_command"
+      fi
+      if test -n "$finalize_shlibpath"; then
+	finalize_command="$shlibpath_var=\"$finalize_shlibpath\$$shlibpath_var\" $finalize_command"
+      fi
+
+      compile_var=
+      finalize_var=
+      if test -n "$runpath_var"; then
+	if test -n "$perm_rpath"; then
+	  # We should set the runpath_var.
+	  rpath=
+	  for dir in $perm_rpath; do
+	    rpath="$rpath$dir:"
+	  done
+	  compile_var="$runpath_var=\"$rpath\$$runpath_var\" "
+	fi
+	if test -n "$finalize_perm_rpath"; then
+	  # We should set the runpath_var.
+	  rpath=
+	  for dir in $finalize_perm_rpath; do
+	    rpath="$rpath$dir:"
+	  done
+	  finalize_var="$runpath_var=\"$rpath\$$runpath_var\" "
+	fi
+      fi
+
+      if test "$no_install" = yes; then
+	# We don't need to create a wrapper script.
+	link_command="$compile_var$compile_command$compile_rpath"
+	# Replace the output file specification.
+	link_command=`$ECHO "X$link_command" | $Xsed -e 's%@OUTPUT@%'"$output"'%g'`
+	# Delete the old output file.
+	$opt_dry_run || $RM $output
+	# Link the executable and exit
+	func_show_eval "$link_command" 'exit $?'
+	exit $EXIT_SUCCESS
+      fi
+
+      if test "$hardcode_action" = relink; then
+	# Fast installation is not supported
+	link_command="$compile_var$compile_command$compile_rpath"
+	relink_command="$finalize_var$finalize_command$finalize_rpath"
+
+	func_warning "this platform does not like uninstalled shared libraries"
+	func_warning "\`$output' will be relinked during installation"
+      else
+	if test "$fast_install" != no; then
+	  link_command="$finalize_var$compile_command$finalize_rpath"
+	  if test "$fast_install" = yes; then
+	    relink_command=`$ECHO "X$compile_var$compile_command$compile_rpath" | $Xsed -e 's%@OUTPUT@%\$progdir/\$file%g'`
+	  else
+	    # fast_install is set to needless
+	    relink_command=
+	  fi
+	else
+	  link_command="$compile_var$compile_command$compile_rpath"
+	  relink_command="$finalize_var$finalize_command$finalize_rpath"
+	fi
+      fi
+
+      # Replace the output file specification.
+      link_command=`$ECHO "X$link_command" | $Xsed -e 's%@OUTPUT@%'"$output_objdir/$outputname"'%g'`
+
+      # Delete the old output files.
+      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname
+
+      func_show_eval "$link_command" 'exit $?'
+
+      # Now create the wrapper script.
+      func_verbose "creating $output"
+
+      # Quote the relink command for shipping.
+      if test -n "$relink_command"; then
+	# Preserve any variables that may affect compiler behavior
+	for var in $variables_saved_for_relink; do
+	  if eval test -z \"\${$var+set}\"; then
+	    relink_command="{ test -z \"\${$var+set}\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command"
+	  elif eval var_value=\$$var; test -z "$var_value"; then
+	    relink_command="$var=; export $var; $relink_command"
+	  else
+	    func_quote_for_eval "$var_value"
+	    relink_command="$var=$func_quote_for_eval_result; export $var; $relink_command"
+	  fi
+	done
+	relink_command="(cd `pwd`; $relink_command)"
+	relink_command=`$ECHO "X$relink_command" | $Xsed -e "$sed_quote_subst"`
+      fi
+
+      # Quote $ECHO for shipping.
+      if test "X$ECHO" = "X$SHELL $progpath --fallback-echo"; then
+	case $progpath in
+	[\\/]* | [A-Za-z]:[\\/]*) qecho="$SHELL $progpath --fallback-echo";;
+	*) qecho="$SHELL `pwd`/$progpath --fallback-echo";;
+	esac
+	qecho=`$ECHO "X$qecho" | $Xsed -e "$sed_quote_subst"`
+      else
+	qecho=`$ECHO "X$ECHO" | $Xsed -e "$sed_quote_subst"`
+      fi
+
+      # Only actually do things if not in dry run mode.
+      $opt_dry_run || {
+	# win32 will think the script is a binary if it has
+	# a .exe suffix, so we strip it off here.
+	case $output in
+	  *.exe) func_stripname '' '.exe' "$output"
+	         output=$func_stripname_result ;;
+	esac
+	# test for cygwin because mv fails w/o .exe extensions
+	case $host in
+	  *cygwin*)
+	    exeext=.exe
+	    func_stripname '' '.exe' "$outputname"
+	    outputname=$func_stripname_result ;;
+	  *) exeext= ;;
+	esac
+	case $host in
+	  *cygwin* | *mingw* )
+	    func_dirname_and_basename "$output" "" "."
+	    output_name=$func_basename_result
+	    output_path=$func_dirname_result
+	    cwrappersource="$output_path/$objdir/lt-$output_name.c"
+	    cwrapper="$output_path/$output_name.exe"
+	    $RM $cwrappersource $cwrapper
+	    trap "$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE" 1 2 15
+
+	    func_emit_cwrapperexe_src > $cwrappersource
+
+	    # The wrapper executable is built using the $host compiler,
+	    # because it contains $host paths and files. If cross-
+	    # compiling, it, like the target executable, must be
+	    # executed on the $host or under an emulation environment.
+	    $opt_dry_run || {
+	      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource
+	      $STRIP $cwrapper
+	    }
+
+	    # Now, create the wrapper script for func_source use:
+	    func_ltwrapper_scriptname $cwrapper
+	    $RM $func_ltwrapper_scriptname_result
+	    trap "$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE" 1 2 15
+	    $opt_dry_run || {
+	      # note: this script will not be executed, so do not chmod.
+	      if test "x$build" = "x$host" ; then
+		$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result
+	      else
+		func_emit_wrapper no > $func_ltwrapper_scriptname_result
+	      fi
+	    }
+	  ;;
+	  * )
+	    $RM $output
+	    trap "$RM $output; exit $EXIT_FAILURE" 1 2 15
+
+	    func_emit_wrapper no > $output
+	    chmod +x $output
+	  ;;
+	esac
+      }
+      exit $EXIT_SUCCESS
+      ;;
+    esac
+
+    # See if we need to build an old-fashioned archive.
+    for oldlib in $oldlibs; do
+
+      if test "$build_libtool_libs" = convenience; then
+	oldobjs="$libobjs_save $symfileobj"
+	addlibs="$convenience"
+	build_libtool_libs=no
+      else
+	if test "$build_libtool_libs" = module; then
+	  oldobjs="$libobjs_save"
+	  build_libtool_libs=no
+	else
+	  oldobjs="$old_deplibs $non_pic_objects"
+	  if test "$preload" = yes && test -f "$symfileobj"; then
+	    oldobjs="$oldobjs $symfileobj"
+	  fi
+	fi
+	addlibs="$old_convenience"
+      fi
+
+      if test -n "$addlibs"; then
+	gentop="$output_objdir/${outputname}x"
+	generated="$generated $gentop"
+
+	func_extract_archives $gentop $addlibs
+	oldobjs="$oldobjs $func_extract_archives_result"
+      fi
+
+      # Do each command in the archive commands.
+      if test -n "$old_archive_from_new_cmds" && test "$build_libtool_libs" = yes; then
+	cmds=$old_archive_from_new_cmds
+      else
+
+	# Add any objects from preloaded convenience libraries
+	if test -n "$dlprefiles"; then
+	  gentop="$output_objdir/${outputname}x"
+	  generated="$generated $gentop"
+
+	  func_extract_archives $gentop $dlprefiles
+	  oldobjs="$oldobjs $func_extract_archives_result"
+	fi
+
+	# POSIX demands no paths to be encoded in archives.  We have
+	# to avoid creating archives with duplicate basenames if we
+	# might have to extract them afterwards, e.g., when creating a
+	# static archive out of a convenience library, or when linking
+	# the entirety of a libtool archive into another (currently
+	# not supported by libtool).
+	if (for obj in $oldobjs
+	    do
+	      func_basename "$obj"
+	      $ECHO "$func_basename_result"
+	    done | sort | sort -uc >/dev/null 2>&1); then
+	  :
+	else
+	  $ECHO "copying selected object files to avoid basename conflicts..."
+	  gentop="$output_objdir/${outputname}x"
+	  generated="$generated $gentop"
+	  func_mkdir_p "$gentop"
+	  save_oldobjs=$oldobjs
+	  oldobjs=
+	  counter=1
+	  for obj in $save_oldobjs
+	  do
+	    func_basename "$obj"
+	    objbase="$func_basename_result"
+	    case " $oldobjs " in
+	    " ") oldobjs=$obj ;;
+	    *[\ /]"$objbase "*)
+	      while :; do
+		# Make sure we don't pick an alternate name that also
+		# overlaps.
+		newobj=lt$counter-$objbase
+		func_arith $counter + 1
+		counter=$func_arith_result
+		case " $oldobjs " in
+		*[\ /]"$newobj "*) ;;
+		*) if test ! -f "$gentop/$newobj"; then break; fi ;;
+		esac
+	      done
+	      func_show_eval "ln $obj $gentop/$newobj || cp $obj $gentop/$newobj"
+	      oldobjs="$oldobjs $gentop/$newobj"
+	      ;;
+	    *) oldobjs="$oldobjs $obj" ;;
+	    esac
+	  done
+	fi
+	eval cmds=\"$old_archive_cmds\"
+
+	func_len " $cmds"
+	len=$func_len_result
+	if test "$len" -lt "$max_cmd_len" || test "$max_cmd_len" -le -1; then
+	  cmds=$old_archive_cmds
+	else
+	  # the command line is too long to link in one step, link in parts
+	  func_verbose "using piecewise archive linking..."
+	  save_RANLIB=$RANLIB
+	  RANLIB=:
+	  objlist=
+	  concat_cmds=
+	  save_oldobjs=$oldobjs
+	  oldobjs=
+	  # Is there a better way of finding the last object in the list?
+	  for obj in $save_oldobjs
+	  do
+	    last_oldobj=$obj
+	  done
+	  eval test_cmds=\"$old_archive_cmds\"
+	  func_len " $test_cmds"
+	  len0=$func_len_result
+	  len=$len0
+	  for obj in $save_oldobjs
+	  do
+	    func_len " $obj"
+	    func_arith $len + $func_len_result
+	    len=$func_arith_result
+	    func_append objlist " $obj"
+	    if test "$len" -lt "$max_cmd_len"; then
+	      :
+	    else
+	      # the above command should be used before it gets too long
+	      oldobjs=$objlist
+	      if test "$obj" = "$last_oldobj" ; then
+		RANLIB=$save_RANLIB
+	      fi
+	      test -z "$concat_cmds" || concat_cmds=$concat_cmds~
+	      eval concat_cmds=\"\${concat_cmds}$old_archive_cmds\"
+	      objlist=
+	      len=$len0
+	    fi
+	  done
+	  RANLIB=$save_RANLIB
+	  oldobjs=$objlist
+	  if test "X$oldobjs" = "X" ; then
+	    eval cmds=\"\$concat_cmds\"
+	  else
+	    eval cmds=\"\$concat_cmds~\$old_archive_cmds\"
+	  fi
+	fi
+      fi
+      func_execute_cmds "$cmds" 'exit $?'
+    done
+
+    test -n "$generated" && \
+      func_show_eval "${RM}r$generated"
+
+    # Now create the libtool archive.
+    case $output in
+    *.la)
+      old_library=
+      test "$build_old_libs" = yes && old_library="$libname.$libext"
+      func_verbose "creating $output"
+
+      # Preserve any variables that may affect compiler behavior
+      for var in $variables_saved_for_relink; do
+	if eval test -z \"\${$var+set}\"; then
+	  relink_command="{ test -z \"\${$var+set}\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command"
+	elif eval var_value=\$$var; test -z "$var_value"; then
+	  relink_command="$var=; export $var; $relink_command"
+	else
+	  func_quote_for_eval "$var_value"
+	  relink_command="$var=$func_quote_for_eval_result; export $var; $relink_command"
+	fi
+      done
+      # Quote the link command for shipping.
+      relink_command="(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)"
+      relink_command=`$ECHO "X$relink_command" | $Xsed -e "$sed_quote_subst"`
+      if test "$hardcode_automatic" = yes ; then
+	relink_command=
+      fi
+
+      # Only create the output if not a dry run.
+      $opt_dry_run || {
+	for installed in no yes; do
+	  if test "$installed" = yes; then
+	    if test -z "$install_libdir"; then
+	      break
+	    fi
+	    output="$output_objdir/$outputname"i
+	    # Replace all uninstalled libtool libraries with the installed ones
+	    newdependency_libs=
+	    for deplib in $dependency_libs; do
+	      case $deplib in
+	      *.la)
+		func_basename "$deplib"
+		name="$func_basename_result"
+		eval libdir=`${SED} -n -e 's/^libdir=\(.*\)$/\1/p' $deplib`
+		test -z "$libdir" && \
+		  func_fatal_error "\`$deplib' is not a valid libtool archive"
+		newdependency_libs="$newdependency_libs $libdir/$name"
+		;;
+	      *) newdependency_libs="$newdependency_libs $deplib" ;;
+	      esac
+	    done
+	    dependency_libs="$newdependency_libs"
+	    newdlfiles=
+
+	    for lib in $dlfiles; do
+	      case $lib in
+	      *.la)
+	        func_basename "$lib"
+		name="$func_basename_result"
+		eval libdir=`${SED} -n -e 's/^libdir=\(.*\)$/\1/p' $lib`
+		test -z "$libdir" && \
+		  func_fatal_error "\`$lib' is not a valid libtool archive"
+		newdlfiles="$newdlfiles $libdir/$name"
+		;;
+	      *) newdlfiles="$newdlfiles $lib" ;;
+	      esac
+	    done
+	    dlfiles="$newdlfiles"
+	    newdlprefiles=
+	    for lib in $dlprefiles; do
+	      case $lib in
+	      *.la)
+		# Only pass preopened files to the pseudo-archive (for
+		# eventual linking with the app. that links it) if we
+		# didn't already link the preopened objects directly into
+		# the library:
+		func_basename "$lib"
+		name="$func_basename_result"
+		eval libdir=`${SED} -n -e 's/^libdir=\(.*\)$/\1/p' $lib`
+		test -z "$libdir" && \
+		  func_fatal_error "\`$lib' is not a valid libtool archive"
+		newdlprefiles="$newdlprefiles $libdir/$name"
+		;;
+	      esac
+	    done
+	    dlprefiles="$newdlprefiles"
+	  else
+	    newdlfiles=
+	    for lib in $dlfiles; do
+	      case $lib in
+		[\\/]* | [A-Za-z]:[\\/]*) abs="$lib" ;;
+		*) abs=`pwd`"/$lib" ;;
+	      esac
+	      newdlfiles="$newdlfiles $abs"
+	    done
+	    dlfiles="$newdlfiles"
+	    newdlprefiles=
+	    for lib in $dlprefiles; do
+	      case $lib in
+		[\\/]* | [A-Za-z]:[\\/]*) abs="$lib" ;;
+		*) abs=`pwd`"/$lib" ;;
+	      esac
+	      newdlprefiles="$newdlprefiles $abs"
+	    done
+	    dlprefiles="$newdlprefiles"
+	  fi
+	  $RM $output
+	  # place dlname in correct position for cygwin
+	  tdlname=$dlname
+	  case $host,$output,$installed,$module,$dlname in
+	    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;
+	  esac
+	  $ECHO > $output "\
+# $outputname - a libtool library file
+# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION
+#
+# Please DO NOT delete this file!
+# It is necessary for linking the library.
+
+# The name that we can dlopen(3).
+dlname='$tdlname'
+
+# Names of this library.
+library_names='$library_names'
+
+# The name of the static archive.
+old_library='$old_library'
+
+# Linker flags that can not go in dependency_libs.
+inherited_linker_flags='$new_inherited_linker_flags'
+
+# Libraries that this one depends upon.
+dependency_libs='$dependency_libs'
+
+# Names of additional weak libraries provided by this library
+weak_library_names='$weak_libs'
+
+# Version information for $libname.
+current=$current
+age=$age
+revision=$revision
+
+# Is this an already installed library?
+installed=$installed
+
+# Should we warn about portability when linking against -modules?
+shouldnotlink=$module
+
+# Files to dlopen/dlpreopen
+dlopen='$dlfiles'
+dlpreopen='$dlprefiles'
+
+# Directory that this library needs to be installed in:
+libdir='$install_libdir'"
+	  if test "$installed" = no && test "$need_relink" = yes; then
+	    $ECHO >> $output "\
+relink_command=\"$relink_command\""
+	  fi
+	done
+      }
+
+      # Do a symbolic link so that the libtool archive can be found in
+      # LD_LIBRARY_PATH before the program is installed.
+      func_show_eval '( cd "$output_objdir" && $RM "$outputname" && $LN_S "../$outputname" "$outputname" )' 'exit $?'
+      ;;
+    esac
+    exit $EXIT_SUCCESS
+}
+
+{ test "$mode" = link || test "$mode" = relink; } &&
+    func_mode_link ${1+"$@"}
+
+
+# func_mode_uninstall arg...
+func_mode_uninstall ()
+{
+    $opt_debug
+    RM="$nonopt"
+    files=
+    rmforce=
+    exit_status=0
+
+    # This variable tells wrapper scripts just to set variables rather
+    # than running their programs.
+    libtool_install_magic="$magic"
+
+    for arg
+    do
+      case $arg in
+      -f) RM="$RM $arg"; rmforce=yes ;;
+      -*) RM="$RM $arg" ;;
+      *) files="$files $arg" ;;
+      esac
+    done
+
+    test -z "$RM" && \
+      func_fatal_help "you must specify an RM program"
+
+    rmdirs=
+
+    origobjdir="$objdir"
+    for file in $files; do
+      func_dirname "$file" "" "."
+      dir="$func_dirname_result"
+      if test "X$dir" = X.; then
+	objdir="$origobjdir"
+      else
+	objdir="$dir/$origobjdir"
+      fi
+      func_basename "$file"
+      name="$func_basename_result"
+      test "$mode" = uninstall && objdir="$dir"
+
+      # Remember objdir for removal later, being careful to avoid duplicates
+      if test "$mode" = clean; then
+	case " $rmdirs " in
+	  *" $objdir "*) ;;
+	  *) rmdirs="$rmdirs $objdir" ;;
+	esac
+      fi
+
+      # Don't error if the file doesn't exist and rm -f was used.
+      if { test -L "$file"; } >/dev/null 2>&1 ||
+	 { test -h "$file"; } >/dev/null 2>&1 ||
+	 test -f "$file"; then
+	:
+      elif test -d "$file"; then
+	exit_status=1
+	continue
+      elif test "$rmforce" = yes; then
+	continue
+      fi
+
+      rmfiles="$file"
+
+      case $name in
+      *.la)
+	# Possibly a libtool archive, so verify it.
+	if func_lalib_p "$file"; then
+	  func_source $dir/$name
+
+	  # Delete the libtool libraries and symlinks.
+	  for n in $library_names; do
+	    rmfiles="$rmfiles $objdir/$n"
+	  done
+	  test -n "$old_library" && rmfiles="$rmfiles $objdir/$old_library"
+
+	  case "$mode" in
+	  clean)
+	    case "  $library_names " in
+	    # "  " in the beginning catches empty $dlname
+	    *" $dlname "*) ;;
+	    *) rmfiles="$rmfiles $objdir/$dlname" ;;
+	    esac
+	    test -n "$libdir" && rmfiles="$rmfiles $objdir/$name $objdir/${name}i"
+	    ;;
+	  uninstall)
+	    if test -n "$library_names"; then
+	      # Do each command in the postuninstall commands.
+	      func_execute_cmds "$postuninstall_cmds" 'test "$rmforce" = yes || exit_status=1'
+	    fi
+
+	    if test -n "$old_library"; then
+	      # Do each command in the old_postuninstall commands.
+	      func_execute_cmds "$old_postuninstall_cmds" 'test "$rmforce" = yes || exit_status=1'
+	    fi
+	    # FIXME: should reinstall the best remaining shared library.
+	    ;;
+	  esac
+	fi
+	;;
+
+      *.lo)
+	# Possibly a libtool object, so verify it.
+	if func_lalib_p "$file"; then
+
+	  # Read the .lo file
+	  func_source $dir/$name
+
+	  # Add PIC object to the list of files to remove.
+	  if test -n "$pic_object" &&
+	     test "$pic_object" != none; then
+	    rmfiles="$rmfiles $dir/$pic_object"
+	  fi
+
+	  # Add non-PIC object to the list of files to remove.
+	  if test -n "$non_pic_object" &&
+	     test "$non_pic_object" != none; then
+	    rmfiles="$rmfiles $dir/$non_pic_object"
+	  fi
+	fi
+	;;
+
+      *)
+	if test "$mode" = clean ; then
+	  noexename=$name
+	  case $file in
+	  *.exe)
+	    func_stripname '' '.exe' "$file"
+	    file=$func_stripname_result
+	    func_stripname '' '.exe' "$name"
+	    noexename=$func_stripname_result
+	    # $file with .exe has already been added to rmfiles,
+	    # add $file without .exe
+	    rmfiles="$rmfiles $file"
+	    ;;
+	  esac
+	  # Do a test to see if this is a libtool program.
+	  if func_ltwrapper_p "$file"; then
+	    if func_ltwrapper_executable_p "$file"; then
+	      func_ltwrapper_scriptname "$file"
+	      relink_command=
+	      func_source $func_ltwrapper_scriptname_result
+	      rmfiles="$rmfiles $func_ltwrapper_scriptname_result"
+	    else
+	      relink_command=
+	      func_source $dir/$noexename
+	    fi
+
+	    # note $name still contains .exe if it was in $file originally
+	    # as does the version of $file that was added into $rmfiles
+	    rmfiles="$rmfiles $objdir/$name $objdir/${name}S.${objext}"
+	    if test "$fast_install" = yes && test -n "$relink_command"; then
+	      rmfiles="$rmfiles $objdir/lt-$name"
+	    fi
+	    if test "X$noexename" != "X$name" ; then
+	      rmfiles="$rmfiles $objdir/lt-${noexename}.c"
+	    fi
+	  fi
+	fi
+	;;
+      esac
+      func_show_eval "$RM $rmfiles" 'exit_status=1'
+    done
+    objdir="$origobjdir"
+
+    # Try to remove the ${objdir}s in the directories where we deleted files
+    for dir in $rmdirs; do
+      if test -d "$dir"; then
+	func_show_eval "rmdir $dir >/dev/null 2>&1"
+      fi
+    done
+
+    exit $exit_status
+}
+
+{ test "$mode" = uninstall || test "$mode" = clean; } &&
+    func_mode_uninstall ${1+"$@"}
+
+test -z "$mode" && {
+  help="$generic_help"
+  func_fatal_help "you must specify a MODE"
+}
+
+test -z "$exec_cmd" && \
+  func_fatal_help "invalid operation mode \`$mode'"
+
+if test -n "$exec_cmd"; then
+  eval exec "$exec_cmd"
+  exit $EXIT_FAILURE
+fi
+
+exit $exit_status
+
+
+# The TAGs below are defined such that we never get into a situation
+# in which we disable both kinds of libraries.  Given conflicting
+# choices, we go for a static library, that is the most portable,
+# since we can't tell whether shared libraries were disabled because
+# the user asked for that or because the platform doesn't support
+# them.  This is particularly important on AIX, because we don't
+# support having both static and shared libraries enabled at the same
+# time on that platform, so we default to a shared-only configuration.
+# If a disable-shared tag is given, we'll fallback to a static-only
+# configuration.  But we'll never go from static-only to shared-only.
+
+# ### BEGIN LIBTOOL TAG CONFIG: disable-shared
+build_libtool_libs=no
+build_old_libs=yes
+# ### END LIBTOOL TAG CONFIG: disable-shared
+
+# ### BEGIN LIBTOOL TAG CONFIG: disable-static
+build_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`
+# ### END LIBTOOL TAG CONFIG: disable-static
+
+# Local Variables:
+# mode:shell-script
+# sh-indentation:2
+# End:
+# vi:sw=2
+
diff --git a/build-aux/missing b/build-aux/missing
new file mode 100755
index 0000000..28055d2
--- /dev/null
+++ b/build-aux/missing
@@ -0,0 +1,376 @@
+#! /bin/sh
+# Common stub for a few missing GNU programs while installing.
+
+scriptversion=2009-04-28.21; # UTC
+
+# Copyright (C) 1996, 1997, 1999, 2000, 2002, 2003, 2004, 2005, 2006,
+# 2008, 2009 Free Software Foundation, Inc.
+# Originally by Fran,cois Pinard <pinard@iro.umontreal.ca>, 1996.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# As a special exception to the GNU General Public License, if you
+# distribute this file as part of a program that contains a
+# configuration script generated by Autoconf, you may include it under
+# the same distribution terms that you use for the rest of that program.
+
+if test $# -eq 0; then
+  echo 1>&2 "Try \`$0 --help' for more information"
+  exit 1
+fi
+
+run=:
+sed_output='s/.* --output[ =]\([^ ]*\).*/\1/p'
+sed_minuso='s/.* -o \([^ ]*\).*/\1/p'
+
+# In the cases where this matters, `missing' is being run in the
+# srcdir already.
+if test -f configure.ac; then
+  configure_ac=configure.ac
+else
+  configure_ac=configure.in
+fi
+
+msg="missing on your system"
+
+case $1 in
+--run)
+  # Try to run requested program, and just exit if it succeeds.
+  run=
+  shift
+  "$@" && exit 0
+  # Exit code 63 means version mismatch.  This often happens
+  # when the user try to use an ancient version of a tool on
+  # a file that requires a minimum version.  In this case we
+  # we should proceed has if the program had been absent, or
+  # if --run hadn't been passed.
+  if test $? = 63; then
+    run=:
+    msg="probably too old"
+  fi
+  ;;
+
+  -h|--h|--he|--hel|--help)
+    echo "\
+$0 [OPTION]... PROGRAM [ARGUMENT]...
+
+Handle \`PROGRAM [ARGUMENT]...' for when PROGRAM is missing, or return an
+error status if there is no known handling for PROGRAM.
+
+Options:
+  -h, --help      display this help and exit
+  -v, --version   output version information and exit
+  --run           try to run the given command, and emulate it if it fails
+
+Supported PROGRAM values:
+  aclocal      touch file \`aclocal.m4'
+  autoconf     touch file \`configure'
+  autoheader   touch file \`config.h.in'
+  autom4te     touch the output file, or create a stub one
+  automake     touch all \`Makefile.in' files
+  bison        create \`y.tab.[ch]', if possible, from existing .[ch]
+  flex         create \`lex.yy.c', if possible, from existing .c
+  help2man     touch the output file
+  lex          create \`lex.yy.c', if possible, from existing .c
+  makeinfo     touch the output file
+  tar          try tar, gnutar, gtar, then tar without non-portable flags
+  yacc         create \`y.tab.[ch]', if possible, from existing .[ch]
+
+Version suffixes to PROGRAM as well as the prefixes \`gnu-', \`gnu', and
+\`g' are ignored when checking the name.
+
+Send bug reports to <bug-automake@gnu.org>."
+    exit $?
+    ;;
+
+  -v|--v|--ve|--ver|--vers|--versi|--versio|--version)
+    echo "missing $scriptversion (GNU Automake)"
+    exit $?
+    ;;
+
+  -*)
+    echo 1>&2 "$0: Unknown \`$1' option"
+    echo 1>&2 "Try \`$0 --help' for more information"
+    exit 1
+    ;;
+
+esac
+
+# normalize program name to check for.
+program=`echo "$1" | sed '
+  s/^gnu-//; t
+  s/^gnu//; t
+  s/^g//; t'`
+
+# Now exit if we have it, but it failed.  Also exit now if we
+# don't have it and --version was passed (most likely to detect
+# the program).  This is about non-GNU programs, so use $1 not
+# $program.
+case $1 in
+  lex*|yacc*)
+    # Not GNU programs, they don't have --version.
+    ;;
+
+  tar*)
+    if test -n "$run"; then
+       echo 1>&2 "ERROR: \`tar' requires --run"
+       exit 1
+    elif test "x$2" = "x--version" || test "x$2" = "x--help"; then
+       exit 1
+    fi
+    ;;
+
+  *)
+    if test -z "$run" && ($1 --version) > /dev/null 2>&1; then
+       # We have it, but it failed.
+       exit 1
+    elif test "x$2" = "x--version" || test "x$2" = "x--help"; then
+       # Could not run --version or --help.  This is probably someone
+       # running `$TOOL --version' or `$TOOL --help' to check whether
+       # $TOOL exists and not knowing $TOOL uses missing.
+       exit 1
+    fi
+    ;;
+esac
+
+# If it does not exist, or fails to run (possibly an outdated version),
+# try to emulate it.
+case $program in
+  aclocal*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+         you modified \`acinclude.m4' or \`${configure_ac}'.  You might want
+         to install the \`Automake' and \`Perl' packages.  Grab them from
+         any GNU archive site."
+    touch aclocal.m4
+    ;;
+
+  autoconf*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+         you modified \`${configure_ac}'.  You might want to install the
+         \`Autoconf' and \`GNU m4' packages.  Grab them from any GNU
+         archive site."
+    touch configure
+    ;;
+
+  autoheader*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+         you modified \`acconfig.h' or \`${configure_ac}'.  You might want
+         to install the \`Autoconf' and \`GNU m4' packages.  Grab them
+         from any GNU archive site."
+    files=`sed -n 's/^[ ]*A[CM]_CONFIG_HEADER(\([^)]*\)).*/\1/p' ${configure_ac}`
+    test -z "$files" && files="config.h"
+    touch_files=
+    for f in $files; do
+      case $f in
+      *:*) touch_files="$touch_files "`echo "$f" |
+				       sed -e 's/^[^:]*://' -e 's/:.*//'`;;
+      *) touch_files="$touch_files $f.in";;
+      esac
+    done
+    touch $touch_files
+    ;;
+
+  automake*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+         you modified \`Makefile.am', \`acinclude.m4' or \`${configure_ac}'.
+         You might want to install the \`Automake' and \`Perl' packages.
+         Grab them from any GNU archive site."
+    find . -type f -name Makefile.am -print |
+	   sed 's/\.am$/.in/' |
+	   while read f; do touch "$f"; done
+    ;;
+
+  autom4te*)
+    echo 1>&2 "\
+WARNING: \`$1' is needed, but is $msg.
+         You might have modified some files without having the
+         proper tools for further handling them.
+         You can get \`$1' as part of \`Autoconf' from any GNU
+         archive site."
+
+    file=`echo "$*" | sed -n "$sed_output"`
+    test -z "$file" && file=`echo "$*" | sed -n "$sed_minuso"`
+    if test -f "$file"; then
+	touch $file
+    else
+	test -z "$file" || exec >$file
+	echo "#! /bin/sh"
+	echo "# Created by GNU Automake missing as a replacement of"
+	echo "#  $ $@"
+	echo "exit 0"
+	chmod +x $file
+	exit 1
+    fi
+    ;;
+
+  bison*|yacc*)
+    echo 1>&2 "\
+WARNING: \`$1' $msg.  You should only need it if
+         you modified a \`.y' file.  You may need the \`Bison' package
+         in order for those modifications to take effect.  You can get
+         \`Bison' from any GNU archive site."
+    rm -f y.tab.c y.tab.h
+    if test $# -ne 1; then
+        eval LASTARG="\${$#}"
+	case $LASTARG in
+	*.y)
+	    SRCFILE=`echo "$LASTARG" | sed 's/y$/c/'`
+	    if test -f "$SRCFILE"; then
+	         cp "$SRCFILE" y.tab.c
+	    fi
+	    SRCFILE=`echo "$LASTARG" | sed 's/y$/h/'`
+	    if test -f "$SRCFILE"; then
+	         cp "$SRCFILE" y.tab.h
+	    fi
+	  ;;
+	esac
+    fi
+    if test ! -f y.tab.h; then
+	echo >y.tab.h
+    fi
+    if test ! -f y.tab.c; then
+	echo 'main() { return 0; }' >y.tab.c
+    fi
+    ;;
+
+  lex*|flex*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+         you modified a \`.l' file.  You may need the \`Flex' package
+         in order for those modifications to take effect.  You can get
+         \`Flex' from any GNU archive site."
+    rm -f lex.yy.c
+    if test $# -ne 1; then
+        eval LASTARG="\${$#}"
+	case $LASTARG in
+	*.l)
+	    SRCFILE=`echo "$LASTARG" | sed 's/l$/c/'`
+	    if test -f "$SRCFILE"; then
+	         cp "$SRCFILE" lex.yy.c
+	    fi
+	  ;;
+	esac
+    fi
+    if test ! -f lex.yy.c; then
+	echo 'main() { return 0; }' >lex.yy.c
+    fi
+    ;;
+
+  help2man*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+	 you modified a dependency of a manual page.  You may need the
+	 \`Help2man' package in order for those modifications to take
+	 effect.  You can get \`Help2man' from any GNU archive site."
+
+    file=`echo "$*" | sed -n "$sed_output"`
+    test -z "$file" && file=`echo "$*" | sed -n "$sed_minuso"`
+    if test -f "$file"; then
+	touch $file
+    else
+	test -z "$file" || exec >$file
+	echo ".ab help2man is required to generate this page"
+	exit $?
+    fi
+    ;;
+
+  makeinfo*)
+    echo 1>&2 "\
+WARNING: \`$1' is $msg.  You should only need it if
+         you modified a \`.texi' or \`.texinfo' file, or any other file
+         indirectly affecting the aspect of the manual.  The spurious
+         call might also be the consequence of using a buggy \`make' (AIX,
+         DU, IRIX).  You might want to install the \`Texinfo' package or
+         the \`GNU make' package.  Grab either from any GNU archive site."
+    # The file to touch is that specified with -o ...
+    file=`echo "$*" | sed -n "$sed_output"`
+    test -z "$file" && file=`echo "$*" | sed -n "$sed_minuso"`
+    if test -z "$file"; then
+      # ... or it is the one specified with @setfilename ...
+      infile=`echo "$*" | sed 's/.* \([^ ]*\) *$/\1/'`
+      file=`sed -n '
+	/^@setfilename/{
+	  s/.* \([^ ]*\) *$/\1/
+	  p
+	  q
+	}' $infile`
+      # ... or it is derived from the source name (dir/f.texi becomes f.info)
+      test -z "$file" && file=`echo "$infile" | sed 's,.*/,,;s,.[^.]*$,,'`.info
+    fi
+    # If the file does not exist, the user really needs makeinfo;
+    # let's fail without touching anything.
+    test -f $file || exit 1
+    touch $file
+    ;;
+
+  tar*)
+    shift
+
+    # We have already tried tar in the generic part.
+    # Look for gnutar/gtar before invocation to avoid ugly error
+    # messages.
+    if (gnutar --version > /dev/null 2>&1); then
+       gnutar "$@" && exit 0
+    fi
+    if (gtar --version > /dev/null 2>&1); then
+       gtar "$@" && exit 0
+    fi
+    firstarg="$1"
+    if shift; then
+	case $firstarg in
+	*o*)
+	    firstarg=`echo "$firstarg" | sed s/o//`
+	    tar "$firstarg" "$@" && exit 0
+	    ;;
+	esac
+	case $firstarg in
+	*h*)
+	    firstarg=`echo "$firstarg" | sed s/h//`
+	    tar "$firstarg" "$@" && exit 0
+	    ;;
+	esac
+    fi
+
+    echo 1>&2 "\
+WARNING: I can't seem to be able to run \`tar' with the given arguments.
+         You may want to install GNU tar or Free paxutils, or check the
+         command line arguments."
+    exit 1
+    ;;
+
+  *)
+    echo 1>&2 "\
+WARNING: \`$1' is needed, and is $msg.
+         You might have modified some files without having the
+         proper tools for further handling them.  Check the \`README' file,
+         it often tells you about the needed prerequisites for installing
+         this package.  You may also peek at any GNU archive site, in case
+         some other package would contain this missing \`$1' program."
+    exit 1
+    ;;
+esac
+
+exit 0
+
+# Local variables:
+# eval: (add-hook 'write-file-hooks 'time-stamp)
+# time-stamp-start: "scriptversion="
+# time-stamp-format: "%:y-%02m-%02d.%02H"
+# time-stamp-time-zone: "UTC"
+# time-stamp-end: "; # UTC"
+# End:
diff --git a/config.h.in b/config.h.in
new file mode 100644
index 0000000..8328d09
--- /dev/null
+++ b/config.h.in
@@ -0,0 +1,102 @@
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#undef HAVE_DLFCN_H
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#undef HAVE_INTTYPES_H
+
+/* Define to 1 if you have the `z' library (-lz). */
+#undef HAVE_LIBZ
+
+/* Define to 1 if you have the <memory.h> header file. */
+#undef HAVE_MEMORY_H
+
+/* define if the compiler implements namespaces */
+#undef HAVE_NAMESPACES
+
+/* Define if you have POSIX threads libraries and header files. */
+#undef HAVE_PTHREAD
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#undef HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#undef HAVE_STDLIB_H
+
+/* Define to 1 if you have the `strchr' function. */
+#undef HAVE_STRCHR
+
+/* Define to 1 if you have the `strdup' function. */
+#undef HAVE_STRDUP
+
+/* Define to 1 if you have the <strings.h> header file. */
+#undef HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#undef HAVE_STRING_H
+
+/* Define to 1 if you have the `strstr' function. */
+#undef HAVE_STRSTR
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#undef HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#undef HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#undef HAVE_UNISTD_H
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#undef LT_OBJDIR
+
+/* Define to 1 if log4cpp library is used. */
+#undef OPENSAML_LOG4CPP
+
+/* Define to 1 if log4shib library is used. */
+#undef OPENSAML_LOG4SHIB
+
+/* Define to 1 if Xerces XMLString includes XMLByte release. */
+#undef OPENSAML_XERCESC_HAS_XMLBYTE_RELEASE
+
+/* Name of package */
+#undef PACKAGE
+
+/* Define to the address where bug reports for this package should be sent. */
+#undef PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#undef PACKAGE_NAME
+
+/* Define to the full name and version of this package. */
+#undef PACKAGE_STRING
+
+/* Define to the one symbol short name of this package. */
+#undef PACKAGE_TARNAME
+
+/* Define to the home page for this package. */
+#undef PACKAGE_URL
+
+/* Define to the version of this package. */
+#undef PACKAGE_VERSION
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+#undef PTHREAD_CREATE_JOINABLE
+
+/* The size of `time_t', as computed by sizeof. */
+#undef SIZEOF_TIME_T
+
+/* Define to 1 if you have the ANSI C header files. */
+#undef STDC_HEADERS
+
+/* Version number of package */
+#undef VERSION
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#undef const
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#undef size_t
diff --git a/configure b/configure
new file mode 100755
index 0000000..e1a2ca0
--- /dev/null
+++ b/configure
@@ -0,0 +1,21394 @@
+#! /bin/sh
+# Guess values for system-dependent variables and create Makefiles.
+# Generated by GNU Autoconf 2.67 for opensaml 2.4.
+#
+# Report bugs to <https://bugs.internet2.edu/>.
+#
+#
+# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
+# 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
+# Foundation, Inc.
+#
+#
+# This configure script is free software; the Free Software Foundation
+# gives unlimited permission to copy, distribute and modify it.
+## -------------------- ##
+## M4sh Initialization. ##
+## -------------------- ##
+
+# Be more Bourne compatible
+DUALCASE=1; export DUALCASE # for MKS sh
+if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
+  emulate sh
+  NULLCMD=:
+  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
+  # is contrary to our usage.  Disable this feature.
+  alias -g '${1+"$@"}'='"$@"'
+  setopt NO_GLOB_SUBST
+else
+  case `(set -o) 2>/dev/null` in #(
+  *posix*) :
+    set -o posix ;; #(
+  *) :
+     ;;
+esac
+fi
+
+
+as_nl='
+'
+export as_nl
+# Printing a long string crashes Solaris 7 /usr/bin/printf.
+as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
+as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
+as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
+# Prefer a ksh shell builtin over an external printf program on Solaris,
+# but without wasting forks for bash or zsh.
+if test -z "$BASH_VERSION$ZSH_VERSION" \
+    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
+  as_echo='print -r --'
+  as_echo_n='print -rn --'
+elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
+  as_echo='printf %s\n'
+  as_echo_n='printf %s'
+else
+  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
+    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
+    as_echo_n='/usr/ucb/echo -n'
+  else
+    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
+    as_echo_n_body='eval
+      arg=$1;
+      case $arg in #(
+      *"$as_nl"*)
+	expr "X$arg" : "X\\(.*\\)$as_nl";
+	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
+      esac;
+      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
+    '
+    export as_echo_n_body
+    as_echo_n='sh -c $as_echo_n_body as_echo'
+  fi
+  export as_echo_body
+  as_echo='sh -c $as_echo_body as_echo'
+fi
+
+# The user is always right.
+if test "${PATH_SEPARATOR+set}" != set; then
+  PATH_SEPARATOR=:
+  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
+    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
+      PATH_SEPARATOR=';'
+  }
+fi
+
+
+# IFS
+# We need space, tab and new line, in precisely that order.  Quoting is
+# there to prevent editors from complaining about space-tab.
+# (If _AS_PATH_WALK were called with IFS unset, it would disable word
+# splitting by setting IFS to empty value.)
+IFS=" ""	$as_nl"
+
+# Find who we are.  Look in the path if we contain no directory separator.
+case $0 in #((
+  *[\\/]* ) as_myself=$0 ;;
+  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
+  done
+IFS=$as_save_IFS
+
+     ;;
+esac
+# We did not find ourselves, most probably we were run as `sh COMMAND'
+# in which case we are not to be found in the path.
+if test "x$as_myself" = x; then
+  as_myself=$0
+fi
+if test ! -f "$as_myself"; then
+  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
+  exit 1
+fi
+
+# Unset variables that we do not need and which cause bugs (e.g. in
+# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
+# suppresses any "Segmentation fault" message there.  '((' could
+# trigger a bug in pdksh 5.2.14.
+for as_var in BASH_ENV ENV MAIL MAILPATH
+do eval test x\${$as_var+set} = xset \
+  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
+done
+PS1='$ '
+PS2='> '
+PS4='+ '
+
+# NLS nuisances.
+LC_ALL=C
+export LC_ALL
+LANGUAGE=C
+export LANGUAGE
+
+# CDPATH.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+if test "x$CONFIG_SHELL" = x; then
+  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
+  emulate sh
+  NULLCMD=:
+  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
+  # is contrary to our usage.  Disable this feature.
+  alias -g '\${1+\"\$@\"}'='\"\$@\"'
+  setopt NO_GLOB_SUBST
+else
+  case \`(set -o) 2>/dev/null\` in #(
+  *posix*) :
+    set -o posix ;; #(
+  *) :
+     ;;
+esac
+fi
+"
+  as_required="as_fn_return () { (exit \$1); }
+as_fn_success () { as_fn_return 0; }
+as_fn_failure () { as_fn_return 1; }
+as_fn_ret_success () { return 0; }
+as_fn_ret_failure () { return 1; }
+
+exitcode=0
+as_fn_success || { exitcode=1; echo as_fn_success failed.; }
+as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
+as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
+as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
+if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :
+
+else
+  exitcode=1; echo positional parameters were not saved.
+fi
+test x\$exitcode = x0 || exit 1"
+  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
+  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
+  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
+  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
+test \$(( 1 + 1 )) = 2 || exit 1"
+  if (eval "$as_required") 2>/dev/null; then :
+  as_have_required=yes
+else
+  as_have_required=no
+fi
+  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :
+
+else
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+as_found=false
+for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+  as_found=:
+  case $as_dir in #(
+	 /*)
+	   for as_base in sh bash ksh sh5; do
+	     # Try only shells that exist, to save several forks.
+	     as_shell=$as_dir/$as_base
+	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
+		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
+  CONFIG_SHELL=$as_shell as_have_required=yes
+		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
+  break 2
+fi
+fi
+	   done;;
+       esac
+  as_found=false
+done
+$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
+	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
+  CONFIG_SHELL=$SHELL as_have_required=yes
+fi; }
+IFS=$as_save_IFS
+
+
+      if test "x$CONFIG_SHELL" != x; then :
+  # We cannot yet assume a decent shell, so we have to provide a
+	# neutralization value for shells without unset; and this also
+	# works around shells that cannot unset nonexistent variables.
+	BASH_ENV=/dev/null
+	ENV=/dev/null
+	(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
+	export CONFIG_SHELL
+	exec "$CONFIG_SHELL" "$as_myself" ${1+"$@"}
+fi
+
+    if test x$as_have_required = xno; then :
+  $as_echo "$0: This script requires a shell more modern than all"
+  $as_echo "$0: the shells that I found on your system."
+  if test x${ZSH_VERSION+set} = xset ; then
+    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
+    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
+  else
+    $as_echo "$0: Please tell bug-autoconf@gnu.org and
+$0: https://bugs.internet2.edu/ about your system,
+$0: including any error possibly output before this
+$0: message. Then install a modern shell, or manually run
+$0: the script under such a shell if you do have one."
+  fi
+  exit 1
+fi
+fi
+fi
+SHELL=${CONFIG_SHELL-/bin/sh}
+export SHELL
+# Unset more variables known to interfere with behavior of common tools.
+CLICOLOR_FORCE= GREP_OPTIONS=
+unset CLICOLOR_FORCE GREP_OPTIONS
+
+## --------------------- ##
+## M4sh Shell Functions. ##
+## --------------------- ##
+# as_fn_unset VAR
+# ---------------
+# Portably unset VAR.
+as_fn_unset ()
+{
+  { eval $1=; unset $1;}
+}
+as_unset=as_fn_unset
+
+# as_fn_set_status STATUS
+# -----------------------
+# Set $? to STATUS, without forking.
+as_fn_set_status ()
+{
+  return $1
+} # as_fn_set_status
+
+# as_fn_exit STATUS
+# -----------------
+# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
+as_fn_exit ()
+{
+  set +e
+  as_fn_set_status $1
+  exit $1
+} # as_fn_exit
+
+# as_fn_mkdir_p
+# -------------
+# Create "$as_dir" as a directory, including parents if necessary.
+as_fn_mkdir_p ()
+{
+
+  case $as_dir in #(
+  -*) as_dir=./$as_dir;;
+  esac
+  test -d "$as_dir" || eval $as_mkdir_p || {
+    as_dirs=
+    while :; do
+      case $as_dir in #(
+      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
+      *) as_qdir=$as_dir;;
+      esac
+      as_dirs="'$as_qdir' $as_dirs"
+      as_dir=`$as_dirname -- "$as_dir" ||
+$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$as_dir" : 'X\(//\)[^/]' \| \
+	 X"$as_dir" : 'X\(//\)$' \| \
+	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$as_dir" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+      test -d "$as_dir" && break
+    done
+    test -z "$as_dirs" || eval "mkdir $as_dirs"
+  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"
+
+
+} # as_fn_mkdir_p
+# as_fn_append VAR VALUE
+# ----------------------
+# Append the text in VALUE to the end of the definition contained in VAR. Take
+# advantage of any shell optimizations that allow amortized linear growth over
+# repeated appends, instead of the typical quadratic growth present in naive
+# implementations.
+if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
+  eval 'as_fn_append ()
+  {
+    eval $1+=\$2
+  }'
+else
+  as_fn_append ()
+  {
+    eval $1=\$$1\$2
+  }
+fi # as_fn_append
+
+# as_fn_arith ARG...
+# ------------------
+# Perform arithmetic evaluation on the ARGs, and store the result in the
+# global $as_val. Take advantage of shells that can avoid forks. The arguments
+# must be portable across $(()) and expr.
+if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
+  eval 'as_fn_arith ()
+  {
+    as_val=$(( $* ))
+  }'
+else
+  as_fn_arith ()
+  {
+    as_val=`expr "$@" || test $? -eq 1`
+  }
+fi # as_fn_arith
+
+
+# as_fn_error STATUS ERROR [LINENO LOG_FD]
+# ----------------------------------------
+# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
+# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
+# script with STATUS, using 1 if that was 0.
+as_fn_error ()
+{
+  as_status=$1; test $as_status -eq 0 && as_status=1
+  if test "$4"; then
+    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
+  fi
+  $as_echo "$as_me: error: $2" >&2
+  as_fn_exit $as_status
+} # as_fn_error
+
+if expr a : '\(a\)' >/dev/null 2>&1 &&
+   test "X`expr 00001 : '.*\(...\)'`" = X001; then
+  as_expr=expr
+else
+  as_expr=false
+fi
+
+if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
+  as_basename=basename
+else
+  as_basename=false
+fi
+
+if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
+  as_dirname=dirname
+else
+  as_dirname=false
+fi
+
+as_me=`$as_basename -- "$0" ||
+$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
+	 X"$0" : 'X\(//\)$' \| \
+	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X/"$0" |
+    sed '/^.*\/\([^/][^/]*\)\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\/\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\/\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+
+# Avoid depending upon Character Ranges.
+as_cr_letters='abcdefghijklmnopqrstuvwxyz'
+as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
+as_cr_Letters=$as_cr_letters$as_cr_LETTERS
+as_cr_digits='0123456789'
+as_cr_alnum=$as_cr_Letters$as_cr_digits
+
+
+  as_lineno_1=$LINENO as_lineno_1a=$LINENO
+  as_lineno_2=$LINENO as_lineno_2a=$LINENO
+  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
+  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
+  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
+  sed -n '
+    p
+    /[$]LINENO/=
+  ' <$as_myself |
+    sed '
+      s/[$]LINENO.*/&-/
+      t lineno
+      b
+      :lineno
+      N
+      :loop
+      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
+      t loop
+      s/-\n.*//
+    ' >$as_me.lineno &&
+  chmod +x "$as_me.lineno" ||
+    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }
+
+  # Don't try to exec as it changes $[0], causing all sort of problems
+  # (the dirname of $[0] is not the place where we might find the
+  # original and so on.  Autoconf is especially sensitive to this).
+  . "./$as_me.lineno"
+  # Exit status is that of the last command.
+  exit
+}
+
+ECHO_C= ECHO_N= ECHO_T=
+case `echo -n x` in #(((((
+-n*)
+  case `echo 'xy\c'` in
+  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
+  xy)  ECHO_C='\c';;
+  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
+       ECHO_T='	';;
+  esac;;
+*)
+  ECHO_N='-n';;
+esac
+
+rm -f conf$$ conf$$.exe conf$$.file
+if test -d conf$$.dir; then
+  rm -f conf$$.dir/conf$$.file
+else
+  rm -f conf$$.dir
+  mkdir conf$$.dir 2>/dev/null
+fi
+if (echo >conf$$.file) 2>/dev/null; then
+  if ln -s conf$$.file conf$$ 2>/dev/null; then
+    as_ln_s='ln -s'
+    # ... but there are two gotchas:
+    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
+    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
+    # In both cases, we have to default to `cp -p'.
+    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
+      as_ln_s='cp -p'
+  elif ln conf$$.file conf$$ 2>/dev/null; then
+    as_ln_s=ln
+  else
+    as_ln_s='cp -p'
+  fi
+else
+  as_ln_s='cp -p'
+fi
+rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
+rmdir conf$$.dir 2>/dev/null
+
+if mkdir -p . 2>/dev/null; then
+  as_mkdir_p='mkdir -p "$as_dir"'
+else
+  test -d ./-p && rmdir ./-p
+  as_mkdir_p=false
+fi
+
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
+else
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+	test -d "$1/.";
+      else
+	case $1 in #(
+	-*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
+fi
+as_executable_p=$as_test_x
+
+# Sed expression to map a string onto a valid CPP name.
+as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
+
+# Sed expression to map a string onto a valid variable name.
+as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"
+
+
+
+# Check that we are running under the correct shell.
+SHELL=${CONFIG_SHELL-/bin/sh}
+
+case X$lt_ECHO in
+X*--fallback-echo)
+  # Remove one level of quotation (which was required for Make).
+  ECHO=`echo "$lt_ECHO" | sed 's,\\\\\$\\$0,'$0','`
+  ;;
+esac
+
+ECHO=${lt_ECHO-echo}
+if test "X$1" = X--no-reexec; then
+  # Discard the --no-reexec flag, and continue.
+  shift
+elif test "X$1" = X--fallback-echo; then
+  # Avoid inline document here, it may be left over
+  :
+elif test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t' ; then
+  # Yippee, $ECHO works!
+  :
+else
+  # Restart under the correct shell.
+  exec $SHELL "$0" --no-reexec ${1+"$@"}
+fi
+
+if test "X$1" = X--fallback-echo; then
+  # used as fallback echo
+  shift
+  cat <<_LT_EOF
+$*
+_LT_EOF
+  exit 0
+fi
+
+# The HP-UX ksh and POSIX shell print the target directory to stdout
+# if CDPATH is set.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+if test -z "$lt_ECHO"; then
+  if test "X${echo_test_string+set}" != Xset; then
+    # find a string as large as possible, as long as the shell can cope with it
+    for cmd in 'sed 50q "$0"' 'sed 20q "$0"' 'sed 10q "$0"' 'sed 2q "$0"' 'echo test'; do
+      # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...
+      if { echo_test_string=`eval $cmd`; } 2>/dev/null &&
+	 { test "X$echo_test_string" = "X$echo_test_string"; } 2>/dev/null
+      then
+        break
+      fi
+    done
+  fi
+
+  if test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t' &&
+     echo_testing_string=`{ $ECHO "$echo_test_string"; } 2>/dev/null` &&
+     test "X$echo_testing_string" = "X$echo_test_string"; then
+    :
+  else
+    # The Solaris, AIX, and Digital Unix default echo programs unquote
+    # backslashes.  This makes it impossible to quote backslashes using
+    #   echo "$something" | sed 's/\\/\\\\/g'
+    #
+    # So, first we look for a working echo in the user's PATH.
+
+    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+    for dir in $PATH /usr/ucb; do
+      IFS="$lt_save_ifs"
+      if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&
+         test "X`($dir/echo '\t') 2>/dev/null`" = 'X\t' &&
+         echo_testing_string=`($dir/echo "$echo_test_string") 2>/dev/null` &&
+         test "X$echo_testing_string" = "X$echo_test_string"; then
+        ECHO="$dir/echo"
+        break
+      fi
+    done
+    IFS="$lt_save_ifs"
+
+    if test "X$ECHO" = Xecho; then
+      # We didn't find a better echo, so look for alternatives.
+      if test "X`{ print -r '\t'; } 2>/dev/null`" = 'X\t' &&
+         echo_testing_string=`{ print -r "$echo_test_string"; } 2>/dev/null` &&
+         test "X$echo_testing_string" = "X$echo_test_string"; then
+        # This shell has a builtin print -r that does the trick.
+        ECHO='print -r'
+      elif { test -f /bin/ksh || test -f /bin/ksh$ac_exeext; } &&
+	   test "X$CONFIG_SHELL" != X/bin/ksh; then
+        # If we have ksh, try running configure again with it.
+        ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}
+        export ORIGINAL_CONFIG_SHELL
+        CONFIG_SHELL=/bin/ksh
+        export CONFIG_SHELL
+        exec $CONFIG_SHELL "$0" --no-reexec ${1+"$@"}
+      else
+        # Try using printf.
+        ECHO='printf %s\n'
+        if test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t' &&
+	   echo_testing_string=`{ $ECHO "$echo_test_string"; } 2>/dev/null` &&
+	   test "X$echo_testing_string" = "X$echo_test_string"; then
+	  # Cool, printf works
+	  :
+        elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL "$0" --fallback-echo '\t') 2>/dev/null` &&
+	     test "X$echo_testing_string" = 'X\t' &&
+	     echo_testing_string=`($ORIGINAL_CONFIG_SHELL "$0" --fallback-echo "$echo_test_string") 2>/dev/null` &&
+	     test "X$echo_testing_string" = "X$echo_test_string"; then
+	  CONFIG_SHELL=$ORIGINAL_CONFIG_SHELL
+	  export CONFIG_SHELL
+	  SHELL="$CONFIG_SHELL"
+	  export SHELL
+	  ECHO="$CONFIG_SHELL $0 --fallback-echo"
+        elif echo_testing_string=`($CONFIG_SHELL "$0" --fallback-echo '\t') 2>/dev/null` &&
+	     test "X$echo_testing_string" = 'X\t' &&
+	     echo_testing_string=`($CONFIG_SHELL "$0" --fallback-echo "$echo_test_string") 2>/dev/null` &&
+	     test "X$echo_testing_string" = "X$echo_test_string"; then
+	  ECHO="$CONFIG_SHELL $0 --fallback-echo"
+        else
+	  # maybe with a smaller string...
+	  prev=:
+
+	  for cmd in 'echo test' 'sed 2q "$0"' 'sed 10q "$0"' 'sed 20q "$0"' 'sed 50q "$0"'; do
+	    if { test "X$echo_test_string" = "X`eval $cmd`"; } 2>/dev/null
+	    then
+	      break
+	    fi
+	    prev="$cmd"
+	  done
+
+	  if test "$prev" != 'sed 50q "$0"'; then
+	    echo_test_string=`eval $prev`
+	    export echo_test_string
+	    exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} "$0" ${1+"$@"}
+	  else
+	    # Oops.  We lost completely, so just stick with echo.
+	    ECHO=echo
+	  fi
+        fi
+      fi
+    fi
+  fi
+fi
+
+# Copy echo and quote the copy suitably for passing to libtool from
+# the Makefile, instead of quoting the original, which is used later.
+lt_ECHO=$ECHO
+if test "X$lt_ECHO" = "X$CONFIG_SHELL $0 --fallback-echo"; then
+   lt_ECHO="$CONFIG_SHELL \\\$\$0 --fallback-echo"
+fi
+
+
+
+
+test -n "$DJDIR" || exec 7<&0 </dev/null
+exec 6>&1
+
+# Name of the host.
+# hostname on some systems (SVR3.2, old GNU/Linux) returns a bogus exit status,
+# so uname gets run too.
+ac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`
+
+#
+# Initializations.
+#
+ac_default_prefix=/usr/local
+ac_clean_files=
+ac_config_libobj_dir=.
+LIBOBJS=
+cross_compiling=no
+subdirs=
+MFLAGS=
+MAKEFLAGS=
+
+# Identity of this package.
+PACKAGE_NAME='opensaml'
+PACKAGE_TARNAME='opensaml'
+PACKAGE_VERSION='2.4'
+PACKAGE_STRING='opensaml 2.4'
+PACKAGE_BUGREPORT='https://bugs.internet2.edu/'
+PACKAGE_URL=''
+
+ac_unique_file="saml"
+# Factoring default headers for most tests.
+ac_includes_default="\
+#include <stdio.h>
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_STAT_H
+# include <sys/stat.h>
+#endif
+#ifdef STDC_HEADERS
+# include <stdlib.h>
+# include <stddef.h>
+#else
+# ifdef HAVE_STDLIB_H
+#  include <stdlib.h>
+# endif
+#endif
+#ifdef HAVE_STRING_H
+# if !defined STDC_HEADERS && defined HAVE_MEMORY_H
+#  include <memory.h>
+# endif
+# include <string.h>
+#endif
+#ifdef HAVE_STRINGS_H
+# include <strings.h>
+#endif
+#ifdef HAVE_INTTYPES_H
+# include <inttypes.h>
+#endif
+#ifdef HAVE_STDINT_H
+# include <stdint.h>
+#endif
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif"
+
+ac_subst_vars='am__EXEEXT_FALSE
+am__EXEEXT_TRUE
+LTLIBOBJS
+LIBOBJS
+DX_INCLUDE
+pkgconfig_libfile
+pkgconfig_libdir
+BUILD_UNITTEST_FALSE
+BUILD_UNITTEST_TRUE
+CXXTESTFLAGS
+CXXTEST
+LOG4CPP_CONFIG
+LOG4SHIB_CONFIG
+PKG_CONFIG
+PTHREAD_CFLAGS
+PTHREAD_LIBS
+PTHREAD_CC
+acx_pthread_config
+CXXCPP
+am__fastdepCXX_FALSE
+am__fastdepCXX_TRUE
+CXXDEPMODE
+ac_ct_CXX
+CXXFLAGS
+CXX
+DOXYGEN_PAPER_SIZE
+DX_COND_latex_FALSE
+DX_COND_latex_TRUE
+DX_COND_pdf_FALSE
+DX_COND_pdf_TRUE
+DX_PDFLATEX
+DX_FLAG_pdf
+DX_COND_ps_FALSE
+DX_COND_ps_TRUE
+DX_EGREP
+DX_DVIPS
+DX_MAKEINDEX
+DX_LATEX
+DX_FLAG_ps
+DX_COND_html_FALSE
+DX_COND_html_TRUE
+DX_FLAG_html
+DX_COND_chi_FALSE
+DX_COND_chi_TRUE
+DX_FLAG_chi
+DX_COND_chm_FALSE
+DX_COND_chm_TRUE
+DX_HHC
+DX_FLAG_chm
+DX_COND_xml_FALSE
+DX_COND_xml_TRUE
+DX_FLAG_xml
+DX_COND_rtf_FALSE
+DX_COND_rtf_TRUE
+DX_FLAG_rtf
+DX_COND_man_FALSE
+DX_COND_man_TRUE
+DX_FLAG_man
+DX_COND_dot_FALSE
+DX_COND_dot_TRUE
+DX_DOT
+DX_FLAG_dot
+DX_COND_doc_FALSE
+DX_COND_doc_TRUE
+DX_PERL
+DX_DOXYGEN
+DX_FLAG_doc
+DX_ENV
+DX_DOCDIR
+DX_CONFIG
+DX_PROJECT
+CPP
+OTOOL64
+OTOOL
+LIPO
+NMEDIT
+DSYMUTIL
+lt_ECHO
+RANLIB
+AR
+OBJDUMP
+LN_S
+NM
+ac_ct_DUMPBIN
+DUMPBIN
+LD
+FGREP
+EGREP
+GREP
+SED
+am__fastdepCC_FALSE
+am__fastdepCC_TRUE
+CCDEPMODE
+AMDEPBACKSLASH
+AMDEP_FALSE
+AMDEP_TRUE
+am__quote
+am__include
+DEPDIR
+OBJEXT
+EXEEXT
+ac_ct_CC
+CPPFLAGS
+LDFLAGS
+CFLAGS
+CC
+host_os
+host_vendor
+host_cpu
+host
+build_os
+build_vendor
+build_cpu
+build
+LIBTOOL
+am__untar
+am__tar
+AMTAR
+am__leading_dot
+SET_MAKE
+AWK
+mkdir_p
+MKDIR_P
+INSTALL_STRIP_PROGRAM
+STRIP
+install_sh
+MAKEINFO
+AUTOHEADER
+AUTOMAKE
+AUTOCONF
+ACLOCAL
+VERSION
+PACKAGE
+CYGPATH_W
+am__isrc
+INSTALL_DATA
+INSTALL_SCRIPT
+INSTALL_PROGRAM
+target_alias
+host_alias
+build_alias
+LIBS
+ECHO_T
+ECHO_N
+ECHO_C
+DEFS
+mandir
+localedir
+libdir
+psdir
+pdfdir
+dvidir
+htmldir
+infodir
+docdir
+oldincludedir
+includedir
+localstatedir
+sharedstatedir
+sysconfdir
+datadir
+datarootdir
+libexecdir
+sbindir
+bindir
+program_transform_name
+prefix
+exec_prefix
+PACKAGE_URL
+PACKAGE_BUGREPORT
+PACKAGE_STRING
+PACKAGE_VERSION
+PACKAGE_TARNAME
+PACKAGE_NAME
+PATH_SEPARATOR
+SHELL'
+ac_subst_files=''
+ac_user_opts='
+enable_option_checking
+enable_static
+enable_shared
+with_pic
+enable_fast_install
+enable_dependency_tracking
+with_gnu_ld
+enable_libtool_lock
+enable_doxygen_doc
+enable_doxygen_dot
+enable_doxygen_man
+enable_doxygen_rtf
+enable_doxygen_xml
+enable_doxygen_chm
+enable_doxygen_chi
+enable_doxygen_html
+enable_doxygen_ps
+enable_doxygen_pdf
+enable_debug
+with_zlib
+with_openssl
+with_log4shib
+with_log4cpp
+with_xerces
+with_xmlsec
+with_xmltooling
+with_cxxtest
+'
+      ac_precious_vars='build_alias
+host_alias
+target_alias
+CC
+CFLAGS
+LDFLAGS
+LIBS
+CPPFLAGS
+CPP
+DOXYGEN_PAPER_SIZE
+CXX
+CXXFLAGS
+CCC
+CXXCPP'
+
+
+# Initialize some variables set by options.
+ac_init_help=
+ac_init_version=false
+ac_unrecognized_opts=
+ac_unrecognized_sep=
+# The variables have the same names as the options, with
+# dashes changed to underlines.
+cache_file=/dev/null
+exec_prefix=NONE
+no_create=
+no_recursion=
+prefix=NONE
+program_prefix=NONE
+program_suffix=NONE
+program_transform_name=s,x,x,
+silent=
+site=
+srcdir=
+verbose=
+x_includes=NONE
+x_libraries=NONE
+
+# Installation directory options.
+# These are left unexpanded so users can "make install exec_prefix=/foo"
+# and all the variables that are supposed to be based on exec_prefix
+# by default will actually change.
+# Use braces instead of parens because sh, perl, etc. also accept them.
+# (The list follows the same order as the GNU Coding Standards.)
+bindir='${exec_prefix}/bin'
+sbindir='${exec_prefix}/sbin'
+libexecdir='${exec_prefix}/libexec'
+datarootdir='${prefix}/share'
+datadir='${datarootdir}'
+sysconfdir='${prefix}/etc'
+sharedstatedir='${prefix}/com'
+localstatedir='${prefix}/var'
+includedir='${prefix}/include'
+oldincludedir='/usr/include'
+docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
+infodir='${datarootdir}/info'
+htmldir='${docdir}'
+dvidir='${docdir}'
+pdfdir='${docdir}'
+psdir='${docdir}'
+libdir='${exec_prefix}/lib'
+localedir='${datarootdir}/locale'
+mandir='${datarootdir}/man'
+
+ac_prev=
+ac_dashdash=
+for ac_option
+do
+  # If the previous option needs an argument, assign it.
+  if test -n "$ac_prev"; then
+    eval $ac_prev=\$ac_option
+    ac_prev=
+    continue
+  fi
+
+  case $ac_option in
+  *=?*) ac_optarg=`expr "X$ac_option" : '[^=]*=\(.*\)'` ;;
+  *=)   ac_optarg= ;;
+  *)    ac_optarg=yes ;;
+  esac
+
+  # Accept the important Cygnus configure options, so we can diagnose typos.
+
+  case $ac_dashdash$ac_option in
+  --)
+    ac_dashdash=yes ;;
+
+  -bindir | --bindir | --bindi | --bind | --bin | --bi)
+    ac_prev=bindir ;;
+  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)
+    bindir=$ac_optarg ;;
+
+  -build | --build | --buil | --bui | --bu)
+    ac_prev=build_alias ;;
+  -build=* | --build=* | --buil=* | --bui=* | --bu=*)
+    build_alias=$ac_optarg ;;
+
+  -cache-file | --cache-file | --cache-fil | --cache-fi \
+  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)
+    ac_prev=cache_file ;;
+  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
+  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)
+    cache_file=$ac_optarg ;;
+
+  --config-cache | -C)
+    cache_file=config.cache ;;
+
+  -datadir | --datadir | --datadi | --datad)
+    ac_prev=datadir ;;
+  -datadir=* | --datadir=* | --datadi=* | --datad=*)
+    datadir=$ac_optarg ;;
+
+  -datarootdir | --datarootdir | --datarootdi | --datarootd | --dataroot \
+  | --dataroo | --dataro | --datar)
+    ac_prev=datarootdir ;;
+  -datarootdir=* | --datarootdir=* | --datarootdi=* | --datarootd=* \
+  | --dataroot=* | --dataroo=* | --dataro=* | --datar=*)
+    datarootdir=$ac_optarg ;;
+
+  -disable-* | --disable-*)
+    ac_useropt=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
+    # Reject names that are not valid shell variable names.
+    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
+      as_fn_error $? "invalid feature name: $ac_useropt"
+    ac_useropt_orig=$ac_useropt
+    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
+    case $ac_user_opts in
+      *"
+"enable_$ac_useropt"
+"*) ;;
+      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--disable-$ac_useropt_orig"
+	 ac_unrecognized_sep=', ';;
+    esac
+    eval enable_$ac_useropt=no ;;
+
+  -docdir | --docdir | --docdi | --doc | --do)
+    ac_prev=docdir ;;
+  -docdir=* | --docdir=* | --docdi=* | --doc=* | --do=*)
+    docdir=$ac_optarg ;;
+
+  -dvidir | --dvidir | --dvidi | --dvid | --dvi | --dv)
+    ac_prev=dvidir ;;
+  -dvidir=* | --dvidir=* | --dvidi=* | --dvid=* | --dvi=* | --dv=*)
+    dvidir=$ac_optarg ;;
+
+  -enable-* | --enable-*)
+    ac_useropt=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
+    # Reject names that are not valid shell variable names.
+    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
+      as_fn_error $? "invalid feature name: $ac_useropt"
+    ac_useropt_orig=$ac_useropt
+    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
+    case $ac_user_opts in
+      *"
+"enable_$ac_useropt"
+"*) ;;
+      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--enable-$ac_useropt_orig"
+	 ac_unrecognized_sep=', ';;
+    esac
+    eval enable_$ac_useropt=\$ac_optarg ;;
+
+  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
+  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \
+  | --exec | --exe | --ex)
+    ac_prev=exec_prefix ;;
+  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \
+  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \
+  | --exec=* | --exe=* | --ex=*)
+    exec_prefix=$ac_optarg ;;
+
+  -gas | --gas | --ga | --g)
+    # Obsolete; use --with-gas.
+    with_gas=yes ;;
+
+  -help | --help | --hel | --he | -h)
+    ac_init_help=long ;;
+  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)
+    ac_init_help=recursive ;;
+  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
+    ac_init_help=short ;;
+
+  -host | --host | --hos | --ho)
+    ac_prev=host_alias ;;
+  -host=* | --host=* | --hos=* | --ho=*)
+    host_alias=$ac_optarg ;;
+
+  -htmldir | --htmldir | --htmldi | --htmld | --html | --htm | --ht)
+    ac_prev=htmldir ;;
+  -htmldir=* | --htmldir=* | --htmldi=* | --htmld=* | --html=* | --htm=* \
+  | --ht=*)
+    htmldir=$ac_optarg ;;
+
+  -includedir | --includedir | --includedi | --included | --include \
+  | --includ | --inclu | --incl | --inc)
+    ac_prev=includedir ;;
+  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \
+  | --includ=* | --inclu=* | --incl=* | --inc=*)
+    includedir=$ac_optarg ;;
+
+  -infodir | --infodir | --infodi | --infod | --info | --inf)
+    ac_prev=infodir ;;
+  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)
+    infodir=$ac_optarg ;;
+
+  -libdir | --libdir | --libdi | --libd)
+    ac_prev=libdir ;;
+  -libdir=* | --libdir=* | --libdi=* | --libd=*)
+    libdir=$ac_optarg ;;
+
+  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \
+  | --libexe | --libex | --libe)
+    ac_prev=libexecdir ;;
+  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \
+  | --libexe=* | --libex=* | --libe=*)
+    libexecdir=$ac_optarg ;;
+
+  -localedir | --localedir | --localedi | --localed | --locale)
+    ac_prev=localedir ;;
+  -localedir=* | --localedir=* | --localedi=* | --localed=* | --locale=*)
+    localedir=$ac_optarg ;;
+
+  -localstatedir | --localstatedir | --localstatedi | --localstated \
+  | --localstate | --localstat | --localsta | --localst | --locals)
+    ac_prev=localstatedir ;;
+  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \
+  | --localstate=* | --localstat=* | --localsta=* | --localst=* | --locals=*)
+    localstatedir=$ac_optarg ;;
+
+  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)
+    ac_prev=mandir ;;
+  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)
+    mandir=$ac_optarg ;;
+
+  -nfp | --nfp | --nf)
+    # Obsolete; use --without-fp.
+    with_fp=no ;;
+
+  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
+  | --no-cr | --no-c | -n)
+    no_create=yes ;;
+
+  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
+  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)
+    no_recursion=yes ;;
+
+  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \
+  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \
+  | --oldin | --oldi | --old | --ol | --o)
+    ac_prev=oldincludedir ;;
+  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \
+  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \
+  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)
+    oldincludedir=$ac_optarg ;;
+
+  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
+    ac_prev=prefix ;;
+  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
+    prefix=$ac_optarg ;;
+
+  -program-prefix | --program-prefix | --program-prefi | --program-pref \
+  | --program-pre | --program-pr | --program-p)
+    ac_prev=program_prefix ;;
+  -program-prefix=* | --program-prefix=* | --program-prefi=* \
+  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)
+    program_prefix=$ac_optarg ;;
+
+  -program-suffix | --program-suffix | --program-suffi | --program-suff \
+  | --program-suf | --program-su | --program-s)
+    ac_prev=program_suffix ;;
+  -program-suffix=* | --program-suffix=* | --program-suffi=* \
+  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)
+    program_suffix=$ac_optarg ;;
+
+  -program-transform-name | --program-transform-name \
+  | --program-transform-nam | --program-transform-na \
+  | --program-transform-n | --program-transform- \
+  | --program-transform | --program-transfor \
+  | --program-transfo | --program-transf \
+  | --program-trans | --program-tran \
+  | --progr-tra | --program-tr | --program-t)
+    ac_prev=program_transform_name ;;
+  -program-transform-name=* | --program-transform-name=* \
+  | --program-transform-nam=* | --program-transform-na=* \
+  | --program-transform-n=* | --program-transform-=* \
+  | --program-transform=* | --program-transfor=* \
+  | --program-transfo=* | --program-transf=* \
+  | --program-trans=* | --program-tran=* \
+  | --progr-tra=* | --program-tr=* | --program-t=*)
+    program_transform_name=$ac_optarg ;;
+
+  -pdfdir | --pdfdir | --pdfdi | --pdfd | --pdf | --pd)
+    ac_prev=pdfdir ;;
+  -pdfdir=* | --pdfdir=* | --pdfdi=* | --pdfd=* | --pdf=* | --pd=*)
+    pdfdir=$ac_optarg ;;
+
+  -psdir | --psdir | --psdi | --psd | --ps)
+    ac_prev=psdir ;;
+  -psdir=* | --psdir=* | --psdi=* | --psd=* | --ps=*)
+    psdir=$ac_optarg ;;
+
+  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
+  | -silent | --silent | --silen | --sile | --sil)
+    silent=yes ;;
+
+  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
+    ac_prev=sbindir ;;
+  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
+  | --sbi=* | --sb=*)
+    sbindir=$ac_optarg ;;
+
+  -sharedstatedir | --sharedstatedir | --sharedstatedi \
+  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \
+  | --sharedst | --shareds | --shared | --share | --shar \
+  | --sha | --sh)
+    ac_prev=sharedstatedir ;;
+  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \
+  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \
+  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \
+  | --sha=* | --sh=*)
+    sharedstatedir=$ac_optarg ;;
+
+  -site | --site | --sit)
+    ac_prev=site ;;
+  -site=* | --site=* | --sit=*)
+    site=$ac_optarg ;;
+
+  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
+    ac_prev=srcdir ;;
+  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
+    srcdir=$ac_optarg ;;
+
+  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \
+  | --syscon | --sysco | --sysc | --sys | --sy)
+    ac_prev=sysconfdir ;;
+  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \
+  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)
+    sysconfdir=$ac_optarg ;;
+
+  -target | --target | --targe | --targ | --tar | --ta | --t)
+    ac_prev=target_alias ;;
+  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)
+    target_alias=$ac_optarg ;;
+
+  -v | -verbose | --verbose | --verbos | --verbo | --verb)
+    verbose=yes ;;
+
+  -version | --version | --versio | --versi | --vers | -V)
+    ac_init_version=: ;;
+
+  -with-* | --with-*)
+    ac_useropt=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
+    # Reject names that are not valid shell variable names.
+    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
+      as_fn_error $? "invalid package name: $ac_useropt"
+    ac_useropt_orig=$ac_useropt
+    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
+    case $ac_user_opts in
+      *"
+"with_$ac_useropt"
+"*) ;;
+      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--with-$ac_useropt_orig"
+	 ac_unrecognized_sep=', ';;
+    esac
+    eval with_$ac_useropt=\$ac_optarg ;;
+
+  -without-* | --without-*)
+    ac_useropt=`expr "x$ac_option" : 'x-*without-\(.*\)'`
+    # Reject names that are not valid shell variable names.
+    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
+      as_fn_error $? "invalid package name: $ac_useropt"
+    ac_useropt_orig=$ac_useropt
+    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
+    case $ac_user_opts in
+      *"
+"with_$ac_useropt"
+"*) ;;
+      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--without-$ac_useropt_orig"
+	 ac_unrecognized_sep=', ';;
+    esac
+    eval with_$ac_useropt=no ;;
+
+  --x)
+    # Obsolete; use --with-x.
+    with_x=yes ;;
+
+  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \
+  | --x-incl | --x-inc | --x-in | --x-i)
+    ac_prev=x_includes ;;
+  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \
+  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)
+    x_includes=$ac_optarg ;;
+
+  -x-libraries | --x-libraries | --x-librarie | --x-librari \
+  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)
+    ac_prev=x_libraries ;;
+  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \
+  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)
+    x_libraries=$ac_optarg ;;
+
+  -*) as_fn_error $? "unrecognized option: \`$ac_option'
+Try \`$0 --help' for more information"
+    ;;
+
+  *=*)
+    ac_envvar=`expr "x$ac_option" : 'x\([^=]*\)='`
+    # Reject names that are not valid shell variable names.
+    case $ac_envvar in #(
+      '' | [0-9]* | *[!_$as_cr_alnum]* )
+      as_fn_error $? "invalid variable name: \`$ac_envvar'" ;;
+    esac
+    eval $ac_envvar=\$ac_optarg
+    export $ac_envvar ;;
+
+  *)
+    # FIXME: should be removed in autoconf 3.0.
+    $as_echo "$as_me: WARNING: you should use --build, --host, --target" >&2
+    expr "x$ac_option" : ".*[^-._$as_cr_alnum]" >/dev/null &&
+      $as_echo "$as_me: WARNING: invalid host type: $ac_option" >&2
+    : ${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}
+    ;;
+
+  esac
+done
+
+if test -n "$ac_prev"; then
+  ac_option=--`echo $ac_prev | sed 's/_/-/g'`
+  as_fn_error $? "missing argument to $ac_option"
+fi
+
+if test -n "$ac_unrecognized_opts"; then
+  case $enable_option_checking in
+    no) ;;
+    fatal) as_fn_error $? "unrecognized options: $ac_unrecognized_opts" ;;
+    *)     $as_echo "$as_me: WARNING: unrecognized options: $ac_unrecognized_opts" >&2 ;;
+  esac
+fi
+
+# Check all directory arguments for consistency.
+for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
+		datadir sysconfdir sharedstatedir localstatedir includedir \
+		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
+		libdir localedir mandir
+do
+  eval ac_val=\$$ac_var
+  # Remove trailing slashes.
+  case $ac_val in
+    */ )
+      ac_val=`expr "X$ac_val" : 'X\(.*[^/]\)' \| "X$ac_val" : 'X\(.*\)'`
+      eval $ac_var=\$ac_val;;
+  esac
+  # Be sure to have absolute directory names.
+  case $ac_val in
+    [\\/$]* | ?:[\\/]* )  continue;;
+    NONE | '' ) case $ac_var in *prefix ) continue;; esac;;
+  esac
+  as_fn_error $? "expected an absolute directory name for --$ac_var: $ac_val"
+done
+
+# There might be people who depend on the old broken behavior: `$host'
+# used to hold the argument of --host etc.
+# FIXME: To remove some day.
+build=$build_alias
+host=$host_alias
+target=$target_alias
+
+# FIXME: To remove some day.
+if test "x$host_alias" != x; then
+  if test "x$build_alias" = x; then
+    cross_compiling=maybe
+    $as_echo "$as_me: WARNING: if you wanted to set the --build type, don't use --host.
+    If a cross compiler is detected then cross compile mode will be used" >&2
+  elif test "x$build_alias" != "x$host_alias"; then
+    cross_compiling=yes
+  fi
+fi
+
+ac_tool_prefix=
+test -n "$host_alias" && ac_tool_prefix=$host_alias-
+
+test "$silent" = yes && exec 6>/dev/null
+
+
+ac_pwd=`pwd` && test -n "$ac_pwd" &&
+ac_ls_di=`ls -di .` &&
+ac_pwd_ls_di=`cd "$ac_pwd" && ls -di .` ||
+  as_fn_error $? "working directory cannot be determined"
+test "X$ac_ls_di" = "X$ac_pwd_ls_di" ||
+  as_fn_error $? "pwd does not report name of working directory"
+
+
+# Find the source files, if location was not specified.
+if test -z "$srcdir"; then
+  ac_srcdir_defaulted=yes
+  # Try the directory containing this script, then the parent directory.
+  ac_confdir=`$as_dirname -- "$as_myself" ||
+$as_expr X"$as_myself" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$as_myself" : 'X\(//\)[^/]' \| \
+	 X"$as_myself" : 'X\(//\)$' \| \
+	 X"$as_myself" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$as_myself" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+  srcdir=$ac_confdir
+  if test ! -r "$srcdir/$ac_unique_file"; then
+    srcdir=..
+  fi
+else
+  ac_srcdir_defaulted=no
+fi
+if test ! -r "$srcdir/$ac_unique_file"; then
+  test "$ac_srcdir_defaulted" = yes && srcdir="$ac_confdir or .."
+  as_fn_error $? "cannot find sources ($ac_unique_file) in $srcdir"
+fi
+ac_msg="sources are in $srcdir, but \`cd $srcdir' does not work"
+ac_abs_confdir=`(
+	cd "$srcdir" && test -r "./$ac_unique_file" || as_fn_error $? "$ac_msg"
+	pwd)`
+# When building in place, set srcdir=.
+if test "$ac_abs_confdir" = "$ac_pwd"; then
+  srcdir=.
+fi
+# Remove unnecessary trailing slashes from srcdir.
+# Double slashes in file names in object file debugging info
+# mess up M-x gdb in Emacs.
+case $srcdir in
+*/) srcdir=`expr "X$srcdir" : 'X\(.*[^/]\)' \| "X$srcdir" : 'X\(.*\)'`;;
+esac
+for ac_var in $ac_precious_vars; do
+  eval ac_env_${ac_var}_set=\${${ac_var}+set}
+  eval ac_env_${ac_var}_value=\$${ac_var}
+  eval ac_cv_env_${ac_var}_set=\${${ac_var}+set}
+  eval ac_cv_env_${ac_var}_value=\$${ac_var}
+done
+
+#
+# Report the --help message.
+#
+if test "$ac_init_help" = "long"; then
+  # Omit some internal or obsolete options to make the list less imposing.
+  # This message is too long to be a string in the A/UX 3.1 sh.
+  cat <<_ACEOF
+\`configure' configures opensaml 2.4 to adapt to many kinds of systems.
+
+Usage: $0 [OPTION]... [VAR=VALUE]...
+
+To assign environment variables (e.g., CC, CFLAGS...), specify them as
+VAR=VALUE.  See below for descriptions of some of the useful variables.
+
+Defaults for the options are specified in brackets.
+
+Configuration:
+  -h, --help              display this help and exit
+      --help=short        display options specific to this package
+      --help=recursive    display the short help of all the included packages
+  -V, --version           display version information and exit
+  -q, --quiet, --silent   do not print \`checking ...' messages
+      --cache-file=FILE   cache test results in FILE [disabled]
+  -C, --config-cache      alias for \`--cache-file=config.cache'
+  -n, --no-create         do not create output files
+      --srcdir=DIR        find the sources in DIR [configure dir or \`..']
+
+Installation directories:
+  --prefix=PREFIX         install architecture-independent files in PREFIX
+                          [$ac_default_prefix]
+  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
+                          [PREFIX]
+
+By default, \`make install' will install all the files in
+\`$ac_default_prefix/bin', \`$ac_default_prefix/lib' etc.  You can specify
+an installation prefix other than \`$ac_default_prefix' using \`--prefix',
+for instance \`--prefix=\$HOME'.
+
+For better control, use the options below.
+
+Fine tuning of the installation directories:
+  --bindir=DIR            user executables [EPREFIX/bin]
+  --sbindir=DIR           system admin executables [EPREFIX/sbin]
+  --libexecdir=DIR        program executables [EPREFIX/libexec]
+  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
+  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
+  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
+  --libdir=DIR            object code libraries [EPREFIX/lib]
+  --includedir=DIR        C header files [PREFIX/include]
+  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
+  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
+  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
+  --infodir=DIR           info documentation [DATAROOTDIR/info]
+  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
+  --mandir=DIR            man documentation [DATAROOTDIR/man]
+  --docdir=DIR            documentation root [DATAROOTDIR/doc/opensaml]
+  --htmldir=DIR           html documentation [DOCDIR]
+  --dvidir=DIR            dvi documentation [DOCDIR]
+  --pdfdir=DIR            pdf documentation [DOCDIR]
+  --psdir=DIR             ps documentation [DOCDIR]
+_ACEOF
+
+  cat <<\_ACEOF
+
+Program names:
+  --program-prefix=PREFIX            prepend PREFIX to installed program names
+  --program-suffix=SUFFIX            append SUFFIX to installed program names
+  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
+
+System types:
+  --build=BUILD     configure for building on BUILD [guessed]
+  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
+_ACEOF
+fi
+
+if test -n "$ac_init_help"; then
+  case $ac_init_help in
+     short | recursive ) echo "Configuration of opensaml 2.4:";;
+   esac
+  cat <<\_ACEOF
+
+Optional Features:
+  --disable-option-checking  ignore unrecognized --enable/--with options
+  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
+  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
+  --enable-static[=PKGS]  build static libraries [default=no]
+  --enable-shared[=PKGS]  build shared libraries [default=yes]
+  --enable-fast-install[=PKGS]
+                          optimize for fast installation [default=yes]
+  --disable-dependency-tracking  speeds up one-time build
+  --enable-dependency-tracking   do not reject slow dependency extractors
+  --disable-libtool-lock  avoid locking (might break parallel builds)
+  --disable-doxygen-doc   don't generate any doxygen documentation
+  --disable-doxygen-dot   don't generate graphics for doxygen documentation
+  --enable-doxygen-man    generate doxygen manual pages
+  --enable-doxygen-rtf    generate doxygen RTF documentation
+  --enable-doxygen-xml    generate doxygen XML documentation
+  --enable-doxygen-chm    generate doxygen compressed HTML help documentation
+  --enable-doxygen-chi    generate doxygen seperate compressed HTML help index
+                          file
+  --disable-doxygen-html  don't generate doxygen plain HTML documentation
+  --enable-doxygen-ps     generate doxygen PostScript documentation
+  --enable-doxygen-pdf    generate doxygen PDF documentation
+  --enable-debug          Have GCC compile with symbols (Default = no)
+
+Optional Packages:
+  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
+  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
+  --with-pic              try to use only PIC/non-PIC objects [default=use
+                          both]
+  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
+  --with-zlib=PATH        where zlib is installed
+  --with-openssl=PATH     where openssl is installed
+  --with-log4shib=PATH    where log4shib-config is installed
+  --with-log4cpp=PATH     where log4cpp-config is installed
+  --with-xerces=PATH      where xerces-c is installed
+  --with-xmlsec=PATH      where xmlsec is installed
+  --with-xmltooling=PATH  where xmltooling is installed
+  --with-cxxtest=PATH     where cxxtest is installed
+
+Some influential environment variables:
+  CC          C compiler command
+  CFLAGS      C compiler flags
+  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
+              nonstandard directory <lib dir>
+  LIBS        libraries to pass to the linker, e.g. -l<library>
+  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
+              you have headers in a nonstandard directory <include dir>
+  CPP         C preprocessor
+  DOXYGEN_PAPER_SIZE
+              a4wide (default), a4, letter, legal or executive
+  CXX         C++ compiler command
+  CXXFLAGS    C++ compiler flags
+  CXXCPP      C++ preprocessor
+
+Use these variables to override the choices made by `configure' or to help
+it to find libraries and programs with nonstandard names/locations.
+
+Report bugs to <https://bugs.internet2.edu/>.
+_ACEOF
+ac_status=$?
+fi
+
+if test "$ac_init_help" = "recursive"; then
+  # If there are subdirs, report their specific --help.
+  for ac_dir in : $ac_subdirs_all; do test "x$ac_dir" = x: && continue
+    test -d "$ac_dir" ||
+      { cd "$srcdir" && ac_pwd=`pwd` && srcdir=. && test -d "$ac_dir"; } ||
+      continue
+    ac_builddir=.
+
+case "$ac_dir" in
+.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
+*)
+  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
+  # A ".." for each directory in $ac_dir_suffix.
+  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
+  case $ac_top_builddir_sub in
+  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
+  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
+  esac ;;
+esac
+ac_abs_top_builddir=$ac_pwd
+ac_abs_builddir=$ac_pwd$ac_dir_suffix
+# for backward compatibility:
+ac_top_builddir=$ac_top_build_prefix
+
+case $srcdir in
+  .)  # We are building in place.
+    ac_srcdir=.
+    ac_top_srcdir=$ac_top_builddir_sub
+    ac_abs_top_srcdir=$ac_pwd ;;
+  [\\/]* | ?:[\\/]* )  # Absolute name.
+    ac_srcdir=$srcdir$ac_dir_suffix;
+    ac_top_srcdir=$srcdir
+    ac_abs_top_srcdir=$srcdir ;;
+  *) # Relative name.
+    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
+    ac_top_srcdir=$ac_top_build_prefix$srcdir
+    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
+esac
+ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix
+
+    cd "$ac_dir" || { ac_status=$?; continue; }
+    # Check for guested configure.
+    if test -f "$ac_srcdir/configure.gnu"; then
+      echo &&
+      $SHELL "$ac_srcdir/configure.gnu" --help=recursive
+    elif test -f "$ac_srcdir/configure"; then
+      echo &&
+      $SHELL "$ac_srcdir/configure" --help=recursive
+    else
+      $as_echo "$as_me: WARNING: no configuration information is in $ac_dir" >&2
+    fi || ac_status=$?
+    cd "$ac_pwd" || { ac_status=$?; break; }
+  done
+fi
+
+test -n "$ac_init_help" && exit $ac_status
+if $ac_init_version; then
+  cat <<\_ACEOF
+opensaml configure 2.4
+generated by GNU Autoconf 2.67
+
+Copyright (C) 2010 Free Software Foundation, Inc.
+This configure script is free software; the Free Software Foundation
+gives unlimited permission to copy, distribute and modify it.
+_ACEOF
+  exit
+fi
+
+## ------------------------ ##
+## Autoconf initialization. ##
+## ------------------------ ##
+
+# ac_fn_c_try_compile LINENO
+# --------------------------
+# Try to compile conftest.$ac_ext, and return whether this succeeded.
+ac_fn_c_try_compile ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  rm -f conftest.$ac_objext
+  if { { ac_try="$ac_compile"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compile") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+	ac_retval=1
+fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_try_compile
+
+# ac_fn_c_try_link LINENO
+# -----------------------
+# Try to link conftest.$ac_ext, and return whether this succeeded.
+ac_fn_c_try_link ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  rm -f conftest.$ac_objext conftest$ac_exeext
+  if { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest$ac_exeext && {
+	 test "$cross_compiling" = yes ||
+	 $as_test_x conftest$ac_exeext
+       }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+	ac_retval=1
+fi
+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information
+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would
+  # interfere with the next link command; also delete a directory that is
+  # left behind by Apple's compiler.  We do this before executing the actions.
+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_try_link
+
+# ac_fn_c_check_header_compile LINENO HEADER VAR INCLUDES
+# -------------------------------------------------------
+# Tests whether HEADER exists and can be compiled using the include files in
+# INCLUDES, setting the cache variable VAR accordingly.
+ac_fn_c_check_header_compile ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+#include <$2>
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  eval "$3=yes"
+else
+  eval "$3=no"
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+
+} # ac_fn_c_check_header_compile
+
+# ac_fn_c_try_cpp LINENO
+# ----------------------
+# Try to preprocess conftest.$ac_ext, and return whether this succeeded.
+ac_fn_c_try_cpp ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if { { ac_try="$ac_cpp conftest.$ac_ext"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } > conftest.i && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+    ac_retval=1
+fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_try_cpp
+
+# ac_fn_c_try_run LINENO
+# ----------------------
+# Try to link conftest.$ac_ext, and return whether this succeeded. Assumes
+# that executables *can* be run.
+ac_fn_c_try_run ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && { ac_try='./conftest$ac_exeext'
+  { { case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_try") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: program exited with status $ac_status" >&5
+       $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+       ac_retval=$ac_status
+fi
+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_try_run
+
+# ac_fn_c_check_func LINENO FUNC VAR
+# ----------------------------------
+# Tests whether FUNC exists, setting the cache variable VAR accordingly
+ac_fn_c_check_func ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+/* Define $2 to an innocuous variant, in case <limits.h> declares $2.
+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
+#define $2 innocuous_$2
+
+/* System header to define __stub macros and hopefully few prototypes,
+    which can conflict with char $2 (); below.
+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+    <limits.h> exists even on freestanding compilers.  */
+
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+
+#undef $2
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char $2 ();
+/* The GNU C library defines this for functions which it implements
+    to always fail with ENOSYS.  Some functions are actually named
+    something starting with __ and the normal name is an alias.  */
+#if defined __stub_$2 || defined __stub___$2
+choke me
+#endif
+
+int
+main ()
+{
+return $2 ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  eval "$3=yes"
+else
+  eval "$3=no"
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+
+} # ac_fn_c_check_func
+
+# ac_fn_cxx_try_compile LINENO
+# ----------------------------
+# Try to compile conftest.$ac_ext, and return whether this succeeded.
+ac_fn_cxx_try_compile ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  rm -f conftest.$ac_objext
+  if { { ac_try="$ac_compile"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compile") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && {
+	 test -z "$ac_cxx_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+	ac_retval=1
+fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_cxx_try_compile
+
+# ac_fn_cxx_try_cpp LINENO
+# ------------------------
+# Try to preprocess conftest.$ac_ext, and return whether this succeeded.
+ac_fn_cxx_try_cpp ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if { { ac_try="$ac_cpp conftest.$ac_ext"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } > conftest.i && {
+	 test -z "$ac_cxx_preproc_warn_flag$ac_cxx_werror_flag" ||
+	 test ! -s conftest.err
+       }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+    ac_retval=1
+fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_cxx_try_cpp
+
+# ac_fn_cxx_try_link LINENO
+# -------------------------
+# Try to link conftest.$ac_ext, and return whether this succeeded.
+ac_fn_cxx_try_link ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  rm -f conftest.$ac_objext conftest$ac_exeext
+  if { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && {
+	 test -z "$ac_cxx_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest$ac_exeext && {
+	 test "$cross_compiling" = yes ||
+	 $as_test_x conftest$ac_exeext
+       }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+	ac_retval=1
+fi
+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information
+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would
+  # interfere with the next link command; also delete a directory that is
+  # left behind by Apple's compiler.  We do this before executing the actions.
+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_cxx_try_link
+
+# ac_fn_c_check_type LINENO TYPE VAR INCLUDES
+# -------------------------------------------
+# Tests whether TYPE exists after having included INCLUDES, setting cache
+# variable VAR accordingly.
+ac_fn_c_check_type ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  eval "$3=no"
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+if (sizeof ($2))
+	 return 0;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+if (sizeof (($2)))
+	    return 0;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+else
+  eval "$3=yes"
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+
+} # ac_fn_c_check_type
+
+# ac_fn_c_compute_int LINENO EXPR VAR INCLUDES
+# --------------------------------------------
+# Tries to find the compile-time value of EXPR in a program that includes
+# INCLUDES, setting VAR accordingly. Returns whether the value could be
+# computed
+ac_fn_c_compute_int ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if test "$cross_compiling" = yes; then
+    # Depending upon the size, compute the lo and hi bounds.
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+static int test_array [1 - 2 * !(($2) >= 0)];
+test_array [0] = 0
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_lo=0 ac_mid=0
+  while :; do
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+static int test_array [1 - 2 * !(($2) <= $ac_mid)];
+test_array [0] = 0
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_hi=$ac_mid; break
+else
+  as_fn_arith $ac_mid + 1 && ac_lo=$as_val
+			if test $ac_lo -le $ac_mid; then
+			  ac_lo= ac_hi=
+			  break
+			fi
+			as_fn_arith 2 '*' $ac_mid + 1 && ac_mid=$as_val
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  done
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+static int test_array [1 - 2 * !(($2) < 0)];
+test_array [0] = 0
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_hi=-1 ac_mid=-1
+  while :; do
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+static int test_array [1 - 2 * !(($2) >= $ac_mid)];
+test_array [0] = 0
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_lo=$ac_mid; break
+else
+  as_fn_arith '(' $ac_mid ')' - 1 && ac_hi=$as_val
+			if test $ac_mid -le $ac_hi; then
+			  ac_lo= ac_hi=
+			  break
+			fi
+			as_fn_arith 2 '*' $ac_mid && ac_mid=$as_val
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  done
+else
+  ac_lo= ac_hi=
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+# Binary search between lo and hi bounds.
+while test "x$ac_lo" != "x$ac_hi"; do
+  as_fn_arith '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo && ac_mid=$as_val
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+static int test_array [1 - 2 * !(($2) <= $ac_mid)];
+test_array [0] = 0
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_hi=$ac_mid
+else
+  as_fn_arith '(' $ac_mid ')' + 1 && ac_lo=$as_val
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+done
+case $ac_lo in #((
+?*) eval "$3=\$ac_lo"; ac_retval=0 ;;
+'') ac_retval=1 ;;
+esac
+  else
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+static long int longval () { return $2; }
+static unsigned long int ulongval () { return $2; }
+#include <stdio.h>
+#include <stdlib.h>
+int
+main ()
+{
+
+  FILE *f = fopen ("conftest.val", "w");
+  if (! f)
+    return 1;
+  if (($2) < 0)
+    {
+      long int i = longval ();
+      if (i != ($2))
+	return 1;
+      fprintf (f, "%ld", i);
+    }
+  else
+    {
+      unsigned long int i = ulongval ();
+      if (i != ($2))
+	return 1;
+      fprintf (f, "%lu", i);
+    }
+  /* Do not output a trailing newline, as this causes \r\n confusion
+     on some platforms.  */
+  return ferror (f) || fclose (f) != 0;
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+  echo >>conftest.val; read $3 <conftest.val; ac_retval=0
+else
+  ac_retval=1
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+rm -f conftest.val
+
+  fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_compute_int
+
+# ac_fn_c_check_header_mongrel LINENO HEADER VAR INCLUDES
+# -------------------------------------------------------
+# Tests whether HEADER exists, giving a warning if it cannot be compiled using
+# the include files in INCLUDES and setting the cache variable VAR
+# accordingly.
+ac_fn_c_check_header_mongrel ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if eval "test \"\${$3+set}\"" = set; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+else
+  # Is the header compilable?
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking $2 usability" >&5
+$as_echo_n "checking $2 usability... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+#include <$2>
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_header_compiler=yes
+else
+  ac_header_compiler=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_header_compiler" >&5
+$as_echo "$ac_header_compiler" >&6; }
+
+# Is the header present?
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking $2 presence" >&5
+$as_echo_n "checking $2 presence... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <$2>
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+  ac_header_preproc=yes
+else
+  ac_header_preproc=no
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_header_preproc" >&5
+$as_echo "$ac_header_preproc" >&6; }
+
+# So?  What about this header?
+case $ac_header_compiler:$ac_header_preproc:$ac_c_preproc_warn_flag in #((
+  yes:no: )
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: accepted by the compiler, rejected by the preprocessor!" >&5
+$as_echo "$as_me: WARNING: $2: accepted by the compiler, rejected by the preprocessor!" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
+$as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
+    ;;
+  no:yes:* )
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: present but cannot be compiled" >&5
+$as_echo "$as_me: WARNING: $2: present but cannot be compiled" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     check for missing prerequisite headers?" >&5
+$as_echo "$as_me: WARNING: $2:     check for missing prerequisite headers?" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: see the Autoconf documentation" >&5
+$as_echo "$as_me: WARNING: $2: see the Autoconf documentation" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&5
+$as_echo "$as_me: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
+$as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
+( $as_echo "## ------------------------------------------ ##
+## Report this to https://bugs.internet2.edu/ ##
+## ------------------------------------------ ##"
+     ) | sed "s/^/$as_me: WARNING:     /" >&2
+    ;;
+esac
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  eval "$3=\$ac_header_compiler"
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+
+} # ac_fn_c_check_header_mongrel
+
+# ac_fn_cxx_check_header_mongrel LINENO HEADER VAR INCLUDES
+# ---------------------------------------------------------
+# Tests whether HEADER exists, giving a warning if it cannot be compiled using
+# the include files in INCLUDES and setting the cache variable VAR
+# accordingly.
+ac_fn_cxx_check_header_mongrel ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if eval "test \"\${$3+set}\"" = set; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+else
+  # Is the header compilable?
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking $2 usability" >&5
+$as_echo_n "checking $2 usability... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+#include <$2>
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_header_compiler=yes
+else
+  ac_header_compiler=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_header_compiler" >&5
+$as_echo "$ac_header_compiler" >&6; }
+
+# Is the header present?
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking $2 presence" >&5
+$as_echo_n "checking $2 presence... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <$2>
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+  ac_header_preproc=yes
+else
+  ac_header_preproc=no
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_header_preproc" >&5
+$as_echo "$ac_header_preproc" >&6; }
+
+# So?  What about this header?
+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in #((
+  yes:no: )
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: accepted by the compiler, rejected by the preprocessor!" >&5
+$as_echo "$as_me: WARNING: $2: accepted by the compiler, rejected by the preprocessor!" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
+$as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
+    ;;
+  no:yes:* )
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: present but cannot be compiled" >&5
+$as_echo "$as_me: WARNING: $2: present but cannot be compiled" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     check for missing prerequisite headers?" >&5
+$as_echo "$as_me: WARNING: $2:     check for missing prerequisite headers?" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: see the Autoconf documentation" >&5
+$as_echo "$as_me: WARNING: $2: see the Autoconf documentation" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&5
+$as_echo "$as_me: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
+$as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
+( $as_echo "## ------------------------------------------ ##
+## Report this to https://bugs.internet2.edu/ ##
+## ------------------------------------------ ##"
+     ) | sed "s/^/$as_me: WARNING:     /" >&2
+    ;;
+esac
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval "test \"\${$3+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  eval "$3=\$ac_header_compiler"
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+fi
+  eval $as_lineno_stack; test "x$as_lineno_stack" = x && { as_lineno=; unset as_lineno;}
+
+} # ac_fn_cxx_check_header_mongrel
+cat >config.log <<_ACEOF
+This file contains any messages produced by compilers while
+running configure, to aid debugging if configure makes a mistake.
+
+It was created by opensaml $as_me 2.4, which was
+generated by GNU Autoconf 2.67.  Invocation command line was
+
+  $ $0 $@
+
+_ACEOF
+exec 5>>config.log
+{
+cat <<_ASUNAME
+## --------- ##
+## Platform. ##
+## --------- ##
+
+hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
+uname -m = `(uname -m) 2>/dev/null || echo unknown`
+uname -r = `(uname -r) 2>/dev/null || echo unknown`
+uname -s = `(uname -s) 2>/dev/null || echo unknown`
+uname -v = `(uname -v) 2>/dev/null || echo unknown`
+
+/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
+/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`
+
+/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
+/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
+/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
+/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
+/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
+/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
+/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`
+
+_ASUNAME
+
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    $as_echo "PATH: $as_dir"
+  done
+IFS=$as_save_IFS
+
+} >&5
+
+cat >&5 <<_ACEOF
+
+
+## ----------- ##
+## Core tests. ##
+## ----------- ##
+
+_ACEOF
+
+
+# Keep a trace of the command line.
+# Strip out --no-create and --no-recursion so they do not pile up.
+# Strip out --silent because we don't want to record it for future runs.
+# Also quote any args containing shell meta-characters.
+# Make two passes to allow for proper duplicate-argument suppression.
+ac_configure_args=
+ac_configure_args0=
+ac_configure_args1=
+ac_must_keep_next=false
+for ac_pass in 1 2
+do
+  for ac_arg
+  do
+    case $ac_arg in
+    -no-create | --no-c* | -n | -no-recursion | --no-r*) continue ;;
+    -q | -quiet | --quiet | --quie | --qui | --qu | --q \
+    | -silent | --silent | --silen | --sile | --sil)
+      continue ;;
+    *\'*)
+      ac_arg=`$as_echo "$ac_arg" | sed "s/'/'\\\\\\\\''/g"` ;;
+    esac
+    case $ac_pass in
+    1) as_fn_append ac_configure_args0 " '$ac_arg'" ;;
+    2)
+      as_fn_append ac_configure_args1 " '$ac_arg'"
+      if test $ac_must_keep_next = true; then
+	ac_must_keep_next=false # Got value, back to normal.
+      else
+	case $ac_arg in
+	  *=* | --config-cache | -C | -disable-* | --disable-* \
+	  | -enable-* | --enable-* | -gas | --g* | -nfp | --nf* \
+	  | -q | -quiet | --q* | -silent | --sil* | -v | -verb* \
+	  | -with-* | --with-* | -without-* | --without-* | --x)
+	    case "$ac_configure_args0 " in
+	      "$ac_configure_args1"*" '$ac_arg' "* ) continue ;;
+	    esac
+	    ;;
+	  -* ) ac_must_keep_next=true ;;
+	esac
+      fi
+      as_fn_append ac_configure_args " '$ac_arg'"
+      ;;
+    esac
+  done
+done
+{ ac_configure_args0=; unset ac_configure_args0;}
+{ ac_configure_args1=; unset ac_configure_args1;}
+
+# When interrupted or exit'd, cleanup temporary files, and complete
+# config.log.  We remove comments because anyway the quotes in there
+# would cause problems or look ugly.
+# WARNING: Use '\'' to represent an apostrophe within the trap.
+# WARNING: Do not start the trap code with a newline, due to a FreeBSD 4.0 bug.
+trap 'exit_status=$?
+  # Save into config.log some information that might help in debugging.
+  {
+    echo
+
+    $as_echo "## ---------------- ##
+## Cache variables. ##
+## ---------------- ##"
+    echo
+    # The following way of writing the cache mishandles newlines in values,
+(
+  for ac_var in `(set) 2>&1 | sed -n '\''s/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'\''`; do
+    eval ac_val=\$$ac_var
+    case $ac_val in #(
+    *${as_nl}*)
+      case $ac_var in #(
+      *_cv_*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline" >&5
+$as_echo "$as_me: WARNING: cache variable $ac_var contains a newline" >&2;} ;;
+      esac
+      case $ac_var in #(
+      _ | IFS | as_nl) ;; #(
+      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(
+      *) { eval $ac_var=; unset $ac_var;} ;;
+      esac ;;
+    esac
+  done
+  (set) 2>&1 |
+    case $as_nl`(ac_space='\'' '\''; set) 2>&1` in #(
+    *${as_nl}ac_space=\ *)
+      sed -n \
+	"s/'\''/'\''\\\\'\'''\''/g;
+	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\''\\2'\''/p"
+      ;; #(
+    *)
+      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
+      ;;
+    esac |
+    sort
+)
+    echo
+
+    $as_echo "## ----------------- ##
+## Output variables. ##
+## ----------------- ##"
+    echo
+    for ac_var in $ac_subst_vars
+    do
+      eval ac_val=\$$ac_var
+      case $ac_val in
+      *\'\''*) ac_val=`$as_echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
+      esac
+      $as_echo "$ac_var='\''$ac_val'\''"
+    done | sort
+    echo
+
+    if test -n "$ac_subst_files"; then
+      $as_echo "## ------------------- ##
+## File substitutions. ##
+## ------------------- ##"
+      echo
+      for ac_var in $ac_subst_files
+      do
+	eval ac_val=\$$ac_var
+	case $ac_val in
+	*\'\''*) ac_val=`$as_echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
+	esac
+	$as_echo "$ac_var='\''$ac_val'\''"
+      done | sort
+      echo
+    fi
+
+    if test -s confdefs.h; then
+      $as_echo "## ----------- ##
+## confdefs.h. ##
+## ----------- ##"
+      echo
+      cat confdefs.h
+      echo
+    fi
+    test "$ac_signal" != 0 &&
+      $as_echo "$as_me: caught signal $ac_signal"
+    $as_echo "$as_me: exit $exit_status"
+  } >&5
+  rm -f core *.core core.conftest.* &&
+    rm -f -r conftest* confdefs* conf$$* $ac_clean_files &&
+    exit $exit_status
+' 0
+for ac_signal in 1 2 13 15; do
+  trap 'ac_signal='$ac_signal'; as_fn_exit 1' $ac_signal
+done
+ac_signal=0
+
+# confdefs.h avoids OS command line length limits that DEFS can exceed.
+rm -f -r conftest* confdefs.h
+
+$as_echo "/* confdefs.h */" > confdefs.h
+
+# Predefined preprocessor variables.
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE_NAME "$PACKAGE_NAME"
+_ACEOF
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE_TARNAME "$PACKAGE_TARNAME"
+_ACEOF
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE_VERSION "$PACKAGE_VERSION"
+_ACEOF
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE_STRING "$PACKAGE_STRING"
+_ACEOF
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
+_ACEOF
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE_URL "$PACKAGE_URL"
+_ACEOF
+
+
+# Let the site file select an alternate cache file if it wants to.
+# Prefer an explicitly selected file to automatically selected ones.
+ac_site_file1=NONE
+ac_site_file2=NONE
+if test -n "$CONFIG_SITE"; then
+  # We do not want a PATH search for config.site.
+  case $CONFIG_SITE in #((
+    -*)  ac_site_file1=./$CONFIG_SITE;;
+    */*) ac_site_file1=$CONFIG_SITE;;
+    *)   ac_site_file1=./$CONFIG_SITE;;
+  esac
+elif test "x$prefix" != xNONE; then
+  ac_site_file1=$prefix/share/config.site
+  ac_site_file2=$prefix/etc/config.site
+else
+  ac_site_file1=$ac_default_prefix/share/config.site
+  ac_site_file2=$ac_default_prefix/etc/config.site
+fi
+for ac_site_file in "$ac_site_file1" "$ac_site_file2"
+do
+  test "x$ac_site_file" = xNONE && continue
+  if test /dev/null != "$ac_site_file" && test -r "$ac_site_file"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: loading site script $ac_site_file" >&5
+$as_echo "$as_me: loading site script $ac_site_file" >&6;}
+    sed 's/^/| /' "$ac_site_file" >&5
+    . "$ac_site_file" \
+      || { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "failed to load site script $ac_site_file
+See \`config.log' for more details" "$LINENO" 5 ; }
+  fi
+done
+
+if test -r "$cache_file"; then
+  # Some versions of bash will fail to source /dev/null (special files
+  # actually), so we avoid doing that.  DJGPP emulates it as a regular file.
+  if test /dev/null != "$cache_file" && test -f "$cache_file"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: loading cache $cache_file" >&5
+$as_echo "$as_me: loading cache $cache_file" >&6;}
+    case $cache_file in
+      [\\/]* | ?:[\\/]* ) . "$cache_file";;
+      *)                      . "./$cache_file";;
+    esac
+  fi
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: creating cache $cache_file" >&5
+$as_echo "$as_me: creating cache $cache_file" >&6;}
+  >$cache_file
+fi
+
+# Check that the precious variables saved in the cache have kept the same
+# value.
+ac_cache_corrupted=false
+for ac_var in $ac_precious_vars; do
+  eval ac_old_set=\$ac_cv_env_${ac_var}_set
+  eval ac_new_set=\$ac_env_${ac_var}_set
+  eval ac_old_val=\$ac_cv_env_${ac_var}_value
+  eval ac_new_val=\$ac_env_${ac_var}_value
+  case $ac_old_set,$ac_new_set in
+    set,)
+      { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&5
+$as_echo "$as_me: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&2;}
+      ac_cache_corrupted=: ;;
+    ,set)
+      { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' was not set in the previous run" >&5
+$as_echo "$as_me: error: \`$ac_var' was not set in the previous run" >&2;}
+      ac_cache_corrupted=: ;;
+    ,);;
+    *)
+      if test "x$ac_old_val" != "x$ac_new_val"; then
+	# differences in whitespace do not lead to failure.
+	ac_old_val_w=`echo x $ac_old_val`
+	ac_new_val_w=`echo x $ac_new_val`
+	if test "$ac_old_val_w" != "$ac_new_val_w"; then
+	  { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' has changed since the previous run:" >&5
+$as_echo "$as_me: error: \`$ac_var' has changed since the previous run:" >&2;}
+	  ac_cache_corrupted=:
+	else
+	  { $as_echo "$as_me:${as_lineno-$LINENO}: warning: ignoring whitespace changes in \`$ac_var' since the previous run:" >&5
+$as_echo "$as_me: warning: ignoring whitespace changes in \`$ac_var' since the previous run:" >&2;}
+	  eval $ac_var=\$ac_old_val
+	fi
+	{ $as_echo "$as_me:${as_lineno-$LINENO}:   former value:  \`$ac_old_val'" >&5
+$as_echo "$as_me:   former value:  \`$ac_old_val'" >&2;}
+	{ $as_echo "$as_me:${as_lineno-$LINENO}:   current value: \`$ac_new_val'" >&5
+$as_echo "$as_me:   current value: \`$ac_new_val'" >&2;}
+      fi;;
+  esac
+  # Pass precious variables to config.status.
+  if test "$ac_new_set" = set; then
+    case $ac_new_val in
+    *\'*) ac_arg=$ac_var=`$as_echo "$ac_new_val" | sed "s/'/'\\\\\\\\''/g"` ;;
+    *) ac_arg=$ac_var=$ac_new_val ;;
+    esac
+    case " $ac_configure_args " in
+      *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
+      *) as_fn_append ac_configure_args " '$ac_arg'" ;;
+    esac
+  fi
+done
+if $ac_cache_corrupted; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+  { $as_echo "$as_me:${as_lineno-$LINENO}: error: changes in the environment can compromise the build" >&5
+$as_echo "$as_me: error: changes in the environment can compromise the build" >&2;}
+  as_fn_error $? "run \`make distclean' and/or \`rm $cache_file' and start over" "$LINENO" 5
+fi
+## -------------------- ##
+## Main body of script. ##
+## -------------------- ##
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+
+ac_aux_dir=
+for ac_dir in build-aux "$srcdir"/build-aux; do
+  if test -f "$ac_dir/install-sh"; then
+    ac_aux_dir=$ac_dir
+    ac_install_sh="$ac_aux_dir/install-sh -c"
+    break
+  elif test -f "$ac_dir/install.sh"; then
+    ac_aux_dir=$ac_dir
+    ac_install_sh="$ac_aux_dir/install.sh -c"
+    break
+  elif test -f "$ac_dir/shtool"; then
+    ac_aux_dir=$ac_dir
+    ac_install_sh="$ac_aux_dir/shtool install -c"
+    break
+  fi
+done
+if test -z "$ac_aux_dir"; then
+  as_fn_error $? "cannot find install-sh, install.sh, or shtool in build-aux \"$srcdir\"/build-aux" "$LINENO" 5
+fi
+
+# These three variables are undocumented and unsupported,
+# and are intended to be withdrawn in a future Autoconf release.
+# They can cause serious problems if a builder's source tree is in a directory
+# whose full name contains unusual characters.
+ac_config_guess="$SHELL $ac_aux_dir/config.guess"  # Please don't use this var.
+ac_config_sub="$SHELL $ac_aux_dir/config.sub"  # Please don't use this var.
+ac_configure="$SHELL $ac_aux_dir/configure"  # Please don't use this var.
+
+
+
+am__api_version='1.11'
+
+# Find a good install program.  We prefer a C program (faster),
+# so one script is as good as another.  But avoid the broken or
+# incompatible versions:
+# SysV /etc/install, /usr/sbin/install
+# SunOS /usr/etc/install
+# IRIX /sbin/install
+# AIX /bin/install
+# AmigaOS /C/install, which installs bootblocks on floppy discs
+# AIX 4 /usr/bin/installbsd, which doesn't work without a -g flag
+# AFS /usr/afsws/bin/install, which mishandles nonexistent args
+# SVR4 /usr/ucb/install, which tries to use the nonexistent group "staff"
+# OS/2's system install, which has a completely different semantic
+# ./install, which can be erroneously created by make from ./install.sh.
+# Reject install programs that cannot install multiple files.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for a BSD-compatible install" >&5
+$as_echo_n "checking for a BSD-compatible install... " >&6; }
+if test -z "$INSTALL"; then
+if test "${ac_cv_path_install+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    # Account for people who put trailing slashes in PATH elements.
+case $as_dir/ in #((
+  ./ | .// | /[cC]/* | \
+  /etc/* | /usr/sbin/* | /usr/etc/* | /sbin/* | /usr/afsws/bin/* | \
+  ?:[\\/]os2[\\/]install[\\/]* | ?:[\\/]OS2[\\/]INSTALL[\\/]* | \
+  /usr/ucb/* ) ;;
+  *)
+    # OSF1 and SCO ODT 3.0 have their own names for install.
+    # Don't use installbsd from OSF since it installs stuff as root
+    # by default.
+    for ac_prog in ginstall scoinst install; do
+      for ac_exec_ext in '' $ac_executable_extensions; do
+	if { test -f "$as_dir/$ac_prog$ac_exec_ext" && $as_test_x "$as_dir/$ac_prog$ac_exec_ext"; }; then
+	  if test $ac_prog = install &&
+	    grep dspmsg "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
+	    # AIX install.  It has an incompatible calling convention.
+	    :
+	  elif test $ac_prog = install &&
+	    grep pwplus "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
+	    # program-specific install script used by HP pwplus--don't use.
+	    :
+	  else
+	    rm -rf conftest.one conftest.two conftest.dir
+	    echo one > conftest.one
+	    echo two > conftest.two
+	    mkdir conftest.dir
+	    if "$as_dir/$ac_prog$ac_exec_ext" -c conftest.one conftest.two "`pwd`/conftest.dir" &&
+	      test -s conftest.one && test -s conftest.two &&
+	      test -s conftest.dir/conftest.one &&
+	      test -s conftest.dir/conftest.two
+	    then
+	      ac_cv_path_install="$as_dir/$ac_prog$ac_exec_ext -c"
+	      break 3
+	    fi
+	  fi
+	fi
+      done
+    done
+    ;;
+esac
+
+  done
+IFS=$as_save_IFS
+
+rm -rf conftest.one conftest.two conftest.dir
+
+fi
+  if test "${ac_cv_path_install+set}" = set; then
+    INSTALL=$ac_cv_path_install
+  else
+    # As a last resort, use the slow shell script.  Don't cache a
+    # value for INSTALL within a source directory, because that will
+    # break other packages using the cache if that directory is
+    # removed, or if the value is a relative name.
+    INSTALL=$ac_install_sh
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $INSTALL" >&5
+$as_echo "$INSTALL" >&6; }
+
+# Use test -z because SunOS4 sh mishandles braces in ${var-val}.
+# It thinks the first close brace ends the variable substitution.
+test -z "$INSTALL_PROGRAM" && INSTALL_PROGRAM='${INSTALL}'
+
+test -z "$INSTALL_SCRIPT" && INSTALL_SCRIPT='${INSTALL}'
+
+test -z "$INSTALL_DATA" && INSTALL_DATA='${INSTALL} -m 644'
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether build environment is sane" >&5
+$as_echo_n "checking whether build environment is sane... " >&6; }
+# Just in case
+sleep 1
+echo timestamp > conftest.file
+# Reject unsafe characters in $srcdir or the absolute working directory
+# name.  Accept space and tab only in the latter.
+am_lf='
+'
+case `pwd` in
+  *[\\\"\#\$\&\'\`$am_lf]*)
+    as_fn_error $? "unsafe absolute working directory name" "$LINENO" 5 ;;
+esac
+case $srcdir in
+  *[\\\"\#\$\&\'\`$am_lf\ \	]*)
+    as_fn_error $? "unsafe srcdir value: \`$srcdir'" "$LINENO" 5 ;;
+esac
+
+# Do `set' in a subshell so we don't clobber the current shell's
+# arguments.  Must try -L first in case configure is actually a
+# symlink; some systems play weird games with the mod time of symlinks
+# (eg FreeBSD returns the mod time of the symlink's containing
+# directory).
+if (
+   set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
+   if test "$*" = "X"; then
+      # -L didn't work.
+      set X `ls -t "$srcdir/configure" conftest.file`
+   fi
+   rm -f conftest.file
+   if test "$*" != "X $srcdir/configure conftest.file" \
+      && test "$*" != "X conftest.file $srcdir/configure"; then
+
+      # If neither matched, then we have a broken ls.  This can happen
+      # if, for instance, CONFIG_SHELL is bash and it inherits a
+      # broken ls alias from the environment.  This has actually
+      # happened.  Such a system could not be considered "sane".
+      as_fn_error $? "ls -t appears to fail.  Make sure there is not a broken
+alias in your environment" "$LINENO" 5
+   fi
+
+   test "$2" = conftest.file
+   )
+then
+   # Ok.
+   :
+else
+   as_fn_error $? "newly created file is older than distributed files!
+Check your system clock" "$LINENO" 5
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+test "$program_prefix" != NONE &&
+  program_transform_name="s&^&$program_prefix&;$program_transform_name"
+# Use a double $ so make ignores it.
+test "$program_suffix" != NONE &&
+  program_transform_name="s&\$&$program_suffix&;$program_transform_name"
+# Double any \ or $.
+# By default was `s,x,x', remove it if useless.
+ac_script='s/[\\$]/&&/g;s/;s,x,x,$//'
+program_transform_name=`$as_echo "$program_transform_name" | sed "$ac_script"`
+
+# expand $ac_aux_dir to an absolute path
+am_aux_dir=`cd $ac_aux_dir && pwd`
+
+if test x"${MISSING+set}" != xset; then
+  case $am_aux_dir in
+  *\ * | *\	*)
+    MISSING="\${SHELL} \"$am_aux_dir/missing\"" ;;
+  *)
+    MISSING="\${SHELL} $am_aux_dir/missing" ;;
+  esac
+fi
+# Use eval to expand $SHELL
+if eval "$MISSING --run true"; then
+  am_missing_run="$MISSING --run "
+else
+  am_missing_run=
+  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: \`missing' script is too old or missing" >&5
+$as_echo "$as_me: WARNING: \`missing' script is too old or missing" >&2;}
+fi
+
+if test x"${install_sh}" != xset; then
+  case $am_aux_dir in
+  *\ * | *\	*)
+    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
+  *)
+    install_sh="\${SHELL} $am_aux_dir/install-sh"
+  esac
+fi
+
+# Installed binaries are usually stripped using `strip' when the user
+# run `make install-strip'.  However `strip' might not be the right
+# tool to use in cross-compilation environments, therefore Automake
+# will honor the `STRIP' environment variable to overrule this program.
+if test "$cross_compiling" != no; then
+  if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}strip", so it can be a program name with args.
+set dummy ${ac_tool_prefix}strip; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_STRIP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$STRIP"; then
+  ac_cv_prog_STRIP="$STRIP" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_STRIP="${ac_tool_prefix}strip"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+STRIP=$ac_cv_prog_STRIP
+if test -n "$STRIP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $STRIP" >&5
+$as_echo "$STRIP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_STRIP"; then
+  ac_ct_STRIP=$STRIP
+  # Extract the first word of "strip", so it can be a program name with args.
+set dummy strip; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_STRIP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_STRIP"; then
+  ac_cv_prog_ac_ct_STRIP="$ac_ct_STRIP" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_STRIP="strip"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_STRIP=$ac_cv_prog_ac_ct_STRIP
+if test -n "$ac_ct_STRIP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_STRIP" >&5
+$as_echo "$ac_ct_STRIP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_STRIP" = x; then
+    STRIP=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    STRIP=$ac_ct_STRIP
+  fi
+else
+  STRIP="$ac_cv_prog_STRIP"
+fi
+
+fi
+INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for a thread-safe mkdir -p" >&5
+$as_echo_n "checking for a thread-safe mkdir -p... " >&6; }
+if test -z "$MKDIR_P"; then
+  if test "${ac_cv_path_mkdir+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH$PATH_SEPARATOR/opt/sfw/bin
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_prog in mkdir gmkdir; do
+	 for ac_exec_ext in '' $ac_executable_extensions; do
+	   { test -f "$as_dir/$ac_prog$ac_exec_ext" && $as_test_x "$as_dir/$ac_prog$ac_exec_ext"; } || continue
+	   case `"$as_dir/$ac_prog$ac_exec_ext" --version 2>&1` in #(
+	     'mkdir (GNU coreutils) '* | \
+	     'mkdir (coreutils) '* | \
+	     'mkdir (fileutils) '4.1*)
+	       ac_cv_path_mkdir=$as_dir/$ac_prog$ac_exec_ext
+	       break 3;;
+	   esac
+	 done
+       done
+  done
+IFS=$as_save_IFS
+
+fi
+
+  test -d ./--version && rmdir ./--version
+  if test "${ac_cv_path_mkdir+set}" = set; then
+    MKDIR_P="$ac_cv_path_mkdir -p"
+  else
+    # As a last resort, use the slow shell script.  Don't cache a
+    # value for MKDIR_P within a source directory, because that will
+    # break other packages using the cache if that directory is
+    # removed, or if the value is a relative name.
+    MKDIR_P="$ac_install_sh -d"
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $MKDIR_P" >&5
+$as_echo "$MKDIR_P" >&6; }
+
+mkdir_p="$MKDIR_P"
+case $mkdir_p in
+  [\\/$]* | ?:[\\/]*) ;;
+  */*) mkdir_p="\$(top_builddir)/$mkdir_p" ;;
+esac
+
+for ac_prog in gawk mawk nawk awk
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_AWK+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$AWK"; then
+  ac_cv_prog_AWK="$AWK" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_AWK="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+AWK=$ac_cv_prog_AWK
+if test -n "$AWK"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AWK" >&5
+$as_echo "$AWK" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$AWK" && break
+done
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether ${MAKE-make} sets \$(MAKE)" >&5
+$as_echo_n "checking whether ${MAKE-make} sets \$(MAKE)... " >&6; }
+set x ${MAKE-make}
+ac_make=`$as_echo "$2" | sed 's/+/p/g; s/[^a-zA-Z0-9_]/_/g'`
+if eval "test \"\${ac_cv_prog_make_${ac_make}_set+set}\"" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat >conftest.make <<\_ACEOF
+SHELL = /bin/sh
+all:
+	@echo '@@@%%%=$(MAKE)=@@@%%%'
+_ACEOF
+# GNU make sometimes prints "make[1]: Entering ...", which would confuse us.
+case `${MAKE-make} -f conftest.make 2>/dev/null` in
+  *@@@%%%=?*=@@@%%%*)
+    eval ac_cv_prog_make_${ac_make}_set=yes;;
+  *)
+    eval ac_cv_prog_make_${ac_make}_set=no;;
+esac
+rm -f conftest.make
+fi
+if eval test \$ac_cv_prog_make_${ac_make}_set = yes; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+  SET_MAKE=
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+  SET_MAKE="MAKE=${MAKE-make}"
+fi
+
+rm -rf .tst 2>/dev/null
+mkdir .tst 2>/dev/null
+if test -d .tst; then
+  am__leading_dot=.
+else
+  am__leading_dot=_
+fi
+rmdir .tst 2>/dev/null
+
+if test "`cd $srcdir && pwd`" != "`pwd`"; then
+  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
+  # is not polluted with repeated "-I."
+  am__isrc=' -I$(srcdir)'
+  # test to see if srcdir already configured
+  if test -f $srcdir/config.status; then
+    as_fn_error $? "source directory already configured; run \"make distclean\" there first" "$LINENO" 5
+  fi
+fi
+
+# test whether we have cygpath
+if test -z "$CYGPATH_W"; then
+  if (cygpath --version) >/dev/null 2>/dev/null; then
+    CYGPATH_W='cygpath -w'
+  else
+    CYGPATH_W=echo
+  fi
+fi
+
+
+# Define the identity of the package.
+ PACKAGE='opensaml'
+ VERSION='2.4'
+
+
+cat >>confdefs.h <<_ACEOF
+#define PACKAGE "$PACKAGE"
+_ACEOF
+
+
+cat >>confdefs.h <<_ACEOF
+#define VERSION "$VERSION"
+_ACEOF
+
+# Some tools Automake needs.
+
+ACLOCAL=${ACLOCAL-"${am_missing_run}aclocal-${am__api_version}"}
+
+
+AUTOCONF=${AUTOCONF-"${am_missing_run}autoconf"}
+
+
+AUTOMAKE=${AUTOMAKE-"${am_missing_run}automake-${am__api_version}"}
+
+
+AUTOHEADER=${AUTOHEADER-"${am_missing_run}autoheader"}
+
+
+MAKEINFO=${MAKEINFO-"${am_missing_run}makeinfo"}
+
+# We need awk for the "check" target.  The system "awk" is bad on
+# some platforms.
+# Always define AMTAR for backward compatibility.
+
+AMTAR=${AMTAR-"${am_missing_run}tar"}
+
+am__tar='${AMTAR} chof - "$$tardir"'; am__untar='${AMTAR} xf -'
+
+
+
+
+
+# Check whether --enable-static was given.
+if test "${enable_static+set}" = set; then :
+  enableval=$enable_static; p=${PACKAGE-default}
+    case $enableval in
+    yes) enable_static=yes ;;
+    no) enable_static=no ;;
+    *)
+     enable_static=no
+      # Look at the argument we got.  We use all the common list separators.
+      lt_save_ifs="$IFS"; IFS="${IFS}$PATH_SEPARATOR,"
+      for pkg in $enableval; do
+	IFS="$lt_save_ifs"
+	if test "X$pkg" = "X$p"; then
+	  enable_static=yes
+	fi
+      done
+      IFS="$lt_save_ifs"
+      ;;
+    esac
+else
+  enable_static=no
+fi
+
+
+
+
+
+
+
+
+
+case `pwd` in
+  *\ * | *\	*)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Libtool does not cope well with whitespace in \`pwd\`" >&5
+$as_echo "$as_me: WARNING: Libtool does not cope well with whitespace in \`pwd\`" >&2;} ;;
+esac
+
+
+
+macro_version='2.2.6b'
+macro_revision='1.3017'
+
+
+
+
+
+
+
+
+
+
+
+
+
+ltmain="$ac_aux_dir/ltmain.sh"
+
+# Make sure we can run config.sub.
+$SHELL "$ac_aux_dir/config.sub" sun4 >/dev/null 2>&1 ||
+  as_fn_error $? "cannot run $SHELL $ac_aux_dir/config.sub" "$LINENO" 5
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking build system type" >&5
+$as_echo_n "checking build system type... " >&6; }
+if test "${ac_cv_build+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_build_alias=$build_alias
+test "x$ac_build_alias" = x &&
+  ac_build_alias=`$SHELL "$ac_aux_dir/config.guess"`
+test "x$ac_build_alias" = x &&
+  as_fn_error $? "cannot guess build type; you must specify one" "$LINENO" 5
+ac_cv_build=`$SHELL "$ac_aux_dir/config.sub" $ac_build_alias` ||
+  as_fn_error $? "$SHELL $ac_aux_dir/config.sub $ac_build_alias failed" "$LINENO" 5
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_build" >&5
+$as_echo "$ac_cv_build" >&6; }
+case $ac_cv_build in
+*-*-*) ;;
+*) as_fn_error $? "invalid value of canonical build" "$LINENO" 5 ;;
+esac
+build=$ac_cv_build
+ac_save_IFS=$IFS; IFS='-'
+set x $ac_cv_build
+shift
+build_cpu=$1
+build_vendor=$2
+shift; shift
+# Remember, the first character of IFS is used to create $*,
+# except with old shells:
+build_os=$*
+IFS=$ac_save_IFS
+case $build_os in *\ *) build_os=`echo "$build_os" | sed 's/ /-/g'`;; esac
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking host system type" >&5
+$as_echo_n "checking host system type... " >&6; }
+if test "${ac_cv_host+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test "x$host_alias" = x; then
+  ac_cv_host=$ac_cv_build
+else
+  ac_cv_host=`$SHELL "$ac_aux_dir/config.sub" $host_alias` ||
+    as_fn_error $? "$SHELL $ac_aux_dir/config.sub $host_alias failed" "$LINENO" 5
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_host" >&5
+$as_echo "$ac_cv_host" >&6; }
+case $ac_cv_host in
+*-*-*) ;;
+*) as_fn_error $? "invalid value of canonical host" "$LINENO" 5 ;;
+esac
+host=$ac_cv_host
+ac_save_IFS=$IFS; IFS='-'
+set x $ac_cv_host
+shift
+host_cpu=$1
+host_vendor=$2
+shift; shift
+# Remember, the first character of IFS is used to create $*,
+# except with old shells:
+host_os=$*
+IFS=$ac_save_IFS
+case $host_os in *\ *) host_os=`echo "$host_os" | sed 's/ /-/g'`;; esac
+
+
+DEPDIR="${am__leading_dot}deps"
+
+ac_config_commands="$ac_config_commands depfiles"
+
+
+am_make=${MAKE-make}
+cat > confinc << 'END'
+am__doit:
+	@echo this is the am__doit target
+.PHONY: am__doit
+END
+# If we don't find an include directive, just comment out the code.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for style of include used by $am_make" >&5
+$as_echo_n "checking for style of include used by $am_make... " >&6; }
+am__include="#"
+am__quote=
+_am_result=none
+# First try GNU make style include.
+echo "include confinc" > confmf
+# Ignore all kinds of additional output from `make'.
+case `$am_make -s -f confmf 2> /dev/null` in #(
+*the\ am__doit\ target*)
+  am__include=include
+  am__quote=
+  _am_result=GNU
+  ;;
+esac
+# Now try BSD make style include.
+if test "$am__include" = "#"; then
+   echo '.include "confinc"' > confmf
+   case `$am_make -s -f confmf 2> /dev/null` in #(
+   *the\ am__doit\ target*)
+     am__include=.include
+     am__quote="\""
+     _am_result=BSD
+     ;;
+   esac
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $_am_result" >&5
+$as_echo "$_am_result" >&6; }
+rm -f confinc confmf
+
+# Check whether --enable-dependency-tracking was given.
+if test "${enable_dependency_tracking+set}" = set; then :
+  enableval=$enable_dependency_tracking;
+fi
+
+if test "x$enable_dependency_tracking" != xno; then
+  am_depcomp="$ac_aux_dir/depcomp"
+  AMDEPBACKSLASH='\'
+fi
+ if test "x$enable_dependency_tracking" != xno; then
+  AMDEP_TRUE=
+  AMDEP_FALSE='#'
+else
+  AMDEP_TRUE='#'
+  AMDEP_FALSE=
+fi
+
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}gcc", so it can be a program name with args.
+set dummy ${ac_tool_prefix}gcc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="${ac_tool_prefix}gcc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_CC"; then
+  ac_ct_CC=$CC
+  # Extract the first word of "gcc", so it can be a program name with args.
+set dummy gcc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CC"; then
+  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CC="gcc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_CC=$ac_cv_prog_ac_ct_CC
+if test -n "$ac_ct_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
+$as_echo "$ac_ct_CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_CC" = x; then
+    CC=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CC=$ac_ct_CC
+  fi
+else
+  CC="$ac_cv_prog_CC"
+fi
+
+if test -z "$CC"; then
+          if test -n "$ac_tool_prefix"; then
+    # Extract the first word of "${ac_tool_prefix}cc", so it can be a program name with args.
+set dummy ${ac_tool_prefix}cc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="${ac_tool_prefix}cc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  fi
+fi
+if test -z "$CC"; then
+  # Extract the first word of "cc", so it can be a program name with args.
+set dummy cc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+  ac_prog_rejected=no
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    if test "$as_dir/$ac_word$ac_exec_ext" = "/usr/ucb/cc"; then
+       ac_prog_rejected=yes
+       continue
+     fi
+    ac_cv_prog_CC="cc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+if test $ac_prog_rejected = yes; then
+  # We found a bogon in the path, so make sure we never use it.
+  set dummy $ac_cv_prog_CC
+  shift
+  if test $# != 0; then
+    # We chose a different compiler from the bogus one.
+    # However, it has the same basename, so the bogon will be chosen
+    # first if we set CC to just the basename; use the full file name.
+    shift
+    ac_cv_prog_CC="$as_dir/$ac_word${1+' '}$@"
+  fi
+fi
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$CC"; then
+  if test -n "$ac_tool_prefix"; then
+  for ac_prog in cl.exe
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+    test -n "$CC" && break
+  done
+fi
+if test -z "$CC"; then
+  ac_ct_CC=$CC
+  for ac_prog in cl.exe
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CC"; then
+  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CC="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_CC=$ac_cv_prog_ac_ct_CC
+if test -n "$ac_ct_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
+$as_echo "$ac_ct_CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$ac_ct_CC" && break
+done
+
+  if test "x$ac_ct_CC" = x; then
+    CC=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CC=$ac_ct_CC
+  fi
+fi
+
+fi
+
+
+test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "no acceptable C compiler found in \$PATH
+See \`config.log' for more details" "$LINENO" 5 ; }
+
+# Provide some information about the compiler.
+$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
+set X $ac_compile
+ac_compiler=$2
+for ac_option in --version -v -V -qversion; do
+  { { ac_try="$ac_compiler $ac_option >&5"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    sed '10a\
+... rest of stderr output deleted ...
+         10q' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+  fi
+  rm -f conftest.er1 conftest.err
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+done
+
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+ac_clean_files_save=$ac_clean_files
+ac_clean_files="$ac_clean_files a.out a.out.dSYM a.exe b.out"
+# Try to create an executable without -o first, disregard a.out.
+# It will help us diagnose broken compilers, and finding out an intuition
+# of exeext.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the C compiler works" >&5
+$as_echo_n "checking whether the C compiler works... " >&6; }
+ac_link_default=`$as_echo "$ac_link" | sed 's/ -o *conftest[^ ]*//'`
+
+# The possible output files:
+ac_files="a.out conftest.exe conftest a.exe a_out.exe b.out conftest.*"
+
+ac_rmfiles=
+for ac_file in $ac_files
+do
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
+    * ) ac_rmfiles="$ac_rmfiles $ac_file";;
+  esac
+done
+rm -f $ac_rmfiles
+
+if { { ac_try="$ac_link_default"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link_default") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then :
+  # Autoconf-2.13 could set the ac_cv_exeext variable to `no'.
+# So ignore a value of `no', otherwise this would lead to `EXEEXT = no'
+# in a Makefile.  We should not override ac_cv_exeext if it was cached,
+# so that the user can short-circuit this test for compilers unknown to
+# Autoconf.
+for ac_file in $ac_files ''
+do
+  test -f "$ac_file" || continue
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj )
+	;;
+    [ab].out )
+	# We found the default executable, but exeext='' is most
+	# certainly right.
+	break;;
+    *.* )
+	if test "${ac_cv_exeext+set}" = set && test "$ac_cv_exeext" != no;
+	then :; else
+	   ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
+	fi
+	# We set ac_cv_exeext here because the later test for it is not
+	# safe: cross compilers may not add the suffix if given an `-o'
+	# argument, so we may need to know it at that point already.
+	# Even if this section looks crufty: it has the advantage of
+	# actually working.
+	break;;
+    * )
+	break;;
+  esac
+done
+test "$ac_cv_exeext" = no && ac_cv_exeext=
+
+else
+  ac_file=''
+fi
+if test -z "$ac_file"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+$as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error 77 "C compiler cannot create executables
+See \`config.log' for more details" "$LINENO" 5 ; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler default output file name" >&5
+$as_echo_n "checking for C compiler default output file name... " >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_file" >&5
+$as_echo "$ac_file" >&6; }
+ac_exeext=$ac_cv_exeext
+
+rm -f -r a.out a.out.dSYM a.exe conftest$ac_cv_exeext b.out
+ac_clean_files=$ac_clean_files_save
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of executables" >&5
+$as_echo_n "checking for suffix of executables... " >&6; }
+if { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then :
+  # If both `conftest.exe' and `conftest' are `present' (well, observable)
+# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will
+# work properly (i.e., refer to `conftest.exe'), while it won't with
+# `rm'.
+for ac_file in conftest.exe conftest conftest.*; do
+  test -f "$ac_file" || continue
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
+    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
+	  break;;
+    * ) break;;
+  esac
+done
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot compute suffix of executables: cannot compile and link
+See \`config.log' for more details" "$LINENO" 5 ; }
+fi
+rm -f conftest conftest$ac_cv_exeext
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_exeext" >&5
+$as_echo "$ac_cv_exeext" >&6; }
+
+rm -f conftest.$ac_ext
+EXEEXT=$ac_cv_exeext
+ac_exeext=$EXEEXT
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdio.h>
+int
+main ()
+{
+FILE *f = fopen ("conftest.out", "w");
+ return ferror (f) || fclose (f) != 0;
+
+  ;
+  return 0;
+}
+_ACEOF
+ac_clean_files="$ac_clean_files conftest.out"
+# Check that the compiler produces executables we can run.  If not, either
+# the compiler is broken, or we cross compile.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are cross compiling" >&5
+$as_echo_n "checking whether we are cross compiling... " >&6; }
+if test "$cross_compiling" != yes; then
+  { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+  if { ac_try='./conftest$ac_cv_exeext'
+  { { case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_try") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; }; then
+    cross_compiling=no
+  else
+    if test "$cross_compiling" = maybe; then
+	cross_compiling=yes
+    else
+	{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run C compiled programs.
+If you meant to cross compile, use \`--host'.
+See \`config.log' for more details" "$LINENO" 5 ; }
+    fi
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $cross_compiling" >&5
+$as_echo "$cross_compiling" >&6; }
+
+rm -f conftest.$ac_ext conftest$ac_cv_exeext conftest.out
+ac_clean_files=$ac_clean_files_save
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of object files" >&5
+$as_echo_n "checking for suffix of object files... " >&6; }
+if test "${ac_cv_objext+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.o conftest.obj
+if { { ac_try="$ac_compile"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compile") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then :
+  for ac_file in conftest.o conftest.obj conftest.*; do
+  test -f "$ac_file" || continue;
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM ) ;;
+    *) ac_cv_objext=`expr "$ac_file" : '.*\.\(.*\)'`
+       break;;
+  esac
+done
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot compute suffix of object files: cannot compile
+See \`config.log' for more details" "$LINENO" 5 ; }
+fi
+rm -f conftest.$ac_cv_objext conftest.$ac_ext
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objext" >&5
+$as_echo "$ac_cv_objext" >&6; }
+OBJEXT=$ac_cv_objext
+ac_objext=$OBJEXT
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
+$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
+if test "${ac_cv_c_compiler_gnu+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+#ifndef __GNUC__
+       choke me
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_compiler_gnu=yes
+else
+  ac_compiler_gnu=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ac_cv_c_compiler_gnu=$ac_compiler_gnu
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
+$as_echo "$ac_cv_c_compiler_gnu" >&6; }
+if test $ac_compiler_gnu = yes; then
+  GCC=yes
+else
+  GCC=
+fi
+ac_test_CFLAGS=${CFLAGS+set}
+ac_save_CFLAGS=$CFLAGS
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
+$as_echo_n "checking whether $CC accepts -g... " >&6; }
+if test "${ac_cv_prog_cc_g+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_save_c_werror_flag=$ac_c_werror_flag
+   ac_c_werror_flag=yes
+   ac_cv_prog_cc_g=no
+   CFLAGS="-g"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+else
+  CFLAGS=""
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+else
+  ac_c_werror_flag=$ac_save_c_werror_flag
+	 CFLAGS="-g"
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+   ac_c_werror_flag=$ac_save_c_werror_flag
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
+$as_echo "$ac_cv_prog_cc_g" >&6; }
+if test "$ac_test_CFLAGS" = set; then
+  CFLAGS=$ac_save_CFLAGS
+elif test $ac_cv_prog_cc_g = yes; then
+  if test "$GCC" = yes; then
+    CFLAGS="-g -O2"
+  else
+    CFLAGS="-g"
+  fi
+else
+  if test "$GCC" = yes; then
+    CFLAGS="-O2"
+  else
+    CFLAGS=
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
+$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
+if test "${ac_cv_prog_cc_c89+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_cv_prog_cc_c89=no
+ac_save_CC=$CC
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdarg.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
+struct buf { int x; };
+FILE * (*rcsopen) (struct buf *, struct stat *, int);
+static char *e (p, i)
+     char **p;
+     int i;
+{
+  return p[i];
+}
+static char *f (char * (*g) (char **, int), char **p, ...)
+{
+  char *s;
+  va_list v;
+  va_start (v,p);
+  s = g (p, va_arg (v,int));
+  va_end (v);
+  return s;
+}
+
+/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
+   function prototypes and stuff, but not '\xHH' hex character constants.
+   These don't provoke an error unfortunately, instead are silently treated
+   as 'x'.  The following induces an error, until -std is added to get
+   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
+   array size at least.  It's necessary to write '\x00'==0 to get something
+   that's true only with -std.  */
+int osf4_cc_array ['\x00' == 0 ? 1 : -1];
+
+/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
+   inside strings and character constants.  */
+#define FOO(x) 'x'
+int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
+
+int test (int i, double x);
+struct s1 {int (*f) (int a);};
+struct s2 {int (*f) (double a);};
+int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
+int argc;
+char **argv;
+int
+main ()
+{
+return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
+  ;
+  return 0;
+}
+_ACEOF
+for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
+	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
+do
+  CC="$ac_save_CC $ac_arg"
+  if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_c89=$ac_arg
+fi
+rm -f core conftest.err conftest.$ac_objext
+  test "x$ac_cv_prog_cc_c89" != "xno" && break
+done
+rm -f conftest.$ac_ext
+CC=$ac_save_CC
+
+fi
+# AC_CACHE_VAL
+case "x$ac_cv_prog_cc_c89" in
+  x)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
+$as_echo "none needed" >&6; } ;;
+  xno)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
+$as_echo "unsupported" >&6; } ;;
+  *)
+    CC="$CC $ac_cv_prog_cc_c89"
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
+$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
+esac
+if test "x$ac_cv_prog_cc_c89" != xno; then :
+
+fi
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+depcc="$CC"   am_compiler_list=
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc" >&5
+$as_echo_n "checking dependency style of $depcc... " >&6; }
+if test "${am_cv_CC_dependencies_compiler_type+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
+  # We make a subdir and do the tests there.  Otherwise we can end up
+  # making bogus files that we don't know about and never remove.  For
+  # instance it was reported that on HP-UX the gcc test will end up
+  # making a dummy file named `D' -- because `-MD' means `put the output
+  # in D'.
+  mkdir conftest.dir
+  # Copy depcomp to subdir because otherwise we won't find it if we're
+  # using a relative directory.
+  cp "$am_depcomp" conftest.dir
+  cd conftest.dir
+  # We will build objects and dependencies in a subdirectory because
+  # it helps to detect inapplicable dependency modes.  For instance
+  # both Tru64's cc and ICC support -MD to output dependencies as a
+  # side effect of compilation, but ICC will put the dependencies in
+  # the current directory while Tru64 will put them in the object
+  # directory.
+  mkdir sub
+
+  am_cv_CC_dependencies_compiler_type=none
+  if test "$am_compiler_list" = ""; then
+     am_compiler_list=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < ./depcomp`
+  fi
+  am__universal=false
+  case " $depcc " in #(
+     *\ -arch\ *\ -arch\ *) am__universal=true ;;
+     esac
+
+  for depmode in $am_compiler_list; do
+    # Setup a source with many dependencies, because some compilers
+    # like to wrap large dependency lists on column 80 (with \), and
+    # we should not choose a depcomp mode which is confused by this.
+    #
+    # We need to recreate these files for each test, as the compiler may
+    # overwrite some of them when testing with obscure command lines.
+    # This happens at least with the AIX C compiler.
+    : > sub/conftest.c
+    for i in 1 2 3 4 5 6; do
+      echo '#include "conftst'$i'.h"' >> sub/conftest.c
+      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with
+      # Solaris 8's {/usr,}/bin/sh.
+      touch sub/conftst$i.h
+    done
+    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf
+
+    # We check with `-c' and `-o' for the sake of the "dashmstdout"
+    # mode.  It turns out that the SunPro C++ compiler does not properly
+    # handle `-M -o', and we need to detect this.  Also, some Intel
+    # versions had trouble with output in subdirs
+    am__obj=sub/conftest.${OBJEXT-o}
+    am__minus_obj="-o $am__obj"
+    case $depmode in
+    gcc)
+      # This depmode causes a compiler race in universal mode.
+      test "$am__universal" = false || continue
+      ;;
+    nosideeffect)
+      # after this tag, mechanisms are not by side-effect, so they'll
+      # only be used when explicitly requested
+      if test "x$enable_dependency_tracking" = xyes; then
+	continue
+      else
+	break
+      fi
+      ;;
+    msvisualcpp | msvcmsys)
+      # This compiler won't grok `-c -o', but also, the minuso test has
+      # not run yet.  These depmodes are late enough in the game, and
+      # so weak that their functioning should not be impacted.
+      am__obj=conftest.${OBJEXT-o}
+      am__minus_obj=
+      ;;
+    none) break ;;
+    esac
+    if depmode=$depmode \
+       source=sub/conftest.c object=$am__obj \
+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
+         >/dev/null 2>conftest.err &&
+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
+      # icc doesn't choke on unknown options, it will just issue warnings
+      # or remarks (even with -Werror).  So we grep stderr for any message
+      # that says an option was ignored or not supported.
+      # When given -MP, icc 7.0 and 7.1 complain thusly:
+      #   icc: Command line warning: ignoring option '-M'; no argument required
+      # The diagnosis changed in icc 8.0:
+      #   icc: Command line remark: option '-MP' not supported
+      if (grep 'ignoring option' conftest.err ||
+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
+        am_cv_CC_dependencies_compiler_type=$depmode
+        break
+      fi
+    fi
+  done
+
+  cd ..
+  rm -rf conftest.dir
+else
+  am_cv_CC_dependencies_compiler_type=none
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $am_cv_CC_dependencies_compiler_type" >&5
+$as_echo "$am_cv_CC_dependencies_compiler_type" >&6; }
+CCDEPMODE=depmode=$am_cv_CC_dependencies_compiler_type
+
+ if
+  test "x$enable_dependency_tracking" != xno \
+  && test "$am_cv_CC_dependencies_compiler_type" = gcc3; then
+  am__fastdepCC_TRUE=
+  am__fastdepCC_FALSE='#'
+else
+  am__fastdepCC_TRUE='#'
+  am__fastdepCC_FALSE=
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for a sed that does not truncate output" >&5
+$as_echo_n "checking for a sed that does not truncate output... " >&6; }
+if test "${ac_cv_path_SED+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+            ac_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/
+     for ac_i in 1 2 3 4 5 6 7; do
+       ac_script="$ac_script$as_nl$ac_script"
+     done
+     echo "$ac_script" 2>/dev/null | sed 99q >conftest.sed
+     { ac_script=; unset ac_script;}
+     if test -z "$SED"; then
+  ac_path_SED_found=false
+  # Loop through the user's path and test for each of PROGNAME-LIST
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_prog in sed gsed; do
+    for ac_exec_ext in '' $ac_executable_extensions; do
+      ac_path_SED="$as_dir/$ac_prog$ac_exec_ext"
+      { test -f "$ac_path_SED" && $as_test_x "$ac_path_SED"; } || continue
+# Check for GNU ac_path_SED and select it if it is found.
+  # Check for GNU $ac_path_SED
+case `"$ac_path_SED" --version 2>&1` in
+*GNU*)
+  ac_cv_path_SED="$ac_path_SED" ac_path_SED_found=:;;
+*)
+  ac_count=0
+  $as_echo_n 0123456789 >"conftest.in"
+  while :
+  do
+    cat "conftest.in" "conftest.in" >"conftest.tmp"
+    mv "conftest.tmp" "conftest.in"
+    cp "conftest.in" "conftest.nl"
+    $as_echo '' >> "conftest.nl"
+    "$ac_path_SED" -f conftest.sed < "conftest.nl" >"conftest.out" 2>/dev/null || break
+    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
+    as_fn_arith $ac_count + 1 && ac_count=$as_val
+    if test $ac_count -gt ${ac_path_SED_max-0}; then
+      # Best one so far, save it but keep looking for a better one
+      ac_cv_path_SED="$ac_path_SED"
+      ac_path_SED_max=$ac_count
+    fi
+    # 10*(2^10) chars as input seems more than enough
+    test $ac_count -gt 10 && break
+  done
+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
+esac
+
+      $ac_path_SED_found && break 3
+    done
+  done
+  done
+IFS=$as_save_IFS
+  if test -z "$ac_cv_path_SED"; then
+    as_fn_error $? "no acceptable sed could be found in \$PATH" "$LINENO" 5
+  fi
+else
+  ac_cv_path_SED=$SED
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_SED" >&5
+$as_echo "$ac_cv_path_SED" >&6; }
+ SED="$ac_cv_path_SED"
+  rm -f conftest.sed
+
+test -z "$SED" && SED=sed
+Xsed="$SED -e 1s/^X//"
+
+
+
+
+
+
+
+
+
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for grep that handles long lines and -e" >&5
+$as_echo_n "checking for grep that handles long lines and -e... " >&6; }
+if test "${ac_cv_path_GREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$GREP"; then
+  ac_path_GREP_found=false
+  # Loop through the user's path and test for each of PROGNAME-LIST
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_prog in grep ggrep; do
+    for ac_exec_ext in '' $ac_executable_extensions; do
+      ac_path_GREP="$as_dir/$ac_prog$ac_exec_ext"
+      { test -f "$ac_path_GREP" && $as_test_x "$ac_path_GREP"; } || continue
+# Check for GNU ac_path_GREP and select it if it is found.
+  # Check for GNU $ac_path_GREP
+case `"$ac_path_GREP" --version 2>&1` in
+*GNU*)
+  ac_cv_path_GREP="$ac_path_GREP" ac_path_GREP_found=:;;
+*)
+  ac_count=0
+  $as_echo_n 0123456789 >"conftest.in"
+  while :
+  do
+    cat "conftest.in" "conftest.in" >"conftest.tmp"
+    mv "conftest.tmp" "conftest.in"
+    cp "conftest.in" "conftest.nl"
+    $as_echo 'GREP' >> "conftest.nl"
+    "$ac_path_GREP" -e 'GREP$' -e '-(cannot match)-' < "conftest.nl" >"conftest.out" 2>/dev/null || break
+    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
+    as_fn_arith $ac_count + 1 && ac_count=$as_val
+    if test $ac_count -gt ${ac_path_GREP_max-0}; then
+      # Best one so far, save it but keep looking for a better one
+      ac_cv_path_GREP="$ac_path_GREP"
+      ac_path_GREP_max=$ac_count
+    fi
+    # 10*(2^10) chars as input seems more than enough
+    test $ac_count -gt 10 && break
+  done
+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
+esac
+
+      $ac_path_GREP_found && break 3
+    done
+  done
+  done
+IFS=$as_save_IFS
+  if test -z "$ac_cv_path_GREP"; then
+    as_fn_error $? "no acceptable grep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
+  fi
+else
+  ac_cv_path_GREP=$GREP
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_GREP" >&5
+$as_echo "$ac_cv_path_GREP" >&6; }
+ GREP="$ac_cv_path_GREP"
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for egrep" >&5
+$as_echo_n "checking for egrep... " >&6; }
+if test "${ac_cv_path_EGREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if echo a | $GREP -E '(a|b)' >/dev/null 2>&1
+   then ac_cv_path_EGREP="$GREP -E"
+   else
+     if test -z "$EGREP"; then
+  ac_path_EGREP_found=false
+  # Loop through the user's path and test for each of PROGNAME-LIST
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_prog in egrep; do
+    for ac_exec_ext in '' $ac_executable_extensions; do
+      ac_path_EGREP="$as_dir/$ac_prog$ac_exec_ext"
+      { test -f "$ac_path_EGREP" && $as_test_x "$ac_path_EGREP"; } || continue
+# Check for GNU ac_path_EGREP and select it if it is found.
+  # Check for GNU $ac_path_EGREP
+case `"$ac_path_EGREP" --version 2>&1` in
+*GNU*)
+  ac_cv_path_EGREP="$ac_path_EGREP" ac_path_EGREP_found=:;;
+*)
+  ac_count=0
+  $as_echo_n 0123456789 >"conftest.in"
+  while :
+  do
+    cat "conftest.in" "conftest.in" >"conftest.tmp"
+    mv "conftest.tmp" "conftest.in"
+    cp "conftest.in" "conftest.nl"
+    $as_echo 'EGREP' >> "conftest.nl"
+    "$ac_path_EGREP" 'EGREP$' < "conftest.nl" >"conftest.out" 2>/dev/null || break
+    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
+    as_fn_arith $ac_count + 1 && ac_count=$as_val
+    if test $ac_count -gt ${ac_path_EGREP_max-0}; then
+      # Best one so far, save it but keep looking for a better one
+      ac_cv_path_EGREP="$ac_path_EGREP"
+      ac_path_EGREP_max=$ac_count
+    fi
+    # 10*(2^10) chars as input seems more than enough
+    test $ac_count -gt 10 && break
+  done
+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
+esac
+
+      $ac_path_EGREP_found && break 3
+    done
+  done
+  done
+IFS=$as_save_IFS
+  if test -z "$ac_cv_path_EGREP"; then
+    as_fn_error $? "no acceptable egrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
+  fi
+else
+  ac_cv_path_EGREP=$EGREP
+fi
+
+   fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_EGREP" >&5
+$as_echo "$ac_cv_path_EGREP" >&6; }
+ EGREP="$ac_cv_path_EGREP"
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for fgrep" >&5
+$as_echo_n "checking for fgrep... " >&6; }
+if test "${ac_cv_path_FGREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if echo 'ab*c' | $GREP -F 'ab*c' >/dev/null 2>&1
+   then ac_cv_path_FGREP="$GREP -F"
+   else
+     if test -z "$FGREP"; then
+  ac_path_FGREP_found=false
+  # Loop through the user's path and test for each of PROGNAME-LIST
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_prog in fgrep; do
+    for ac_exec_ext in '' $ac_executable_extensions; do
+      ac_path_FGREP="$as_dir/$ac_prog$ac_exec_ext"
+      { test -f "$ac_path_FGREP" && $as_test_x "$ac_path_FGREP"; } || continue
+# Check for GNU ac_path_FGREP and select it if it is found.
+  # Check for GNU $ac_path_FGREP
+case `"$ac_path_FGREP" --version 2>&1` in
+*GNU*)
+  ac_cv_path_FGREP="$ac_path_FGREP" ac_path_FGREP_found=:;;
+*)
+  ac_count=0
+  $as_echo_n 0123456789 >"conftest.in"
+  while :
+  do
+    cat "conftest.in" "conftest.in" >"conftest.tmp"
+    mv "conftest.tmp" "conftest.in"
+    cp "conftest.in" "conftest.nl"
+    $as_echo 'FGREP' >> "conftest.nl"
+    "$ac_path_FGREP" FGREP < "conftest.nl" >"conftest.out" 2>/dev/null || break
+    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
+    as_fn_arith $ac_count + 1 && ac_count=$as_val
+    if test $ac_count -gt ${ac_path_FGREP_max-0}; then
+      # Best one so far, save it but keep looking for a better one
+      ac_cv_path_FGREP="$ac_path_FGREP"
+      ac_path_FGREP_max=$ac_count
+    fi
+    # 10*(2^10) chars as input seems more than enough
+    test $ac_count -gt 10 && break
+  done
+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
+esac
+
+      $ac_path_FGREP_found && break 3
+    done
+  done
+  done
+IFS=$as_save_IFS
+  if test -z "$ac_cv_path_FGREP"; then
+    as_fn_error $? "no acceptable fgrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
+  fi
+else
+  ac_cv_path_FGREP=$FGREP
+fi
+
+   fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_FGREP" >&5
+$as_echo "$ac_cv_path_FGREP" >&6; }
+ FGREP="$ac_cv_path_FGREP"
+
+
+test -z "$GREP" && GREP=grep
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+# Check whether --with-gnu-ld was given.
+if test "${with_gnu_ld+set}" = set; then :
+  withval=$with_gnu_ld; test "$withval" = no || with_gnu_ld=yes
+else
+  with_gnu_ld=no
+fi
+
+ac_prog=ld
+if test "$GCC" = yes; then
+  # Check if gcc -print-prog-name=ld gives a path.
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ld used by $CC" >&5
+$as_echo_n "checking for ld used by $CC... " >&6; }
+  case $host in
+  *-*-mingw*)
+    # gcc leaves a trailing carriage return which upsets mingw
+    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
+  *)
+    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
+  esac
+  case $ac_prog in
+    # Accept absolute paths.
+    [\\/]* | ?:[\\/]*)
+      re_direlt='/[^/][^/]*/\.\./'
+      # Canonicalize the pathname of ld
+      ac_prog=`$ECHO "$ac_prog"| $SED 's%\\\\%/%g'`
+      while $ECHO "$ac_prog" | $GREP "$re_direlt" > /dev/null 2>&1; do
+	ac_prog=`$ECHO $ac_prog| $SED "s%$re_direlt%/%"`
+      done
+      test -z "$LD" && LD="$ac_prog"
+      ;;
+  "")
+    # If it fails, then pretend we aren't using GCC.
+    ac_prog=ld
+    ;;
+  *)
+    # If it is relative, then search for the first ld in PATH.
+    with_gnu_ld=unknown
+    ;;
+  esac
+elif test "$with_gnu_ld" = yes; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for GNU ld" >&5
+$as_echo_n "checking for GNU ld... " >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for non-GNU ld" >&5
+$as_echo_n "checking for non-GNU ld... " >&6; }
+fi
+if test "${lt_cv_path_LD+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$LD"; then
+  lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+  for ac_dir in $PATH; do
+    IFS="$lt_save_ifs"
+    test -z "$ac_dir" && ac_dir=.
+    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
+      lt_cv_path_LD="$ac_dir/$ac_prog"
+      # Check to see if the program is GNU ld.  I'd rather use --version,
+      # but apparently some variants of GNU ld only accept -v.
+      # Break only if it was the GNU/non-GNU ld that we prefer.
+      case `"$lt_cv_path_LD" -v 2>&1 </dev/null` in
+      *GNU* | *'with BFD'*)
+	test "$with_gnu_ld" != no && break
+	;;
+      *)
+	test "$with_gnu_ld" != yes && break
+	;;
+      esac
+    fi
+  done
+  IFS="$lt_save_ifs"
+else
+  lt_cv_path_LD="$LD" # Let the user override the test with a path.
+fi
+fi
+
+LD="$lt_cv_path_LD"
+if test -n "$LD"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LD" >&5
+$as_echo "$LD" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+test -z "$LD" && as_fn_error $? "no acceptable ld found in \$PATH" "$LINENO" 5
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if the linker ($LD) is GNU ld" >&5
+$as_echo_n "checking if the linker ($LD) is GNU ld... " >&6; }
+if test "${lt_cv_prog_gnu_ld+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  # I'd rather use --version here, but apparently some GNU lds only accept -v.
+case `$LD -v 2>&1 </dev/null` in
+*GNU* | *'with BFD'*)
+  lt_cv_prog_gnu_ld=yes
+  ;;
+*)
+  lt_cv_prog_gnu_ld=no
+  ;;
+esac
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_gnu_ld" >&5
+$as_echo "$lt_cv_prog_gnu_ld" >&6; }
+with_gnu_ld=$lt_cv_prog_gnu_ld
+
+
+
+
+
+
+
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for BSD- or MS-compatible name lister (nm)" >&5
+$as_echo_n "checking for BSD- or MS-compatible name lister (nm)... " >&6; }
+if test "${lt_cv_path_NM+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$NM"; then
+  # Let the user override the test.
+  lt_cv_path_NM="$NM"
+else
+  lt_nm_to_check="${ac_tool_prefix}nm"
+  if test -n "$ac_tool_prefix" && test "$build" = "$host"; then
+    lt_nm_to_check="$lt_nm_to_check nm"
+  fi
+  for lt_tmp_nm in $lt_nm_to_check; do
+    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do
+      IFS="$lt_save_ifs"
+      test -z "$ac_dir" && ac_dir=.
+      tmp_nm="$ac_dir/$lt_tmp_nm"
+      if test -f "$tmp_nm" || test -f "$tmp_nm$ac_exeext" ; then
+	# Check to see if the nm accepts a BSD-compat flag.
+	# Adding the `sed 1q' prevents false positives on HP-UX, which says:
+	#   nm: unknown option "B" ignored
+	# Tru64's nm complains that /dev/null is an invalid object file
+	case `"$tmp_nm" -B /dev/null 2>&1 | sed '1q'` in
+	*/dev/null* | *'Invalid file or object type'*)
+	  lt_cv_path_NM="$tmp_nm -B"
+	  break
+	  ;;
+	*)
+	  case `"$tmp_nm" -p /dev/null 2>&1 | sed '1q'` in
+	  */dev/null*)
+	    lt_cv_path_NM="$tmp_nm -p"
+	    break
+	    ;;
+	  *)
+	    lt_cv_path_NM=${lt_cv_path_NM="$tmp_nm"} # keep the first match, but
+	    continue # so that we can try to find one that supports BSD flags
+	    ;;
+	  esac
+	  ;;
+	esac
+      fi
+    done
+    IFS="$lt_save_ifs"
+  done
+  : ${lt_cv_path_NM=no}
+fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_path_NM" >&5
+$as_echo "$lt_cv_path_NM" >&6; }
+if test "$lt_cv_path_NM" != "no"; then
+  NM="$lt_cv_path_NM"
+else
+  # Didn't find any BSD compatible name lister, look for dumpbin.
+  if test -n "$ac_tool_prefix"; then
+  for ac_prog in "dumpbin -symbols" "link -dump -symbols"
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_DUMPBIN+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$DUMPBIN"; then
+  ac_cv_prog_DUMPBIN="$DUMPBIN" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_DUMPBIN="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+DUMPBIN=$ac_cv_prog_DUMPBIN
+if test -n "$DUMPBIN"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DUMPBIN" >&5
+$as_echo "$DUMPBIN" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+    test -n "$DUMPBIN" && break
+  done
+fi
+if test -z "$DUMPBIN"; then
+  ac_ct_DUMPBIN=$DUMPBIN
+  for ac_prog in "dumpbin -symbols" "link -dump -symbols"
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_DUMPBIN+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_DUMPBIN"; then
+  ac_cv_prog_ac_ct_DUMPBIN="$ac_ct_DUMPBIN" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_DUMPBIN="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_DUMPBIN=$ac_cv_prog_ac_ct_DUMPBIN
+if test -n "$ac_ct_DUMPBIN"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_DUMPBIN" >&5
+$as_echo "$ac_ct_DUMPBIN" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$ac_ct_DUMPBIN" && break
+done
+
+  if test "x$ac_ct_DUMPBIN" = x; then
+    DUMPBIN=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DUMPBIN=$ac_ct_DUMPBIN
+  fi
+fi
+
+
+  if test "$DUMPBIN" != ":"; then
+    NM="$DUMPBIN"
+  fi
+fi
+test -z "$NM" && NM=nm
+
+
+
+
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking the name lister ($NM) interface" >&5
+$as_echo_n "checking the name lister ($NM) interface... " >&6; }
+if test "${lt_cv_nm_interface+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_nm_interface="BSD nm"
+  echo "int some_variable = 0;" > conftest.$ac_ext
+  (eval echo "\"\$as_me:5062: $ac_compile\"" >&5)
+  (eval "$ac_compile" 2>conftest.err)
+  cat conftest.err >&5
+  (eval echo "\"\$as_me:5065: $NM \\\"conftest.$ac_objext\\\"\"" >&5)
+  (eval "$NM \"conftest.$ac_objext\"" 2>conftest.err > conftest.out)
+  cat conftest.err >&5
+  (eval echo "\"\$as_me:5068: output\"" >&5)
+  cat conftest.out >&5
+  if $GREP 'External.*some_variable' conftest.out > /dev/null; then
+    lt_cv_nm_interface="MS dumpbin"
+  fi
+  rm -f conftest*
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_nm_interface" >&5
+$as_echo "$lt_cv_nm_interface" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether ln -s works" >&5
+$as_echo_n "checking whether ln -s works... " >&6; }
+LN_S=$as_ln_s
+if test "$LN_S" = "ln -s"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no, using $LN_S" >&5
+$as_echo "no, using $LN_S" >&6; }
+fi
+
+# find the maximum length of command line arguments
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking the maximum length of command line arguments" >&5
+$as_echo_n "checking the maximum length of command line arguments... " >&6; }
+if test "${lt_cv_sys_max_cmd_len+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+    i=0
+  teststring="ABCD"
+
+  case $build_os in
+  msdosdjgpp*)
+    # On DJGPP, this test can blow up pretty badly due to problems in libc
+    # (any single argument exceeding 2000 bytes causes a buffer overrun
+    # during glob expansion).  Even if it were fixed, the result of this
+    # check would be larger than it should be.
+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right
+    ;;
+
+  gnu*)
+    # Under GNU Hurd, this test is not required because there is
+    # no limit to the length of command line arguments.
+    # Libtool will interpret -1 as no limit whatsoever
+    lt_cv_sys_max_cmd_len=-1;
+    ;;
+
+  cygwin* | mingw* | cegcc*)
+    # On Win9x/ME, this test blows up -- it succeeds, but takes
+    # about 5 minutes as the teststring grows exponentially.
+    # Worse, since 9x/ME are not pre-emptively multitasking,
+    # you end up with a "frozen" computer, even though with patience
+    # the test eventually succeeds (with a max line length of 256k).
+    # Instead, let's just punt: use the minimum linelength reported by
+    # all of the supported platforms: 8192 (on NT/2K/XP).
+    lt_cv_sys_max_cmd_len=8192;
+    ;;
+
+  amigaos*)
+    # On AmigaOS with pdksh, this test takes hours, literally.
+    # So we just punt and use a minimum line length of 8192.
+    lt_cv_sys_max_cmd_len=8192;
+    ;;
+
+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)
+    # This has been around since 386BSD, at least.  Likely further.
+    if test -x /sbin/sysctl; then
+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`
+    elif test -x /usr/sbin/sysctl; then
+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`
+    else
+      lt_cv_sys_max_cmd_len=65536	# usable default for all BSDs
+    fi
+    # And add a safety zone
+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
+    ;;
+
+  interix*)
+    # We know the value 262144 and hardcode it with a safety zone (like BSD)
+    lt_cv_sys_max_cmd_len=196608
+    ;;
+
+  osf*)
+    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure
+    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not
+    # nice to cause kernel panics so lets avoid the loop below.
+    # First set a reasonable default.
+    lt_cv_sys_max_cmd_len=16384
+    #
+    if test -x /sbin/sysconfig; then
+      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in
+        *1*) lt_cv_sys_max_cmd_len=-1 ;;
+      esac
+    fi
+    ;;
+  sco3.2v5*)
+    lt_cv_sys_max_cmd_len=102400
+    ;;
+  sysv5* | sco5v6* | sysv4.2uw2*)
+    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`
+    if test -n "$kargmax"; then
+      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[	 ]//'`
+    else
+      lt_cv_sys_max_cmd_len=32768
+    fi
+    ;;
+  *)
+    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`
+    if test -n "$lt_cv_sys_max_cmd_len"; then
+      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
+      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
+    else
+      # Make teststring a little bigger before we do anything with it.
+      # a 1K string should be a reasonable start.
+      for i in 1 2 3 4 5 6 7 8 ; do
+        teststring=$teststring$teststring
+      done
+      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}
+      # If test is not a shell built-in, we'll probably end up computing a
+      # maximum length that is only half of the actual maximum length, but
+      # we can't tell.
+      while { test "X"`$SHELL $0 --fallback-echo "X$teststring$teststring" 2>/dev/null` \
+	         = "XX$teststring$teststring"; } >/dev/null 2>&1 &&
+	      test $i != 17 # 1/2 MB should be enough
+      do
+        i=`expr $i + 1`
+        teststring=$teststring$teststring
+      done
+      # Only check the string length outside the loop.
+      lt_cv_sys_max_cmd_len=`expr "X$teststring" : ".*" 2>&1`
+      teststring=
+      # Add a significant safety factor because C++ compilers can tack on
+      # massive amounts of additional arguments before passing them to the
+      # linker.  It appears as though 1/2 is a usable value.
+      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 2`
+    fi
+    ;;
+  esac
+
+fi
+
+if test -n $lt_cv_sys_max_cmd_len ; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_sys_max_cmd_len" >&5
+$as_echo "$lt_cv_sys_max_cmd_len" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: none" >&5
+$as_echo "none" >&6; }
+fi
+max_cmd_len=$lt_cv_sys_max_cmd_len
+
+
+
+
+
+
+: ${CP="cp -f"}
+: ${MV="mv -f"}
+: ${RM="rm -f"}
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the shell understands some XSI constructs" >&5
+$as_echo_n "checking whether the shell understands some XSI constructs... " >&6; }
+# Try some XSI features
+xsi_shell=no
+( _lt_dummy="a/b/c"
+  test "${_lt_dummy##*/},${_lt_dummy%/*},"${_lt_dummy%"$_lt_dummy"}, \
+      = c,a/b,, \
+    && eval 'test $(( 1 + 1 )) -eq 2 \
+    && test "${#_lt_dummy}" -eq 5' ) >/dev/null 2>&1 \
+  && xsi_shell=yes
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $xsi_shell" >&5
+$as_echo "$xsi_shell" >&6; }
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the shell understands \"+=\"" >&5
+$as_echo_n "checking whether the shell understands \"+=\"... " >&6; }
+lt_shell_append=no
+( foo=bar; set foo baz; eval "$1+=\$2" && test "$foo" = barbaz ) \
+    >/dev/null 2>&1 \
+  && lt_shell_append=yes
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_shell_append" >&5
+$as_echo "$lt_shell_append" >&6; }
+
+
+if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
+  lt_unset=unset
+else
+  lt_unset=false
+fi
+
+
+
+
+
+# test EBCDIC or ASCII
+case `echo X|tr X '\101'` in
+ A) # ASCII based system
+    # \n is not interpreted correctly by Solaris 8 /usr/ucb/tr
+  lt_SP2NL='tr \040 \012'
+  lt_NL2SP='tr \015\012 \040\040'
+  ;;
+ *) # EBCDIC based system
+  lt_SP2NL='tr \100 \n'
+  lt_NL2SP='tr \r\n \100\100'
+  ;;
+esac
+
+
+
+
+
+
+
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $LD option to reload object files" >&5
+$as_echo_n "checking for $LD option to reload object files... " >&6; }
+if test "${lt_cv_ld_reload_flag+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_ld_reload_flag='-r'
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_reload_flag" >&5
+$as_echo "$lt_cv_ld_reload_flag" >&6; }
+reload_flag=$lt_cv_ld_reload_flag
+case $reload_flag in
+"" | " "*) ;;
+*) reload_flag=" $reload_flag" ;;
+esac
+reload_cmds='$LD$reload_flag -o $output$reload_objs'
+case $host_os in
+  darwin*)
+    if test "$GCC" = yes; then
+      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'
+    else
+      reload_cmds='$LD$reload_flag -o $output$reload_objs'
+    fi
+    ;;
+esac
+
+
+
+
+
+
+
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}objdump", so it can be a program name with args.
+set dummy ${ac_tool_prefix}objdump; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_OBJDUMP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$OBJDUMP"; then
+  ac_cv_prog_OBJDUMP="$OBJDUMP" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_OBJDUMP="${ac_tool_prefix}objdump"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+OBJDUMP=$ac_cv_prog_OBJDUMP
+if test -n "$OBJDUMP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OBJDUMP" >&5
+$as_echo "$OBJDUMP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_OBJDUMP"; then
+  ac_ct_OBJDUMP=$OBJDUMP
+  # Extract the first word of "objdump", so it can be a program name with args.
+set dummy objdump; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_OBJDUMP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_OBJDUMP"; then
+  ac_cv_prog_ac_ct_OBJDUMP="$ac_ct_OBJDUMP" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_OBJDUMP="objdump"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_OBJDUMP=$ac_cv_prog_ac_ct_OBJDUMP
+if test -n "$ac_ct_OBJDUMP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_OBJDUMP" >&5
+$as_echo "$ac_ct_OBJDUMP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_OBJDUMP" = x; then
+    OBJDUMP="false"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    OBJDUMP=$ac_ct_OBJDUMP
+  fi
+else
+  OBJDUMP="$ac_cv_prog_OBJDUMP"
+fi
+
+test -z "$OBJDUMP" && OBJDUMP=objdump
+
+
+
+
+
+
+
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to recognize dependent libraries" >&5
+$as_echo_n "checking how to recognize dependent libraries... " >&6; }
+if test "${lt_cv_deplibs_check_method+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_file_magic_cmd='$MAGIC_CMD'
+lt_cv_file_magic_test_file=
+lt_cv_deplibs_check_method='unknown'
+# Need to set the preceding variable on all platforms that support
+# interlibrary dependencies.
+# 'none' -- dependencies not supported.
+# `unknown' -- same as none, but documents that we really don't know.
+# 'pass_all' -- all dependencies passed with no checks.
+# 'test_compile' -- check by making test program.
+# 'file_magic [[regex]]' -- check by looking for files in library path
+# which responds to the $file_magic_cmd with a given extended regex.
+# If you have `file' or equivalent on your system and you're not sure
+# whether `pass_all' will *always* work, you probably want this one.
+
+case $host_os in
+aix[4-9]*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+beos*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+bsdi[45]*)
+  lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (shared object|dynamic lib)'
+  lt_cv_file_magic_cmd='/usr/bin/file -L'
+  lt_cv_file_magic_test_file=/shlib/libc.so
+  ;;
+
+cygwin*)
+  # func_win32_libid is a shell function defined in ltmain.sh
+  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'
+  lt_cv_file_magic_cmd='func_win32_libid'
+  ;;
+
+mingw* | pw32*)
+  # Base MSYS/MinGW do not provide the 'file' command needed by
+  # func_win32_libid shell function, so use a weaker test based on 'objdump',
+  # unless we find 'file', for example because we are cross-compiling.
+  if ( file / ) >/dev/null 2>&1; then
+    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'
+    lt_cv_file_magic_cmd='func_win32_libid'
+  else
+    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'
+    lt_cv_file_magic_cmd='$OBJDUMP -f'
+  fi
+  ;;
+
+cegcc)
+  # use the weaker test based on 'objdump'. See mingw*.
+  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'
+  lt_cv_file_magic_cmd='$OBJDUMP -f'
+  ;;
+
+darwin* | rhapsody*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+freebsd* | dragonfly*)
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then
+    case $host_cpu in
+    i*86 )
+      # Not sure whether the presence of OpenBSD here was a mistake.
+      # Let's accept both of them until this is cleared up.
+      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[3-9]86 (compact )?demand paged shared library'
+      lt_cv_file_magic_cmd=/usr/bin/file
+      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`
+      ;;
+    esac
+  else
+    lt_cv_deplibs_check_method=pass_all
+  fi
+  ;;
+
+gnu*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+hpux10.20* | hpux11*)
+  lt_cv_file_magic_cmd=/usr/bin/file
+  case $host_cpu in
+  ia64*)
+    lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - IA64'
+    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so
+    ;;
+  hppa*64*)
+    lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]'
+    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl
+    ;;
+  *)
+    lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|PA-RISC[0-9].[0-9]) shared library'
+    lt_cv_file_magic_test_file=/usr/lib/libc.sl
+    ;;
+  esac
+  ;;
+
+interix[3-9]*)
+  # PIC code is broken on Interix 3.x, that's why |\.a not |_pic\.a here
+  lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\.so|\.a)$'
+  ;;
+
+irix5* | irix6* | nonstopux*)
+  case $LD in
+  *-32|*"-32 ") libmagic=32-bit;;
+  *-n32|*"-n32 ") libmagic=N32;;
+  *-64|*"-64 ") libmagic=64-bit;;
+  *) libmagic=never-match;;
+  esac
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+# This must be Linux ELF.
+linux* | k*bsd*-gnu | kopensolaris*-gnu)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+netbsd* | netbsdelf*-gnu)
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then
+    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\.so\.[0-9]+\.[0-9]+|_pic\.a)$'
+  else
+    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\.so|_pic\.a)$'
+  fi
+  ;;
+
+newos6*)
+  lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (executable|dynamic lib)'
+  lt_cv_file_magic_cmd=/usr/bin/file
+  lt_cv_file_magic_test_file=/usr/lib/libnls.so
+  ;;
+
+*nto* | *qnx*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+openbsd*)
+  if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\.so\.[0-9]+\.[0-9]+|\.so|_pic\.a)$'
+  else
+    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\.so\.[0-9]+\.[0-9]+|_pic\.a)$'
+  fi
+  ;;
+
+osf3* | osf4* | osf5*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+rdos*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+solaris*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+sysv4 | sysv4.3*)
+  case $host_vendor in
+  motorola)
+    lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (shared object|dynamic lib) M[0-9][0-9]* Version [0-9]'
+    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`
+    ;;
+  ncr)
+    lt_cv_deplibs_check_method=pass_all
+    ;;
+  sequent)
+    lt_cv_file_magic_cmd='/bin/file'
+    lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [LM]SB (shared object|dynamic lib )'
+    ;;
+  sni)
+    lt_cv_file_magic_cmd='/bin/file'
+    lt_cv_deplibs_check_method="file_magic ELF [0-9][0-9]*-bit [LM]SB dynamic lib"
+    lt_cv_file_magic_test_file=/lib/libc.so
+    ;;
+  siemens)
+    lt_cv_deplibs_check_method=pass_all
+    ;;
+  pc)
+    lt_cv_deplibs_check_method=pass_all
+    ;;
+  esac
+  ;;
+
+tpf*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+esac
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_deplibs_check_method" >&5
+$as_echo "$lt_cv_deplibs_check_method" >&6; }
+file_magic_cmd=$lt_cv_file_magic_cmd
+deplibs_check_method=$lt_cv_deplibs_check_method
+test -z "$deplibs_check_method" && deplibs_check_method=unknown
+
+
+
+
+
+
+
+
+
+
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}ar", so it can be a program name with args.
+set dummy ${ac_tool_prefix}ar; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_AR+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$AR"; then
+  ac_cv_prog_AR="$AR" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_AR="${ac_tool_prefix}ar"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+AR=$ac_cv_prog_AR
+if test -n "$AR"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AR" >&5
+$as_echo "$AR" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_AR"; then
+  ac_ct_AR=$AR
+  # Extract the first word of "ar", so it can be a program name with args.
+set dummy ar; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_AR+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_AR"; then
+  ac_cv_prog_ac_ct_AR="$ac_ct_AR" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_AR="ar"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_AR=$ac_cv_prog_ac_ct_AR
+if test -n "$ac_ct_AR"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_AR" >&5
+$as_echo "$ac_ct_AR" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_AR" = x; then
+    AR="false"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    AR=$ac_ct_AR
+  fi
+else
+  AR="$ac_cv_prog_AR"
+fi
+
+test -z "$AR" && AR=ar
+test -z "$AR_FLAGS" && AR_FLAGS=cru
+
+
+
+
+
+
+
+
+
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}strip", so it can be a program name with args.
+set dummy ${ac_tool_prefix}strip; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_STRIP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$STRIP"; then
+  ac_cv_prog_STRIP="$STRIP" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_STRIP="${ac_tool_prefix}strip"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+STRIP=$ac_cv_prog_STRIP
+if test -n "$STRIP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $STRIP" >&5
+$as_echo "$STRIP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_STRIP"; then
+  ac_ct_STRIP=$STRIP
+  # Extract the first word of "strip", so it can be a program name with args.
+set dummy strip; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_STRIP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_STRIP"; then
+  ac_cv_prog_ac_ct_STRIP="$ac_ct_STRIP" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_STRIP="strip"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_STRIP=$ac_cv_prog_ac_ct_STRIP
+if test -n "$ac_ct_STRIP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_STRIP" >&5
+$as_echo "$ac_ct_STRIP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_STRIP" = x; then
+    STRIP=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    STRIP=$ac_ct_STRIP
+  fi
+else
+  STRIP="$ac_cv_prog_STRIP"
+fi
+
+test -z "$STRIP" && STRIP=:
+
+
+
+
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}ranlib", so it can be a program name with args.
+set dummy ${ac_tool_prefix}ranlib; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_RANLIB+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$RANLIB"; then
+  ac_cv_prog_RANLIB="$RANLIB" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_RANLIB="${ac_tool_prefix}ranlib"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+RANLIB=$ac_cv_prog_RANLIB
+if test -n "$RANLIB"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $RANLIB" >&5
+$as_echo "$RANLIB" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_RANLIB"; then
+  ac_ct_RANLIB=$RANLIB
+  # Extract the first word of "ranlib", so it can be a program name with args.
+set dummy ranlib; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_RANLIB+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_RANLIB"; then
+  ac_cv_prog_ac_ct_RANLIB="$ac_ct_RANLIB" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_RANLIB="ranlib"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_RANLIB=$ac_cv_prog_ac_ct_RANLIB
+if test -n "$ac_ct_RANLIB"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_RANLIB" >&5
+$as_echo "$ac_ct_RANLIB" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_RANLIB" = x; then
+    RANLIB=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    RANLIB=$ac_ct_RANLIB
+  fi
+else
+  RANLIB="$ac_cv_prog_RANLIB"
+fi
+
+test -z "$RANLIB" && RANLIB=:
+
+
+
+
+
+
+# Determine commands to create old-style static archives.
+old_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'
+old_postinstall_cmds='chmod 644 $oldlib'
+old_postuninstall_cmds=
+
+if test -n "$RANLIB"; then
+  case $host_os in
+  openbsd*)
+    old_postinstall_cmds="$old_postinstall_cmds~\$RANLIB -t \$oldlib"
+    ;;
+  *)
+    old_postinstall_cmds="$old_postinstall_cmds~\$RANLIB \$oldlib"
+    ;;
+  esac
+  old_archive_cmds="$old_archive_cmds~\$RANLIB \$oldlib"
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+# If no C compiler was specified, use CC.
+LTCC=${LTCC-"$CC"}
+
+# If no C compiler flags were specified, use CFLAGS.
+LTCFLAGS=${LTCFLAGS-"$CFLAGS"}
+
+# Allow CC to be a program name with arguments.
+compiler=$CC
+
+
+# Check for command to grab the raw symbol name followed by C symbol from nm.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking command to parse $NM output from $compiler object" >&5
+$as_echo_n "checking command to parse $NM output from $compiler object... " >&6; }
+if test "${lt_cv_sys_global_symbol_pipe+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+
+# These are sane defaults that work on at least a few old systems.
+# [They come from Ultrix.  What could be older than Ultrix?!! ;)]
+
+# Character class describing NM global symbol codes.
+symcode='[BCDEGRST]'
+
+# Regexp to match symbols that can be accessed directly from C.
+sympat='\([_A-Za-z][_A-Za-z0-9]*\)'
+
+# Define system-specific variables.
+case $host_os in
+aix*)
+  symcode='[BCDT]'
+  ;;
+cygwin* | mingw* | pw32* | cegcc*)
+  symcode='[ABCDGISTW]'
+  ;;
+hpux*)
+  if test "$host_cpu" = ia64; then
+    symcode='[ABCDEGRST]'
+  fi
+  ;;
+irix* | nonstopux*)
+  symcode='[BCDEGRST]'
+  ;;
+osf*)
+  symcode='[BCDEGQRST]'
+  ;;
+solaris*)
+  symcode='[BDRT]'
+  ;;
+sco3.2v5*)
+  symcode='[DT]'
+  ;;
+sysv4.2uw2*)
+  symcode='[DT]'
+  ;;
+sysv5* | sco5v6* | unixware* | OpenUNIX*)
+  symcode='[ABDT]'
+  ;;
+sysv4)
+  symcode='[DFNSTU]'
+  ;;
+esac
+
+# If we're using GNU nm, then use its standard symbol codes.
+case `$NM -V 2>&1` in
+*GNU* | *'with BFD'*)
+  symcode='[ABCDGIRSTW]' ;;
+esac
+
+# Transform an extracted symbol line into a proper C declaration.
+# Some systems (esp. on ia64) link data and code symbols differently,
+# so use this general approach.
+lt_cv_sys_global_symbol_to_cdecl="sed -n -e 's/^T .* \(.*\)$/extern int \1();/p' -e 's/^$symcode* .* \(.*\)$/extern char \1;/p'"
+
+# Transform an extracted symbol line into symbol name and symbol address
+lt_cv_sys_global_symbol_to_c_name_address="sed -n -e 's/^: \([^ ]*\) $/  {\\\"\1\\\", (void *) 0},/p' -e 's/^$symcode* \([^ ]*\) \([^ ]*\)$/  {\"\2\", (void *) \&\2},/p'"
+lt_cv_sys_global_symbol_to_c_name_address_lib_prefix="sed -n -e 's/^: \([^ ]*\) $/  {\\\"\1\\\", (void *) 0},/p' -e 's/^$symcode* \([^ ]*\) \(lib[^ ]*\)$/  {\"\2\", (void *) \&\2},/p' -e 's/^$symcode* \([^ ]*\) \([^ ]*\)$/  {\"lib\2\", (void *) \&\2},/p'"
+
+# Handle CRLF in mingw tool chain
+opt_cr=
+case $build_os in
+mingw*)
+  opt_cr=`$ECHO 'x\{0,1\}' | tr x '\015'` # option cr in regexp
+  ;;
+esac
+
+# Try without a prefix underscore, then with it.
+for ac_symprfx in "" "_"; do
+
+  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.
+  symxfrm="\\1 $ac_symprfx\\2 \\2"
+
+  # Write the raw and C identifiers.
+  if test "$lt_cv_nm_interface" = "MS dumpbin"; then
+    # Fake it for dumpbin and say T for any non-static function
+    # and D for any global variable.
+    # Also find C++ and __fastcall symbols from MSVC++,
+    # which start with @ or ?.
+    lt_cv_sys_global_symbol_pipe="$AWK '"\
+"     {last_section=section; section=\$ 3};"\
+"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};"\
+"     \$ 0!~/External *\|/{next};"\
+"     / 0+ UNDEF /{next}; / UNDEF \([^|]\)*()/{next};"\
+"     {if(hide[section]) next};"\
+"     {f=0}; \$ 0~/\(\).*\|/{f=1}; {printf f ? \"T \" : \"D \"};"\
+"     {split(\$ 0, a, /\||\r/); split(a[2], s)};"\
+"     s[1]~/^[@?]/{print s[1], s[1]; next};"\
+"     s[1]~prfx {split(s[1],t,\"@\"); print t[1], substr(t[1],length(prfx))}"\
+"     ' prfx=^$ac_symprfx"
+  else
+    lt_cv_sys_global_symbol_pipe="sed -n -e 's/^.*[	 ]\($symcode$symcode*\)[	 ][	 ]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'"
+  fi
+
+  # Check to see that the pipe works correctly.
+  pipe_works=no
+
+  rm -f conftest*
+  cat > conftest.$ac_ext <<_LT_EOF
+#ifdef __cplusplus
+extern "C" {
+#endif
+char nm_test_var;
+void nm_test_func(void);
+void nm_test_func(void){}
+#ifdef __cplusplus
+}
+#endif
+int main(){nm_test_var='a';nm_test_func();return(0);}
+_LT_EOF
+
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+    # Now try to grab the symbols.
+    nlist=conftest.nm
+    if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $nlist\""; } >&5
+  (eval $NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $nlist) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && test -s "$nlist"; then
+      # Try sorting and uniquifying the output.
+      if sort "$nlist" | uniq > "$nlist"T; then
+	mv -f "$nlist"T "$nlist"
+      else
+	rm -f "$nlist"T
+      fi
+
+      # Make sure that we snagged all the symbols we need.
+      if $GREP ' nm_test_var$' "$nlist" >/dev/null; then
+	if $GREP ' nm_test_func$' "$nlist" >/dev/null; then
+	  cat <<_LT_EOF > conftest.$ac_ext
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+_LT_EOF
+	  # Now generate the symbol file.
+	  eval "$lt_cv_sys_global_symbol_to_cdecl"' < "$nlist" | $GREP -v main >> conftest.$ac_ext'
+
+	  cat <<_LT_EOF >> conftest.$ac_ext
+
+/* The mapping between symbol names and symbols.  */
+const struct {
+  const char *name;
+  void       *address;
+}
+lt__PROGRAM__LTX_preloaded_symbols[] =
+{
+  { "@PROGRAM@", (void *) 0 },
+_LT_EOF
+	  $SED "s/^$symcode$symcode* \(.*\) \(.*\)$/  {\"\2\", (void *) \&\2},/" < "$nlist" | $GREP -v main >> conftest.$ac_ext
+	  cat <<\_LT_EOF >> conftest.$ac_ext
+  {0, (void *) 0}
+};
+
+/* This works around a problem in FreeBSD linker */
+#ifdef FREEBSD_WORKAROUND
+static const void *lt_preloaded_setup() {
+  return lt__PROGRAM__LTX_preloaded_symbols;
+}
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+_LT_EOF
+	  # Now try linking the two files.
+	  mv conftest.$ac_objext conftstm.$ac_objext
+	  lt_save_LIBS="$LIBS"
+	  lt_save_CFLAGS="$CFLAGS"
+	  LIBS="conftstm.$ac_objext"
+	  CFLAGS="$CFLAGS$lt_prog_compiler_no_builtin_flag"
+	  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_link\""; } >&5
+  (eval $ac_link) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && test -s conftest${ac_exeext}; then
+	    pipe_works=yes
+	  fi
+	  LIBS="$lt_save_LIBS"
+	  CFLAGS="$lt_save_CFLAGS"
+	else
+	  echo "cannot find nm_test_func in $nlist" >&5
+	fi
+      else
+	echo "cannot find nm_test_var in $nlist" >&5
+      fi
+    else
+      echo "cannot run $lt_cv_sys_global_symbol_pipe" >&5
+    fi
+  else
+    echo "$progname: failed program was:" >&5
+    cat conftest.$ac_ext >&5
+  fi
+  rm -rf conftest* conftst*
+
+  # Do not use the global_symbol_pipe unless it works.
+  if test "$pipe_works" = yes; then
+    break
+  else
+    lt_cv_sys_global_symbol_pipe=
+  fi
+done
+
+fi
+
+if test -z "$lt_cv_sys_global_symbol_pipe"; then
+  lt_cv_sys_global_symbol_to_cdecl=
+fi
+if test -z "$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: failed" >&5
+$as_echo "failed" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: ok" >&5
+$as_echo "ok" >&6; }
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+# Check whether --enable-libtool-lock was given.
+if test "${enable_libtool_lock+set}" = set; then :
+  enableval=$enable_libtool_lock;
+fi
+
+test "x$enable_libtool_lock" != xno && enable_libtool_lock=yes
+
+# Some flags need to be propagated to the compiler or linker for good
+# libtool support.
+case $host in
+ia64-*-hpux*)
+  # Find out which ABI we are using.
+  echo 'int i;' > conftest.$ac_ext
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+    case `/usr/bin/file conftest.$ac_objext` in
+      *ELF-32*)
+	HPUX_IA64_MODE="32"
+	;;
+      *ELF-64*)
+	HPUX_IA64_MODE="64"
+	;;
+    esac
+  fi
+  rm -rf conftest*
+  ;;
+*-*-irix6*)
+  # Find out which ABI we are using.
+  echo '#line 6274 "configure"' > conftest.$ac_ext
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+    if test "$lt_cv_prog_gnu_ld" = yes; then
+      case `/usr/bin/file conftest.$ac_objext` in
+	*32-bit*)
+	  LD="${LD-ld} -melf32bsmip"
+	  ;;
+	*N32*)
+	  LD="${LD-ld} -melf32bmipn32"
+	  ;;
+	*64-bit*)
+	  LD="${LD-ld} -melf64bmip"
+	;;
+      esac
+    else
+      case `/usr/bin/file conftest.$ac_objext` in
+	*32-bit*)
+	  LD="${LD-ld} -32"
+	  ;;
+	*N32*)
+	  LD="${LD-ld} -n32"
+	  ;;
+	*64-bit*)
+	  LD="${LD-ld} -64"
+	  ;;
+      esac
+    fi
+  fi
+  rm -rf conftest*
+  ;;
+
+x86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \
+s390*-*linux*|s390*-*tpf*|sparc*-*linux*)
+  # Find out which ABI we are using.
+  echo 'int i;' > conftest.$ac_ext
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+    case `/usr/bin/file conftest.o` in
+      *32-bit*)
+	case $host in
+	  x86_64-*kfreebsd*-gnu)
+	    LD="${LD-ld} -m elf_i386_fbsd"
+	    ;;
+	  x86_64-*linux*)
+	    LD="${LD-ld} -m elf_i386"
+	    ;;
+	  ppc64-*linux*|powerpc64-*linux*)
+	    LD="${LD-ld} -m elf32ppclinux"
+	    ;;
+	  s390x-*linux*)
+	    LD="${LD-ld} -m elf_s390"
+	    ;;
+	  sparc64-*linux*)
+	    LD="${LD-ld} -m elf32_sparc"
+	    ;;
+	esac
+	;;
+      *64-bit*)
+	case $host in
+	  x86_64-*kfreebsd*-gnu)
+	    LD="${LD-ld} -m elf_x86_64_fbsd"
+	    ;;
+	  x86_64-*linux*)
+	    LD="${LD-ld} -m elf_x86_64"
+	    ;;
+	  ppc*-*linux*|powerpc*-*linux*)
+	    LD="${LD-ld} -m elf64ppc"
+	    ;;
+	  s390*-*linux*|s390*-*tpf*)
+	    LD="${LD-ld} -m elf64_s390"
+	    ;;
+	  sparc*-*linux*)
+	    LD="${LD-ld} -m elf64_sparc"
+	    ;;
+	esac
+	;;
+    esac
+  fi
+  rm -rf conftest*
+  ;;
+
+*-*-sco3.2v5*)
+  # On SCO OpenServer 5, we need -belf to get full-featured binaries.
+  SAVE_CFLAGS="$CFLAGS"
+  CFLAGS="$CFLAGS -belf"
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the C compiler needs -belf" >&5
+$as_echo_n "checking whether the C compiler needs -belf... " >&6; }
+if test "${lt_cv_cc_needs_belf+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  lt_cv_cc_needs_belf=yes
+else
+  lt_cv_cc_needs_belf=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+     ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_cc_needs_belf" >&5
+$as_echo "$lt_cv_cc_needs_belf" >&6; }
+  if test x"$lt_cv_cc_needs_belf" != x"yes"; then
+    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf
+    CFLAGS="$SAVE_CFLAGS"
+  fi
+  ;;
+sparc*-*solaris*)
+  # Find out which ABI we are using.
+  echo 'int i;' > conftest.$ac_ext
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+    case `/usr/bin/file conftest.o` in
+    *64-bit*)
+      case $lt_cv_prog_gnu_ld in
+      yes*) LD="${LD-ld} -m elf64_sparc" ;;
+      *)
+	if ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then
+	  LD="${LD-ld} -64"
+	fi
+	;;
+      esac
+      ;;
+    esac
+  fi
+  rm -rf conftest*
+  ;;
+esac
+
+need_locks="$enable_libtool_lock"
+
+
+  case $host_os in
+    rhapsody* | darwin*)
+    if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}dsymutil", so it can be a program name with args.
+set dummy ${ac_tool_prefix}dsymutil; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_DSYMUTIL+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$DSYMUTIL"; then
+  ac_cv_prog_DSYMUTIL="$DSYMUTIL" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_DSYMUTIL="${ac_tool_prefix}dsymutil"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+DSYMUTIL=$ac_cv_prog_DSYMUTIL
+if test -n "$DSYMUTIL"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DSYMUTIL" >&5
+$as_echo "$DSYMUTIL" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_DSYMUTIL"; then
+  ac_ct_DSYMUTIL=$DSYMUTIL
+  # Extract the first word of "dsymutil", so it can be a program name with args.
+set dummy dsymutil; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_DSYMUTIL+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_DSYMUTIL"; then
+  ac_cv_prog_ac_ct_DSYMUTIL="$ac_ct_DSYMUTIL" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_DSYMUTIL="dsymutil"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_DSYMUTIL=$ac_cv_prog_ac_ct_DSYMUTIL
+if test -n "$ac_ct_DSYMUTIL"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_DSYMUTIL" >&5
+$as_echo "$ac_ct_DSYMUTIL" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_DSYMUTIL" = x; then
+    DSYMUTIL=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DSYMUTIL=$ac_ct_DSYMUTIL
+  fi
+else
+  DSYMUTIL="$ac_cv_prog_DSYMUTIL"
+fi
+
+    if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}nmedit", so it can be a program name with args.
+set dummy ${ac_tool_prefix}nmedit; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_NMEDIT+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$NMEDIT"; then
+  ac_cv_prog_NMEDIT="$NMEDIT" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_NMEDIT="${ac_tool_prefix}nmedit"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+NMEDIT=$ac_cv_prog_NMEDIT
+if test -n "$NMEDIT"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $NMEDIT" >&5
+$as_echo "$NMEDIT" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_NMEDIT"; then
+  ac_ct_NMEDIT=$NMEDIT
+  # Extract the first word of "nmedit", so it can be a program name with args.
+set dummy nmedit; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_NMEDIT+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_NMEDIT"; then
+  ac_cv_prog_ac_ct_NMEDIT="$ac_ct_NMEDIT" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_NMEDIT="nmedit"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_NMEDIT=$ac_cv_prog_ac_ct_NMEDIT
+if test -n "$ac_ct_NMEDIT"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_NMEDIT" >&5
+$as_echo "$ac_ct_NMEDIT" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_NMEDIT" = x; then
+    NMEDIT=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    NMEDIT=$ac_ct_NMEDIT
+  fi
+else
+  NMEDIT="$ac_cv_prog_NMEDIT"
+fi
+
+    if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}lipo", so it can be a program name with args.
+set dummy ${ac_tool_prefix}lipo; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_LIPO+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$LIPO"; then
+  ac_cv_prog_LIPO="$LIPO" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_LIPO="${ac_tool_prefix}lipo"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+LIPO=$ac_cv_prog_LIPO
+if test -n "$LIPO"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LIPO" >&5
+$as_echo "$LIPO" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_LIPO"; then
+  ac_ct_LIPO=$LIPO
+  # Extract the first word of "lipo", so it can be a program name with args.
+set dummy lipo; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_LIPO+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_LIPO"; then
+  ac_cv_prog_ac_ct_LIPO="$ac_ct_LIPO" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_LIPO="lipo"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_LIPO=$ac_cv_prog_ac_ct_LIPO
+if test -n "$ac_ct_LIPO"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_LIPO" >&5
+$as_echo "$ac_ct_LIPO" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_LIPO" = x; then
+    LIPO=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    LIPO=$ac_ct_LIPO
+  fi
+else
+  LIPO="$ac_cv_prog_LIPO"
+fi
+
+    if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}otool", so it can be a program name with args.
+set dummy ${ac_tool_prefix}otool; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_OTOOL+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$OTOOL"; then
+  ac_cv_prog_OTOOL="$OTOOL" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_OTOOL="${ac_tool_prefix}otool"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+OTOOL=$ac_cv_prog_OTOOL
+if test -n "$OTOOL"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OTOOL" >&5
+$as_echo "$OTOOL" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_OTOOL"; then
+  ac_ct_OTOOL=$OTOOL
+  # Extract the first word of "otool", so it can be a program name with args.
+set dummy otool; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_OTOOL+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_OTOOL"; then
+  ac_cv_prog_ac_ct_OTOOL="$ac_ct_OTOOL" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_OTOOL="otool"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_OTOOL=$ac_cv_prog_ac_ct_OTOOL
+if test -n "$ac_ct_OTOOL"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_OTOOL" >&5
+$as_echo "$ac_ct_OTOOL" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_OTOOL" = x; then
+    OTOOL=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    OTOOL=$ac_ct_OTOOL
+  fi
+else
+  OTOOL="$ac_cv_prog_OTOOL"
+fi
+
+    if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}otool64", so it can be a program name with args.
+set dummy ${ac_tool_prefix}otool64; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_OTOOL64+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$OTOOL64"; then
+  ac_cv_prog_OTOOL64="$OTOOL64" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_OTOOL64="${ac_tool_prefix}otool64"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+OTOOL64=$ac_cv_prog_OTOOL64
+if test -n "$OTOOL64"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OTOOL64" >&5
+$as_echo "$OTOOL64" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_prog_OTOOL64"; then
+  ac_ct_OTOOL64=$OTOOL64
+  # Extract the first word of "otool64", so it can be a program name with args.
+set dummy otool64; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_OTOOL64+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_OTOOL64"; then
+  ac_cv_prog_ac_ct_OTOOL64="$ac_ct_OTOOL64" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_OTOOL64="otool64"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_OTOOL64=$ac_cv_prog_ac_ct_OTOOL64
+if test -n "$ac_ct_OTOOL64"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_OTOOL64" >&5
+$as_echo "$ac_ct_OTOOL64" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_ct_OTOOL64" = x; then
+    OTOOL64=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    OTOOL64=$ac_ct_OTOOL64
+  fi
+else
+  OTOOL64="$ac_cv_prog_OTOOL64"
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for -single_module linker flag" >&5
+$as_echo_n "checking for -single_module linker flag... " >&6; }
+if test "${lt_cv_apple_cc_single_mod+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_apple_cc_single_mod=no
+      if test -z "${LT_MULTI_MODULE}"; then
+	# By default we will add the -single_module flag. You can override
+	# by either setting the environment variable LT_MULTI_MODULE
+	# non-empty at configure time, or by adding -multi_module to the
+	# link flags.
+	rm -rf libconftest.dylib*
+	echo "int foo(void){return 1;}" > conftest.c
+	echo "$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \
+-dynamiclib -Wl,-single_module conftest.c" >&5
+	$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \
+	  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err
+        _lt_result=$?
+	if test -f libconftest.dylib && test ! -s conftest.err && test $_lt_result = 0; then
+	  lt_cv_apple_cc_single_mod=yes
+	else
+	  cat conftest.err >&5
+	fi
+	rm -rf libconftest.dylib*
+	rm -f conftest.*
+      fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_apple_cc_single_mod" >&5
+$as_echo "$lt_cv_apple_cc_single_mod" >&6; }
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for -exported_symbols_list linker flag" >&5
+$as_echo_n "checking for -exported_symbols_list linker flag... " >&6; }
+if test "${lt_cv_ld_exported_symbols_list+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_ld_exported_symbols_list=no
+      save_LDFLAGS=$LDFLAGS
+      echo "_main" > conftest.sym
+      LDFLAGS="$LDFLAGS -Wl,-exported_symbols_list,conftest.sym"
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  lt_cv_ld_exported_symbols_list=yes
+else
+  lt_cv_ld_exported_symbols_list=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+	LDFLAGS="$save_LDFLAGS"
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_exported_symbols_list" >&5
+$as_echo "$lt_cv_ld_exported_symbols_list" >&6; }
+    case $host_os in
+    rhapsody* | darwin1.[012])
+      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;
+    darwin1.*)
+      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;
+    darwin*) # darwin 5.x on
+      # if running on 10.5 or later, the deployment target defaults
+      # to the OS version, if on x86, and 10.4, the deployment
+      # target defaults to 10.4. Don't you love it?
+      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in
+	10.0,*86*-darwin8*|10.0,*-darwin[91]*)
+	  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
+	10.[012]*)
+	  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;
+	10.*)
+	  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
+      esac
+    ;;
+  esac
+    if test "$lt_cv_apple_cc_single_mod" = "yes"; then
+      _lt_dar_single_mod='$single_module'
+    fi
+    if test "$lt_cv_ld_exported_symbols_list" = "yes"; then
+      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'
+    else
+      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'
+    fi
+    if test "$DSYMUTIL" != ":"; then
+      _lt_dsymutil='~$DSYMUTIL $lib || :'
+    else
+      _lt_dsymutil=
+    fi
+    ;;
+  esac
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C preprocessor" >&5
+$as_echo_n "checking how to run the C preprocessor... " >&6; }
+# On Suns, sometimes $CPP names a directory.
+if test -n "$CPP" && test -d "$CPP"; then
+  CPP=
+fi
+if test -z "$CPP"; then
+  if test "${ac_cv_prog_CPP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+      # Double quotes because CPP needs to be expanded
+    for CPP in "$CC -E" "$CC -E -traditional-cpp" "/lib/cpp"
+    do
+      ac_preproc_ok=false
+for ac_c_preproc_warn_flag in '' yes
+do
+  # Use a header file that comes with gcc, so configuring glibc
+  # with a fresh cross-compiler works.
+  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+  # <limits.h> exists even on freestanding compilers.
+  # On the NeXT, cc -E runs the code through the compiler's parser,
+  # not just through cpp. "Syntax error" is here to catch this case.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+		     Syntax error
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+else
+  # Broken: fails on valid input.
+continue
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+  # OK, works on sane cases.  Now check whether nonexistent headers
+  # can be detected and how.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ac_nonexistent.h>
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+  # Broken: success on invalid input.
+continue
+else
+  # Passes both tests.
+ac_preproc_ok=:
+break
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+done
+# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
+rm -f conftest.i conftest.err conftest.$ac_ext
+if $ac_preproc_ok; then :
+  break
+fi
+
+    done
+    ac_cv_prog_CPP=$CPP
+
+fi
+  CPP=$ac_cv_prog_CPP
+else
+  ac_cv_prog_CPP=$CPP
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CPP" >&5
+$as_echo "$CPP" >&6; }
+ac_preproc_ok=false
+for ac_c_preproc_warn_flag in '' yes
+do
+  # Use a header file that comes with gcc, so configuring glibc
+  # with a fresh cross-compiler works.
+  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+  # <limits.h> exists even on freestanding compilers.
+  # On the NeXT, cc -E runs the code through the compiler's parser,
+  # not just through cpp. "Syntax error" is here to catch this case.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+		     Syntax error
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+else
+  # Broken: fails on valid input.
+continue
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+  # OK, works on sane cases.  Now check whether nonexistent headers
+  # can be detected and how.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ac_nonexistent.h>
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+  # Broken: success on invalid input.
+continue
+else
+  # Passes both tests.
+ac_preproc_ok=:
+break
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+done
+# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
+rm -f conftest.i conftest.err conftest.$ac_ext
+if $ac_preproc_ok; then :
+
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "C preprocessor \"$CPP\" fails sanity check
+See \`config.log' for more details" "$LINENO" 5 ; }
+fi
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for ANSI C header files" >&5
+$as_echo_n "checking for ANSI C header files... " >&6; }
+if test "${ac_cv_header_stdc+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+#include <float.h>
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_header_stdc=yes
+else
+  ac_cv_header_stdc=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+if test $ac_cv_header_stdc = yes; then
+  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <string.h>
+
+_ACEOF
+if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
+  $EGREP "memchr" >/dev/null 2>&1; then :
+
+else
+  ac_cv_header_stdc=no
+fi
+rm -f conftest*
+
+fi
+
+if test $ac_cv_header_stdc = yes; then
+  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdlib.h>
+
+_ACEOF
+if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
+  $EGREP "free" >/dev/null 2>&1; then :
+
+else
+  ac_cv_header_stdc=no
+fi
+rm -f conftest*
+
+fi
+
+if test $ac_cv_header_stdc = yes; then
+  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.
+  if test "$cross_compiling" = yes; then :
+  :
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ctype.h>
+#include <stdlib.h>
+#if ((' ' & 0x0FF) == 0x020)
+# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
+# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
+#else
+# define ISLOWER(c) \
+		   (('a' <= (c) && (c) <= 'i') \
+		     || ('j' <= (c) && (c) <= 'r') \
+		     || ('s' <= (c) && (c) <= 'z'))
+# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))
+#endif
+
+#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
+int
+main ()
+{
+  int i;
+  for (i = 0; i < 256; i++)
+    if (XOR (islower (i), ISLOWER (i))
+	|| toupper (i) != TOUPPER (i))
+      return 2;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+else
+  ac_cv_header_stdc=no
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_header_stdc" >&5
+$as_echo "$ac_cv_header_stdc" >&6; }
+if test $ac_cv_header_stdc = yes; then
+
+$as_echo "#define STDC_HEADERS 1" >>confdefs.h
+
+fi
+
+# On IRIX 5.3, sys/types and inttypes.h are conflicting.
+for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \
+		  inttypes.h stdint.h unistd.h
+do :
+  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
+ac_fn_c_check_header_compile "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default
+"
+if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
+  cat >>confdefs.h <<_ACEOF
+#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
+_ACEOF
+
+fi
+
+done
+
+
+for ac_header in dlfcn.h
+do :
+  ac_fn_c_check_header_compile "$LINENO" "dlfcn.h" "ac_cv_header_dlfcn_h" "$ac_includes_default
+"
+if test "x$ac_cv_header_dlfcn_h" = x""yes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_DLFCN_H 1
+_ACEOF
+
+fi
+
+done
+
+
+
+# Set options
+
+
+
+        enable_dlopen=no
+
+
+  enable_win32_dll=no
+
+
+            # Check whether --enable-shared was given.
+if test "${enable_shared+set}" = set; then :
+  enableval=$enable_shared; p=${PACKAGE-default}
+    case $enableval in
+    yes) enable_shared=yes ;;
+    no) enable_shared=no ;;
+    *)
+      enable_shared=no
+      # Look at the argument we got.  We use all the common list separators.
+      lt_save_ifs="$IFS"; IFS="${IFS}$PATH_SEPARATOR,"
+      for pkg in $enableval; do
+	IFS="$lt_save_ifs"
+	if test "X$pkg" = "X$p"; then
+	  enable_shared=yes
+	fi
+      done
+      IFS="$lt_save_ifs"
+      ;;
+    esac
+else
+  enable_shared=yes
+fi
+
+
+
+
+
+
+
+
+
+
+
+# Check whether --with-pic was given.
+if test "${with_pic+set}" = set; then :
+  withval=$with_pic; pic_mode="$withval"
+else
+  pic_mode=default
+fi
+
+
+test -z "$pic_mode" && pic_mode=default
+
+
+
+
+
+
+
+  # Check whether --enable-fast-install was given.
+if test "${enable_fast_install+set}" = set; then :
+  enableval=$enable_fast_install; p=${PACKAGE-default}
+    case $enableval in
+    yes) enable_fast_install=yes ;;
+    no) enable_fast_install=no ;;
+    *)
+      enable_fast_install=no
+      # Look at the argument we got.  We use all the common list separators.
+      lt_save_ifs="$IFS"; IFS="${IFS}$PATH_SEPARATOR,"
+      for pkg in $enableval; do
+	IFS="$lt_save_ifs"
+	if test "X$pkg" = "X$p"; then
+	  enable_fast_install=yes
+	fi
+      done
+      IFS="$lt_save_ifs"
+      ;;
+    esac
+else
+  enable_fast_install=yes
+fi
+
+
+
+
+
+
+
+
+
+
+
+# This can be used to rebuild libtool when needed
+LIBTOOL_DEPS="$ltmain"
+
+# Always use our own libtool.
+LIBTOOL='$(SHELL) $(top_builddir)/libtool'
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+test -z "$LN_S" && LN_S="ln -s"
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+if test -n "${ZSH_VERSION+set}" ; then
+   setopt NO_GLOB_SUBST
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for objdir" >&5
+$as_echo_n "checking for objdir... " >&6; }
+if test "${lt_cv_objdir+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  rm -f .libs 2>/dev/null
+mkdir .libs 2>/dev/null
+if test -d .libs; then
+  lt_cv_objdir=.libs
+else
+  # MS-DOS does not allow filenames that begin with a dot.
+  lt_cv_objdir=_libs
+fi
+rmdir .libs 2>/dev/null
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_objdir" >&5
+$as_echo "$lt_cv_objdir" >&6; }
+objdir=$lt_cv_objdir
+
+
+
+
+
+cat >>confdefs.h <<_ACEOF
+#define LT_OBJDIR "$lt_cv_objdir/"
+_ACEOF
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+case $host_os in
+aix3*)
+  # AIX sometimes has problems with the GCC collect2 program.  For some
+  # reason, if we set the COLLECT_NAMES environment variable, the problems
+  # vanish in a puff of smoke.
+  if test "X${COLLECT_NAMES+set}" != Xset; then
+    COLLECT_NAMES=
+    export COLLECT_NAMES
+  fi
+  ;;
+esac
+
+# Sed substitution that helps us do robust quoting.  It backslashifies
+# metacharacters that are still active within double-quoted strings.
+sed_quote_subst='s/\(["`$\\]\)/\\\1/g'
+
+# Same as above, but do not quote variable references.
+double_quote_subst='s/\(["`\\]\)/\\\1/g'
+
+# Sed substitution to delay expansion of an escaped shell variable in a
+# double_quote_subst'ed string.
+delay_variable_subst='s/\\\\\\\\\\\$/\\\\\\$/g'
+
+# Sed substitution to delay expansion of an escaped single quote.
+delay_single_quote_subst='s/'\''/'\'\\\\\\\'\''/g'
+
+# Sed substitution to avoid accidental globbing in evaled expressions
+no_glob_subst='s/\*/\\\*/g'
+
+# Global variables:
+ofile=libtool
+can_build_shared=yes
+
+# All known linkers require a `.a' archive for static linking (except MSVC,
+# which needs '.lib').
+libext=a
+
+with_gnu_ld="$lt_cv_prog_gnu_ld"
+
+old_CC="$CC"
+old_CFLAGS="$CFLAGS"
+
+# Set sane defaults for various variables
+test -z "$CC" && CC=cc
+test -z "$LTCC" && LTCC=$CC
+test -z "$LTCFLAGS" && LTCFLAGS=$CFLAGS
+test -z "$LD" && LD=ld
+test -z "$ac_objext" && ac_objext=o
+
+for cc_temp in $compiler""; do
+  case $cc_temp in
+    compile | *[\\/]compile | ccache | *[\\/]ccache ) ;;
+    distcc | *[\\/]distcc | purify | *[\\/]purify ) ;;
+    \-*) ;;
+    *) break;;
+  esac
+done
+cc_basename=`$ECHO "X$cc_temp" | $Xsed -e 's%.*/%%' -e "s%^$host_alias-%%"`
+
+
+# Only perform the check for file, if the check method requires it
+test -z "$MAGIC_CMD" && MAGIC_CMD=file
+case $deplibs_check_method in
+file_magic*)
+  if test "$file_magic_cmd" = '$MAGIC_CMD'; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ${ac_tool_prefix}file" >&5
+$as_echo_n "checking for ${ac_tool_prefix}file... " >&6; }
+if test "${lt_cv_path_MAGIC_CMD+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $MAGIC_CMD in
+[\\/*] |  ?:[\\/]*)
+  lt_cv_path_MAGIC_CMD="$MAGIC_CMD" # Let the user override the test with a path.
+  ;;
+*)
+  lt_save_MAGIC_CMD="$MAGIC_CMD"
+  lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+  ac_dummy="/usr/bin$PATH_SEPARATOR$PATH"
+  for ac_dir in $ac_dummy; do
+    IFS="$lt_save_ifs"
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/${ac_tool_prefix}file; then
+      lt_cv_path_MAGIC_CMD="$ac_dir/${ac_tool_prefix}file"
+      if test -n "$file_magic_test_file"; then
+	case $deplibs_check_method in
+	"file_magic "*)
+	  file_magic_regex=`expr "$deplibs_check_method" : "file_magic \(.*\)"`
+	  MAGIC_CMD="$lt_cv_path_MAGIC_CMD"
+	  if eval $file_magic_cmd \$file_magic_test_file 2> /dev/null |
+	    $EGREP "$file_magic_regex" > /dev/null; then
+	    :
+	  else
+	    cat <<_LT_EOF 1>&2
+
+*** Warning: the command libtool uses to detect shared libraries,
+*** $file_magic_cmd, produces output that libtool cannot recognize.
+*** The result is that libtool may fail to recognize shared libraries
+*** as such.  This will affect the creation of libtool libraries that
+*** depend on shared libraries, but programs linked with such libtool
+*** libraries will work regardless of this problem.  Nevertheless, you
+*** may want to report the problem to your system manager and/or to
+*** bug-libtool@gnu.org
+
+_LT_EOF
+	  fi ;;
+	esac
+      fi
+      break
+    fi
+  done
+  IFS="$lt_save_ifs"
+  MAGIC_CMD="$lt_save_MAGIC_CMD"
+  ;;
+esac
+fi
+
+MAGIC_CMD="$lt_cv_path_MAGIC_CMD"
+if test -n "$MAGIC_CMD"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $MAGIC_CMD" >&5
+$as_echo "$MAGIC_CMD" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+
+
+
+if test -z "$lt_cv_path_MAGIC_CMD"; then
+  if test -n "$ac_tool_prefix"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for file" >&5
+$as_echo_n "checking for file... " >&6; }
+if test "${lt_cv_path_MAGIC_CMD+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $MAGIC_CMD in
+[\\/*] |  ?:[\\/]*)
+  lt_cv_path_MAGIC_CMD="$MAGIC_CMD" # Let the user override the test with a path.
+  ;;
+*)
+  lt_save_MAGIC_CMD="$MAGIC_CMD"
+  lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+  ac_dummy="/usr/bin$PATH_SEPARATOR$PATH"
+  for ac_dir in $ac_dummy; do
+    IFS="$lt_save_ifs"
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/file; then
+      lt_cv_path_MAGIC_CMD="$ac_dir/file"
+      if test -n "$file_magic_test_file"; then
+	case $deplibs_check_method in
+	"file_magic "*)
+	  file_magic_regex=`expr "$deplibs_check_method" : "file_magic \(.*\)"`
+	  MAGIC_CMD="$lt_cv_path_MAGIC_CMD"
+	  if eval $file_magic_cmd \$file_magic_test_file 2> /dev/null |
+	    $EGREP "$file_magic_regex" > /dev/null; then
+	    :
+	  else
+	    cat <<_LT_EOF 1>&2
+
+*** Warning: the command libtool uses to detect shared libraries,
+*** $file_magic_cmd, produces output that libtool cannot recognize.
+*** The result is that libtool may fail to recognize shared libraries
+*** as such.  This will affect the creation of libtool libraries that
+*** depend on shared libraries, but programs linked with such libtool
+*** libraries will work regardless of this problem.  Nevertheless, you
+*** may want to report the problem to your system manager and/or to
+*** bug-libtool@gnu.org
+
+_LT_EOF
+	  fi ;;
+	esac
+      fi
+      break
+    fi
+  done
+  IFS="$lt_save_ifs"
+  MAGIC_CMD="$lt_save_MAGIC_CMD"
+  ;;
+esac
+fi
+
+MAGIC_CMD="$lt_cv_path_MAGIC_CMD"
+if test -n "$MAGIC_CMD"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $MAGIC_CMD" >&5
+$as_echo "$MAGIC_CMD" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  else
+    MAGIC_CMD=:
+  fi
+fi
+
+  fi
+  ;;
+esac
+
+# Use C for the default configuration in the libtool script
+
+lt_save_CC="$CC"
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+# Source file extension for C test sources.
+ac_ext=c
+
+# Object file extension for compiled C test sources.
+objext=o
+objext=$objext
+
+# Code to be used in simple compile tests
+lt_simple_compile_test_code="int some_variable = 0;"
+
+# Code to be used in simple link tests
+lt_simple_link_test_code='int main(){return(0);}'
+
+
+
+
+
+
+
+# If no C compiler was specified, use CC.
+LTCC=${LTCC-"$CC"}
+
+# If no C compiler flags were specified, use CFLAGS.
+LTCFLAGS=${LTCFLAGS-"$CFLAGS"}
+
+# Allow CC to be a program name with arguments.
+compiler=$CC
+
+# Save the default compiler, since it gets overwritten when the other
+# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.
+compiler_DEFAULT=$CC
+
+# save warnings/boilerplate of simple test code
+ac_outfile=conftest.$ac_objext
+echo "$lt_simple_compile_test_code" >conftest.$ac_ext
+eval "$ac_compile" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err
+_lt_compiler_boilerplate=`cat conftest.err`
+$RM conftest*
+
+ac_outfile=conftest.$ac_objext
+echo "$lt_simple_link_test_code" >conftest.$ac_ext
+eval "$ac_link" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err
+_lt_linker_boilerplate=`cat conftest.err`
+$RM -r conftest*
+
+
+## CAVEAT EMPTOR:
+## There is no encapsulation within the following macros, do not change
+## the running order or otherwise move them around unless you know exactly
+## what you are doing...
+if test -n "$compiler"; then
+
+lt_prog_compiler_no_builtin_flag=
+
+if test "$GCC" = yes; then
+  lt_prog_compiler_no_builtin_flag=' -fno-builtin'
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler supports -fno-rtti -fno-exceptions" >&5
+$as_echo_n "checking if $compiler supports -fno-rtti -fno-exceptions... " >&6; }
+if test "${lt_cv_prog_compiler_rtti_exceptions+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_rtti_exceptions=no
+   ac_outfile=conftest.$ac_objext
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+   lt_compiler_flag="-fno-rtti -fno-exceptions"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   # The option is referenced via a variable to avoid confusing sed.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:7773: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>conftest.err)
+   ac_status=$?
+   cat conftest.err >&5
+   echo "$as_me:7777: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s "$ac_outfile"; then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings other than the usual output.
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' >conftest.exp
+     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_rtti_exceptions=yes
+     fi
+   fi
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_rtti_exceptions" >&5
+$as_echo "$lt_cv_prog_compiler_rtti_exceptions" >&6; }
+
+if test x"$lt_cv_prog_compiler_rtti_exceptions" = xyes; then
+    lt_prog_compiler_no_builtin_flag="$lt_prog_compiler_no_builtin_flag -fno-rtti -fno-exceptions"
+else
+    :
+fi
+
+fi
+
+
+
+
+
+
+  lt_prog_compiler_wl=
+lt_prog_compiler_pic=
+lt_prog_compiler_static=
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $compiler option to produce PIC" >&5
+$as_echo_n "checking for $compiler option to produce PIC... " >&6; }
+
+  if test "$GCC" = yes; then
+    lt_prog_compiler_wl='-Wl,'
+    lt_prog_compiler_static='-static'
+
+    case $host_os in
+      aix*)
+      # All AIX code is PIC.
+      if test "$host_cpu" = ia64; then
+	# AIX 5 now supports IA64 processor
+	lt_prog_compiler_static='-Bstatic'
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            lt_prog_compiler_pic='-fPIC'
+        ;;
+      m68k)
+            # FIXME: we need at least 68020 code to build shared libraries, but
+            # adding the `-m68020' flag to GCC prevents building anything better,
+            # like `-m68040'.
+            lt_prog_compiler_pic='-m68020 -resident32 -malways-restore-a4'
+        ;;
+      esac
+      ;;
+
+    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)
+      # PIC is the default for these OSes.
+      ;;
+
+    mingw* | cygwin* | pw32* | os2* | cegcc*)
+      # This hack is so that the source file can tell whether it is being
+      # built for inclusion in a dll (and should export symbols for example).
+      # Although the cygwin gcc ignores -fPIC, still need this for old-style
+      # (--disable-auto-import) libraries
+      lt_prog_compiler_pic='-DDLL_EXPORT'
+      ;;
+
+    darwin* | rhapsody*)
+      # PIC is the default on this platform
+      # Common symbols not allowed in MH_DYLIB files
+      lt_prog_compiler_pic='-fno-common'
+      ;;
+
+    hpux*)
+      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit
+      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag
+      # sets the default TLS model and affects inlining.
+      case $host_cpu in
+      hppa*64*)
+	# +Z the default
+	;;
+      *)
+	lt_prog_compiler_pic='-fPIC'
+	;;
+      esac
+      ;;
+
+    interix[3-9]*)
+      # Interix 3.x gcc -fpic/-fPIC options generate broken code.
+      # Instead, we relocate shared libraries at runtime.
+      ;;
+
+    msdosdjgpp*)
+      # Just because we use GCC doesn't mean we suddenly get shared libraries
+      # on systems that don't support them.
+      lt_prog_compiler_can_build_shared=no
+      enable_shared=no
+      ;;
+
+    *nto* | *qnx*)
+      # QNX uses GNU C++, but need to define -shared option too, otherwise
+      # it will coredump.
+      lt_prog_compiler_pic='-fPIC -shared'
+      ;;
+
+    sysv4*MP*)
+      if test -d /usr/nec; then
+	lt_prog_compiler_pic=-Kconform_pic
+      fi
+      ;;
+
+    *)
+      lt_prog_compiler_pic='-fPIC'
+      ;;
+    esac
+  else
+    # PORTME Check for flag to pass linker flags through the system compiler.
+    case $host_os in
+    aix*)
+      lt_prog_compiler_wl='-Wl,'
+      if test "$host_cpu" = ia64; then
+	# AIX 5 now supports IA64 processor
+	lt_prog_compiler_static='-Bstatic'
+      else
+	lt_prog_compiler_static='-bnso -bI:/lib/syscalls.exp'
+      fi
+      ;;
+
+    mingw* | cygwin* | pw32* | os2* | cegcc*)
+      # This hack is so that the source file can tell whether it is being
+      # built for inclusion in a dll (and should export symbols for example).
+      lt_prog_compiler_pic='-DDLL_EXPORT'
+      ;;
+
+    hpux9* | hpux10* | hpux11*)
+      lt_prog_compiler_wl='-Wl,'
+      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but
+      # not for PA HP-UX.
+      case $host_cpu in
+      hppa*64*|ia64*)
+	# +Z the default
+	;;
+      *)
+	lt_prog_compiler_pic='+Z'
+	;;
+      esac
+      # Is there a better lt_prog_compiler_static that works with the bundled CC?
+      lt_prog_compiler_static='${wl}-a ${wl}archive'
+      ;;
+
+    irix5* | irix6* | nonstopux*)
+      lt_prog_compiler_wl='-Wl,'
+      # PIC (with -KPIC) is the default.
+      lt_prog_compiler_static='-non_shared'
+      ;;
+
+    linux* | k*bsd*-gnu | kopensolaris*-gnu)
+      case $cc_basename in
+      # old Intel for x86_64 which still supported -KPIC.
+      ecc*)
+	lt_prog_compiler_wl='-Wl,'
+	lt_prog_compiler_pic='-KPIC'
+	lt_prog_compiler_static='-static'
+        ;;
+      # icc used to be incompatible with GCC.
+      # ICC 10 doesn't accept -KPIC any more.
+      icc* | ifort*)
+	lt_prog_compiler_wl='-Wl,'
+	lt_prog_compiler_pic='-fPIC'
+	lt_prog_compiler_static='-static'
+        ;;
+      # Lahey Fortran 8.1.
+      lf95*)
+	lt_prog_compiler_wl='-Wl,'
+	lt_prog_compiler_pic='--shared'
+	lt_prog_compiler_static='--static'
+	;;
+      pgcc* | pgf77* | pgf90* | pgf95*)
+        # Portland Group compilers (*not* the Pentium gcc compiler,
+	# which looks to be a dead project)
+	lt_prog_compiler_wl='-Wl,'
+	lt_prog_compiler_pic='-fpic'
+	lt_prog_compiler_static='-Bstatic'
+        ;;
+      ccc*)
+        lt_prog_compiler_wl='-Wl,'
+        # All Alpha code is PIC.
+        lt_prog_compiler_static='-non_shared'
+        ;;
+      xl*)
+	# IBM XL C 8.0/Fortran 10.1 on PPC
+	lt_prog_compiler_wl='-Wl,'
+	lt_prog_compiler_pic='-qpic'
+	lt_prog_compiler_static='-qstaticlink'
+	;;
+      *)
+	case `$CC -V 2>&1 | sed 5q` in
+	*Sun\ C*)
+	  # Sun C 5.9
+	  lt_prog_compiler_pic='-KPIC'
+	  lt_prog_compiler_static='-Bstatic'
+	  lt_prog_compiler_wl='-Wl,'
+	  ;;
+	*Sun\ F*)
+	  # Sun Fortran 8.3 passes all unrecognized flags to the linker
+	  lt_prog_compiler_pic='-KPIC'
+	  lt_prog_compiler_static='-Bstatic'
+	  lt_prog_compiler_wl=''
+	  ;;
+	esac
+	;;
+      esac
+      ;;
+
+    newsos6)
+      lt_prog_compiler_pic='-KPIC'
+      lt_prog_compiler_static='-Bstatic'
+      ;;
+
+    *nto* | *qnx*)
+      # QNX uses GNU C++, but need to define -shared option too, otherwise
+      # it will coredump.
+      lt_prog_compiler_pic='-fPIC -shared'
+      ;;
+
+    osf3* | osf4* | osf5*)
+      lt_prog_compiler_wl='-Wl,'
+      # All OSF/1 code is PIC.
+      lt_prog_compiler_static='-non_shared'
+      ;;
+
+    rdos*)
+      lt_prog_compiler_static='-non_shared'
+      ;;
+
+    solaris*)
+      lt_prog_compiler_pic='-KPIC'
+      lt_prog_compiler_static='-Bstatic'
+      case $cc_basename in
+      f77* | f90* | f95*)
+	lt_prog_compiler_wl='-Qoption ld ';;
+      *)
+	lt_prog_compiler_wl='-Wl,';;
+      esac
+      ;;
+
+    sunos4*)
+      lt_prog_compiler_wl='-Qoption ld '
+      lt_prog_compiler_pic='-PIC'
+      lt_prog_compiler_static='-Bstatic'
+      ;;
+
+    sysv4 | sysv4.2uw2* | sysv4.3*)
+      lt_prog_compiler_wl='-Wl,'
+      lt_prog_compiler_pic='-KPIC'
+      lt_prog_compiler_static='-Bstatic'
+      ;;
+
+    sysv4*MP*)
+      if test -d /usr/nec ;then
+	lt_prog_compiler_pic='-Kconform_pic'
+	lt_prog_compiler_static='-Bstatic'
+      fi
+      ;;
+
+    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)
+      lt_prog_compiler_wl='-Wl,'
+      lt_prog_compiler_pic='-KPIC'
+      lt_prog_compiler_static='-Bstatic'
+      ;;
+
+    unicos*)
+      lt_prog_compiler_wl='-Wl,'
+      lt_prog_compiler_can_build_shared=no
+      ;;
+
+    uts4*)
+      lt_prog_compiler_pic='-pic'
+      lt_prog_compiler_static='-Bstatic'
+      ;;
+
+    *)
+      lt_prog_compiler_can_build_shared=no
+      ;;
+    esac
+  fi
+
+case $host_os in
+  # For platforms which do not support PIC, -DPIC is meaningless:
+  *djgpp*)
+    lt_prog_compiler_pic=
+    ;;
+  *)
+    lt_prog_compiler_pic="$lt_prog_compiler_pic -DPIC"
+    ;;
+esac
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_prog_compiler_pic" >&5
+$as_echo "$lt_prog_compiler_pic" >&6; }
+
+
+
+
+
+
+#
+# Check to make sure the PIC flag actually works.
+#
+if test -n "$lt_prog_compiler_pic"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler PIC flag $lt_prog_compiler_pic works" >&5
+$as_echo_n "checking if $compiler PIC flag $lt_prog_compiler_pic works... " >&6; }
+if test "${lt_cv_prog_compiler_pic_works+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_pic_works=no
+   ac_outfile=conftest.$ac_objext
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+   lt_compiler_flag="$lt_prog_compiler_pic -DPIC"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   # The option is referenced via a variable to avoid confusing sed.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:8112: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>conftest.err)
+   ac_status=$?
+   cat conftest.err >&5
+   echo "$as_me:8116: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s "$ac_outfile"; then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings other than the usual output.
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' >conftest.exp
+     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_pic_works=yes
+     fi
+   fi
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_pic_works" >&5
+$as_echo "$lt_cv_prog_compiler_pic_works" >&6; }
+
+if test x"$lt_cv_prog_compiler_pic_works" = xyes; then
+    case $lt_prog_compiler_pic in
+     "" | " "*) ;;
+     *) lt_prog_compiler_pic=" $lt_prog_compiler_pic" ;;
+     esac
+else
+    lt_prog_compiler_pic=
+     lt_prog_compiler_can_build_shared=no
+fi
+
+fi
+
+
+
+
+
+
+#
+# Check to make sure the static flag actually works.
+#
+wl=$lt_prog_compiler_wl eval lt_tmp_static_flag=\"$lt_prog_compiler_static\"
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler static flag $lt_tmp_static_flag works" >&5
+$as_echo_n "checking if $compiler static flag $lt_tmp_static_flag works... " >&6; }
+if test "${lt_cv_prog_compiler_static_works+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_static_works=no
+   save_LDFLAGS="$LDFLAGS"
+   LDFLAGS="$LDFLAGS $lt_tmp_static_flag"
+   echo "$lt_simple_link_test_code" > conftest.$ac_ext
+   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then
+     # The linker can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     if test -s conftest.err; then
+       # Append any errors to the config.log.
+       cat conftest.err 1>&5
+       $ECHO "X$_lt_linker_boilerplate" | $Xsed -e '/^$/d' > conftest.exp
+       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+       if diff conftest.exp conftest.er2 >/dev/null; then
+         lt_cv_prog_compiler_static_works=yes
+       fi
+     else
+       lt_cv_prog_compiler_static_works=yes
+     fi
+   fi
+   $RM -r conftest*
+   LDFLAGS="$save_LDFLAGS"
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_static_works" >&5
+$as_echo "$lt_cv_prog_compiler_static_works" >&6; }
+
+if test x"$lt_cv_prog_compiler_static_works" = xyes; then
+    :
+else
+    lt_prog_compiler_static=
+fi
+
+
+
+
+
+
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler supports -c -o file.$ac_objext" >&5
+$as_echo_n "checking if $compiler supports -c -o file.$ac_objext... " >&6; }
+if test "${lt_cv_prog_compiler_c_o+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_c_o=no
+   $RM -r conftest 2>/dev/null
+   mkdir conftest
+   cd conftest
+   mkdir out
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+   lt_compiler_flag="-o out/conftest2.$ac_objext"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:8217: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>out/conftest.err)
+   ac_status=$?
+   cat out/conftest.err >&5
+   echo "$as_me:8221: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s out/conftest2.$ac_objext
+   then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' > out/conftest.exp
+     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2
+     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_c_o=yes
+     fi
+   fi
+   chmod u+w . 2>&5
+   $RM conftest*
+   # SGI C++ compiler will create directory out/ii_files/ for
+   # template instantiation
+   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files
+   $RM out/* && rmdir out
+   cd ..
+   $RM -r conftest
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_c_o" >&5
+$as_echo "$lt_cv_prog_compiler_c_o" >&6; }
+
+
+
+
+
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler supports -c -o file.$ac_objext" >&5
+$as_echo_n "checking if $compiler supports -c -o file.$ac_objext... " >&6; }
+if test "${lt_cv_prog_compiler_c_o+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_c_o=no
+   $RM -r conftest 2>/dev/null
+   mkdir conftest
+   cd conftest
+   mkdir out
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+   lt_compiler_flag="-o out/conftest2.$ac_objext"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:8272: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>out/conftest.err)
+   ac_status=$?
+   cat out/conftest.err >&5
+   echo "$as_me:8276: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s out/conftest2.$ac_objext
+   then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' > out/conftest.exp
+     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2
+     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_c_o=yes
+     fi
+   fi
+   chmod u+w . 2>&5
+   $RM conftest*
+   # SGI C++ compiler will create directory out/ii_files/ for
+   # template instantiation
+   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files
+   $RM out/* && rmdir out
+   cd ..
+   $RM -r conftest
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_c_o" >&5
+$as_echo "$lt_cv_prog_compiler_c_o" >&6; }
+
+
+
+
+hard_links="nottested"
+if test "$lt_cv_prog_compiler_c_o" = no && test "$need_locks" != no; then
+  # do not overwrite the value of need_locks provided by the user
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if we can lock with hard links" >&5
+$as_echo_n "checking if we can lock with hard links... " >&6; }
+  hard_links=yes
+  $RM conftest*
+  ln conftest.a conftest.b 2>/dev/null && hard_links=no
+  touch conftest.a
+  ln conftest.a conftest.b 2>&5 || hard_links=no
+  ln conftest.a conftest.b 2>/dev/null && hard_links=no
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $hard_links" >&5
+$as_echo "$hard_links" >&6; }
+  if test "$hard_links" = no; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: \`$CC' does not support \`-c -o', so \`make -j' may be unsafe" >&5
+$as_echo "$as_me: WARNING: \`$CC' does not support \`-c -o', so \`make -j' may be unsafe" >&2;}
+    need_locks=warn
+  fi
+else
+  need_locks=no
+fi
+
+
+
+
+
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the $compiler linker ($LD) supports shared libraries" >&5
+$as_echo_n "checking whether the $compiler linker ($LD) supports shared libraries... " >&6; }
+
+  runpath_var=
+  allow_undefined_flag=
+  always_export_symbols=no
+  archive_cmds=
+  archive_expsym_cmds=
+  compiler_needs_object=no
+  enable_shared_with_static_runtimes=no
+  export_dynamic_flag_spec=
+  export_symbols_cmds='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
+  hardcode_automatic=no
+  hardcode_direct=no
+  hardcode_direct_absolute=no
+  hardcode_libdir_flag_spec=
+  hardcode_libdir_flag_spec_ld=
+  hardcode_libdir_separator=
+  hardcode_minus_L=no
+  hardcode_shlibpath_var=unsupported
+  inherit_rpath=no
+  link_all_deplibs=unknown
+  module_cmds=
+  module_expsym_cmds=
+  old_archive_from_new_cmds=
+  old_archive_from_expsyms_cmds=
+  thread_safe_flag_spec=
+  whole_archive_flag_spec=
+  # include_expsyms should be a list of space-separated symbols to be *always*
+  # included in the symbol list
+  include_expsyms=
+  # exclude_expsyms can be an extended regexp of symbols to exclude
+  # it will be wrapped by ` (' and `)$', so one must not match beginning or
+  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',
+  # as well as any symbol that contains `d'.
+  exclude_expsyms='_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*'
+  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out
+  # platforms (ab)use it in PIC code, but their linkers get confused if
+  # the symbol is explicitly referenced.  Since portable code cannot
+  # rely on this symbol name, it's probably fine to never include it in
+  # preloaded symbol tables.
+  # Exclude shared library initialization/finalization symbols.
+  extract_expsyms_cmds=
+
+  case $host_os in
+  cygwin* | mingw* | pw32* | cegcc*)
+    # FIXME: the MSVC++ port hasn't been tested in a loooong time
+    # When not using gcc, we currently assume that we are using
+    # Microsoft Visual C++.
+    if test "$GCC" != yes; then
+      with_gnu_ld=no
+    fi
+    ;;
+  interix*)
+    # we just hope/assume this is gcc and not c89 (= MSVC++)
+    with_gnu_ld=yes
+    ;;
+  openbsd*)
+    with_gnu_ld=no
+    ;;
+  linux* | k*bsd*-gnu)
+    link_all_deplibs=no
+    ;;
+  esac
+
+  ld_shlibs=yes
+  if test "$with_gnu_ld" = yes; then
+    # If archive_cmds runs LD, not CC, wlarc should be empty
+    wlarc='${wl}'
+
+    # Set some defaults for GNU ld with shared library support. These
+    # are reset later if shared libraries are not supported. Putting them
+    # here allows them to be overridden if necessary.
+    runpath_var=LD_RUN_PATH
+    hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
+    export_dynamic_flag_spec='${wl}--export-dynamic'
+    # ancient GNU ld didn't support --whole-archive et. al.
+    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then
+      whole_archive_flag_spec="$wlarc"'--whole-archive$convenience '"$wlarc"'--no-whole-archive'
+    else
+      whole_archive_flag_spec=
+    fi
+    supports_anon_versioning=no
+    case `$LD -v 2>&1` in
+      *GNU\ gold*) supports_anon_versioning=yes ;;
+      *\ [01].* | *\ 2.[0-9].* | *\ 2.10.*) ;; # catch versions < 2.11
+      *\ 2.11.93.0.2\ *) supports_anon_versioning=yes ;; # RH7.3 ...
+      *\ 2.11.92.0.12\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...
+      *\ 2.11.*) ;; # other 2.11 versions
+      *) supports_anon_versioning=yes ;;
+    esac
+
+    # See if GNU ld supports shared libraries.
+    case $host_os in
+    aix[3-9]*)
+      # On AIX/PPC, the GNU linker is very broken
+      if test "$host_cpu" != ia64; then
+	ld_shlibs=no
+	cat <<_LT_EOF 1>&2
+
+*** Warning: the GNU linker, at least up to release 2.9.1, is reported
+*** to be unable to reliably create shared libraries on AIX.
+*** Therefore, libtool is disabling shared libraries support.  If you
+*** really care for shared libraries, you may want to modify your PATH
+*** so that a non-GNU linker is found, and then restart.
+
+_LT_EOF
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+            archive_expsym_cmds=''
+        ;;
+      m68k)
+            archive_cmds='$RM $output_objdir/a2ixlibrary.data~$ECHO "#define NAME $libname" > $output_objdir/a2ixlibrary.data~$ECHO "#define LIBRARY_ID 1" >> $output_objdir/a2ixlibrary.data~$ECHO "#define VERSION $major" >> $output_objdir/a2ixlibrary.data~$ECHO "#define REVISION $revision" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'
+            hardcode_libdir_flag_spec='-L$libdir'
+            hardcode_minus_L=yes
+        ;;
+      esac
+      ;;
+
+    beos*)
+      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	allow_undefined_flag=unsupported
+	# Joseph Beckenbach <jrb3@best.com> says some releases of gcc
+	# support --undefined.  This deserves some investigation.  FIXME
+	archive_cmds='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+      else
+	ld_shlibs=no
+      fi
+      ;;
+
+    cygwin* | mingw* | pw32* | cegcc*)
+      # _LT_TAGVAR(hardcode_libdir_flag_spec, ) is actually meaningless,
+      # as there is no search path for DLLs.
+      hardcode_libdir_flag_spec='-L$libdir'
+      allow_undefined_flag=unsupported
+      always_export_symbols=no
+      enable_shared_with_static_runtimes=yes
+      export_symbols_cmds='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\''/^[BCDGRS][ ]/s/.*[ ]\([^ ]*\)/\1 DATA/'\'' | $SED -e '\''/^[AITW][ ]/s/.*[ ]//'\'' | sort | uniq > $export_symbols'
+
+      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then
+        archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+	# If the export-symbols file already is a .def file (1st line
+	# is EXPORTS), use it as is; otherwise, prepend...
+	archive_expsym_cmds='if test "x`$SED 1q $export_symbols`" = xEXPORTS; then
+	  cp $export_symbols $output_objdir/$soname.def;
+	else
+	  echo EXPORTS > $output_objdir/$soname.def;
+	  cat $export_symbols >> $output_objdir/$soname.def;
+	fi~
+	$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+      else
+	ld_shlibs=no
+      fi
+      ;;
+
+    interix[3-9]*)
+      hardcode_direct=no
+      hardcode_shlibpath_var=no
+      hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+      export_dynamic_flag_spec='${wl}-E'
+      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.
+      # Instead, shared libraries are loaded at an image base (0x10000000 by
+      # default) and relocated if they conflict, which is a slow very memory
+      # consuming and fragmenting process.  To avoid this, we pick a random,
+      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link
+      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.
+      archive_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+      archive_expsym_cmds='sed "s,^,_," $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+      ;;
+
+    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)
+      tmp_diet=no
+      if test "$host_os" = linux-dietlibc; then
+	case $cc_basename in
+	  diet\ *) tmp_diet=yes;;	# linux-dietlibc with static linking (!diet-dyn)
+	esac
+      fi
+      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \
+	 && test "$tmp_diet" = no
+      then
+	tmp_addflag=
+	tmp_sharedflag='-shared'
+	case $cc_basename,$host_cpu in
+        pgcc*)				# Portland Group C compiler
+	  whole_archive_flag_spec='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	  tmp_addflag=' $pic_flag'
+	  ;;
+	pgf77* | pgf90* | pgf95*)	# Portland Group f77 and f90 compilers
+	  whole_archive_flag_spec='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	  tmp_addflag=' $pic_flag -Mnomain' ;;
+	ecc*,ia64* | icc*,ia64*)	# Intel C compiler on ia64
+	  tmp_addflag=' -i_dynamic' ;;
+	efc*,ia64* | ifort*,ia64*)	# Intel Fortran compiler on ia64
+	  tmp_addflag=' -i_dynamic -nofor_main' ;;
+	ifc* | ifort*)			# Intel Fortran compiler
+	  tmp_addflag=' -nofor_main' ;;
+	lf95*)				# Lahey Fortran 8.1
+	  whole_archive_flag_spec=
+	  tmp_sharedflag='--shared' ;;
+	xl[cC]*)			# IBM XL C 8.0 on PPC (deal with xlf below)
+	  tmp_sharedflag='-qmkshrobj'
+	  tmp_addflag= ;;
+	esac
+	case `$CC -V 2>&1 | sed 5q` in
+	*Sun\ C*)			# Sun C 5.9
+	  whole_archive_flag_spec='${wl}--whole-archive`new_convenience=; for conv in $convenience\"\"; do test -z \"$conv\" || new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	  compiler_needs_object=yes
+	  tmp_sharedflag='-G' ;;
+	*Sun\ F*)			# Sun Fortran 8.3
+	  tmp_sharedflag='-G' ;;
+	esac
+	archive_cmds='$CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+
+        if test "x$supports_anon_versioning" = xyes; then
+          archive_expsym_cmds='echo "{ global:" > $output_objdir/$libname.ver~
+	    cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+	    echo "local: *; };" >> $output_objdir/$libname.ver~
+	    $CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
+        fi
+
+	case $cc_basename in
+	xlf*)
+	  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself
+	  whole_archive_flag_spec='--whole-archive$convenience --no-whole-archive'
+	  hardcode_libdir_flag_spec=
+	  hardcode_libdir_flag_spec_ld='-rpath $libdir'
+	  archive_cmds='$LD -shared $libobjs $deplibs $compiler_flags -soname $soname -o $lib'
+	  if test "x$supports_anon_versioning" = xyes; then
+	    archive_expsym_cmds='echo "{ global:" > $output_objdir/$libname.ver~
+	      cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+	      echo "local: *; };" >> $output_objdir/$libname.ver~
+	      $LD -shared $libobjs $deplibs $compiler_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'
+	  fi
+	  ;;
+	esac
+      else
+        ld_shlibs=no
+      fi
+      ;;
+
+    netbsd* | netbsdelf*-gnu)
+      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+	archive_cmds='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'
+	wlarc=
+      else
+	archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+      fi
+      ;;
+
+    solaris*)
+      if $LD -v 2>&1 | $GREP 'BFD 2\.8' > /dev/null; then
+	ld_shlibs=no
+	cat <<_LT_EOF 1>&2
+
+*** Warning: The releases 2.8.* of the GNU linker cannot reliably
+*** create shared libraries on Solaris systems.  Therefore, libtool
+*** is disabling shared libraries support.  We urge you to upgrade GNU
+*** binutils to release 2.9.1 or newer.  Another option is to modify
+*** your PATH or compiler configuration so that the native linker is
+*** used, and then restart.
+
+_LT_EOF
+      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+      else
+	ld_shlibs=no
+      fi
+      ;;
+
+    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)
+      case `$LD -v 2>&1` in
+        *\ [01].* | *\ 2.[0-9].* | *\ 2.1[0-5].*)
+	ld_shlibs=no
+	cat <<_LT_EOF 1>&2
+
+*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not
+*** reliably create shared libraries on SCO systems.  Therefore, libtool
+*** is disabling shared libraries support.  We urge you to upgrade GNU
+*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify
+*** your PATH or compiler configuration so that the native linker is
+*** used, and then restart.
+
+_LT_EOF
+	;;
+	*)
+	  # For security reasons, it is highly recommended that you always
+	  # use absolute paths for naming shared libraries, and exclude the
+	  # DT_RUNPATH tag from executables and libraries.  But doing so
+	  # requires that you compile everything twice, which is a pain.
+	  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	    hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
+	    archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	    archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+	  else
+	    ld_shlibs=no
+	  fi
+	;;
+      esac
+      ;;
+
+    sunos4*)
+      archive_cmds='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+      wlarc=
+      hardcode_direct=yes
+      hardcode_shlibpath_var=no
+      ;;
+
+    *)
+      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+      else
+	ld_shlibs=no
+      fi
+      ;;
+    esac
+
+    if test "$ld_shlibs" = no; then
+      runpath_var=
+      hardcode_libdir_flag_spec=
+      export_dynamic_flag_spec=
+      whole_archive_flag_spec=
+    fi
+  else
+    # PORTME fill in a description of your system's linker (not GNU ld)
+    case $host_os in
+    aix3*)
+      allow_undefined_flag=unsupported
+      always_export_symbols=yes
+      archive_expsym_cmds='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'
+      # Note: this linker hardcodes the directories in LIBPATH if there
+      # are no directories specified by -L.
+      hardcode_minus_L=yes
+      if test "$GCC" = yes && test -z "$lt_prog_compiler_static"; then
+	# Neither direct hardcoding nor static linking is supported with a
+	# broken collect2.
+	hardcode_direct=unsupported
+      fi
+      ;;
+
+    aix[4-9]*)
+      if test "$host_cpu" = ia64; then
+	# On IA64, the linker does run time linking by default, so we don't
+	# have to do anything special.
+	aix_use_runtimelinking=no
+	exp_sym_flag='-Bexport'
+	no_entry_flag=""
+      else
+	# If we're using GNU nm, then we don't want the "-C" option.
+	# -C means demangle to AIX nm, but means don't demangle with GNU nm
+	if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then
+	  export_symbols_cmds='$NM -Bpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && (substr(\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+	else
+	  export_symbols_cmds='$NM -BCpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && (substr(\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+	fi
+	aix_use_runtimelinking=no
+
+	# Test if we are trying to use run time linking or normal
+	# AIX style linking. If -brtl is somewhere in LDFLAGS, we
+	# need to do runtime linking.
+	case $host_os in aix4.[23]|aix4.[23].*|aix[5-9]*)
+	  for ld_flag in $LDFLAGS; do
+	  if (test $ld_flag = "-brtl" || test $ld_flag = "-Wl,-brtl"); then
+	    aix_use_runtimelinking=yes
+	    break
+	  fi
+	  done
+	  ;;
+	esac
+
+	exp_sym_flag='-bexport'
+	no_entry_flag='-bnoentry'
+      fi
+
+      # When large executables or shared objects are built, AIX ld can
+      # have problems creating the table of contents.  If linking a library
+      # or program results in "error TOC overflow" add -mminimal-toc to
+      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not
+      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.
+
+      archive_cmds=''
+      hardcode_direct=yes
+      hardcode_direct_absolute=yes
+      hardcode_libdir_separator=':'
+      link_all_deplibs=yes
+      file_list_spec='${wl}-f,'
+
+      if test "$GCC" = yes; then
+	case $host_os in aix4.[012]|aix4.[012].*)
+	# We only want to do this on AIX 4.2 and lower, the check
+	# below for broken collect2 doesn't work under 4.3+
+	  collect2name=`${CC} -print-prog-name=collect2`
+	  if test -f "$collect2name" &&
+	   strings "$collect2name" | $GREP resolve_lib_name >/dev/null
+	  then
+	  # We have reworked collect2
+	  :
+	  else
+	  # We have old collect2
+	  hardcode_direct=unsupported
+	  # It fails to find uninstalled libraries when the uninstalled
+	  # path is not listed in the libpath.  Setting hardcode_minus_L
+	  # to unsupported forces relinking
+	  hardcode_minus_L=yes
+	  hardcode_libdir_flag_spec='-L$libdir'
+	  hardcode_libdir_separator=
+	  fi
+	  ;;
+	esac
+	shared_flag='-shared'
+	if test "$aix_use_runtimelinking" = yes; then
+	  shared_flag="$shared_flag "'${wl}-G'
+	fi
+	link_all_deplibs=no
+      else
+	# not using gcc
+	if test "$host_cpu" = ia64; then
+	# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release
+	# chokes on -Wl,-G. The following line is correct:
+	  shared_flag='-G'
+	else
+	  if test "$aix_use_runtimelinking" = yes; then
+	    shared_flag='${wl}-G'
+	  else
+	    shared_flag='${wl}-bM:SRE'
+	  fi
+	fi
+      fi
+
+      export_dynamic_flag_spec='${wl}-bexpall'
+      # It seems that -bexpall does not export symbols beginning with
+      # underscore (_), so it is better to generate a list of symbols to export.
+      always_export_symbols=yes
+      if test "$aix_use_runtimelinking" = yes; then
+	# Warning - without using the other runtime loading flags (-brtl),
+	# -berok will link without error, but may produce a broken library.
+	allow_undefined_flag='-berok'
+        # Determine the default libpath from the value encoded in an
+        # empty executable.
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+
+lt_aix_libpath_sed='
+    /Import File Strings/,/^$/ {
+	/^0/ {
+	    s/^0  *\(.*\)$/\1/
+	    p
+	}
+    }'
+aix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+# Check for a 64-bit object if we didn't find anything.
+if test -z "$aix_libpath"; then
+  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+if test -z "$aix_libpath"; then aix_libpath="/usr/lib:/lib"; fi
+
+        hardcode_libdir_flag_spec='${wl}-blibpath:$libdir:'"$aix_libpath"
+        archive_expsym_cmds='$CC -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags `if test "x${allow_undefined_flag}" != "x"; then $ECHO "X${wl}${allow_undefined_flag}" | $Xsed; else :; fi` '"\${wl}$exp_sym_flag:\$export_symbols $shared_flag"
+      else
+	if test "$host_cpu" = ia64; then
+	  hardcode_libdir_flag_spec='${wl}-R $libdir:/usr/lib:/lib'
+	  allow_undefined_flag="-z nodefs"
+	  archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags ${wl}${allow_undefined_flag} '"\${wl}$exp_sym_flag:\$export_symbols"
+	else
+	 # Determine the default libpath from the value encoded in an
+	 # empty executable.
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+
+lt_aix_libpath_sed='
+    /Import File Strings/,/^$/ {
+	/^0/ {
+	    s/^0  *\(.*\)$/\1/
+	    p
+	}
+    }'
+aix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+# Check for a 64-bit object if we didn't find anything.
+if test -z "$aix_libpath"; then
+  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+if test -z "$aix_libpath"; then aix_libpath="/usr/lib:/lib"; fi
+
+	 hardcode_libdir_flag_spec='${wl}-blibpath:$libdir:'"$aix_libpath"
+	  # Warning - without using the other run time loading flags,
+	  # -berok will link without error, but may produce a broken library.
+	  no_undefined_flag=' ${wl}-bernotok'
+	  allow_undefined_flag=' ${wl}-berok'
+	  # Exported symbols can be pulled into shared objects from archives
+	  whole_archive_flag_spec='$convenience'
+	  archive_cmds_need_lc=yes
+	  # This is similar to how AIX traditionally builds its shared libraries.
+	  archive_expsym_cmds="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'
+	fi
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+            archive_expsym_cmds=''
+        ;;
+      m68k)
+            archive_cmds='$RM $output_objdir/a2ixlibrary.data~$ECHO "#define NAME $libname" > $output_objdir/a2ixlibrary.data~$ECHO "#define LIBRARY_ID 1" >> $output_objdir/a2ixlibrary.data~$ECHO "#define VERSION $major" >> $output_objdir/a2ixlibrary.data~$ECHO "#define REVISION $revision" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'
+            hardcode_libdir_flag_spec='-L$libdir'
+            hardcode_minus_L=yes
+        ;;
+      esac
+      ;;
+
+    bsdi[45]*)
+      export_dynamic_flag_spec=-rdynamic
+      ;;
+
+    cygwin* | mingw* | pw32* | cegcc*)
+      # When not using gcc, we currently assume that we are using
+      # Microsoft Visual C++.
+      # hardcode_libdir_flag_spec is actually meaningless, as there is
+      # no search path for DLLs.
+      hardcode_libdir_flag_spec=' '
+      allow_undefined_flag=unsupported
+      # Tell ltmain to make .lib files, not .a files.
+      libext=lib
+      # Tell ltmain to make .dll files, not .so files.
+      shrext_cmds=".dll"
+      # FIXME: Setting linknames here is a bad hack.
+      archive_cmds='$CC -o $lib $libobjs $compiler_flags `$ECHO "X$deplibs" | $Xsed -e '\''s/ -lc$//'\''` -link -dll~linknames='
+      # The linker will automatically build a .lib file if we build a DLL.
+      old_archive_from_new_cmds='true'
+      # FIXME: Should let the user specify the lib program.
+      old_archive_cmds='lib -OUT:$oldlib$oldobjs$old_deplibs'
+      fix_srcfile_path='`cygpath -w "$srcfile"`'
+      enable_shared_with_static_runtimes=yes
+      ;;
+
+    darwin* | rhapsody*)
+
+
+  archive_cmds_need_lc=no
+  hardcode_direct=no
+  hardcode_automatic=yes
+  hardcode_shlibpath_var=unsupported
+  whole_archive_flag_spec=''
+  link_all_deplibs=yes
+  allow_undefined_flag="$_lt_dar_allow_undefined"
+  case $cc_basename in
+     ifort*) _lt_dar_can_shared=yes ;;
+     *) _lt_dar_can_shared=$GCC ;;
+  esac
+  if test "$_lt_dar_can_shared" = "yes"; then
+    output_verbose_link_cmd=echo
+    archive_cmds="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod${_lt_dsymutil}"
+    module_cmds="\$CC \$allow_undefined_flag -o \$lib -bundle \$libobjs \$deplibs \$compiler_flags${_lt_dsymutil}"
+    archive_expsym_cmds="sed 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}"
+    module_expsym_cmds="sed -e 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC \$allow_undefined_flag -o \$lib -bundle \$libobjs \$deplibs \$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}"
+
+  else
+  ld_shlibs=no
+  fi
+
+      ;;
+
+    dgux*)
+      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      hardcode_libdir_flag_spec='-L$libdir'
+      hardcode_shlibpath_var=no
+      ;;
+
+    freebsd1*)
+      ld_shlibs=no
+      ;;
+
+    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor
+    # support.  Future versions do this automatically, but an explicit c++rt0.o
+    # does not break anything, and helps significantly (at the cost of a little
+    # extra space).
+    freebsd2.2*)
+      archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'
+      hardcode_libdir_flag_spec='-R$libdir'
+      hardcode_direct=yes
+      hardcode_shlibpath_var=no
+      ;;
+
+    # Unfortunately, older versions of FreeBSD 2 do not have this feature.
+    freebsd2*)
+      archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+      hardcode_direct=yes
+      hardcode_minus_L=yes
+      hardcode_shlibpath_var=no
+      ;;
+
+    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.
+    freebsd* | dragonfly*)
+      archive_cmds='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'
+      hardcode_libdir_flag_spec='-R$libdir'
+      hardcode_direct=yes
+      hardcode_shlibpath_var=no
+      ;;
+
+    hpux9*)
+      if test "$GCC" = yes; then
+	archive_cmds='$RM $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+      else
+	archive_cmds='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+      fi
+      hardcode_libdir_flag_spec='${wl}+b ${wl}$libdir'
+      hardcode_libdir_separator=:
+      hardcode_direct=yes
+
+      # hardcode_minus_L: Not really in the search PATH,
+      # but as the default location of the library.
+      hardcode_minus_L=yes
+      export_dynamic_flag_spec='${wl}-E'
+      ;;
+
+    hpux10*)
+      if test "$GCC" = yes -a "$with_gnu_ld" = no; then
+	archive_cmds='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	archive_cmds='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'
+      fi
+      if test "$with_gnu_ld" = no; then
+	hardcode_libdir_flag_spec='${wl}+b ${wl}$libdir'
+	hardcode_libdir_flag_spec_ld='+b $libdir'
+	hardcode_libdir_separator=:
+	hardcode_direct=yes
+	hardcode_direct_absolute=yes
+	export_dynamic_flag_spec='${wl}-E'
+	# hardcode_minus_L: Not really in the search PATH,
+	# but as the default location of the library.
+	hardcode_minus_L=yes
+      fi
+      ;;
+
+    hpux11*)
+      if test "$GCC" = yes -a "$with_gnu_ld" = no; then
+	case $host_cpu in
+	hppa*64*)
+	  archive_cmds='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	ia64*)
+	  archive_cmds='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	*)
+	  archive_cmds='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	esac
+      else
+	case $host_cpu in
+	hppa*64*)
+	  archive_cmds='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	ia64*)
+	  archive_cmds='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	*)
+	  archive_cmds='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	esac
+      fi
+      if test "$with_gnu_ld" = no; then
+	hardcode_libdir_flag_spec='${wl}+b ${wl}$libdir'
+	hardcode_libdir_separator=:
+
+	case $host_cpu in
+	hppa*64*|ia64*)
+	  hardcode_direct=no
+	  hardcode_shlibpath_var=no
+	  ;;
+	*)
+	  hardcode_direct=yes
+	  hardcode_direct_absolute=yes
+	  export_dynamic_flag_spec='${wl}-E'
+
+	  # hardcode_minus_L: Not really in the search PATH,
+	  # but as the default location of the library.
+	  hardcode_minus_L=yes
+	  ;;
+	esac
+      fi
+      ;;
+
+    irix5* | irix6* | nonstopux*)
+      if test "$GCC" = yes; then
+	archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+	# Try to use the -exported_symbol ld option, if it does not
+	# work, assume that -exports_file does not work either and
+	# implicitly export all symbols.
+        save_LDFLAGS="$LDFLAGS"
+        LDFLAGS="$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null"
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+int foo(void) {}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'
+
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+        LDFLAGS="$save_LDFLAGS"
+      else
+	archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'
+      fi
+      archive_cmds_need_lc='no'
+      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
+      hardcode_libdir_separator=:
+      inherit_rpath=yes
+      link_all_deplibs=yes
+      ;;
+
+    netbsd* | netbsdelf*-gnu)
+      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+	archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out
+      else
+	archive_cmds='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF
+      fi
+      hardcode_libdir_flag_spec='-R$libdir'
+      hardcode_direct=yes
+      hardcode_shlibpath_var=no
+      ;;
+
+    newsos6)
+      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      hardcode_direct=yes
+      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
+      hardcode_libdir_separator=:
+      hardcode_shlibpath_var=no
+      ;;
+
+    *nto* | *qnx*)
+      ;;
+
+    openbsd*)
+      if test -f /usr/libexec/ld.so; then
+	hardcode_direct=yes
+	hardcode_shlibpath_var=no
+	hardcode_direct_absolute=yes
+	if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+	  archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'
+	  archive_expsym_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'
+	  hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+	  export_dynamic_flag_spec='${wl}-E'
+	else
+	  case $host_os in
+	   openbsd[01].* | openbsd2.[0-7] | openbsd2.[0-7].*)
+	     archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+	     hardcode_libdir_flag_spec='-R$libdir'
+	     ;;
+	   *)
+	     archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'
+	     hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+	     ;;
+	  esac
+	fi
+      else
+	ld_shlibs=no
+      fi
+      ;;
+
+    os2*)
+      hardcode_libdir_flag_spec='-L$libdir'
+      hardcode_minus_L=yes
+      allow_undefined_flag=unsupported
+      archive_cmds='$ECHO "LIBRARY $libname INITINSTANCE" > $output_objdir/$libname.def~$ECHO "DESCRIPTION \"$libname\"" >> $output_objdir/$libname.def~$ECHO DATA >> $output_objdir/$libname.def~$ECHO " SINGLE NONSHARED" >> $output_objdir/$libname.def~$ECHO EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'
+      old_archive_from_new_cmds='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'
+      ;;
+
+    osf3*)
+      if test "$GCC" = yes; then
+	allow_undefined_flag=' ${wl}-expect_unresolved ${wl}\*'
+	archive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+      else
+	allow_undefined_flag=' -expect_unresolved \*'
+	archive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+      fi
+      archive_cmds_need_lc='no'
+      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
+      hardcode_libdir_separator=:
+      ;;
+
+    osf4* | osf5*)	# as osf3* with the addition of -msym flag
+      if test "$GCC" = yes; then
+	allow_undefined_flag=' ${wl}-expect_unresolved ${wl}\*'
+	archive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+	hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
+      else
+	allow_undefined_flag=' -expect_unresolved \*'
+	archive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	archive_expsym_cmds='for i in `cat $export_symbols`; do printf "%s %s\\n" -exported_symbol "\$i" >> $lib.exp; done; printf "%s\\n" "-hidden">> $lib.exp~
+	$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'
+
+	# Both c and cxx compiler support -rpath directly
+	hardcode_libdir_flag_spec='-rpath $libdir'
+      fi
+      archive_cmds_need_lc='no'
+      hardcode_libdir_separator=:
+      ;;
+
+    solaris*)
+      no_undefined_flag=' -z defs'
+      if test "$GCC" = yes; then
+	wlarc='${wl}'
+	archive_cmds='$CC -shared ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'
+	archive_expsym_cmds='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	  $CC -shared ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'
+      else
+	case `$CC -V 2>&1` in
+	*"Compilers 5.0"*)
+	  wlarc=''
+	  archive_cmds='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	  archive_expsym_cmds='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'
+	  ;;
+	*)
+	  wlarc='${wl}'
+	  archive_cmds='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'
+	  archive_expsym_cmds='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'
+	  ;;
+	esac
+      fi
+      hardcode_libdir_flag_spec='-R$libdir'
+      hardcode_shlibpath_var=no
+      case $host_os in
+      solaris2.[0-5] | solaris2.[0-5].*) ;;
+      *)
+	# The compiler driver will combine and reorder linker options,
+	# but understands `-z linker_flag'.  GCC discards it without `$wl',
+	# but is careful enough not to reorder.
+	# Supported since Solaris 2.6 (maybe 2.5.1?)
+	if test "$GCC" = yes; then
+	  whole_archive_flag_spec='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'
+	else
+	  whole_archive_flag_spec='-z allextract$convenience -z defaultextract'
+	fi
+	;;
+      esac
+      link_all_deplibs=yes
+      ;;
+
+    sunos4*)
+      if test "x$host_vendor" = xsequent; then
+	# Use $CC to link under sequent, because it throws in some extra .o
+	# files that make .init and .fini sections work.
+	archive_cmds='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	archive_cmds='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'
+      fi
+      hardcode_libdir_flag_spec='-L$libdir'
+      hardcode_direct=yes
+      hardcode_minus_L=yes
+      hardcode_shlibpath_var=no
+      ;;
+
+    sysv4)
+      case $host_vendor in
+	sni)
+	  archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	  hardcode_direct=yes # is this really true???
+	;;
+	siemens)
+	  ## LD is ld it makes a PLAMLIB
+	  ## CC just makes a GrossModule.
+	  archive_cmds='$LD -G -o $lib $libobjs $deplibs $linker_flags'
+	  reload_cmds='$CC -r -o $output$reload_objs'
+	  hardcode_direct=no
+        ;;
+	motorola)
+	  archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	  hardcode_direct=no #Motorola manual says yes, but my tests say they lie
+	;;
+      esac
+      runpath_var='LD_RUN_PATH'
+      hardcode_shlibpath_var=no
+      ;;
+
+    sysv4.3*)
+      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      hardcode_shlibpath_var=no
+      export_dynamic_flag_spec='-Bexport'
+      ;;
+
+    sysv4*MP*)
+      if test -d /usr/nec; then
+	archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	hardcode_shlibpath_var=no
+	runpath_var=LD_RUN_PATH
+	hardcode_runpath_var=yes
+	ld_shlibs=yes
+      fi
+      ;;
+
+    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[01].[10]* | unixware7* | sco3.2v5.0.[024]*)
+      no_undefined_flag='${wl}-z,text'
+      archive_cmds_need_lc=no
+      hardcode_shlibpath_var=no
+      runpath_var='LD_RUN_PATH'
+
+      if test "$GCC" = yes; then
+	archive_cmds='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	archive_expsym_cmds='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	archive_cmds='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	archive_expsym_cmds='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      fi
+      ;;
+
+    sysv5* | sco3.2v5* | sco5v6*)
+      # Note: We can NOT use -z defs as we might desire, because we do not
+      # link with -lc, and that would cause any symbols used from libc to
+      # always be unresolved, which means just about no library would
+      # ever link correctly.  If we're not using GNU ld we use -z text
+      # though, which does catch some bad symbols but isn't as heavy-handed
+      # as -z defs.
+      no_undefined_flag='${wl}-z,text'
+      allow_undefined_flag='${wl}-z,nodefs'
+      archive_cmds_need_lc=no
+      hardcode_shlibpath_var=no
+      hardcode_libdir_flag_spec='${wl}-R,$libdir'
+      hardcode_libdir_separator=':'
+      link_all_deplibs=yes
+      export_dynamic_flag_spec='${wl}-Bexport'
+      runpath_var='LD_RUN_PATH'
+
+      if test "$GCC" = yes; then
+	archive_cmds='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	archive_expsym_cmds='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	archive_cmds='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	archive_expsym_cmds='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      fi
+      ;;
+
+    uts4*)
+      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      hardcode_libdir_flag_spec='-L$libdir'
+      hardcode_shlibpath_var=no
+      ;;
+
+    *)
+      ld_shlibs=no
+      ;;
+    esac
+
+    if test x$host_vendor = xsni; then
+      case $host in
+      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)
+	export_dynamic_flag_spec='${wl}-Blargedynsym'
+	;;
+      esac
+    fi
+  fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ld_shlibs" >&5
+$as_echo "$ld_shlibs" >&6; }
+test "$ld_shlibs" = no && can_build_shared=no
+
+with_gnu_ld=$with_gnu_ld
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+#
+# Do we need to explicitly link libc?
+#
+case "x$archive_cmds_need_lc" in
+x|xyes)
+  # Assume -lc should be added
+  archive_cmds_need_lc=yes
+
+  if test "$enable_shared" = yes && test "$GCC" = yes; then
+    case $archive_cmds in
+    *'~'*)
+      # FIXME: we may have to deal with multi-command sequences.
+      ;;
+    '$CC '*)
+      # Test whether the compiler implicitly links with -lc since on some
+      # systems, -lgcc has to come before -lc. If gcc already passes -lc
+      # to ld, don't add -lc before -lgcc.
+      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -lc should be explicitly linked in" >&5
+$as_echo_n "checking whether -lc should be explicitly linked in... " >&6; }
+      $RM conftest*
+      echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+      if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } 2>conftest.err; then
+        soname=conftest
+        lib=conftest
+        libobjs=conftest.$ac_objext
+        deplibs=
+        wl=$lt_prog_compiler_wl
+	pic_flag=$lt_prog_compiler_pic
+        compiler_flags=-v
+        linker_flags=-v
+        verstring=
+        output_objdir=.
+        libname=conftest
+        lt_save_allow_undefined_flag=$allow_undefined_flag
+        allow_undefined_flag=
+        if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$archive_cmds 2\>\&1 \| $GREP \" -lc \" \>/dev/null 2\>\&1\""; } >&5
+  (eval $archive_cmds 2\>\&1 \| $GREP \" -lc \" \>/dev/null 2\>\&1) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+        then
+	  archive_cmds_need_lc=no
+        else
+	  archive_cmds_need_lc=yes
+        fi
+        allow_undefined_flag=$lt_save_allow_undefined_flag
+      else
+        cat conftest.err 1>&5
+      fi
+      $RM conftest*
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: $archive_cmds_need_lc" >&5
+$as_echo "$archive_cmds_need_lc" >&6; }
+      ;;
+    esac
+  fi
+  ;;
+esac
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking dynamic linker characteristics" >&5
+$as_echo_n "checking dynamic linker characteristics... " >&6; }
+
+if test "$GCC" = yes; then
+  case $host_os in
+    darwin*) lt_awk_arg="/^libraries:/,/LR/" ;;
+    *) lt_awk_arg="/^libraries:/" ;;
+  esac
+  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e "s/^libraries://" -e "s,=/,/,g"`
+  if $ECHO "$lt_search_path_spec" | $GREP ';' >/dev/null ; then
+    # if the path contains ";" then we assume it to be the separator
+    # otherwise default to the standard path separator (i.e. ":") - it is
+    # assumed that no part of a normal pathname contains ";" but that should
+    # okay in the real world where ";" in dirpaths is itself problematic.
+    lt_search_path_spec=`$ECHO "$lt_search_path_spec" | $SED -e 's/;/ /g'`
+  else
+    lt_search_path_spec=`$ECHO "$lt_search_path_spec" | $SED  -e "s/$PATH_SEPARATOR/ /g"`
+  fi
+  # Ok, now we have the path, separated by spaces, we can step through it
+  # and add multilib dir if necessary.
+  lt_tmp_lt_search_path_spec=
+  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`
+  for lt_sys_path in $lt_search_path_spec; do
+    if test -d "$lt_sys_path/$lt_multi_os_dir"; then
+      lt_tmp_lt_search_path_spec="$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir"
+    else
+      test -d "$lt_sys_path" && \
+	lt_tmp_lt_search_path_spec="$lt_tmp_lt_search_path_spec $lt_sys_path"
+    fi
+  done
+  lt_search_path_spec=`$ECHO $lt_tmp_lt_search_path_spec | awk '
+BEGIN {RS=" "; FS="/|\n";} {
+  lt_foo="";
+  lt_count=0;
+  for (lt_i = NF; lt_i > 0; lt_i--) {
+    if ($lt_i != "" && $lt_i != ".") {
+      if ($lt_i == "..") {
+        lt_count++;
+      } else {
+        if (lt_count == 0) {
+          lt_foo="/" $lt_i lt_foo;
+        } else {
+          lt_count--;
+        }
+      }
+    }
+  }
+  if (lt_foo != "") { lt_freq[lt_foo]++; }
+  if (lt_freq[lt_foo] == 1) { print lt_foo; }
+}'`
+  sys_lib_search_path_spec=`$ECHO $lt_search_path_spec`
+else
+  sys_lib_search_path_spec="/lib /usr/lib /usr/local/lib"
+fi
+library_names_spec=
+libname_spec='lib$name'
+soname_spec=
+shrext_cmds=".so"
+postinstall_cmds=
+postuninstall_cmds=
+finish_cmds=
+finish_eval=
+shlibpath_var=
+shlibpath_overrides_runpath=unknown
+version_type=none
+dynamic_linker="$host_os ld.so"
+sys_lib_dlsearch_path_spec="/lib /usr/lib"
+need_lib_prefix=unknown
+hardcode_into_libs=no
+
+# when you set need_version to no, make sure it does not cause -set_version
+# flags to be left without arguments
+need_version=unknown
+
+case $host_os in
+aix3*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'
+  shlibpath_var=LIBPATH
+
+  # AIX 3 has no versioning support, so we append a major version to the name.
+  soname_spec='${libname}${release}${shared_ext}$major'
+  ;;
+
+aix[4-9]*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  hardcode_into_libs=yes
+  if test "$host_cpu" = ia64; then
+    # AIX 5 supports IA64
+    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'
+    shlibpath_var=LD_LIBRARY_PATH
+  else
+    # With GCC up to 2.95.x, collect2 would create an import file
+    # for dependence libraries.  The import file would start with
+    # the line `#! .'.  This would cause the generated library to
+    # depend on `.', always an invalid library.  This was fixed in
+    # development snapshots of GCC prior to 3.0.
+    case $host_os in
+      aix4 | aix4.[01] | aix4.[01].*)
+      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'
+	   echo ' yes '
+	   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then
+	:
+      else
+	can_build_shared=no
+      fi
+      ;;
+    esac
+    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct
+    # soname into executable. Probably we can add versioning support to
+    # collect2, so additional links can be useful in future.
+    if test "$aix_use_runtimelinking" = yes; then
+      # If using run time linking (on AIX 4.2 or later) use lib<name>.so
+      # instead of lib<name>.a to let people know that these are not
+      # typical AIX shared libraries.
+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    else
+      # We preserve .a as extension for shared libraries through AIX4.2
+      # and later when we are not doing run time linking.
+      library_names_spec='${libname}${release}.a $libname.a'
+      soname_spec='${libname}${release}${shared_ext}$major'
+    fi
+    shlibpath_var=LIBPATH
+  fi
+  ;;
+
+amigaos*)
+  case $host_cpu in
+  powerpc)
+    # Since July 2007 AmigaOS4 officially supports .so libraries.
+    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    ;;
+  m68k)
+    library_names_spec='$libname.ixlibrary $libname.a'
+    # Create ${libname}_ixlibrary.a entries in /sys/libs.
+    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$ECHO "X$lib" | $Xsed -e '\''s%^.*/\([^/]*\)\.ixlibrary$%\1%'\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show "cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'
+    ;;
+  esac
+  ;;
+
+beos*)
+  library_names_spec='${libname}${shared_ext}'
+  dynamic_linker="$host_os ld.so"
+  shlibpath_var=LIBRARY_PATH
+  ;;
+
+bsdi[45]*)
+  version_type=linux
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  sys_lib_search_path_spec="/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib"
+  sys_lib_dlsearch_path_spec="/shlib /usr/lib /usr/local/lib"
+  # the default ld.so.conf also contains /usr/contrib/lib and
+  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow
+  # libtool to hard-code these into programs
+  ;;
+
+cygwin* | mingw* | pw32* | cegcc*)
+  version_type=windows
+  shrext_cmds=".dll"
+  need_version=no
+  need_lib_prefix=no
+
+  case $GCC,$host_os in
+  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)
+    library_names_spec='$libname.dll.a'
+    # DLL is installed to $(libdir)/../bin by postinstall_cmds
+    postinstall_cmds='base_file=`basename \${file}`~
+      dlpath=`$SHELL 2>&1 -c '\''. $dir/'\''\${base_file}'\''i; echo \$dlname'\''`~
+      dldir=$destdir/`dirname \$dlpath`~
+      test -d \$dldir || mkdir -p \$dldir~
+      $install_prog $dir/$dlname \$dldir/$dlname~
+      chmod a+x \$dldir/$dlname~
+      if test -n '\''$stripme'\'' && test -n '\''$striplib'\''; then
+        eval '\''$striplib \$dldir/$dlname'\'' || exit \$?;
+      fi'
+    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\''. $file; echo \$dlname'\''`~
+      dlpath=$dir/\$dldll~
+       $RM \$dlpath'
+    shlibpath_overrides_runpath=yes
+
+    case $host_os in
+    cygwin*)
+      # Cygwin DLLs use 'cyg' prefix rather than 'lib'
+      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'
+      sys_lib_search_path_spec="/usr/lib /lib/w32api /lib /usr/local/lib"
+      ;;
+    mingw* | cegcc*)
+      # MinGW DLLs use traditional 'lib' prefix
+      soname_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'
+      sys_lib_search_path_spec=`$CC -print-search-dirs | $GREP "^libraries:" | $SED -e "s/^libraries://" -e "s,=/,/,g"`
+      if $ECHO "$sys_lib_search_path_spec" | $GREP ';[c-zC-Z]:/' >/dev/null; then
+        # It is most probably a Windows format PATH printed by
+        # mingw gcc, but we are running on Cygwin. Gcc prints its search
+        # path with ; separators, and with drive letters. We can handle the
+        # drive letters (cygwin fileutils understands them), so leave them,
+        # especially as we might pass files found there to a mingw objdump,
+        # which wouldn't understand a cygwinified path. Ahh.
+        sys_lib_search_path_spec=`$ECHO "$sys_lib_search_path_spec" | $SED -e 's/;/ /g'`
+      else
+        sys_lib_search_path_spec=`$ECHO "$sys_lib_search_path_spec" | $SED  -e "s/$PATH_SEPARATOR/ /g"`
+      fi
+      ;;
+    pw32*)
+      # pw32 DLLs use 'pw' prefix rather than 'lib'
+      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'
+      ;;
+    esac
+    ;;
+
+  *)
+    library_names_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext} $libname.lib'
+    ;;
+  esac
+  dynamic_linker='Win32 ld.exe'
+  # FIXME: first we should search . and the directory the executable is in
+  shlibpath_var=PATH
+  ;;
+
+darwin* | rhapsody*)
+  dynamic_linker="$host_os dyld"
+  version_type=darwin
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'
+  soname_spec='${libname}${release}${major}$shared_ext'
+  shlibpath_overrides_runpath=yes
+  shlibpath_var=DYLD_LIBRARY_PATH
+  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'
+
+  sys_lib_search_path_spec="$sys_lib_search_path_spec /usr/local/lib"
+  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'
+  ;;
+
+dgux*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  ;;
+
+freebsd1*)
+  dynamic_linker=no
+  ;;
+
+freebsd* | dragonfly*)
+  # DragonFly does not have aout.  When/if they implement a new
+  # versioning mechanism, adjust this.
+  if test -x /usr/bin/objformat; then
+    objformat=`/usr/bin/objformat`
+  else
+    case $host_os in
+    freebsd[123]*) objformat=aout ;;
+    *) objformat=elf ;;
+    esac
+  fi
+  version_type=freebsd-$objformat
+  case $version_type in
+    freebsd-elf*)
+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'
+      need_version=no
+      need_lib_prefix=no
+      ;;
+    freebsd-*)
+      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'
+      need_version=yes
+      ;;
+  esac
+  shlibpath_var=LD_LIBRARY_PATH
+  case $host_os in
+  freebsd2*)
+    shlibpath_overrides_runpath=yes
+    ;;
+  freebsd3.[01]* | freebsdelf3.[01]*)
+    shlibpath_overrides_runpath=yes
+    hardcode_into_libs=yes
+    ;;
+  freebsd3.[2-9]* | freebsdelf3.[2-9]* | \
+  freebsd4.[0-5] | freebsdelf4.[0-5] | freebsd4.1.1 | freebsdelf4.1.1)
+    shlibpath_overrides_runpath=no
+    hardcode_into_libs=yes
+    ;;
+  *) # from 4.6 on, and DragonFly
+    shlibpath_overrides_runpath=yes
+    hardcode_into_libs=yes
+    ;;
+  esac
+  ;;
+
+gnu*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+  ;;
+
+hpux9* | hpux10* | hpux11*)
+  # Give a soname corresponding to the major version so that dld.sl refuses to
+  # link against other versions.
+  version_type=sunos
+  need_lib_prefix=no
+  need_version=no
+  case $host_cpu in
+  ia64*)
+    shrext_cmds='.so'
+    hardcode_into_libs=yes
+    dynamic_linker="$host_os dld.so"
+    shlibpath_var=LD_LIBRARY_PATH
+    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    if test "X$HPUX_IA64_MODE" = X32; then
+      sys_lib_search_path_spec="/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib"
+    else
+      sys_lib_search_path_spec="/usr/lib/hpux64 /usr/local/lib/hpux64"
+    fi
+    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec
+    ;;
+  hppa*64*)
+    shrext_cmds='.sl'
+    hardcode_into_libs=yes
+    dynamic_linker="$host_os dld.sl"
+    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH
+    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    sys_lib_search_path_spec="/usr/lib/pa20_64 /usr/ccs/lib/pa20_64"
+    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec
+    ;;
+  *)
+    shrext_cmds='.sl'
+    dynamic_linker="$host_os dld.sl"
+    shlibpath_var=SHLIB_PATH
+    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    ;;
+  esac
+  # HP-UX runs *really* slowly unless shared libraries are mode 555.
+  postinstall_cmds='chmod 555 $lib'
+  ;;
+
+interix[3-9]*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  ;;
+
+irix5* | irix6* | nonstopux*)
+  case $host_os in
+    nonstopux*) version_type=nonstopux ;;
+    *)
+	if test "$lt_cv_prog_gnu_ld" = yes; then
+		version_type=linux
+	else
+		version_type=irix
+	fi ;;
+  esac
+  need_lib_prefix=no
+  need_version=no
+  soname_spec='${libname}${release}${shared_ext}$major'
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'
+  case $host_os in
+  irix5* | nonstopux*)
+    libsuff= shlibsuff=
+    ;;
+  *)
+    case $LD in # libtool.m4 will add one of these switches to LD
+    *-32|*"-32 "|*-melf32bsmip|*"-melf32bsmip ")
+      libsuff= shlibsuff= libmagic=32-bit;;
+    *-n32|*"-n32 "|*-melf32bmipn32|*"-melf32bmipn32 ")
+      libsuff=32 shlibsuff=N32 libmagic=N32;;
+    *-64|*"-64 "|*-melf64bmip|*"-melf64bmip ")
+      libsuff=64 shlibsuff=64 libmagic=64-bit;;
+    *) libsuff= shlibsuff= libmagic=never-match;;
+    esac
+    ;;
+  esac
+  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH
+  shlibpath_overrides_runpath=no
+  sys_lib_search_path_spec="/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}"
+  sys_lib_dlsearch_path_spec="/usr/lib${libsuff} /lib${libsuff}"
+  hardcode_into_libs=yes
+  ;;
+
+# No shared lib support for Linux oldld, aout, or coff.
+linux*oldld* | linux*aout* | linux*coff*)
+  dynamic_linker=no
+  ;;
+
+# This must be Linux ELF.
+linux* | k*bsd*-gnu | kopensolaris*-gnu)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig -n $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  # Some binutils ld are patched to set DT_RUNPATH
+  save_LDFLAGS=$LDFLAGS
+  save_libdir=$libdir
+  eval "libdir=/foo; wl=\"$lt_prog_compiler_wl\"; \
+       LDFLAGS=\"\$LDFLAGS $hardcode_libdir_flag_spec\""
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  if  ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep "RUNPATH.*$libdir" >/dev/null; then :
+  shlibpath_overrides_runpath=yes
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+  LDFLAGS=$save_LDFLAGS
+  libdir=$save_libdir
+
+  # This implies no fast_install, which is unacceptable.
+  # Some rework will be needed to allow for fast_install
+  # before this can be enabled.
+  hardcode_into_libs=yes
+
+  # Append ld.so.conf contents to the search path
+  if test -f /etc/ld.so.conf; then
+    lt_ld_extra=`awk '/^include / { system(sprintf("cd /etc; cat %s 2>/dev/null", \$2)); skip = 1; } { if (!skip) print \$0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[	 ]*hwcap[	 ]/d;s/[:,	]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\n' ' '`
+    sys_lib_dlsearch_path_spec="/lib /usr/lib $lt_ld_extra"
+  fi
+
+  # We used to test for /lib/ld.so.1 and disable shared libraries on
+  # powerpc, because MkLinux only supported shared libraries with the
+  # GNU dynamic linker.  Since this was broken with cross compilers,
+  # most powerpc-linux boxes support dynamic linking these days and
+  # people can always --disable-shared, the test was removed, and we
+  # assume the GNU/Linux dynamic linker is in use.
+  dynamic_linker='GNU/Linux ld.so'
+  ;;
+
+netbsdelf*-gnu)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  dynamic_linker='NetBSD ld.elf_so'
+  ;;
+
+netbsd*)
+  version_type=sunos
+  need_lib_prefix=no
+  need_version=no
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+    finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
+    dynamic_linker='NetBSD (a.out) ld.so'
+  else
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    dynamic_linker='NetBSD ld.elf_so'
+  fi
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  ;;
+
+newsos6)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  ;;
+
+*nto* | *qnx*)
+  version_type=qnx
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  dynamic_linker='ldqnx.so'
+  ;;
+
+openbsd*)
+  version_type=sunos
+  sys_lib_dlsearch_path_spec="/usr/lib"
+  need_lib_prefix=no
+  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.
+  case $host_os in
+    openbsd3.3 | openbsd3.3.*)	need_version=yes ;;
+    *)				need_version=no  ;;
+  esac
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    case $host_os in
+      openbsd2.[89] | openbsd2.[89].*)
+	shlibpath_overrides_runpath=no
+	;;
+      *)
+	shlibpath_overrides_runpath=yes
+	;;
+      esac
+  else
+    shlibpath_overrides_runpath=yes
+  fi
+  ;;
+
+os2*)
+  libname_spec='$name'
+  shrext_cmds=".dll"
+  need_lib_prefix=no
+  library_names_spec='$libname${shared_ext} $libname.a'
+  dynamic_linker='OS/2 ld.exe'
+  shlibpath_var=LIBPATH
+  ;;
+
+osf3* | osf4* | osf5*)
+  version_type=osf
+  need_lib_prefix=no
+  need_version=no
+  soname_spec='${libname}${release}${shared_ext}$major'
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  sys_lib_search_path_spec="/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib"
+  sys_lib_dlsearch_path_spec="$sys_lib_search_path_spec"
+  ;;
+
+rdos*)
+  dynamic_linker=no
+  ;;
+
+solaris*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  # ldd complains unless libraries are executable
+  postinstall_cmds='chmod +x $lib'
+  ;;
+
+sunos4*)
+  version_type=sunos
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+  finish_cmds='PATH="\$PATH:/usr/etc" ldconfig $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  if test "$with_gnu_ld" = yes; then
+    need_lib_prefix=no
+  fi
+  need_version=yes
+  ;;
+
+sysv4 | sysv4.3*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  case $host_vendor in
+    sni)
+      shlibpath_overrides_runpath=no
+      need_lib_prefix=no
+      runpath_var=LD_RUN_PATH
+      ;;
+    siemens)
+      need_lib_prefix=no
+      ;;
+    motorola)
+      need_lib_prefix=no
+      need_version=no
+      shlibpath_overrides_runpath=no
+      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'
+      ;;
+  esac
+  ;;
+
+sysv4*MP*)
+  if test -d /usr/nec ;then
+    version_type=linux
+    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'
+    soname_spec='$libname${shared_ext}.$major'
+    shlibpath_var=LD_LIBRARY_PATH
+  fi
+  ;;
+
+sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
+  version_type=freebsd-elf
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  if test "$with_gnu_ld" = yes; then
+    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'
+  else
+    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'
+    case $host_os in
+      sco3.2v5*)
+        sys_lib_search_path_spec="$sys_lib_search_path_spec /lib"
+	;;
+    esac
+  fi
+  sys_lib_dlsearch_path_spec='/usr/lib'
+  ;;
+
+tpf*)
+  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  ;;
+
+uts4*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  ;;
+
+*)
+  dynamic_linker=no
+  ;;
+esac
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $dynamic_linker" >&5
+$as_echo "$dynamic_linker" >&6; }
+test "$dynamic_linker" = no && can_build_shared=no
+
+variables_saved_for_relink="PATH $shlibpath_var $runpath_var"
+if test "$GCC" = yes; then
+  variables_saved_for_relink="$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH"
+fi
+
+if test "${lt_cv_sys_lib_search_path_spec+set}" = set; then
+  sys_lib_search_path_spec="$lt_cv_sys_lib_search_path_spec"
+fi
+if test "${lt_cv_sys_lib_dlsearch_path_spec+set}" = set; then
+  sys_lib_dlsearch_path_spec="$lt_cv_sys_lib_dlsearch_path_spec"
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking how to hardcode library paths into programs" >&5
+$as_echo_n "checking how to hardcode library paths into programs... " >&6; }
+hardcode_action=
+if test -n "$hardcode_libdir_flag_spec" ||
+   test -n "$runpath_var" ||
+   test "X$hardcode_automatic" = "Xyes" ; then
+
+  # We can hardcode non-existent directories.
+  if test "$hardcode_direct" != no &&
+     # If the only mechanism to avoid hardcoding is shlibpath_var, we
+     # have to relink, otherwise we might link with an installed library
+     # when we should be linking with a yet-to-be-installed one
+     ## test "$_LT_TAGVAR(hardcode_shlibpath_var, )" != no &&
+     test "$hardcode_minus_L" != no; then
+    # Linking always hardcodes the temporary library directory.
+    hardcode_action=relink
+  else
+    # We can link without hardcoding, and we can hardcode nonexisting dirs.
+    hardcode_action=immediate
+  fi
+else
+  # We cannot hardcode anything, or else we can only hardcode existing
+  # directories.
+  hardcode_action=unsupported
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $hardcode_action" >&5
+$as_echo "$hardcode_action" >&6; }
+
+if test "$hardcode_action" = relink ||
+   test "$inherit_rpath" = yes; then
+  # Fast installation is not supported
+  enable_fast_install=no
+elif test "$shlibpath_overrides_runpath" = yes ||
+     test "$enable_shared" = no; then
+  # Fast installation is not necessary
+  enable_fast_install=needless
+fi
+
+
+
+
+
+
+  if test "x$enable_dlopen" != xyes; then
+  enable_dlopen=unknown
+  enable_dlopen_self=unknown
+  enable_dlopen_self_static=unknown
+else
+  lt_cv_dlopen=no
+  lt_cv_dlopen_libs=
+
+  case $host_os in
+  beos*)
+    lt_cv_dlopen="load_add_on"
+    lt_cv_dlopen_libs=
+    lt_cv_dlopen_self=yes
+    ;;
+
+  mingw* | pw32* | cegcc*)
+    lt_cv_dlopen="LoadLibrary"
+    lt_cv_dlopen_libs=
+    ;;
+
+  cygwin*)
+    lt_cv_dlopen="dlopen"
+    lt_cv_dlopen_libs=
+    ;;
+
+  darwin*)
+  # if libdl is installed we need to link against it
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for dlopen in -ldl" >&5
+$as_echo_n "checking for dlopen in -ldl... " >&6; }
+if test "${ac_cv_lib_dl_dlopen+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-ldl  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char dlopen ();
+int
+main ()
+{
+return dlopen ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_dl_dlopen=yes
+else
+  ac_cv_lib_dl_dlopen=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dl_dlopen" >&5
+$as_echo "$ac_cv_lib_dl_dlopen" >&6; }
+if test "x$ac_cv_lib_dl_dlopen" = x""yes; then :
+  lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-ldl"
+else
+
+    lt_cv_dlopen="dyld"
+    lt_cv_dlopen_libs=
+    lt_cv_dlopen_self=yes
+
+fi
+
+    ;;
+
+  *)
+    ac_fn_c_check_func "$LINENO" "shl_load" "ac_cv_func_shl_load"
+if test "x$ac_cv_func_shl_load" = x""yes; then :
+  lt_cv_dlopen="shl_load"
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for shl_load in -ldld" >&5
+$as_echo_n "checking for shl_load in -ldld... " >&6; }
+if test "${ac_cv_lib_dld_shl_load+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-ldld  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char shl_load ();
+int
+main ()
+{
+return shl_load ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_dld_shl_load=yes
+else
+  ac_cv_lib_dld_shl_load=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dld_shl_load" >&5
+$as_echo "$ac_cv_lib_dld_shl_load" >&6; }
+if test "x$ac_cv_lib_dld_shl_load" = x""yes; then :
+  lt_cv_dlopen="shl_load" lt_cv_dlopen_libs="-ldld"
+else
+  ac_fn_c_check_func "$LINENO" "dlopen" "ac_cv_func_dlopen"
+if test "x$ac_cv_func_dlopen" = x""yes; then :
+  lt_cv_dlopen="dlopen"
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for dlopen in -ldl" >&5
+$as_echo_n "checking for dlopen in -ldl... " >&6; }
+if test "${ac_cv_lib_dl_dlopen+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-ldl  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char dlopen ();
+int
+main ()
+{
+return dlopen ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_dl_dlopen=yes
+else
+  ac_cv_lib_dl_dlopen=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dl_dlopen" >&5
+$as_echo "$ac_cv_lib_dl_dlopen" >&6; }
+if test "x$ac_cv_lib_dl_dlopen" = x""yes; then :
+  lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-ldl"
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for dlopen in -lsvld" >&5
+$as_echo_n "checking for dlopen in -lsvld... " >&6; }
+if test "${ac_cv_lib_svld_dlopen+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lsvld  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char dlopen ();
+int
+main ()
+{
+return dlopen ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_svld_dlopen=yes
+else
+  ac_cv_lib_svld_dlopen=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_svld_dlopen" >&5
+$as_echo "$ac_cv_lib_svld_dlopen" >&6; }
+if test "x$ac_cv_lib_svld_dlopen" = x""yes; then :
+  lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-lsvld"
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for dld_link in -ldld" >&5
+$as_echo_n "checking for dld_link in -ldld... " >&6; }
+if test "${ac_cv_lib_dld_dld_link+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-ldld  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char dld_link ();
+int
+main ()
+{
+return dld_link ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_dld_dld_link=yes
+else
+  ac_cv_lib_dld_dld_link=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dld_dld_link" >&5
+$as_echo "$ac_cv_lib_dld_dld_link" >&6; }
+if test "x$ac_cv_lib_dld_dld_link" = x""yes; then :
+  lt_cv_dlopen="dld_link" lt_cv_dlopen_libs="-ldld"
+fi
+
+
+fi
+
+
+fi
+
+
+fi
+
+
+fi
+
+
+fi
+
+    ;;
+  esac
+
+  if test "x$lt_cv_dlopen" != xno; then
+    enable_dlopen=yes
+  else
+    enable_dlopen=no
+  fi
+
+  case $lt_cv_dlopen in
+  dlopen)
+    save_CPPFLAGS="$CPPFLAGS"
+    test "x$ac_cv_header_dlfcn_h" = xyes && CPPFLAGS="$CPPFLAGS -DHAVE_DLFCN_H"
+
+    save_LDFLAGS="$LDFLAGS"
+    wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $export_dynamic_flag_spec\"
+
+    save_LIBS="$LIBS"
+    LIBS="$lt_cv_dlopen_libs $LIBS"
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether a program can dlopen itself" >&5
+$as_echo_n "checking whether a program can dlopen itself... " >&6; }
+if test "${lt_cv_dlopen_self+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  	  if test "$cross_compiling" = yes; then :
+  lt_cv_dlopen_self=cross
+else
+  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
+  lt_status=$lt_dlunknown
+  cat > conftest.$ac_ext <<_LT_EOF
+#line 10656 "configure"
+#include "confdefs.h"
+
+#if HAVE_DLFCN_H
+#include <dlfcn.h>
+#endif
+
+#include <stdio.h>
+
+#ifdef RTLD_GLOBAL
+#  define LT_DLGLOBAL		RTLD_GLOBAL
+#else
+#  ifdef DL_GLOBAL
+#    define LT_DLGLOBAL		DL_GLOBAL
+#  else
+#    define LT_DLGLOBAL		0
+#  endif
+#endif
+
+/* We may have to define LT_DLLAZY_OR_NOW in the command line if we
+   find out it does not work in some platform. */
+#ifndef LT_DLLAZY_OR_NOW
+#  ifdef RTLD_LAZY
+#    define LT_DLLAZY_OR_NOW		RTLD_LAZY
+#  else
+#    ifdef DL_LAZY
+#      define LT_DLLAZY_OR_NOW		DL_LAZY
+#    else
+#      ifdef RTLD_NOW
+#        define LT_DLLAZY_OR_NOW	RTLD_NOW
+#      else
+#        ifdef DL_NOW
+#          define LT_DLLAZY_OR_NOW	DL_NOW
+#        else
+#          define LT_DLLAZY_OR_NOW	0
+#        endif
+#      endif
+#    endif
+#  endif
+#endif
+
+void fnord() { int i=42;}
+int main ()
+{
+  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);
+  int status = $lt_dlunknown;
+
+  if (self)
+    {
+      if (dlsym (self,"fnord"))       status = $lt_dlno_uscore;
+      else if (dlsym( self,"_fnord")) status = $lt_dlneed_uscore;
+      /* dlclose (self); */
+    }
+  else
+    puts (dlerror ());
+
+  return status;
+}
+_LT_EOF
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_link\""; } >&5
+  (eval $ac_link) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && test -s conftest${ac_exeext} 2>/dev/null; then
+    (./conftest; exit; ) >&5 2>/dev/null
+    lt_status=$?
+    case x$lt_status in
+      x$lt_dlno_uscore) lt_cv_dlopen_self=yes ;;
+      x$lt_dlneed_uscore) lt_cv_dlopen_self=yes ;;
+      x$lt_dlunknown|x*) lt_cv_dlopen_self=no ;;
+    esac
+  else :
+    # compilation failed
+    lt_cv_dlopen_self=no
+  fi
+fi
+rm -fr conftest*
+
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_dlopen_self" >&5
+$as_echo "$lt_cv_dlopen_self" >&6; }
+
+    if test "x$lt_cv_dlopen_self" = xyes; then
+      wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
+      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether a statically linked program can dlopen itself" >&5
+$as_echo_n "checking whether a statically linked program can dlopen itself... " >&6; }
+if test "${lt_cv_dlopen_self_static+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  	  if test "$cross_compiling" = yes; then :
+  lt_cv_dlopen_self_static=cross
+else
+  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
+  lt_status=$lt_dlunknown
+  cat > conftest.$ac_ext <<_LT_EOF
+#line 10752 "configure"
+#include "confdefs.h"
+
+#if HAVE_DLFCN_H
+#include <dlfcn.h>
+#endif
+
+#include <stdio.h>
+
+#ifdef RTLD_GLOBAL
+#  define LT_DLGLOBAL		RTLD_GLOBAL
+#else
+#  ifdef DL_GLOBAL
+#    define LT_DLGLOBAL		DL_GLOBAL
+#  else
+#    define LT_DLGLOBAL		0
+#  endif
+#endif
+
+/* We may have to define LT_DLLAZY_OR_NOW in the command line if we
+   find out it does not work in some platform. */
+#ifndef LT_DLLAZY_OR_NOW
+#  ifdef RTLD_LAZY
+#    define LT_DLLAZY_OR_NOW		RTLD_LAZY
+#  else
+#    ifdef DL_LAZY
+#      define LT_DLLAZY_OR_NOW		DL_LAZY
+#    else
+#      ifdef RTLD_NOW
+#        define LT_DLLAZY_OR_NOW	RTLD_NOW
+#      else
+#        ifdef DL_NOW
+#          define LT_DLLAZY_OR_NOW	DL_NOW
+#        else
+#          define LT_DLLAZY_OR_NOW	0
+#        endif
+#      endif
+#    endif
+#  endif
+#endif
+
+void fnord() { int i=42;}
+int main ()
+{
+  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);
+  int status = $lt_dlunknown;
+
+  if (self)
+    {
+      if (dlsym (self,"fnord"))       status = $lt_dlno_uscore;
+      else if (dlsym( self,"_fnord")) status = $lt_dlneed_uscore;
+      /* dlclose (self); */
+    }
+  else
+    puts (dlerror ());
+
+  return status;
+}
+_LT_EOF
+  if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_link\""; } >&5
+  (eval $ac_link) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && test -s conftest${ac_exeext} 2>/dev/null; then
+    (./conftest; exit; ) >&5 2>/dev/null
+    lt_status=$?
+    case x$lt_status in
+      x$lt_dlno_uscore) lt_cv_dlopen_self_static=yes ;;
+      x$lt_dlneed_uscore) lt_cv_dlopen_self_static=yes ;;
+      x$lt_dlunknown|x*) lt_cv_dlopen_self_static=no ;;
+    esac
+  else :
+    # compilation failed
+    lt_cv_dlopen_self_static=no
+  fi
+fi
+rm -fr conftest*
+
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_dlopen_self_static" >&5
+$as_echo "$lt_cv_dlopen_self_static" >&6; }
+    fi
+
+    CPPFLAGS="$save_CPPFLAGS"
+    LDFLAGS="$save_LDFLAGS"
+    LIBS="$save_LIBS"
+    ;;
+  esac
+
+  case $lt_cv_dlopen_self in
+  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;
+  *) enable_dlopen_self=unknown ;;
+  esac
+
+  case $lt_cv_dlopen_self_static in
+  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;
+  *) enable_dlopen_self_static=unknown ;;
+  esac
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+striplib=
+old_striplib=
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether stripping libraries is possible" >&5
+$as_echo_n "checking whether stripping libraries is possible... " >&6; }
+if test -n "$STRIP" && $STRIP -V 2>&1 | $GREP "GNU strip" >/dev/null; then
+  test -z "$old_striplib" && old_striplib="$STRIP --strip-debug"
+  test -z "$striplib" && striplib="$STRIP --strip-unneeded"
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+# FIXME - insert some real tests, host_os isn't really good enough
+  case $host_os in
+  darwin*)
+    if test -n "$STRIP" ; then
+      striplib="$STRIP -x"
+      old_striplib="$STRIP -S"
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+    else
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+    fi
+    ;;
+  *)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+    ;;
+  esac
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+  # Report which library types will actually be built
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if libtool supports shared libraries" >&5
+$as_echo_n "checking if libtool supports shared libraries... " >&6; }
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $can_build_shared" >&5
+$as_echo "$can_build_shared" >&6; }
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to build shared libraries" >&5
+$as_echo_n "checking whether to build shared libraries... " >&6; }
+  test "$can_build_shared" = "no" && enable_shared=no
+
+  # On AIX, shared libraries and static libraries use the same namespace, and
+  # are all built from PIC.
+  case $host_os in
+  aix3*)
+    test "$enable_shared" = yes && enable_static=no
+    if test -n "$RANLIB"; then
+      archive_cmds="$archive_cmds~\$RANLIB \$lib"
+      postinstall_cmds='$RANLIB $lib'
+    fi
+    ;;
+
+  aix[4-9]*)
+    if test "$host_cpu" != ia64 && test "$aix_use_runtimelinking" = no ; then
+      test "$enable_shared" = yes && enable_static=no
+    fi
+    ;;
+  esac
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $enable_shared" >&5
+$as_echo "$enable_shared" >&6; }
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to build static libraries" >&5
+$as_echo_n "checking whether to build static libraries... " >&6; }
+  # Make sure either enable_shared or enable_static is yes.
+  test "$enable_shared" = yes || enable_static=yes
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $enable_static" >&5
+$as_echo "$enable_static" >&6; }
+
+
+
+
+fi
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+CC="$lt_save_CC"
+
+
+
+
+
+
+
+
+
+
+
+
+
+        ac_config_commands="$ac_config_commands libtool"
+
+
+
+
+# Only expand once:
+
+
+
+# Docygen features
+
+
+
+
+
+
+
+
+
+
+# Files:
+DX_PROJECT=opensaml
+
+DX_CONFIG=doxygen.cfg
+
+DX_DOCDIR=doc/api
+
+
+# Environment variables used inside doxygen.cfg:
+DX_ENV="$DX_ENV SRCDIR='$srcdir'"
+
+DX_ENV="$DX_ENV PROJECT='$DX_PROJECT'"
+
+DX_ENV="$DX_ENV DOCDIR='$DX_DOCDIR'"
+
+DX_ENV="$DX_ENV VERSION='$PACKAGE_VERSION'"
+
+
+# Doxygen itself:
+
+
+
+    # Check whether --enable-doxygen-doc was given.
+if test "${enable_doxygen_doc+set}" = set; then :
+  enableval=$enable_doxygen_doc;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_doc=1
+
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_doc=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-doc" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_doc=1
+
+
+
+fi
+
+if test "$DX_FLAG_doc" = 1; then
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}doxygen", so it can be a program name with args.
+set dummy ${ac_tool_prefix}doxygen; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_DOXYGEN+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_DOXYGEN in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_DOXYGEN="$DX_DOXYGEN" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_DOXYGEN="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_DOXYGEN=$ac_cv_path_DX_DOXYGEN
+if test -n "$DX_DOXYGEN"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_DOXYGEN" >&5
+$as_echo "$DX_DOXYGEN" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_DOXYGEN"; then
+  ac_pt_DX_DOXYGEN=$DX_DOXYGEN
+  # Extract the first word of "doxygen", so it can be a program name with args.
+set dummy doxygen; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_DOXYGEN+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_DOXYGEN in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_DOXYGEN="$ac_pt_DX_DOXYGEN" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_DOXYGEN="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_DOXYGEN=$ac_cv_path_ac_pt_DX_DOXYGEN
+if test -n "$ac_pt_DX_DOXYGEN"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_DOXYGEN" >&5
+$as_echo "$ac_pt_DX_DOXYGEN" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_DOXYGEN" = x; then
+    DX_DOXYGEN=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_DOXYGEN=$ac_pt_DX_DOXYGEN
+  fi
+else
+  DX_DOXYGEN="$ac_cv_path_DX_DOXYGEN"
+fi
+
+if test "$DX_FLAG_doc$DX_DOXYGEN" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: doxygen not found - will not generate any doxygen documentation" >&5
+$as_echo "$as_me: WARNING: doxygen not found - will not generate any doxygen documentation" >&2;}
+    DX_FLAG_doc=0
+
+fi
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}perl", so it can be a program name with args.
+set dummy ${ac_tool_prefix}perl; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_PERL+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_PERL in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_PERL="$DX_PERL" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_PERL="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_PERL=$ac_cv_path_DX_PERL
+if test -n "$DX_PERL"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_PERL" >&5
+$as_echo "$DX_PERL" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_PERL"; then
+  ac_pt_DX_PERL=$DX_PERL
+  # Extract the first word of "perl", so it can be a program name with args.
+set dummy perl; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_PERL+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_PERL in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_PERL="$ac_pt_DX_PERL" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_PERL="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_PERL=$ac_cv_path_ac_pt_DX_PERL
+if test -n "$ac_pt_DX_PERL"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_PERL" >&5
+$as_echo "$ac_pt_DX_PERL" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_PERL" = x; then
+    DX_PERL=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_PERL=$ac_pt_DX_PERL
+  fi
+else
+  DX_PERL="$ac_cv_path_DX_PERL"
+fi
+
+if test "$DX_FLAG_doc$DX_PERL" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: perl not found - will not generate any doxygen documentation" >&5
+$as_echo "$as_me: WARNING: perl not found - will not generate any doxygen documentation" >&2;}
+    DX_FLAG_doc=0
+
+fi
+
+    :
+fi
+if test "$DX_FLAG_doc" = 1; then
+     if :; then
+  DX_COND_doc_TRUE=
+  DX_COND_doc_FALSE='#'
+else
+  DX_COND_doc_TRUE='#'
+  DX_COND_doc_FALSE=
+fi
+
+    DX_ENV="$DX_ENV PERL_PATH='$DX_PERL'"
+
+    :
+else
+     if false; then
+  DX_COND_doc_TRUE=
+  DX_COND_doc_FALSE='#'
+else
+  DX_COND_doc_TRUE='#'
+  DX_COND_doc_FALSE=
+fi
+
+
+    :
+fi
+
+
+# Dot for graphics:
+
+
+
+    # Check whether --enable-doxygen-dot was given.
+if test "${enable_doxygen_dot+set}" = set; then :
+  enableval=$enable_doxygen_dot;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_dot=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-dot requires doxygen-dot" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_dot=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-dot" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_dot=1
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_dot=0
+
+
+
+fi
+
+if test "$DX_FLAG_dot" = 1; then
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}dot", so it can be a program name with args.
+set dummy ${ac_tool_prefix}dot; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_DOT+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_DOT in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_DOT="$DX_DOT" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_DOT="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_DOT=$ac_cv_path_DX_DOT
+if test -n "$DX_DOT"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_DOT" >&5
+$as_echo "$DX_DOT" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_DOT"; then
+  ac_pt_DX_DOT=$DX_DOT
+  # Extract the first word of "dot", so it can be a program name with args.
+set dummy dot; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_DOT+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_DOT in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_DOT="$ac_pt_DX_DOT" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_DOT="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_DOT=$ac_cv_path_ac_pt_DX_DOT
+if test -n "$ac_pt_DX_DOT"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_DOT" >&5
+$as_echo "$ac_pt_DX_DOT" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_DOT" = x; then
+    DX_DOT=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_DOT=$ac_pt_DX_DOT
+  fi
+else
+  DX_DOT="$ac_cv_path_DX_DOT"
+fi
+
+if test "$DX_FLAG_dot$DX_DOT" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: dot not found - will not generate graphics for doxygen documentation" >&5
+$as_echo "$as_me: WARNING: dot not found - will not generate graphics for doxygen documentation" >&2;}
+    DX_FLAG_dot=0
+
+fi
+
+    :
+fi
+if test "$DX_FLAG_dot" = 1; then
+     if :; then
+  DX_COND_dot_TRUE=
+  DX_COND_dot_FALSE='#'
+else
+  DX_COND_dot_TRUE='#'
+  DX_COND_dot_FALSE=
+fi
+
+    DX_ENV="$DX_ENV HAVE_DOT='YES'"
+
+             DX_ENV="$DX_ENV DOT_PATH='`expr ".$DX_DOT" : '\(\.\)[^/]*$' \| "x$DX_DOT" : 'x\(.*\)/[^/]*$'`'"
+
+    :
+else
+     if false; then
+  DX_COND_dot_TRUE=
+  DX_COND_dot_FALSE='#'
+else
+  DX_COND_dot_TRUE='#'
+  DX_COND_dot_FALSE=
+fi
+
+    DX_ENV="$DX_ENV HAVE_DOT='NO'"
+
+    :
+fi
+
+
+# Man pages generation:
+
+
+
+    # Check whether --enable-doxygen-man was given.
+if test "${enable_doxygen_man+set}" = set; then :
+  enableval=$enable_doxygen_man;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_man=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-man requires doxygen-man" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_man=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-man" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_man=0
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_man=0
+
+
+
+fi
+
+if test "$DX_FLAG_man" = 1; then
+
+    :
+fi
+if test "$DX_FLAG_man" = 1; then
+     if :; then
+  DX_COND_man_TRUE=
+  DX_COND_man_FALSE='#'
+else
+  DX_COND_man_TRUE='#'
+  DX_COND_man_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_MAN='YES'"
+
+    :
+else
+     if false; then
+  DX_COND_man_TRUE=
+  DX_COND_man_FALSE='#'
+else
+  DX_COND_man_TRUE='#'
+  DX_COND_man_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_MAN='NO'"
+
+    :
+fi
+
+
+# RTF file generation:
+
+
+
+    # Check whether --enable-doxygen-rtf was given.
+if test "${enable_doxygen_rtf+set}" = set; then :
+  enableval=$enable_doxygen_rtf;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_rtf=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-rtf requires doxygen-rtf" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_rtf=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-rtf" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_rtf=0
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_rtf=0
+
+
+
+fi
+
+if test "$DX_FLAG_rtf" = 1; then
+
+    :
+fi
+if test "$DX_FLAG_rtf" = 1; then
+     if :; then
+  DX_COND_rtf_TRUE=
+  DX_COND_rtf_FALSE='#'
+else
+  DX_COND_rtf_TRUE='#'
+  DX_COND_rtf_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_RTF='YES'"
+
+    :
+else
+     if false; then
+  DX_COND_rtf_TRUE=
+  DX_COND_rtf_FALSE='#'
+else
+  DX_COND_rtf_TRUE='#'
+  DX_COND_rtf_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_RTF='NO'"
+
+    :
+fi
+
+
+# XML file generation:
+
+
+
+    # Check whether --enable-doxygen-xml was given.
+if test "${enable_doxygen_xml+set}" = set; then :
+  enableval=$enable_doxygen_xml;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_xml=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-xml requires doxygen-xml" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_xml=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-xml" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_xml=0
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_xml=0
+
+
+
+fi
+
+if test "$DX_FLAG_xml" = 1; then
+
+    :
+fi
+if test "$DX_FLAG_xml" = 1; then
+     if :; then
+  DX_COND_xml_TRUE=
+  DX_COND_xml_FALSE='#'
+else
+  DX_COND_xml_TRUE='#'
+  DX_COND_xml_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_XML='YES'"
+
+    :
+else
+     if false; then
+  DX_COND_xml_TRUE=
+  DX_COND_xml_FALSE='#'
+else
+  DX_COND_xml_TRUE='#'
+  DX_COND_xml_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_XML='NO'"
+
+    :
+fi
+
+
+# (Compressed) HTML help generation:
+
+
+
+    # Check whether --enable-doxygen-chm was given.
+if test "${enable_doxygen_chm+set}" = set; then :
+  enableval=$enable_doxygen_chm;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_chm=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-chm requires doxygen-chm" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_chm=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-chm" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_chm=0
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_chm=0
+
+
+
+fi
+
+if test "$DX_FLAG_chm" = 1; then
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}hhc", so it can be a program name with args.
+set dummy ${ac_tool_prefix}hhc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_HHC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_HHC in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_HHC="$DX_HHC" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_HHC="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_HHC=$ac_cv_path_DX_HHC
+if test -n "$DX_HHC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_HHC" >&5
+$as_echo "$DX_HHC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_HHC"; then
+  ac_pt_DX_HHC=$DX_HHC
+  # Extract the first word of "hhc", so it can be a program name with args.
+set dummy hhc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_HHC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_HHC in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_HHC="$ac_pt_DX_HHC" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_HHC="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_HHC=$ac_cv_path_ac_pt_DX_HHC
+if test -n "$ac_pt_DX_HHC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_HHC" >&5
+$as_echo "$ac_pt_DX_HHC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_HHC" = x; then
+    DX_HHC=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_HHC=$ac_pt_DX_HHC
+  fi
+else
+  DX_HHC="$ac_cv_path_DX_HHC"
+fi
+
+if test "$DX_FLAG_chm$DX_HHC" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: hhc not found - will not generate doxygen compressed HTML help documentation" >&5
+$as_echo "$as_me: WARNING: hhc not found - will not generate doxygen compressed HTML help documentation" >&2;}
+    DX_FLAG_chm=0
+
+fi
+
+    :
+fi
+if test "$DX_FLAG_chm" = 1; then
+     if :; then
+  DX_COND_chm_TRUE=
+  DX_COND_chm_FALSE='#'
+else
+  DX_COND_chm_TRUE='#'
+  DX_COND_chm_FALSE=
+fi
+
+    DX_ENV="$DX_ENV HHC_PATH='$DX_HHC'"
+
+             DX_ENV="$DX_ENV GENERATE_HTML='YES'"
+
+             DX_ENV="$DX_ENV GENERATE_HTMLHELP='YES'"
+
+    :
+else
+     if false; then
+  DX_COND_chm_TRUE=
+  DX_COND_chm_FALSE='#'
+else
+  DX_COND_chm_TRUE='#'
+  DX_COND_chm_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_HTMLHELP='NO'"
+
+    :
+fi
+
+
+# Seperate CHI file generation.
+
+
+
+    # Check whether --enable-doxygen-chi was given.
+if test "${enable_doxygen_chi+set}" = set; then :
+  enableval=$enable_doxygen_chi;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_chi=1
+
+
+test "$DX_FLAG_chm" = "1" \
+|| as_fn_error $? "doxygen-chi requires doxygen-chi" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_chi=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-chi" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_chi=0
+
+
+test "$DX_FLAG_chm" = "1" || DX_FLAG_chi=0
+
+
+
+fi
+
+if test "$DX_FLAG_chi" = 1; then
+
+    :
+fi
+if test "$DX_FLAG_chi" = 1; then
+     if :; then
+  DX_COND_chi_TRUE=
+  DX_COND_chi_FALSE='#'
+else
+  DX_COND_chi_TRUE='#'
+  DX_COND_chi_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_CHI='YES'"
+
+    :
+else
+     if false; then
+  DX_COND_chi_TRUE=
+  DX_COND_chi_FALSE='#'
+else
+  DX_COND_chi_TRUE='#'
+  DX_COND_chi_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_CHI='NO'"
+
+    :
+fi
+
+
+# Plain HTML pages generation:
+
+
+
+    # Check whether --enable-doxygen-html was given.
+if test "${enable_doxygen_html+set}" = set; then :
+  enableval=$enable_doxygen_html;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_html=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-html requires doxygen-html" "$LINENO" 5
+
+test "$DX_FLAG_chm" = "0" \
+|| as_fn_error $? "doxygen-html contradicts doxygen-html" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_html=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-html" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_html=1
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_html=0
+
+
+test "$DX_FLAG_chm" = "0" || DX_FLAG_html=0
+
+
+
+fi
+
+if test "$DX_FLAG_html" = 1; then
+
+    :
+fi
+if test "$DX_FLAG_html" = 1; then
+     if :; then
+  DX_COND_html_TRUE=
+  DX_COND_html_FALSE='#'
+else
+  DX_COND_html_TRUE='#'
+  DX_COND_html_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_HTML='YES'"
+
+    :
+else
+     if false; then
+  DX_COND_html_TRUE=
+  DX_COND_html_FALSE='#'
+else
+  DX_COND_html_TRUE='#'
+  DX_COND_html_FALSE=
+fi
+
+    test "$DX_FLAG_chm" = 1 || DX_ENV="$DX_ENV GENERATE_HTML='NO'"
+
+    :
+fi
+
+
+# PostScript file generation:
+
+
+
+    # Check whether --enable-doxygen-ps was given.
+if test "${enable_doxygen_ps+set}" = set; then :
+  enableval=$enable_doxygen_ps;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_ps=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-ps requires doxygen-ps" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_ps=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-ps" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_ps=0
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_ps=0
+
+
+
+fi
+
+if test "$DX_FLAG_ps" = 1; then
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}latex", so it can be a program name with args.
+set dummy ${ac_tool_prefix}latex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_LATEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_LATEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_LATEX="$DX_LATEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_LATEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_LATEX=$ac_cv_path_DX_LATEX
+if test -n "$DX_LATEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_LATEX" >&5
+$as_echo "$DX_LATEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_LATEX"; then
+  ac_pt_DX_LATEX=$DX_LATEX
+  # Extract the first word of "latex", so it can be a program name with args.
+set dummy latex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_LATEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_LATEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_LATEX="$ac_pt_DX_LATEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_LATEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_LATEX=$ac_cv_path_ac_pt_DX_LATEX
+if test -n "$ac_pt_DX_LATEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_LATEX" >&5
+$as_echo "$ac_pt_DX_LATEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_LATEX" = x; then
+    DX_LATEX=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_LATEX=$ac_pt_DX_LATEX
+  fi
+else
+  DX_LATEX="$ac_cv_path_DX_LATEX"
+fi
+
+if test "$DX_FLAG_ps$DX_LATEX" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: latex not found - will not generate doxygen PostScript documentation" >&5
+$as_echo "$as_me: WARNING: latex not found - will not generate doxygen PostScript documentation" >&2;}
+    DX_FLAG_ps=0
+
+fi
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}makeindex", so it can be a program name with args.
+set dummy ${ac_tool_prefix}makeindex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_MAKEINDEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_MAKEINDEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_MAKEINDEX="$DX_MAKEINDEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_MAKEINDEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_MAKEINDEX=$ac_cv_path_DX_MAKEINDEX
+if test -n "$DX_MAKEINDEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_MAKEINDEX" >&5
+$as_echo "$DX_MAKEINDEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_MAKEINDEX"; then
+  ac_pt_DX_MAKEINDEX=$DX_MAKEINDEX
+  # Extract the first word of "makeindex", so it can be a program name with args.
+set dummy makeindex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_MAKEINDEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_MAKEINDEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_MAKEINDEX="$ac_pt_DX_MAKEINDEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_MAKEINDEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_MAKEINDEX=$ac_cv_path_ac_pt_DX_MAKEINDEX
+if test -n "$ac_pt_DX_MAKEINDEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_MAKEINDEX" >&5
+$as_echo "$ac_pt_DX_MAKEINDEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_MAKEINDEX" = x; then
+    DX_MAKEINDEX=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_MAKEINDEX=$ac_pt_DX_MAKEINDEX
+  fi
+else
+  DX_MAKEINDEX="$ac_cv_path_DX_MAKEINDEX"
+fi
+
+if test "$DX_FLAG_ps$DX_MAKEINDEX" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: makeindex not found - will not generate doxygen PostScript documentation" >&5
+$as_echo "$as_me: WARNING: makeindex not found - will not generate doxygen PostScript documentation" >&2;}
+    DX_FLAG_ps=0
+
+fi
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}dvips", so it can be a program name with args.
+set dummy ${ac_tool_prefix}dvips; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_DVIPS+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_DVIPS in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_DVIPS="$DX_DVIPS" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_DVIPS="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_DVIPS=$ac_cv_path_DX_DVIPS
+if test -n "$DX_DVIPS"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_DVIPS" >&5
+$as_echo "$DX_DVIPS" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_DVIPS"; then
+  ac_pt_DX_DVIPS=$DX_DVIPS
+  # Extract the first word of "dvips", so it can be a program name with args.
+set dummy dvips; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_DVIPS+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_DVIPS in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_DVIPS="$ac_pt_DX_DVIPS" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_DVIPS="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_DVIPS=$ac_cv_path_ac_pt_DX_DVIPS
+if test -n "$ac_pt_DX_DVIPS"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_DVIPS" >&5
+$as_echo "$ac_pt_DX_DVIPS" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_DVIPS" = x; then
+    DX_DVIPS=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_DVIPS=$ac_pt_DX_DVIPS
+  fi
+else
+  DX_DVIPS="$ac_cv_path_DX_DVIPS"
+fi
+
+if test "$DX_FLAG_ps$DX_DVIPS" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: dvips not found - will not generate doxygen PostScript documentation" >&5
+$as_echo "$as_me: WARNING: dvips not found - will not generate doxygen PostScript documentation" >&2;}
+    DX_FLAG_ps=0
+
+fi
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}egrep", so it can be a program name with args.
+set dummy ${ac_tool_prefix}egrep; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_EGREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_EGREP in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_EGREP="$DX_EGREP" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_EGREP="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_EGREP=$ac_cv_path_DX_EGREP
+if test -n "$DX_EGREP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_EGREP" >&5
+$as_echo "$DX_EGREP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_EGREP"; then
+  ac_pt_DX_EGREP=$DX_EGREP
+  # Extract the first word of "egrep", so it can be a program name with args.
+set dummy egrep; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_EGREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_EGREP in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_EGREP="$ac_pt_DX_EGREP" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_EGREP="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_EGREP=$ac_cv_path_ac_pt_DX_EGREP
+if test -n "$ac_pt_DX_EGREP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_EGREP" >&5
+$as_echo "$ac_pt_DX_EGREP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_EGREP" = x; then
+    DX_EGREP=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_EGREP=$ac_pt_DX_EGREP
+  fi
+else
+  DX_EGREP="$ac_cv_path_DX_EGREP"
+fi
+
+if test "$DX_FLAG_ps$DX_EGREP" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: egrep not found - will not generate doxygen PostScript documentation" >&5
+$as_echo "$as_me: WARNING: egrep not found - will not generate doxygen PostScript documentation" >&2;}
+    DX_FLAG_ps=0
+
+fi
+
+    :
+fi
+if test "$DX_FLAG_ps" = 1; then
+     if :; then
+  DX_COND_ps_TRUE=
+  DX_COND_ps_FALSE='#'
+else
+  DX_COND_ps_TRUE='#'
+  DX_COND_ps_FALSE=
+fi
+
+
+    :
+else
+     if false; then
+  DX_COND_ps_TRUE=
+  DX_COND_ps_FALSE='#'
+else
+  DX_COND_ps_TRUE='#'
+  DX_COND_ps_FALSE=
+fi
+
+
+    :
+fi
+
+
+# PDF file generation:
+
+
+
+    # Check whether --enable-doxygen-pdf was given.
+if test "${enable_doxygen_pdf+set}" = set; then :
+  enableval=$enable_doxygen_pdf;
+case "$enableval" in
+#(
+y|Y|yes|Yes|YES)
+    DX_FLAG_pdf=1
+
+
+test "$DX_FLAG_doc" = "1" \
+|| as_fn_error $? "doxygen-pdf requires doxygen-pdf" "$LINENO" 5
+
+;; #(
+n|N|no|No|NO)
+    DX_FLAG_pdf=0
+
+;; #(
+*)
+    as_fn_error $? "invalid value '$enableval' given to doxygen-pdf" "$LINENO" 5
+;;
+esac
+
+else
+
+DX_FLAG_pdf=0
+
+
+test "$DX_FLAG_doc" = "1" || DX_FLAG_pdf=0
+
+
+
+fi
+
+if test "$DX_FLAG_pdf" = 1; then
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}pdflatex", so it can be a program name with args.
+set dummy ${ac_tool_prefix}pdflatex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_PDFLATEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_PDFLATEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_PDFLATEX="$DX_PDFLATEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_PDFLATEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_PDFLATEX=$ac_cv_path_DX_PDFLATEX
+if test -n "$DX_PDFLATEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_PDFLATEX" >&5
+$as_echo "$DX_PDFLATEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_PDFLATEX"; then
+  ac_pt_DX_PDFLATEX=$DX_PDFLATEX
+  # Extract the first word of "pdflatex", so it can be a program name with args.
+set dummy pdflatex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_PDFLATEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_PDFLATEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_PDFLATEX="$ac_pt_DX_PDFLATEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_PDFLATEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_PDFLATEX=$ac_cv_path_ac_pt_DX_PDFLATEX
+if test -n "$ac_pt_DX_PDFLATEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_PDFLATEX" >&5
+$as_echo "$ac_pt_DX_PDFLATEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_PDFLATEX" = x; then
+    DX_PDFLATEX=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_PDFLATEX=$ac_pt_DX_PDFLATEX
+  fi
+else
+  DX_PDFLATEX="$ac_cv_path_DX_PDFLATEX"
+fi
+
+if test "$DX_FLAG_pdf$DX_PDFLATEX" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: pdflatex not found - will not generate doxygen PDF documentation" >&5
+$as_echo "$as_me: WARNING: pdflatex not found - will not generate doxygen PDF documentation" >&2;}
+    DX_FLAG_pdf=0
+
+fi
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}makeindex", so it can be a program name with args.
+set dummy ${ac_tool_prefix}makeindex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_MAKEINDEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_MAKEINDEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_MAKEINDEX="$DX_MAKEINDEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_MAKEINDEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_MAKEINDEX=$ac_cv_path_DX_MAKEINDEX
+if test -n "$DX_MAKEINDEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_MAKEINDEX" >&5
+$as_echo "$DX_MAKEINDEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_MAKEINDEX"; then
+  ac_pt_DX_MAKEINDEX=$DX_MAKEINDEX
+  # Extract the first word of "makeindex", so it can be a program name with args.
+set dummy makeindex; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_MAKEINDEX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_MAKEINDEX in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_MAKEINDEX="$ac_pt_DX_MAKEINDEX" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_MAKEINDEX="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_MAKEINDEX=$ac_cv_path_ac_pt_DX_MAKEINDEX
+if test -n "$ac_pt_DX_MAKEINDEX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_MAKEINDEX" >&5
+$as_echo "$ac_pt_DX_MAKEINDEX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_MAKEINDEX" = x; then
+    DX_MAKEINDEX=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_MAKEINDEX=$ac_pt_DX_MAKEINDEX
+  fi
+else
+  DX_MAKEINDEX="$ac_cv_path_DX_MAKEINDEX"
+fi
+
+if test "$DX_FLAG_pdf$DX_MAKEINDEX" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: makeindex not found - will not generate doxygen PDF documentation" >&5
+$as_echo "$as_me: WARNING: makeindex not found - will not generate doxygen PDF documentation" >&2;}
+    DX_FLAG_pdf=0
+
+fi
+
+
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}egrep", so it can be a program name with args.
+set dummy ${ac_tool_prefix}egrep; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_DX_EGREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $DX_EGREP in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_DX_EGREP="$DX_EGREP" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_DX_EGREP="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+DX_EGREP=$ac_cv_path_DX_EGREP
+if test -n "$DX_EGREP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DX_EGREP" >&5
+$as_echo "$DX_EGREP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+fi
+if test -z "$ac_cv_path_DX_EGREP"; then
+  ac_pt_DX_EGREP=$DX_EGREP
+  # Extract the first word of "egrep", so it can be a program name with args.
+set dummy egrep; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_ac_pt_DX_EGREP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $ac_pt_DX_EGREP in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_ac_pt_DX_EGREP="$ac_pt_DX_EGREP" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_ac_pt_DX_EGREP="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+ac_pt_DX_EGREP=$ac_cv_path_ac_pt_DX_EGREP
+if test -n "$ac_pt_DX_EGREP"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_DX_EGREP" >&5
+$as_echo "$ac_pt_DX_EGREP" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+  if test "x$ac_pt_DX_EGREP" = x; then
+    DX_EGREP=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    DX_EGREP=$ac_pt_DX_EGREP
+  fi
+else
+  DX_EGREP="$ac_cv_path_DX_EGREP"
+fi
+
+if test "$DX_FLAG_pdf$DX_EGREP" = 1; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: egrep not found - will not generate doxygen PDF documentation" >&5
+$as_echo "$as_me: WARNING: egrep not found - will not generate doxygen PDF documentation" >&2;}
+    DX_FLAG_pdf=0
+
+fi
+
+    :
+fi
+if test "$DX_FLAG_pdf" = 1; then
+     if :; then
+  DX_COND_pdf_TRUE=
+  DX_COND_pdf_FALSE='#'
+else
+  DX_COND_pdf_TRUE='#'
+  DX_COND_pdf_FALSE=
+fi
+
+
+    :
+else
+     if false; then
+  DX_COND_pdf_TRUE=
+  DX_COND_pdf_FALSE='#'
+else
+  DX_COND_pdf_TRUE='#'
+  DX_COND_pdf_FALSE=
+fi
+
+
+    :
+fi
+
+
+# LaTeX generation for PS and/or PDF:
+if test "$DX_FLAG_ps" = 1 || test "$DX_FLAG_pdf" = 1; then
+     if :; then
+  DX_COND_latex_TRUE=
+  DX_COND_latex_FALSE='#'
+else
+  DX_COND_latex_TRUE='#'
+  DX_COND_latex_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_LATEX='YES'"
+
+else
+     if false; then
+  DX_COND_latex_TRUE=
+  DX_COND_latex_FALSE='#'
+else
+  DX_COND_latex_TRUE='#'
+  DX_COND_latex_FALSE=
+fi
+
+    DX_ENV="$DX_ENV GENERATE_LATEX='NO'"
+
+fi
+
+# Paper size for PS and/or PDF:
+
+case "$DOXYGEN_PAPER_SIZE" in
+#(
+"")
+    DOXYGEN_PAPER_SIZE=""
+
+;; #(
+a4wide|a4|letter|legal|executive)
+    DX_ENV="$DX_ENV PAPER_SIZE='$DOXYGEN_PAPER_SIZE'"
+
+;; #(
+*)
+    as_fn_error $? "unknown DOXYGEN_PAPER_SIZE='$DOXYGEN_PAPER_SIZE'" "$LINENO" 5
+;;
+esac
+
+#For debugging:
+#echo DX_FLAG_doc=$DX_FLAG_doc
+#echo DX_FLAG_dot=$DX_FLAG_dot
+#echo DX_FLAG_man=$DX_FLAG_man
+#echo DX_FLAG_html=$DX_FLAG_html
+#echo DX_FLAG_chm=$DX_FLAG_chm
+#echo DX_FLAG_chi=$DX_FLAG_chi
+#echo DX_FLAG_rtf=$DX_FLAG_rtf
+#echo DX_FLAG_xml=$DX_FLAG_xml
+#echo DX_FLAG_pdf=$DX_FLAG_pdf
+#echo DX_FLAG_ps=$DX_FLAG_ps
+#echo DX_ENV=$DX_ENV
+
+DX_INCLUDE=
+
+# Check whether --enable-debug was given.
+if test "${enable_debug+set}" = set; then :
+  enableval=$enable_debug; enable_debug=$enableval
+else
+  enable_debug=no
+fi
+
+
+if test "$enable_debug" = "yes" ; then
+    GCC_CFLAGS="$CFLAGS -Wall -g -D_DEBUG"
+    GCC_CXXFLAGS="$CXXFLAGS -Wall -g -D_DEBUG"
+else
+    GCC_CFLAGS="$CFLAGS -Wall -O2 -DNDEBUG"
+    GCC_CXXFLAGS="$CXXFLAGS -Wall -O2 -DNDEBUG"
+fi
+
+ac_config_headers="$ac_config_headers config.h"
+
+ac_config_files="$ac_config_files opensaml.spec pkginfo Portfile"
+
+ac_config_files="$ac_config_files Makefile saml/Makefile samltest/Makefile samlsign/Makefile schemas/Makefile doc/Makefile"
+
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+if test -n "$ac_tool_prefix"; then
+  for ac_prog in gcc gcc3 cc
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+    test -n "$CC" && break
+  done
+fi
+if test -z "$CC"; then
+  ac_ct_CC=$CC
+  for ac_prog in gcc gcc3 cc
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CC"; then
+  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CC="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_CC=$ac_cv_prog_ac_ct_CC
+if test -n "$ac_ct_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
+$as_echo "$ac_ct_CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$ac_ct_CC" && break
+done
+
+  if test "x$ac_ct_CC" = x; then
+    CC=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CC=$ac_ct_CC
+  fi
+fi
+
+
+test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "no acceptable C compiler found in \$PATH
+See \`config.log' for more details" "$LINENO" 5 ; }
+
+# Provide some information about the compiler.
+$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
+set X $ac_compile
+ac_compiler=$2
+for ac_option in --version -v -V -qversion; do
+  { { ac_try="$ac_compiler $ac_option >&5"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    sed '10a\
+... rest of stderr output deleted ...
+         10q' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+  fi
+  rm -f conftest.er1 conftest.err
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+done
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
+$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
+if test "${ac_cv_c_compiler_gnu+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+#ifndef __GNUC__
+       choke me
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_compiler_gnu=yes
+else
+  ac_compiler_gnu=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ac_cv_c_compiler_gnu=$ac_compiler_gnu
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
+$as_echo "$ac_cv_c_compiler_gnu" >&6; }
+if test $ac_compiler_gnu = yes; then
+  GCC=yes
+else
+  GCC=
+fi
+ac_test_CFLAGS=${CFLAGS+set}
+ac_save_CFLAGS=$CFLAGS
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
+$as_echo_n "checking whether $CC accepts -g... " >&6; }
+if test "${ac_cv_prog_cc_g+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_save_c_werror_flag=$ac_c_werror_flag
+   ac_c_werror_flag=yes
+   ac_cv_prog_cc_g=no
+   CFLAGS="-g"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+else
+  CFLAGS=""
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+else
+  ac_c_werror_flag=$ac_save_c_werror_flag
+	 CFLAGS="-g"
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+   ac_c_werror_flag=$ac_save_c_werror_flag
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
+$as_echo "$ac_cv_prog_cc_g" >&6; }
+if test "$ac_test_CFLAGS" = set; then
+  CFLAGS=$ac_save_CFLAGS
+elif test $ac_cv_prog_cc_g = yes; then
+  if test "$GCC" = yes; then
+    CFLAGS="-g -O2"
+  else
+    CFLAGS="-g"
+  fi
+else
+  if test "$GCC" = yes; then
+    CFLAGS="-O2"
+  else
+    CFLAGS=
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
+$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
+if test "${ac_cv_prog_cc_c89+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_cv_prog_cc_c89=no
+ac_save_CC=$CC
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdarg.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
+struct buf { int x; };
+FILE * (*rcsopen) (struct buf *, struct stat *, int);
+static char *e (p, i)
+     char **p;
+     int i;
+{
+  return p[i];
+}
+static char *f (char * (*g) (char **, int), char **p, ...)
+{
+  char *s;
+  va_list v;
+  va_start (v,p);
+  s = g (p, va_arg (v,int));
+  va_end (v);
+  return s;
+}
+
+/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
+   function prototypes and stuff, but not '\xHH' hex character constants.
+   These don't provoke an error unfortunately, instead are silently treated
+   as 'x'.  The following induces an error, until -std is added to get
+   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
+   array size at least.  It's necessary to write '\x00'==0 to get something
+   that's true only with -std.  */
+int osf4_cc_array ['\x00' == 0 ? 1 : -1];
+
+/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
+   inside strings and character constants.  */
+#define FOO(x) 'x'
+int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
+
+int test (int i, double x);
+struct s1 {int (*f) (int a);};
+struct s2 {int (*f) (double a);};
+int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
+int argc;
+char **argv;
+int
+main ()
+{
+return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
+  ;
+  return 0;
+}
+_ACEOF
+for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
+	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
+do
+  CC="$ac_save_CC $ac_arg"
+  if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_c89=$ac_arg
+fi
+rm -f core conftest.err conftest.$ac_objext
+  test "x$ac_cv_prog_cc_c89" != "xno" && break
+done
+rm -f conftest.$ac_ext
+CC=$ac_save_CC
+
+fi
+# AC_CACHE_VAL
+case "x$ac_cv_prog_cc_c89" in
+  x)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
+$as_echo "none needed" >&6; } ;;
+  xno)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
+$as_echo "unsupported" >&6; } ;;
+  *)
+    CC="$CC $ac_cv_prog_cc_c89"
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
+$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
+esac
+if test "x$ac_cv_prog_cc_c89" != xno; then :
+
+fi
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+depcc="$CC"   am_compiler_list=
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc" >&5
+$as_echo_n "checking dependency style of $depcc... " >&6; }
+if test "${am_cv_CC_dependencies_compiler_type+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
+  # We make a subdir and do the tests there.  Otherwise we can end up
+  # making bogus files that we don't know about and never remove.  For
+  # instance it was reported that on HP-UX the gcc test will end up
+  # making a dummy file named `D' -- because `-MD' means `put the output
+  # in D'.
+  mkdir conftest.dir
+  # Copy depcomp to subdir because otherwise we won't find it if we're
+  # using a relative directory.
+  cp "$am_depcomp" conftest.dir
+  cd conftest.dir
+  # We will build objects and dependencies in a subdirectory because
+  # it helps to detect inapplicable dependency modes.  For instance
+  # both Tru64's cc and ICC support -MD to output dependencies as a
+  # side effect of compilation, but ICC will put the dependencies in
+  # the current directory while Tru64 will put them in the object
+  # directory.
+  mkdir sub
+
+  am_cv_CC_dependencies_compiler_type=none
+  if test "$am_compiler_list" = ""; then
+     am_compiler_list=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < ./depcomp`
+  fi
+  am__universal=false
+  case " $depcc " in #(
+     *\ -arch\ *\ -arch\ *) am__universal=true ;;
+     esac
+
+  for depmode in $am_compiler_list; do
+    # Setup a source with many dependencies, because some compilers
+    # like to wrap large dependency lists on column 80 (with \), and
+    # we should not choose a depcomp mode which is confused by this.
+    #
+    # We need to recreate these files for each test, as the compiler may
+    # overwrite some of them when testing with obscure command lines.
+    # This happens at least with the AIX C compiler.
+    : > sub/conftest.c
+    for i in 1 2 3 4 5 6; do
+      echo '#include "conftst'$i'.h"' >> sub/conftest.c
+      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with
+      # Solaris 8's {/usr,}/bin/sh.
+      touch sub/conftst$i.h
+    done
+    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf
+
+    # We check with `-c' and `-o' for the sake of the "dashmstdout"
+    # mode.  It turns out that the SunPro C++ compiler does not properly
+    # handle `-M -o', and we need to detect this.  Also, some Intel
+    # versions had trouble with output in subdirs
+    am__obj=sub/conftest.${OBJEXT-o}
+    am__minus_obj="-o $am__obj"
+    case $depmode in
+    gcc)
+      # This depmode causes a compiler race in universal mode.
+      test "$am__universal" = false || continue
+      ;;
+    nosideeffect)
+      # after this tag, mechanisms are not by side-effect, so they'll
+      # only be used when explicitly requested
+      if test "x$enable_dependency_tracking" = xyes; then
+	continue
+      else
+	break
+      fi
+      ;;
+    msvisualcpp | msvcmsys)
+      # This compiler won't grok `-c -o', but also, the minuso test has
+      # not run yet.  These depmodes are late enough in the game, and
+      # so weak that their functioning should not be impacted.
+      am__obj=conftest.${OBJEXT-o}
+      am__minus_obj=
+      ;;
+    none) break ;;
+    esac
+    if depmode=$depmode \
+       source=sub/conftest.c object=$am__obj \
+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
+         >/dev/null 2>conftest.err &&
+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
+      # icc doesn't choke on unknown options, it will just issue warnings
+      # or remarks (even with -Werror).  So we grep stderr for any message
+      # that says an option was ignored or not supported.
+      # When given -MP, icc 7.0 and 7.1 complain thusly:
+      #   icc: Command line warning: ignoring option '-M'; no argument required
+      # The diagnosis changed in icc 8.0:
+      #   icc: Command line remark: option '-MP' not supported
+      if (grep 'ignoring option' conftest.err ||
+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
+        am_cv_CC_dependencies_compiler_type=$depmode
+        break
+      fi
+    fi
+  done
+
+  cd ..
+  rm -rf conftest.dir
+else
+  am_cv_CC_dependencies_compiler_type=none
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $am_cv_CC_dependencies_compiler_type" >&5
+$as_echo "$am_cv_CC_dependencies_compiler_type" >&6; }
+CCDEPMODE=depmode=$am_cv_CC_dependencies_compiler_type
+
+ if
+  test "x$enable_dependency_tracking" != xno \
+  && test "$am_cv_CC_dependencies_compiler_type" = gcc3; then
+  am__fastdepCC_TRUE=
+  am__fastdepCC_FALSE='#'
+else
+  am__fastdepCC_TRUE='#'
+  am__fastdepCC_FALSE=
+fi
+
+
+ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+if test -z "$CXX"; then
+  if test -n "$CCC"; then
+    CXX=$CCC
+  else
+    if test -n "$ac_tool_prefix"; then
+  for ac_prog in g++ g++3 c++ CC
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CXX"; then
+  ac_cv_prog_CXX="$CXX" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CXX="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+CXX=$ac_cv_prog_CXX
+if test -n "$CXX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXX" >&5
+$as_echo "$CXX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+    test -n "$CXX" && break
+  done
+fi
+if test -z "$CXX"; then
+  ac_ct_CXX=$CXX
+  for ac_prog in g++ g++3 c++ CC
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CXX"; then
+  ac_cv_prog_ac_ct_CXX="$ac_ct_CXX" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CXX="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_CXX=$ac_cv_prog_ac_ct_CXX
+if test -n "$ac_ct_CXX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CXX" >&5
+$as_echo "$ac_ct_CXX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$ac_ct_CXX" && break
+done
+
+  if test "x$ac_ct_CXX" = x; then
+    CXX="g++"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CXX=$ac_ct_CXX
+  fi
+fi
+
+  fi
+fi
+# Provide some information about the compiler.
+$as_echo "$as_me:${as_lineno-$LINENO}: checking for C++ compiler version" >&5
+set X $ac_compile
+ac_compiler=$2
+for ac_option in --version -v -V -qversion; do
+  { { ac_try="$ac_compiler $ac_option >&5"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    sed '10a\
+... rest of stderr output deleted ...
+         10q' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+  fi
+  rm -f conftest.er1 conftest.err
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+done
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C++ compiler" >&5
+$as_echo_n "checking whether we are using the GNU C++ compiler... " >&6; }
+if test "${ac_cv_cxx_compiler_gnu+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+#ifndef __GNUC__
+       choke me
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_compiler_gnu=yes
+else
+  ac_compiler_gnu=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ac_cv_cxx_compiler_gnu=$ac_compiler_gnu
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_cxx_compiler_gnu" >&5
+$as_echo "$ac_cv_cxx_compiler_gnu" >&6; }
+if test $ac_compiler_gnu = yes; then
+  GXX=yes
+else
+  GXX=
+fi
+ac_test_CXXFLAGS=${CXXFLAGS+set}
+ac_save_CXXFLAGS=$CXXFLAGS
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CXX accepts -g" >&5
+$as_echo_n "checking whether $CXX accepts -g... " >&6; }
+if test "${ac_cv_prog_cxx_g+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_save_cxx_werror_flag=$ac_cxx_werror_flag
+   ac_cxx_werror_flag=yes
+   ac_cv_prog_cxx_g=no
+   CXXFLAGS="-g"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_cv_prog_cxx_g=yes
+else
+  CXXFLAGS=""
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+
+else
+  ac_cxx_werror_flag=$ac_save_cxx_werror_flag
+	 CXXFLAGS="-g"
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_cv_prog_cxx_g=yes
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+   ac_cxx_werror_flag=$ac_save_cxx_werror_flag
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cxx_g" >&5
+$as_echo "$ac_cv_prog_cxx_g" >&6; }
+if test "$ac_test_CXXFLAGS" = set; then
+  CXXFLAGS=$ac_save_CXXFLAGS
+elif test $ac_cv_prog_cxx_g = yes; then
+  if test "$GXX" = yes; then
+    CXXFLAGS="-g -O2"
+  else
+    CXXFLAGS="-g"
+  fi
+else
+  if test "$GXX" = yes; then
+    CXXFLAGS="-O2"
+  else
+    CXXFLAGS=
+  fi
+fi
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+depcc="$CXX"  am_compiler_list=
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc" >&5
+$as_echo_n "checking dependency style of $depcc... " >&6; }
+if test "${am_cv_CXX_dependencies_compiler_type+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
+  # We make a subdir and do the tests there.  Otherwise we can end up
+  # making bogus files that we don't know about and never remove.  For
+  # instance it was reported that on HP-UX the gcc test will end up
+  # making a dummy file named `D' -- because `-MD' means `put the output
+  # in D'.
+  mkdir conftest.dir
+  # Copy depcomp to subdir because otherwise we won't find it if we're
+  # using a relative directory.
+  cp "$am_depcomp" conftest.dir
+  cd conftest.dir
+  # We will build objects and dependencies in a subdirectory because
+  # it helps to detect inapplicable dependency modes.  For instance
+  # both Tru64's cc and ICC support -MD to output dependencies as a
+  # side effect of compilation, but ICC will put the dependencies in
+  # the current directory while Tru64 will put them in the object
+  # directory.
+  mkdir sub
+
+  am_cv_CXX_dependencies_compiler_type=none
+  if test "$am_compiler_list" = ""; then
+     am_compiler_list=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < ./depcomp`
+  fi
+  am__universal=false
+  case " $depcc " in #(
+     *\ -arch\ *\ -arch\ *) am__universal=true ;;
+     esac
+
+  for depmode in $am_compiler_list; do
+    # Setup a source with many dependencies, because some compilers
+    # like to wrap large dependency lists on column 80 (with \), and
+    # we should not choose a depcomp mode which is confused by this.
+    #
+    # We need to recreate these files for each test, as the compiler may
+    # overwrite some of them when testing with obscure command lines.
+    # This happens at least with the AIX C compiler.
+    : > sub/conftest.c
+    for i in 1 2 3 4 5 6; do
+      echo '#include "conftst'$i'.h"' >> sub/conftest.c
+      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with
+      # Solaris 8's {/usr,}/bin/sh.
+      touch sub/conftst$i.h
+    done
+    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf
+
+    # We check with `-c' and `-o' for the sake of the "dashmstdout"
+    # mode.  It turns out that the SunPro C++ compiler does not properly
+    # handle `-M -o', and we need to detect this.  Also, some Intel
+    # versions had trouble with output in subdirs
+    am__obj=sub/conftest.${OBJEXT-o}
+    am__minus_obj="-o $am__obj"
+    case $depmode in
+    gcc)
+      # This depmode causes a compiler race in universal mode.
+      test "$am__universal" = false || continue
+      ;;
+    nosideeffect)
+      # after this tag, mechanisms are not by side-effect, so they'll
+      # only be used when explicitly requested
+      if test "x$enable_dependency_tracking" = xyes; then
+	continue
+      else
+	break
+      fi
+      ;;
+    msvisualcpp | msvcmsys)
+      # This compiler won't grok `-c -o', but also, the minuso test has
+      # not run yet.  These depmodes are late enough in the game, and
+      # so weak that their functioning should not be impacted.
+      am__obj=conftest.${OBJEXT-o}
+      am__minus_obj=
+      ;;
+    none) break ;;
+    esac
+    if depmode=$depmode \
+       source=sub/conftest.c object=$am__obj \
+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
+         >/dev/null 2>conftest.err &&
+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
+      # icc doesn't choke on unknown options, it will just issue warnings
+      # or remarks (even with -Werror).  So we grep stderr for any message
+      # that says an option was ignored or not supported.
+      # When given -MP, icc 7.0 and 7.1 complain thusly:
+      #   icc: Command line warning: ignoring option '-M'; no argument required
+      # The diagnosis changed in icc 8.0:
+      #   icc: Command line remark: option '-MP' not supported
+      if (grep 'ignoring option' conftest.err ||
+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
+        am_cv_CXX_dependencies_compiler_type=$depmode
+        break
+      fi
+    fi
+  done
+
+  cd ..
+  rm -rf conftest.dir
+else
+  am_cv_CXX_dependencies_compiler_type=none
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $am_cv_CXX_dependencies_compiler_type" >&5
+$as_echo "$am_cv_CXX_dependencies_compiler_type" >&6; }
+CXXDEPMODE=depmode=$am_cv_CXX_dependencies_compiler_type
+
+ if
+  test "x$enable_dependency_tracking" != xno \
+  && test "$am_cv_CXX_dependencies_compiler_type" = gcc3; then
+  am__fastdepCXX_TRUE=
+  am__fastdepCXX_FALSE='#'
+else
+  am__fastdepCXX_TRUE='#'
+  am__fastdepCXX_FALSE=
+fi
+
+
+
+ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+if test -z "$CXX"; then
+  if test -n "$CCC"; then
+    CXX=$CCC
+  else
+    if test -n "$ac_tool_prefix"; then
+  for ac_prog in g++ c++ gpp aCC CC cxx cc++ cl.exe FCC KCC RCC xlC_r xlC
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CXX"; then
+  ac_cv_prog_CXX="$CXX" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CXX="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+CXX=$ac_cv_prog_CXX
+if test -n "$CXX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXX" >&5
+$as_echo "$CXX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+    test -n "$CXX" && break
+  done
+fi
+if test -z "$CXX"; then
+  ac_ct_CXX=$CXX
+  for ac_prog in g++ c++ gpp aCC CC cxx cc++ cl.exe FCC KCC RCC xlC_r xlC
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_ac_ct_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CXX"; then
+  ac_cv_prog_ac_ct_CXX="$ac_ct_CXX" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CXX="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+ac_ct_CXX=$ac_cv_prog_ac_ct_CXX
+if test -n "$ac_ct_CXX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CXX" >&5
+$as_echo "$ac_ct_CXX" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$ac_ct_CXX" && break
+done
+
+  if test "x$ac_ct_CXX" = x; then
+    CXX="g++"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CXX=$ac_ct_CXX
+  fi
+fi
+
+  fi
+fi
+# Provide some information about the compiler.
+$as_echo "$as_me:${as_lineno-$LINENO}: checking for C++ compiler version" >&5
+set X $ac_compile
+ac_compiler=$2
+for ac_option in --version -v -V -qversion; do
+  { { ac_try="$ac_compiler $ac_option >&5"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    sed '10a\
+... rest of stderr output deleted ...
+         10q' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+  fi
+  rm -f conftest.er1 conftest.err
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+done
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C++ compiler" >&5
+$as_echo_n "checking whether we are using the GNU C++ compiler... " >&6; }
+if test "${ac_cv_cxx_compiler_gnu+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+#ifndef __GNUC__
+       choke me
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_compiler_gnu=yes
+else
+  ac_compiler_gnu=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ac_cv_cxx_compiler_gnu=$ac_compiler_gnu
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_cxx_compiler_gnu" >&5
+$as_echo "$ac_cv_cxx_compiler_gnu" >&6; }
+if test $ac_compiler_gnu = yes; then
+  GXX=yes
+else
+  GXX=
+fi
+ac_test_CXXFLAGS=${CXXFLAGS+set}
+ac_save_CXXFLAGS=$CXXFLAGS
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CXX accepts -g" >&5
+$as_echo_n "checking whether $CXX accepts -g... " >&6; }
+if test "${ac_cv_prog_cxx_g+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_save_cxx_werror_flag=$ac_cxx_werror_flag
+   ac_cxx_werror_flag=yes
+   ac_cv_prog_cxx_g=no
+   CXXFLAGS="-g"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_cv_prog_cxx_g=yes
+else
+  CXXFLAGS=""
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+
+else
+  ac_cxx_werror_flag=$ac_save_cxx_werror_flag
+	 CXXFLAGS="-g"
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_cv_prog_cxx_g=yes
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+   ac_cxx_werror_flag=$ac_save_cxx_werror_flag
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cxx_g" >&5
+$as_echo "$ac_cv_prog_cxx_g" >&6; }
+if test "$ac_test_CXXFLAGS" = set; then
+  CXXFLAGS=$ac_save_CXXFLAGS
+elif test $ac_cv_prog_cxx_g = yes; then
+  if test "$GXX" = yes; then
+    CXXFLAGS="-g -O2"
+  else
+    CXXFLAGS="-g"
+  fi
+else
+  if test "$GXX" = yes; then
+    CXXFLAGS="-O2"
+  else
+    CXXFLAGS=
+  fi
+fi
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+depcc="$CXX"  am_compiler_list=
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc" >&5
+$as_echo_n "checking dependency style of $depcc... " >&6; }
+if test "${am_cv_CXX_dependencies_compiler_type+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
+  # We make a subdir and do the tests there.  Otherwise we can end up
+  # making bogus files that we don't know about and never remove.  For
+  # instance it was reported that on HP-UX the gcc test will end up
+  # making a dummy file named `D' -- because `-MD' means `put the output
+  # in D'.
+  mkdir conftest.dir
+  # Copy depcomp to subdir because otherwise we won't find it if we're
+  # using a relative directory.
+  cp "$am_depcomp" conftest.dir
+  cd conftest.dir
+  # We will build objects and dependencies in a subdirectory because
+  # it helps to detect inapplicable dependency modes.  For instance
+  # both Tru64's cc and ICC support -MD to output dependencies as a
+  # side effect of compilation, but ICC will put the dependencies in
+  # the current directory while Tru64 will put them in the object
+  # directory.
+  mkdir sub
+
+  am_cv_CXX_dependencies_compiler_type=none
+  if test "$am_compiler_list" = ""; then
+     am_compiler_list=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < ./depcomp`
+  fi
+  am__universal=false
+  case " $depcc " in #(
+     *\ -arch\ *\ -arch\ *) am__universal=true ;;
+     esac
+
+  for depmode in $am_compiler_list; do
+    # Setup a source with many dependencies, because some compilers
+    # like to wrap large dependency lists on column 80 (with \), and
+    # we should not choose a depcomp mode which is confused by this.
+    #
+    # We need to recreate these files for each test, as the compiler may
+    # overwrite some of them when testing with obscure command lines.
+    # This happens at least with the AIX C compiler.
+    : > sub/conftest.c
+    for i in 1 2 3 4 5 6; do
+      echo '#include "conftst'$i'.h"' >> sub/conftest.c
+      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with
+      # Solaris 8's {/usr,}/bin/sh.
+      touch sub/conftst$i.h
+    done
+    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf
+
+    # We check with `-c' and `-o' for the sake of the "dashmstdout"
+    # mode.  It turns out that the SunPro C++ compiler does not properly
+    # handle `-M -o', and we need to detect this.  Also, some Intel
+    # versions had trouble with output in subdirs
+    am__obj=sub/conftest.${OBJEXT-o}
+    am__minus_obj="-o $am__obj"
+    case $depmode in
+    gcc)
+      # This depmode causes a compiler race in universal mode.
+      test "$am__universal" = false || continue
+      ;;
+    nosideeffect)
+      # after this tag, mechanisms are not by side-effect, so they'll
+      # only be used when explicitly requested
+      if test "x$enable_dependency_tracking" = xyes; then
+	continue
+      else
+	break
+      fi
+      ;;
+    msvisualcpp | msvcmsys)
+      # This compiler won't grok `-c -o', but also, the minuso test has
+      # not run yet.  These depmodes are late enough in the game, and
+      # so weak that their functioning should not be impacted.
+      am__obj=conftest.${OBJEXT-o}
+      am__minus_obj=
+      ;;
+    none) break ;;
+    esac
+    if depmode=$depmode \
+       source=sub/conftest.c object=$am__obj \
+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
+         >/dev/null 2>conftest.err &&
+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
+      # icc doesn't choke on unknown options, it will just issue warnings
+      # or remarks (even with -Werror).  So we grep stderr for any message
+      # that says an option was ignored or not supported.
+      # When given -MP, icc 7.0 and 7.1 complain thusly:
+      #   icc: Command line warning: ignoring option '-M'; no argument required
+      # The diagnosis changed in icc 8.0:
+      #   icc: Command line remark: option '-MP' not supported
+      if (grep 'ignoring option' conftest.err ||
+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
+        am_cv_CXX_dependencies_compiler_type=$depmode
+        break
+      fi
+    fi
+  done
+
+  cd ..
+  rm -rf conftest.dir
+else
+  am_cv_CXX_dependencies_compiler_type=none
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $am_cv_CXX_dependencies_compiler_type" >&5
+$as_echo "$am_cv_CXX_dependencies_compiler_type" >&6; }
+CXXDEPMODE=depmode=$am_cv_CXX_dependencies_compiler_type
+
+ if
+  test "x$enable_dependency_tracking" != xno \
+  && test "$am_cv_CXX_dependencies_compiler_type" = gcc3; then
+  am__fastdepCXX_TRUE=
+  am__fastdepCXX_FALSE='#'
+else
+  am__fastdepCXX_TRUE='#'
+  am__fastdepCXX_FALSE=
+fi
+
+
+if test -n "$CXX" && ( test "X$CXX" != "Xno" &&
+    ( (test "X$CXX" = "Xg++" && `g++ -v >/dev/null 2>&1` ) ||
+    (test "X$CXX" != "Xg++"))) ; then
+  ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C++ preprocessor" >&5
+$as_echo_n "checking how to run the C++ preprocessor... " >&6; }
+if test -z "$CXXCPP"; then
+  if test "${ac_cv_prog_CXXCPP+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+      # Double quotes because CXXCPP needs to be expanded
+    for CXXCPP in "$CXX -E" "/lib/cpp"
+    do
+      ac_preproc_ok=false
+for ac_cxx_preproc_warn_flag in '' yes
+do
+  # Use a header file that comes with gcc, so configuring glibc
+  # with a fresh cross-compiler works.
+  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+  # <limits.h> exists even on freestanding compilers.
+  # On the NeXT, cc -E runs the code through the compiler's parser,
+  # not just through cpp. "Syntax error" is here to catch this case.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+		     Syntax error
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+
+else
+  # Broken: fails on valid input.
+continue
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+  # OK, works on sane cases.  Now check whether nonexistent headers
+  # can be detected and how.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ac_nonexistent.h>
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+  # Broken: success on invalid input.
+continue
+else
+  # Passes both tests.
+ac_preproc_ok=:
+break
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+done
+# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
+rm -f conftest.i conftest.err conftest.$ac_ext
+if $ac_preproc_ok; then :
+  break
+fi
+
+    done
+    ac_cv_prog_CXXCPP=$CXXCPP
+
+fi
+  CXXCPP=$ac_cv_prog_CXXCPP
+else
+  ac_cv_prog_CXXCPP=$CXXCPP
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXXCPP" >&5
+$as_echo "$CXXCPP" >&6; }
+ac_preproc_ok=false
+for ac_cxx_preproc_warn_flag in '' yes
+do
+  # Use a header file that comes with gcc, so configuring glibc
+  # with a fresh cross-compiler works.
+  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+  # <limits.h> exists even on freestanding compilers.
+  # On the NeXT, cc -E runs the code through the compiler's parser,
+  # not just through cpp. "Syntax error" is here to catch this case.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+		     Syntax error
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+
+else
+  # Broken: fails on valid input.
+continue
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+  # OK, works on sane cases.  Now check whether nonexistent headers
+  # can be detected and how.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ac_nonexistent.h>
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+  # Broken: success on invalid input.
+continue
+else
+  # Passes both tests.
+ac_preproc_ok=:
+break
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+done
+# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
+rm -f conftest.i conftest.err conftest.$ac_ext
+if $ac_preproc_ok; then :
+
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+_lt_caught_CXX_error=yes; }
+fi
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+else
+  _lt_caught_CXX_error=yes
+fi
+
+
+
+
+ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+
+archive_cmds_need_lc_CXX=no
+allow_undefined_flag_CXX=
+always_export_symbols_CXX=no
+archive_expsym_cmds_CXX=
+compiler_needs_object_CXX=no
+export_dynamic_flag_spec_CXX=
+hardcode_direct_CXX=no
+hardcode_direct_absolute_CXX=no
+hardcode_libdir_flag_spec_CXX=
+hardcode_libdir_flag_spec_ld_CXX=
+hardcode_libdir_separator_CXX=
+hardcode_minus_L_CXX=no
+hardcode_shlibpath_var_CXX=unsupported
+hardcode_automatic_CXX=no
+inherit_rpath_CXX=no
+module_cmds_CXX=
+module_expsym_cmds_CXX=
+link_all_deplibs_CXX=unknown
+old_archive_cmds_CXX=$old_archive_cmds
+no_undefined_flag_CXX=
+whole_archive_flag_spec_CXX=
+enable_shared_with_static_runtimes_CXX=no
+
+# Source file extension for C++ test sources.
+ac_ext=cpp
+
+# Object file extension for compiled C++ test sources.
+objext=o
+objext_CXX=$objext
+
+# No sense in running all these tests if we already determined that
+# the CXX compiler isn't working.  Some variables (like enable_shared)
+# are currently assumed to apply to all compilers on this platform,
+# and will be corrupted by setting them based on a non-working compiler.
+if test "$_lt_caught_CXX_error" != yes; then
+  # Code to be used in simple compile tests
+  lt_simple_compile_test_code="int some_variable = 0;"
+
+  # Code to be used in simple link tests
+  lt_simple_link_test_code='int main(int, char *[]) { return(0); }'
+
+  # ltmain only uses $CC for tagged configurations so make sure $CC is set.
+
+
+
+
+
+
+# If no C compiler was specified, use CC.
+LTCC=${LTCC-"$CC"}
+
+# If no C compiler flags were specified, use CFLAGS.
+LTCFLAGS=${LTCFLAGS-"$CFLAGS"}
+
+# Allow CC to be a program name with arguments.
+compiler=$CC
+
+
+  # save warnings/boilerplate of simple test code
+  ac_outfile=conftest.$ac_objext
+echo "$lt_simple_compile_test_code" >conftest.$ac_ext
+eval "$ac_compile" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err
+_lt_compiler_boilerplate=`cat conftest.err`
+$RM conftest*
+
+  ac_outfile=conftest.$ac_objext
+echo "$lt_simple_link_test_code" >conftest.$ac_ext
+eval "$ac_link" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err
+_lt_linker_boilerplate=`cat conftest.err`
+$RM -r conftest*
+
+
+  # Allow CC to be a program name with arguments.
+  lt_save_CC=$CC
+  lt_save_LD=$LD
+  lt_save_GCC=$GCC
+  GCC=$GXX
+  lt_save_with_gnu_ld=$with_gnu_ld
+  lt_save_path_LD=$lt_cv_path_LD
+  if test -n "${lt_cv_prog_gnu_ldcxx+set}"; then
+    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx
+  else
+    $as_unset lt_cv_prog_gnu_ld
+  fi
+  if test -n "${lt_cv_path_LDCXX+set}"; then
+    lt_cv_path_LD=$lt_cv_path_LDCXX
+  else
+    $as_unset lt_cv_path_LD
+  fi
+  test -z "${LDCXX+set}" || LD=$LDCXX
+  CC=${CXX-"c++"}
+  compiler=$CC
+  compiler_CXX=$CC
+  for cc_temp in $compiler""; do
+  case $cc_temp in
+    compile | *[\\/]compile | ccache | *[\\/]ccache ) ;;
+    distcc | *[\\/]distcc | purify | *[\\/]purify ) ;;
+    \-*) ;;
+    *) break;;
+  esac
+done
+cc_basename=`$ECHO "X$cc_temp" | $Xsed -e 's%.*/%%' -e "s%^$host_alias-%%"`
+
+
+  if test -n "$compiler"; then
+    # We don't want -fno-exception when compiling C++ code, so set the
+    # no_builtin_flag separately
+    if test "$GXX" = yes; then
+      lt_prog_compiler_no_builtin_flag_CXX=' -fno-builtin'
+    else
+      lt_prog_compiler_no_builtin_flag_CXX=
+    fi
+
+    if test "$GXX" = yes; then
+      # Set up default GNU C++ configuration
+
+
+
+# Check whether --with-gnu-ld was given.
+if test "${with_gnu_ld+set}" = set; then :
+  withval=$with_gnu_ld; test "$withval" = no || with_gnu_ld=yes
+else
+  with_gnu_ld=no
+fi
+
+ac_prog=ld
+if test "$GCC" = yes; then
+  # Check if gcc -print-prog-name=ld gives a path.
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ld used by $CC" >&5
+$as_echo_n "checking for ld used by $CC... " >&6; }
+  case $host in
+  *-*-mingw*)
+    # gcc leaves a trailing carriage return which upsets mingw
+    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
+  *)
+    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
+  esac
+  case $ac_prog in
+    # Accept absolute paths.
+    [\\/]* | ?:[\\/]*)
+      re_direlt='/[^/][^/]*/\.\./'
+      # Canonicalize the pathname of ld
+      ac_prog=`$ECHO "$ac_prog"| $SED 's%\\\\%/%g'`
+      while $ECHO "$ac_prog" | $GREP "$re_direlt" > /dev/null 2>&1; do
+	ac_prog=`$ECHO $ac_prog| $SED "s%$re_direlt%/%"`
+      done
+      test -z "$LD" && LD="$ac_prog"
+      ;;
+  "")
+    # If it fails, then pretend we aren't using GCC.
+    ac_prog=ld
+    ;;
+  *)
+    # If it is relative, then search for the first ld in PATH.
+    with_gnu_ld=unknown
+    ;;
+  esac
+elif test "$with_gnu_ld" = yes; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for GNU ld" >&5
+$as_echo_n "checking for GNU ld... " >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for non-GNU ld" >&5
+$as_echo_n "checking for non-GNU ld... " >&6; }
+fi
+if test "${lt_cv_path_LD+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -z "$LD"; then
+  lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+  for ac_dir in $PATH; do
+    IFS="$lt_save_ifs"
+    test -z "$ac_dir" && ac_dir=.
+    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
+      lt_cv_path_LD="$ac_dir/$ac_prog"
+      # Check to see if the program is GNU ld.  I'd rather use --version,
+      # but apparently some variants of GNU ld only accept -v.
+      # Break only if it was the GNU/non-GNU ld that we prefer.
+      case `"$lt_cv_path_LD" -v 2>&1 </dev/null` in
+      *GNU* | *'with BFD'*)
+	test "$with_gnu_ld" != no && break
+	;;
+      *)
+	test "$with_gnu_ld" != yes && break
+	;;
+      esac
+    fi
+  done
+  IFS="$lt_save_ifs"
+else
+  lt_cv_path_LD="$LD" # Let the user override the test with a path.
+fi
+fi
+
+LD="$lt_cv_path_LD"
+if test -n "$LD"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LD" >&5
+$as_echo "$LD" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+test -z "$LD" && as_fn_error $? "no acceptable ld found in \$PATH" "$LINENO" 5
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if the linker ($LD) is GNU ld" >&5
+$as_echo_n "checking if the linker ($LD) is GNU ld... " >&6; }
+if test "${lt_cv_prog_gnu_ld+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  # I'd rather use --version here, but apparently some GNU lds only accept -v.
+case `$LD -v 2>&1 </dev/null` in
+*GNU* | *'with BFD'*)
+  lt_cv_prog_gnu_ld=yes
+  ;;
+*)
+  lt_cv_prog_gnu_ld=no
+  ;;
+esac
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_gnu_ld" >&5
+$as_echo "$lt_cv_prog_gnu_ld" >&6; }
+with_gnu_ld=$lt_cv_prog_gnu_ld
+
+
+
+
+
+
+
+      # Check if GNU C++ uses GNU ld as the underlying linker, since the
+      # archiving commands below assume that GNU ld is being used.
+      if test "$with_gnu_ld" = yes; then
+        archive_cmds_CXX='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'
+        archive_expsym_cmds_CXX='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+
+        hardcode_libdir_flag_spec_CXX='${wl}-rpath ${wl}$libdir'
+        export_dynamic_flag_spec_CXX='${wl}--export-dynamic'
+
+        # If archive_cmds runs LD, not CC, wlarc should be empty
+        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to
+        #     investigate it a little bit more. (MM)
+        wlarc='${wl}'
+
+        # ancient GNU ld didn't support --whole-archive et. al.
+        if eval "`$CC -print-prog-name=ld` --help 2>&1" |
+	  $GREP 'no-whole-archive' > /dev/null; then
+          whole_archive_flag_spec_CXX="$wlarc"'--whole-archive$convenience '"$wlarc"'--no-whole-archive'
+        else
+          whole_archive_flag_spec_CXX=
+        fi
+      else
+        with_gnu_ld=no
+        wlarc=
+
+        # A generic and very simple default shared library creation
+        # command for GNU C++ for the case where it uses the native
+        # linker, instead of GNU ld.  If possible, this setting should
+        # overridden to take advantage of the native linker features on
+        # the platform it is being used on.
+        archive_cmds_CXX='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'
+      fi
+
+      # Commands to make compiler produce verbose output that lists
+      # what "hidden" libraries, object files and flags are used when
+      # linking a shared library.
+      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+
+    else
+      GXX=no
+      with_gnu_ld=no
+      wlarc=
+    fi
+
+    # PORTME: fill in a description of your system's C++ link characteristics
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the $compiler linker ($LD) supports shared libraries" >&5
+$as_echo_n "checking whether the $compiler linker ($LD) supports shared libraries... " >&6; }
+    ld_shlibs_CXX=yes
+    case $host_os in
+      aix3*)
+        # FIXME: insert proper C++ library support
+        ld_shlibs_CXX=no
+        ;;
+      aix[4-9]*)
+        if test "$host_cpu" = ia64; then
+          # On IA64, the linker does run time linking by default, so we don't
+          # have to do anything special.
+          aix_use_runtimelinking=no
+          exp_sym_flag='-Bexport'
+          no_entry_flag=""
+        else
+          aix_use_runtimelinking=no
+
+          # Test if we are trying to use run time linking or normal
+          # AIX style linking. If -brtl is somewhere in LDFLAGS, we
+          # need to do runtime linking.
+          case $host_os in aix4.[23]|aix4.[23].*|aix[5-9]*)
+	    for ld_flag in $LDFLAGS; do
+	      case $ld_flag in
+	      *-brtl*)
+	        aix_use_runtimelinking=yes
+	        break
+	        ;;
+	      esac
+	    done
+	    ;;
+          esac
+
+          exp_sym_flag='-bexport'
+          no_entry_flag='-bnoentry'
+        fi
+
+        # When large executables or shared objects are built, AIX ld can
+        # have problems creating the table of contents.  If linking a library
+        # or program results in "error TOC overflow" add -mminimal-toc to
+        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not
+        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.
+
+        archive_cmds_CXX=''
+        hardcode_direct_CXX=yes
+        hardcode_direct_absolute_CXX=yes
+        hardcode_libdir_separator_CXX=':'
+        link_all_deplibs_CXX=yes
+        file_list_spec_CXX='${wl}-f,'
+
+        if test "$GXX" = yes; then
+          case $host_os in aix4.[012]|aix4.[012].*)
+          # We only want to do this on AIX 4.2 and lower, the check
+          # below for broken collect2 doesn't work under 4.3+
+	  collect2name=`${CC} -print-prog-name=collect2`
+	  if test -f "$collect2name" &&
+	     strings "$collect2name" | $GREP resolve_lib_name >/dev/null
+	  then
+	    # We have reworked collect2
+	    :
+	  else
+	    # We have old collect2
+	    hardcode_direct_CXX=unsupported
+	    # It fails to find uninstalled libraries when the uninstalled
+	    # path is not listed in the libpath.  Setting hardcode_minus_L
+	    # to unsupported forces relinking
+	    hardcode_minus_L_CXX=yes
+	    hardcode_libdir_flag_spec_CXX='-L$libdir'
+	    hardcode_libdir_separator_CXX=
+	  fi
+          esac
+          shared_flag='-shared'
+	  if test "$aix_use_runtimelinking" = yes; then
+	    shared_flag="$shared_flag "'${wl}-G'
+	  fi
+        else
+          # not using gcc
+          if test "$host_cpu" = ia64; then
+	  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release
+	  # chokes on -Wl,-G. The following line is correct:
+	  shared_flag='-G'
+          else
+	    if test "$aix_use_runtimelinking" = yes; then
+	      shared_flag='${wl}-G'
+	    else
+	      shared_flag='${wl}-bM:SRE'
+	    fi
+          fi
+        fi
+
+        export_dynamic_flag_spec_CXX='${wl}-bexpall'
+        # It seems that -bexpall does not export symbols beginning with
+        # underscore (_), so it is better to generate a list of symbols to
+	# export.
+        always_export_symbols_CXX=yes
+        if test "$aix_use_runtimelinking" = yes; then
+          # Warning - without using the other runtime loading flags (-brtl),
+          # -berok will link without error, but may produce a broken library.
+          allow_undefined_flag_CXX='-berok'
+          # Determine the default libpath from the value encoded in an empty
+          # executable.
+          cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+lt_aix_libpath_sed='
+    /Import File Strings/,/^$/ {
+	/^0/ {
+	    s/^0  *\(.*\)$/\1/
+	    p
+	}
+    }'
+aix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+# Check for a 64-bit object if we didn't find anything.
+if test -z "$aix_libpath"; then
+  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+if test -z "$aix_libpath"; then aix_libpath="/usr/lib:/lib"; fi
+
+          hardcode_libdir_flag_spec_CXX='${wl}-blibpath:$libdir:'"$aix_libpath"
+
+          archive_expsym_cmds_CXX='$CC -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags `if test "x${allow_undefined_flag}" != "x"; then $ECHO "X${wl}${allow_undefined_flag}" | $Xsed; else :; fi` '"\${wl}$exp_sym_flag:\$export_symbols $shared_flag"
+        else
+          if test "$host_cpu" = ia64; then
+	    hardcode_libdir_flag_spec_CXX='${wl}-R $libdir:/usr/lib:/lib'
+	    allow_undefined_flag_CXX="-z nodefs"
+	    archive_expsym_cmds_CXX="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags ${wl}${allow_undefined_flag} '"\${wl}$exp_sym_flag:\$export_symbols"
+          else
+	    # Determine the default libpath from the value encoded in an
+	    # empty executable.
+	    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+lt_aix_libpath_sed='
+    /Import File Strings/,/^$/ {
+	/^0/ {
+	    s/^0  *\(.*\)$/\1/
+	    p
+	}
+    }'
+aix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+# Check for a 64-bit object if we didn't find anything.
+if test -z "$aix_libpath"; then
+  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+if test -z "$aix_libpath"; then aix_libpath="/usr/lib:/lib"; fi
+
+	    hardcode_libdir_flag_spec_CXX='${wl}-blibpath:$libdir:'"$aix_libpath"
+	    # Warning - without using the other run time loading flags,
+	    # -berok will link without error, but may produce a broken library.
+	    no_undefined_flag_CXX=' ${wl}-bernotok'
+	    allow_undefined_flag_CXX=' ${wl}-berok'
+	    # Exported symbols can be pulled into shared objects from archives
+	    whole_archive_flag_spec_CXX='$convenience'
+	    archive_cmds_need_lc_CXX=yes
+	    # This is similar to how AIX traditionally builds its shared
+	    # libraries.
+	    archive_expsym_cmds_CXX="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'
+          fi
+        fi
+        ;;
+
+      beos*)
+	if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	  allow_undefined_flag_CXX=unsupported
+	  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc
+	  # support --undefined.  This deserves some investigation.  FIXME
+	  archive_cmds_CXX='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	else
+	  ld_shlibs_CXX=no
+	fi
+	;;
+
+      chorus*)
+        case $cc_basename in
+          *)
+	  # FIXME: insert proper C++ library support
+	  ld_shlibs_CXX=no
+	  ;;
+        esac
+        ;;
+
+      cygwin* | mingw* | pw32* | cegcc*)
+        # _LT_TAGVAR(hardcode_libdir_flag_spec, CXX) is actually meaningless,
+        # as there is no search path for DLLs.
+        hardcode_libdir_flag_spec_CXX='-L$libdir'
+        allow_undefined_flag_CXX=unsupported
+        always_export_symbols_CXX=no
+        enable_shared_with_static_runtimes_CXX=yes
+
+        if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then
+          archive_cmds_CXX='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+          # If the export-symbols file already is a .def file (1st line
+          # is EXPORTS), use it as is; otherwise, prepend...
+          archive_expsym_cmds_CXX='if test "x`$SED 1q $export_symbols`" = xEXPORTS; then
+	    cp $export_symbols $output_objdir/$soname.def;
+          else
+	    echo EXPORTS > $output_objdir/$soname.def;
+	    cat $export_symbols >> $output_objdir/$soname.def;
+          fi~
+          $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+        else
+          ld_shlibs_CXX=no
+        fi
+        ;;
+      darwin* | rhapsody*)
+
+
+  archive_cmds_need_lc_CXX=no
+  hardcode_direct_CXX=no
+  hardcode_automatic_CXX=yes
+  hardcode_shlibpath_var_CXX=unsupported
+  whole_archive_flag_spec_CXX=''
+  link_all_deplibs_CXX=yes
+  allow_undefined_flag_CXX="$_lt_dar_allow_undefined"
+  case $cc_basename in
+     ifort*) _lt_dar_can_shared=yes ;;
+     *) _lt_dar_can_shared=$GCC ;;
+  esac
+  if test "$_lt_dar_can_shared" = "yes"; then
+    output_verbose_link_cmd=echo
+    archive_cmds_CXX="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod${_lt_dsymutil}"
+    module_cmds_CXX="\$CC \$allow_undefined_flag -o \$lib -bundle \$libobjs \$deplibs \$compiler_flags${_lt_dsymutil}"
+    archive_expsym_cmds_CXX="sed 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}"
+    module_expsym_cmds_CXX="sed -e 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC \$allow_undefined_flag -o \$lib -bundle \$libobjs \$deplibs \$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}"
+       if test "$lt_cv_apple_cc_single_mod" != "yes"; then
+      archive_cmds_CXX="\$CC -r -keep_private_externs -nostdlib -o \${lib}-master.o \$libobjs~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \${lib}-master.o \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring${_lt_dsymutil}"
+      archive_expsym_cmds_CXX="sed 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC -r -keep_private_externs -nostdlib -o \${lib}-master.o \$libobjs~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \${lib}-master.o \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring${_lt_dar_export_syms}${_lt_dsymutil}"
+    fi
+
+  else
+  ld_shlibs_CXX=no
+  fi
+
+	;;
+
+      dgux*)
+        case $cc_basename in
+          ec++*)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          ghcx*)
+	    # Green Hills C++ Compiler
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          *)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+        esac
+        ;;
+
+      freebsd[12]*)
+        # C++ shared libraries reported to be fairly broken before
+	# switch to ELF
+        ld_shlibs_CXX=no
+        ;;
+
+      freebsd-elf*)
+        archive_cmds_need_lc_CXX=no
+        ;;
+
+      freebsd* | dragonfly*)
+        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF
+        # conventions
+        ld_shlibs_CXX=yes
+        ;;
+
+      gnu*)
+        ;;
+
+      hpux9*)
+        hardcode_libdir_flag_spec_CXX='${wl}+b ${wl}$libdir'
+        hardcode_libdir_separator_CXX=:
+        export_dynamic_flag_spec_CXX='${wl}-E'
+        hardcode_direct_CXX=yes
+        hardcode_minus_L_CXX=yes # Not in the search PATH,
+				             # but as the default
+				             # location of the library.
+
+        case $cc_basename in
+          CC*)
+            # FIXME: insert proper C++ library support
+            ld_shlibs_CXX=no
+            ;;
+          aCC*)
+            archive_cmds_CXX='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+            # Commands to make compiler produce verbose output that lists
+            # what "hidden" libraries, object files and flags are used when
+            # linking a shared library.
+            #
+            # There doesn't appear to be a way to prevent this compiler from
+            # explicitly linking system object files so we need to strip them
+            # from the output so that they don't get included in the library
+            # dependencies.
+            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP "\-L"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+            ;;
+          *)
+            if test "$GXX" = yes; then
+              archive_cmds_CXX='$RM $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+            else
+              # FIXME: insert proper C++ library support
+              ld_shlibs_CXX=no
+            fi
+            ;;
+        esac
+        ;;
+
+      hpux10*|hpux11*)
+        if test $with_gnu_ld = no; then
+	  hardcode_libdir_flag_spec_CXX='${wl}+b ${wl}$libdir'
+	  hardcode_libdir_separator_CXX=:
+
+          case $host_cpu in
+            hppa*64*|ia64*)
+              ;;
+            *)
+	      export_dynamic_flag_spec_CXX='${wl}-E'
+              ;;
+          esac
+        fi
+        case $host_cpu in
+          hppa*64*|ia64*)
+            hardcode_direct_CXX=no
+            hardcode_shlibpath_var_CXX=no
+            ;;
+          *)
+            hardcode_direct_CXX=yes
+            hardcode_direct_absolute_CXX=yes
+            hardcode_minus_L_CXX=yes # Not in the search PATH,
+					         # but as the default
+					         # location of the library.
+            ;;
+        esac
+
+        case $cc_basename in
+          CC*)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          aCC*)
+	    case $host_cpu in
+	      hppa*64*)
+	        archive_cmds_CXX='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	        ;;
+	      ia64*)
+	        archive_cmds_CXX='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	        ;;
+	      *)
+	        archive_cmds_CXX='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	        ;;
+	    esac
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP "\-L"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+	    ;;
+          *)
+	    if test "$GXX" = yes; then
+	      if test $with_gnu_ld = no; then
+	        case $host_cpu in
+	          hppa*64*)
+	            archive_cmds_CXX='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	            ;;
+	          ia64*)
+	            archive_cmds_CXX='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	            ;;
+	          *)
+	            archive_cmds_CXX='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	            ;;
+	        esac
+	      fi
+	    else
+	      # FIXME: insert proper C++ library support
+	      ld_shlibs_CXX=no
+	    fi
+	    ;;
+        esac
+        ;;
+
+      interix[3-9]*)
+	hardcode_direct_CXX=no
+	hardcode_shlibpath_var_CXX=no
+	hardcode_libdir_flag_spec_CXX='${wl}-rpath,$libdir'
+	export_dynamic_flag_spec_CXX='${wl}-E'
+	# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.
+	# Instead, shared libraries are loaded at an image base (0x10000000 by
+	# default) and relocated if they conflict, which is a slow very memory
+	# consuming and fragmenting process.  To avoid this, we pick a random,
+	# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link
+	# time.  Moving up from 0x10000000 also allows more sbrk(2) space.
+	archive_cmds_CXX='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+	archive_expsym_cmds_CXX='sed "s,^,_," $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+	;;
+      irix5* | irix6*)
+        case $cc_basename in
+          CC*)
+	    # SGI C++
+	    archive_cmds_CXX='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+
+	    # Archives containing C++ object files must be created using
+	    # "CC -ar", where "CC" is the IRIX C++ compiler.  This is
+	    # necessary to make sure instantiated templates are included
+	    # in the archive.
+	    old_archive_cmds_CXX='$CC -ar -WR,-u -o $oldlib $oldobjs'
+	    ;;
+          *)
+	    if test "$GXX" = yes; then
+	      if test "$with_gnu_ld" = no; then
+	        archive_cmds_CXX='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+	      else
+	        archive_cmds_CXX='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` -o $lib'
+	      fi
+	    fi
+	    link_all_deplibs_CXX=yes
+	    ;;
+        esac
+        hardcode_libdir_flag_spec_CXX='${wl}-rpath ${wl}$libdir'
+        hardcode_libdir_separator_CXX=:
+        inherit_rpath_CXX=yes
+        ;;
+
+      linux* | k*bsd*-gnu | kopensolaris*-gnu)
+        case $cc_basename in
+          KCC*)
+	    # Kuck and Associates, Inc. (KAI) C++ Compiler
+
+	    # KCC will only create a shared library if the output file
+	    # ends with ".so" (or ".sl" for HP-UX), so rename the library
+	    # to its proper name (with version) after linking.
+	    archive_cmds_CXX='tempext=`echo $shared_ext | $SED -e '\''s/\([^()0-9A-Za-z{}]\)/\\\\\1/g'\''`; templib=`echo $lib | $SED -e "s/\${tempext}\..*/.so/"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \$templib; mv \$templib $lib'
+	    archive_expsym_cmds_CXX='tempext=`echo $shared_ext | $SED -e '\''s/\([^()0-9A-Za-z{}]\)/\\\\\1/g'\''`; templib=`echo $lib | $SED -e "s/\${tempext}\..*/.so/"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \$templib ${wl}-retain-symbols-file,$export_symbols; mv \$templib $lib'
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP "ld"`; rm -f libconftest$shared_ext; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+
+	    hardcode_libdir_flag_spec_CXX='${wl}-rpath,$libdir'
+	    export_dynamic_flag_spec_CXX='${wl}--export-dynamic'
+
+	    # Archives containing C++ object files must be created using
+	    # "CC -Bstatic", where "CC" is the KAI C++ compiler.
+	    old_archive_cmds_CXX='$CC -Bstatic -o $oldlib $oldobjs'
+	    ;;
+	  icpc* | ecpc* )
+	    # Intel C++
+	    with_gnu_ld=yes
+	    # version 8.0 and above of icpc choke on multiply defined symbols
+	    # if we add $predep_objects and $postdep_objects, however 7.1 and
+	    # earlier do not add the objects themselves.
+	    case `$CC -V 2>&1` in
+	      *"Version 7."*)
+	        archive_cmds_CXX='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'
+		archive_expsym_cmds_CXX='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+		;;
+	      *)  # Version 8.0 or newer
+	        tmp_idyn=
+	        case $host_cpu in
+		  ia64*) tmp_idyn=' -i_dynamic';;
+		esac
+	        archive_cmds_CXX='$CC -shared'"$tmp_idyn"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+		archive_expsym_cmds_CXX='$CC -shared'"$tmp_idyn"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+		;;
+	    esac
+	    archive_cmds_need_lc_CXX=no
+	    hardcode_libdir_flag_spec_CXX='${wl}-rpath,$libdir'
+	    export_dynamic_flag_spec_CXX='${wl}--export-dynamic'
+	    whole_archive_flag_spec_CXX='${wl}--whole-archive$convenience ${wl}--no-whole-archive'
+	    ;;
+          pgCC* | pgcpp*)
+            # Portland Group C++ compiler
+	    case `$CC -V` in
+	    *pgCC\ [1-5]* | *pgcpp\ [1-5]*)
+	      prelink_cmds_CXX='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~
+		compile_command="$compile_command `find $tpldir -name \*.o | $NL2SP`"'
+	      old_archive_cmds_CXX='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~
+		$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \*.o | $NL2SP`~
+		$RANLIB $oldlib'
+	      archive_cmds_CXX='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~
+		$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'
+	      archive_expsym_cmds_CXX='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~
+		$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'
+	      ;;
+	    *) # Version 6 will use weak symbols
+	      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'
+	      archive_expsym_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'
+	      ;;
+	    esac
+
+	    hardcode_libdir_flag_spec_CXX='${wl}--rpath ${wl}$libdir'
+	    export_dynamic_flag_spec_CXX='${wl}--export-dynamic'
+	    whole_archive_flag_spec_CXX='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+            ;;
+	  cxx*)
+	    # Compaq C++
+	    archive_cmds_CXX='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	    archive_expsym_cmds_CXX='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'
+
+	    runpath_var=LD_RUN_PATH
+	    hardcode_libdir_flag_spec_CXX='-rpath $libdir'
+	    hardcode_libdir_separator_CXX=:
+
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "ld"`; templist=`$ECHO "X$templist" | $Xsed -e "s/\(^.*ld.*\)\( .*ld .*$\)/\1/"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+	    ;;
+	  xl*)
+	    # IBM XL 8.0 on PPC, with GNU ld
+	    hardcode_libdir_flag_spec_CXX='${wl}-rpath ${wl}$libdir'
+	    export_dynamic_flag_spec_CXX='${wl}--export-dynamic'
+	    archive_cmds_CXX='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	    if test "x$supports_anon_versioning" = xyes; then
+	      archive_expsym_cmds_CXX='echo "{ global:" > $output_objdir/$libname.ver~
+		cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+		echo "local: *; };" >> $output_objdir/$libname.ver~
+		$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
+	    fi
+	    ;;
+	  *)
+	    case `$CC -V 2>&1 | sed 5q` in
+	    *Sun\ C*)
+	      # Sun C++ 5.9
+	      no_undefined_flag_CXX=' -zdefs'
+	      archive_cmds_CXX='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	      archive_expsym_cmds_CXX='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'
+	      hardcode_libdir_flag_spec_CXX='-R$libdir'
+	      whole_archive_flag_spec_CXX='${wl}--whole-archive`new_convenience=; for conv in $convenience\"\"; do test -z \"$conv\" || new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	      compiler_needs_object_CXX=yes
+
+	      # Not sure whether something based on
+	      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1
+	      # would be better.
+	      output_verbose_link_cmd='echo'
+
+	      # Archives containing C++ object files must be created using
+	      # "CC -xar", where "CC" is the Sun C++ compiler.  This is
+	      # necessary to make sure instantiated templates are included
+	      # in the archive.
+	      old_archive_cmds_CXX='$CC -xar -o $oldlib $oldobjs'
+	      ;;
+	    esac
+	    ;;
+	esac
+	;;
+
+      lynxos*)
+        # FIXME: insert proper C++ library support
+	ld_shlibs_CXX=no
+	;;
+
+      m88k*)
+        # FIXME: insert proper C++ library support
+        ld_shlibs_CXX=no
+	;;
+
+      mvs*)
+        case $cc_basename in
+          cxx*)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+	  *)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+	esac
+	;;
+
+      netbsd*)
+        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+	  archive_cmds_CXX='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'
+	  wlarc=
+	  hardcode_libdir_flag_spec_CXX='-R$libdir'
+	  hardcode_direct_CXX=yes
+	  hardcode_shlibpath_var_CXX=no
+	fi
+	# Workaround some broken pre-1.5 toolchains
+	output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e "s:-lgcc -lc -lgcc::"'
+	;;
+
+      *nto* | *qnx*)
+        ld_shlibs_CXX=yes
+	;;
+
+      openbsd2*)
+        # C++ shared libraries are fairly broken
+	ld_shlibs_CXX=no
+	;;
+
+      openbsd*)
+	if test -f /usr/libexec/ld.so; then
+	  hardcode_direct_CXX=yes
+	  hardcode_shlibpath_var_CXX=no
+	  hardcode_direct_absolute_CXX=yes
+	  archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'
+	  hardcode_libdir_flag_spec_CXX='${wl}-rpath,$libdir'
+	  if test -z "`echo __ELF__ | $CC -E - | grep __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+	    archive_expsym_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'
+	    export_dynamic_flag_spec_CXX='${wl}-E'
+	    whole_archive_flag_spec_CXX="$wlarc"'--whole-archive$convenience '"$wlarc"'--no-whole-archive'
+	  fi
+	  output_verbose_link_cmd=echo
+	else
+	  ld_shlibs_CXX=no
+	fi
+	;;
+
+      osf3* | osf4* | osf5*)
+        case $cc_basename in
+          KCC*)
+	    # Kuck and Associates, Inc. (KAI) C++ Compiler
+
+	    # KCC will only create a shared library if the output file
+	    # ends with ".so" (or ".sl" for HP-UX), so rename the library
+	    # to its proper name (with version) after linking.
+	    archive_cmds_CXX='tempext=`echo $shared_ext | $SED -e '\''s/\([^()0-9A-Za-z{}]\)/\\\\\1/g'\''`; templib=`echo "$lib" | $SED -e "s/\${tempext}\..*/.so/"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \$templib; mv \$templib $lib'
+
+	    hardcode_libdir_flag_spec_CXX='${wl}-rpath,$libdir'
+	    hardcode_libdir_separator_CXX=:
+
+	    # Archives containing C++ object files must be created using
+	    # the KAI C++ compiler.
+	    case $host in
+	      osf3*) old_archive_cmds_CXX='$CC -Bstatic -o $oldlib $oldobjs' ;;
+	      *) old_archive_cmds_CXX='$CC -o $oldlib $oldobjs' ;;
+	    esac
+	    ;;
+          RCC*)
+	    # Rational C++ 2.4.1
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          cxx*)
+	    case $host in
+	      osf3*)
+	        allow_undefined_flag_CXX=' ${wl}-expect_unresolved ${wl}\*'
+	        archive_cmds_CXX='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n "$verstring" && $ECHO "X${wl}-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	        hardcode_libdir_flag_spec_CXX='${wl}-rpath ${wl}$libdir'
+		;;
+	      *)
+	        allow_undefined_flag_CXX=' -expect_unresolved \*'
+	        archive_cmds_CXX='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	        archive_expsym_cmds_CXX='for i in `cat $export_symbols`; do printf "%s %s\\n" -exported_symbol "\$i" >> $lib.exp; done~
+	          echo "-hidden">> $lib.exp~
+	          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~
+	          $RM $lib.exp'
+	        hardcode_libdir_flag_spec_CXX='-rpath $libdir'
+		;;
+	    esac
+
+	    hardcode_libdir_separator_CXX=:
+
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "ld" | $GREP -v "ld:"`; templist=`$ECHO "X$templist" | $Xsed -e "s/\(^.*ld.*\)\( .*ld.*$\)/\1/"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+	    ;;
+	  *)
+	    if test "$GXX" = yes && test "$with_gnu_ld" = no; then
+	      allow_undefined_flag_CXX=' ${wl}-expect_unresolved ${wl}\*'
+	      case $host in
+	        osf3*)
+	          archive_cmds_CXX='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+		  ;;
+	        *)
+	          archive_cmds_CXX='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+		  ;;
+	      esac
+
+	      hardcode_libdir_flag_spec_CXX='${wl}-rpath ${wl}$libdir'
+	      hardcode_libdir_separator_CXX=:
+
+	      # Commands to make compiler produce verbose output that lists
+	      # what "hidden" libraries, object files and flags are used when
+	      # linking a shared library.
+	      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+
+	    else
+	      # FIXME: insert proper C++ library support
+	      ld_shlibs_CXX=no
+	    fi
+	    ;;
+        esac
+        ;;
+
+      psos*)
+        # FIXME: insert proper C++ library support
+        ld_shlibs_CXX=no
+        ;;
+
+      sunos4*)
+        case $cc_basename in
+          CC*)
+	    # Sun C++ 4.x
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          lcc*)
+	    # Lucid
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          *)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+        esac
+        ;;
+
+      solaris*)
+        case $cc_basename in
+          CC*)
+	    # Sun C++ 4.2, 5.x and Centerline C++
+            archive_cmds_need_lc_CXX=yes
+	    no_undefined_flag_CXX=' -zdefs'
+	    archive_cmds_CXX='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	    archive_expsym_cmds_CXX='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'
+
+	    hardcode_libdir_flag_spec_CXX='-R$libdir'
+	    hardcode_shlibpath_var_CXX=no
+	    case $host_os in
+	      solaris2.[0-5] | solaris2.[0-5].*) ;;
+	      *)
+		# The compiler driver will combine and reorder linker options,
+		# but understands `-z linker_flag'.
+	        # Supported since Solaris 2.6 (maybe 2.5.1?)
+		whole_archive_flag_spec_CXX='-z allextract$convenience -z defaultextract'
+	        ;;
+	    esac
+	    link_all_deplibs_CXX=yes
+
+	    output_verbose_link_cmd='echo'
+
+	    # Archives containing C++ object files must be created using
+	    # "CC -xar", where "CC" is the Sun C++ compiler.  This is
+	    # necessary to make sure instantiated templates are included
+	    # in the archive.
+	    old_archive_cmds_CXX='$CC -xar -o $oldlib $oldobjs'
+	    ;;
+          gcx*)
+	    # Green Hills C++ Compiler
+	    archive_cmds_CXX='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'
+
+	    # The C++ compiler must be used to create the archive.
+	    old_archive_cmds_CXX='$CC $LDFLAGS -archive -o $oldlib $oldobjs'
+	    ;;
+          *)
+	    # GNU C++ compiler with Solaris linker
+	    if test "$GXX" = yes && test "$with_gnu_ld" = no; then
+	      no_undefined_flag_CXX=' ${wl}-z ${wl}defs'
+	      if $CC --version | $GREP -v '^2\.7' > /dev/null; then
+	        archive_cmds_CXX='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'
+	        archive_expsym_cmds_CXX='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+		  $CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'
+
+	        # Commands to make compiler produce verbose output that lists
+	        # what "hidden" libraries, object files and flags are used when
+	        # linking a shared library.
+	        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+	      else
+	        # g++ 2.7 appears to require `-G' NOT `-shared' on this
+	        # platform.
+	        archive_cmds_CXX='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'
+	        archive_expsym_cmds_CXX='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+		  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'
+
+	        # Commands to make compiler produce verbose output that lists
+	        # what "hidden" libraries, object files and flags are used when
+	        # linking a shared library.
+	        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+	      fi
+
+	      hardcode_libdir_flag_spec_CXX='${wl}-R $wl$libdir'
+	      case $host_os in
+		solaris2.[0-5] | solaris2.[0-5].*) ;;
+		*)
+		  whole_archive_flag_spec_CXX='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'
+		  ;;
+	      esac
+	    fi
+	    ;;
+        esac
+        ;;
+
+    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[01].[10]* | unixware7* | sco3.2v5.0.[024]*)
+      no_undefined_flag_CXX='${wl}-z,text'
+      archive_cmds_need_lc_CXX=no
+      hardcode_shlibpath_var_CXX=no
+      runpath_var='LD_RUN_PATH'
+
+      case $cc_basename in
+        CC*)
+	  archive_cmds_CXX='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  archive_expsym_cmds_CXX='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	*)
+	  archive_cmds_CXX='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  archive_expsym_cmds_CXX='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+      esac
+      ;;
+
+      sysv5* | sco3.2v5* | sco5v6*)
+	# Note: We can NOT use -z defs as we might desire, because we do not
+	# link with -lc, and that would cause any symbols used from libc to
+	# always be unresolved, which means just about no library would
+	# ever link correctly.  If we're not using GNU ld we use -z text
+	# though, which does catch some bad symbols but isn't as heavy-handed
+	# as -z defs.
+	no_undefined_flag_CXX='${wl}-z,text'
+	allow_undefined_flag_CXX='${wl}-z,nodefs'
+	archive_cmds_need_lc_CXX=no
+	hardcode_shlibpath_var_CXX=no
+	hardcode_libdir_flag_spec_CXX='${wl}-R,$libdir'
+	hardcode_libdir_separator_CXX=':'
+	link_all_deplibs_CXX=yes
+	export_dynamic_flag_spec_CXX='${wl}-Bexport'
+	runpath_var='LD_RUN_PATH'
+
+	case $cc_basename in
+          CC*)
+	    archive_cmds_CXX='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    archive_expsym_cmds_CXX='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    ;;
+	  *)
+	    archive_cmds_CXX='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    archive_expsym_cmds_CXX='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    ;;
+	esac
+      ;;
+
+      tandem*)
+        case $cc_basename in
+          NCC*)
+	    # NonStop-UX NCC 3.20
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+          *)
+	    # FIXME: insert proper C++ library support
+	    ld_shlibs_CXX=no
+	    ;;
+        esac
+        ;;
+
+      vxworks*)
+        # FIXME: insert proper C++ library support
+        ld_shlibs_CXX=no
+        ;;
+
+      *)
+        # FIXME: insert proper C++ library support
+        ld_shlibs_CXX=no
+        ;;
+    esac
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ld_shlibs_CXX" >&5
+$as_echo "$ld_shlibs_CXX" >&6; }
+    test "$ld_shlibs_CXX" = no && can_build_shared=no
+
+    GCC_CXX="$GXX"
+    LD_CXX="$LD"
+
+    ## CAVEAT EMPTOR:
+    ## There is no encapsulation within the following macros, do not change
+    ## the running order or otherwise move them around unless you know exactly
+    ## what you are doing...
+    # Dependencies to place before and after the object being linked:
+predep_objects_CXX=
+postdep_objects_CXX=
+predeps_CXX=
+postdeps_CXX=
+compiler_lib_search_path_CXX=
+
+cat > conftest.$ac_ext <<_LT_EOF
+class Foo
+{
+public:
+  Foo (void) { a = 0; }
+private:
+  int a;
+};
+_LT_EOF
+
+if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  # Parse the compiler output and extract the necessary
+  # objects, libraries and library flags.
+
+  # Sentinel used to keep track of whether or not we are before
+  # the conftest object file.
+  pre_test_object_deps_done=no
+
+  for p in `eval "$output_verbose_link_cmd"`; do
+    case $p in
+
+    -L* | -R* | -l*)
+       # Some compilers place space between "-{L,R}" and the path.
+       # Remove the space.
+       if test $p = "-L" ||
+          test $p = "-R"; then
+	 prev=$p
+	 continue
+       else
+	 prev=
+       fi
+
+       if test "$pre_test_object_deps_done" = no; then
+	 case $p in
+	 -L* | -R*)
+	   # Internal compiler library paths should come after those
+	   # provided the user.  The postdeps already come after the
+	   # user supplied libs so there is no need to process them.
+	   if test -z "$compiler_lib_search_path_CXX"; then
+	     compiler_lib_search_path_CXX="${prev}${p}"
+	   else
+	     compiler_lib_search_path_CXX="${compiler_lib_search_path_CXX} ${prev}${p}"
+	   fi
+	   ;;
+	 # The "-l" case would never come before the object being
+	 # linked, so don't bother handling this case.
+	 esac
+       else
+	 if test -z "$postdeps_CXX"; then
+	   postdeps_CXX="${prev}${p}"
+	 else
+	   postdeps_CXX="${postdeps_CXX} ${prev}${p}"
+	 fi
+       fi
+       ;;
+
+    *.$objext)
+       # This assumes that the test object file only shows up
+       # once in the compiler output.
+       if test "$p" = "conftest.$objext"; then
+	 pre_test_object_deps_done=yes
+	 continue
+       fi
+
+       if test "$pre_test_object_deps_done" = no; then
+	 if test -z "$predep_objects_CXX"; then
+	   predep_objects_CXX="$p"
+	 else
+	   predep_objects_CXX="$predep_objects_CXX $p"
+	 fi
+       else
+	 if test -z "$postdep_objects_CXX"; then
+	   postdep_objects_CXX="$p"
+	 else
+	   postdep_objects_CXX="$postdep_objects_CXX $p"
+	 fi
+       fi
+       ;;
+
+    *) ;; # Ignore the rest.
+
+    esac
+  done
+
+  # Clean up.
+  rm -f a.out a.exe
+else
+  echo "libtool.m4: error: problem compiling CXX test program"
+fi
+
+$RM -f confest.$objext
+
+# PORTME: override above test on systems where it is broken
+case $host_os in
+interix[3-9]*)
+  # Interix 3.5 installs completely hosed .la files for C++, so rather than
+  # hack all around it, let's just trust "g++" to DTRT.
+  predep_objects_CXX=
+  postdep_objects_CXX=
+  postdeps_CXX=
+  ;;
+
+linux*)
+  case `$CC -V 2>&1 | sed 5q` in
+  *Sun\ C*)
+    # Sun C++ 5.9
+
+    # The more standards-conforming stlport4 library is
+    # incompatible with the Cstd library. Avoid specifying
+    # it if it's in CXXFLAGS. Ignore libCrun as
+    # -library=stlport4 depends on it.
+    case " $CXX $CXXFLAGS " in
+    *" -library=stlport4 "*)
+      solaris_use_stlport4=yes
+      ;;
+    esac
+
+    if test "$solaris_use_stlport4" != yes; then
+      postdeps_CXX='-library=Cstd -library=Crun'
+    fi
+    ;;
+  esac
+  ;;
+
+solaris*)
+  case $cc_basename in
+  CC*)
+    # The more standards-conforming stlport4 library is
+    # incompatible with the Cstd library. Avoid specifying
+    # it if it's in CXXFLAGS. Ignore libCrun as
+    # -library=stlport4 depends on it.
+    case " $CXX $CXXFLAGS " in
+    *" -library=stlport4 "*)
+      solaris_use_stlport4=yes
+      ;;
+    esac
+
+    # Adding this requires a known-good setup of shared libraries for
+    # Sun compiler versions before 5.6, else PIC objects from an old
+    # archive will be linked into the output, leading to subtle bugs.
+    if test "$solaris_use_stlport4" != yes; then
+      postdeps_CXX='-library=Cstd -library=Crun'
+    fi
+    ;;
+  esac
+  ;;
+esac
+
+
+case " $postdeps_CXX " in
+*" -lc "*) archive_cmds_need_lc_CXX=no ;;
+esac
+ compiler_lib_search_dirs_CXX=
+if test -n "${compiler_lib_search_path_CXX}"; then
+ compiler_lib_search_dirs_CXX=`echo " ${compiler_lib_search_path_CXX}" | ${SED} -e 's! -L! !g' -e 's!^ !!'`
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    lt_prog_compiler_wl_CXX=
+lt_prog_compiler_pic_CXX=
+lt_prog_compiler_static_CXX=
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $compiler option to produce PIC" >&5
+$as_echo_n "checking for $compiler option to produce PIC... " >&6; }
+
+  # C++ specific cases for pic, static, wl, etc.
+  if test "$GXX" = yes; then
+    lt_prog_compiler_wl_CXX='-Wl,'
+    lt_prog_compiler_static_CXX='-static'
+
+    case $host_os in
+    aix*)
+      # All AIX code is PIC.
+      if test "$host_cpu" = ia64; then
+	# AIX 5 now supports IA64 processor
+	lt_prog_compiler_static_CXX='-Bstatic'
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            lt_prog_compiler_pic_CXX='-fPIC'
+        ;;
+      m68k)
+            # FIXME: we need at least 68020 code to build shared libraries, but
+            # adding the `-m68020' flag to GCC prevents building anything better,
+            # like `-m68040'.
+            lt_prog_compiler_pic_CXX='-m68020 -resident32 -malways-restore-a4'
+        ;;
+      esac
+      ;;
+
+    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)
+      # PIC is the default for these OSes.
+      ;;
+    mingw* | cygwin* | os2* | pw32* | cegcc*)
+      # This hack is so that the source file can tell whether it is being
+      # built for inclusion in a dll (and should export symbols for example).
+      # Although the cygwin gcc ignores -fPIC, still need this for old-style
+      # (--disable-auto-import) libraries
+      lt_prog_compiler_pic_CXX='-DDLL_EXPORT'
+      ;;
+    darwin* | rhapsody*)
+      # PIC is the default on this platform
+      # Common symbols not allowed in MH_DYLIB files
+      lt_prog_compiler_pic_CXX='-fno-common'
+      ;;
+    *djgpp*)
+      # DJGPP does not support shared libraries at all
+      lt_prog_compiler_pic_CXX=
+      ;;
+    interix[3-9]*)
+      # Interix 3.x gcc -fpic/-fPIC options generate broken code.
+      # Instead, we relocate shared libraries at runtime.
+      ;;
+    sysv4*MP*)
+      if test -d /usr/nec; then
+	lt_prog_compiler_pic_CXX=-Kconform_pic
+      fi
+      ;;
+    hpux*)
+      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit
+      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag
+      # sets the default TLS model and affects inlining.
+      case $host_cpu in
+      hppa*64*)
+	;;
+      *)
+	lt_prog_compiler_pic_CXX='-fPIC'
+	;;
+      esac
+      ;;
+    *qnx* | *nto*)
+      # QNX uses GNU C++, but need to define -shared option too, otherwise
+      # it will coredump.
+      lt_prog_compiler_pic_CXX='-fPIC -shared'
+      ;;
+    *)
+      lt_prog_compiler_pic_CXX='-fPIC'
+      ;;
+    esac
+  else
+    case $host_os in
+      aix[4-9]*)
+	# All AIX code is PIC.
+	if test "$host_cpu" = ia64; then
+	  # AIX 5 now supports IA64 processor
+	  lt_prog_compiler_static_CXX='-Bstatic'
+	else
+	  lt_prog_compiler_static_CXX='-bnso -bI:/lib/syscalls.exp'
+	fi
+	;;
+      chorus*)
+	case $cc_basename in
+	cxch68*)
+	  # Green Hills C++ Compiler
+	  # _LT_TAGVAR(lt_prog_compiler_static, CXX)="--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a"
+	  ;;
+	esac
+	;;
+      dgux*)
+	case $cc_basename in
+	  ec++*)
+	    lt_prog_compiler_pic_CXX='-KPIC'
+	    ;;
+	  ghcx*)
+	    # Green Hills C++ Compiler
+	    lt_prog_compiler_pic_CXX='-pic'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      freebsd* | dragonfly*)
+	# FreeBSD uses GNU C++
+	;;
+      hpux9* | hpux10* | hpux11*)
+	case $cc_basename in
+	  CC*)
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_static_CXX='${wl}-a ${wl}archive'
+	    if test "$host_cpu" != ia64; then
+	      lt_prog_compiler_pic_CXX='+Z'
+	    fi
+	    ;;
+	  aCC*)
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_static_CXX='${wl}-a ${wl}archive'
+	    case $host_cpu in
+	    hppa*64*|ia64*)
+	      # +Z the default
+	      ;;
+	    *)
+	      lt_prog_compiler_pic_CXX='+Z'
+	      ;;
+	    esac
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      interix*)
+	# This is c89, which is MS Visual C++ (no shared libs)
+	# Anyone wants to do a port?
+	;;
+      irix5* | irix6* | nonstopux*)
+	case $cc_basename in
+	  CC*)
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_static_CXX='-non_shared'
+	    # CC pic flag -KPIC is the default.
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      linux* | k*bsd*-gnu | kopensolaris*-gnu)
+	case $cc_basename in
+	  KCC*)
+	    # KAI C++ Compiler
+	    lt_prog_compiler_wl_CXX='--backend -Wl,'
+	    lt_prog_compiler_pic_CXX='-fPIC'
+	    ;;
+	  ecpc* )
+	    # old Intel C++ for x86_64 which still supported -KPIC.
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_pic_CXX='-KPIC'
+	    lt_prog_compiler_static_CXX='-static'
+	    ;;
+	  icpc* )
+	    # Intel C++, used to be incompatible with GCC.
+	    # ICC 10 doesn't accept -KPIC any more.
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_pic_CXX='-fPIC'
+	    lt_prog_compiler_static_CXX='-static'
+	    ;;
+	  pgCC* | pgcpp*)
+	    # Portland Group C++ compiler
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_pic_CXX='-fpic'
+	    lt_prog_compiler_static_CXX='-Bstatic'
+	    ;;
+	  cxx*)
+	    # Compaq C++
+	    # Make sure the PIC flag is empty.  It appears that all Alpha
+	    # Linux and Compaq Tru64 Unix objects are PIC.
+	    lt_prog_compiler_pic_CXX=
+	    lt_prog_compiler_static_CXX='-non_shared'
+	    ;;
+	  xlc* | xlC*)
+	    # IBM XL 8.0 on PPC
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_pic_CXX='-qpic'
+	    lt_prog_compiler_static_CXX='-qstaticlink'
+	    ;;
+	  *)
+	    case `$CC -V 2>&1 | sed 5q` in
+	    *Sun\ C*)
+	      # Sun C++ 5.9
+	      lt_prog_compiler_pic_CXX='-KPIC'
+	      lt_prog_compiler_static_CXX='-Bstatic'
+	      lt_prog_compiler_wl_CXX='-Qoption ld '
+	      ;;
+	    esac
+	    ;;
+	esac
+	;;
+      lynxos*)
+	;;
+      m88k*)
+	;;
+      mvs*)
+	case $cc_basename in
+	  cxx*)
+	    lt_prog_compiler_pic_CXX='-W c,exportall'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      netbsd* | netbsdelf*-gnu)
+	;;
+      *qnx* | *nto*)
+        # QNX uses GNU C++, but need to define -shared option too, otherwise
+        # it will coredump.
+        lt_prog_compiler_pic_CXX='-fPIC -shared'
+        ;;
+      osf3* | osf4* | osf5*)
+	case $cc_basename in
+	  KCC*)
+	    lt_prog_compiler_wl_CXX='--backend -Wl,'
+	    ;;
+	  RCC*)
+	    # Rational C++ 2.4.1
+	    lt_prog_compiler_pic_CXX='-pic'
+	    ;;
+	  cxx*)
+	    # Digital/Compaq C++
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    # Make sure the PIC flag is empty.  It appears that all Alpha
+	    # Linux and Compaq Tru64 Unix objects are PIC.
+	    lt_prog_compiler_pic_CXX=
+	    lt_prog_compiler_static_CXX='-non_shared'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      psos*)
+	;;
+      solaris*)
+	case $cc_basename in
+	  CC*)
+	    # Sun C++ 4.2, 5.x and Centerline C++
+	    lt_prog_compiler_pic_CXX='-KPIC'
+	    lt_prog_compiler_static_CXX='-Bstatic'
+	    lt_prog_compiler_wl_CXX='-Qoption ld '
+	    ;;
+	  gcx*)
+	    # Green Hills C++ Compiler
+	    lt_prog_compiler_pic_CXX='-PIC'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      sunos4*)
+	case $cc_basename in
+	  CC*)
+	    # Sun C++ 4.x
+	    lt_prog_compiler_pic_CXX='-pic'
+	    lt_prog_compiler_static_CXX='-Bstatic'
+	    ;;
+	  lcc*)
+	    # Lucid
+	    lt_prog_compiler_pic_CXX='-pic'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)
+	case $cc_basename in
+	  CC*)
+	    lt_prog_compiler_wl_CXX='-Wl,'
+	    lt_prog_compiler_pic_CXX='-KPIC'
+	    lt_prog_compiler_static_CXX='-Bstatic'
+	    ;;
+	esac
+	;;
+      tandem*)
+	case $cc_basename in
+	  NCC*)
+	    # NonStop-UX NCC 3.20
+	    lt_prog_compiler_pic_CXX='-KPIC'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      vxworks*)
+	;;
+      *)
+	lt_prog_compiler_can_build_shared_CXX=no
+	;;
+    esac
+  fi
+
+case $host_os in
+  # For platforms which do not support PIC, -DPIC is meaningless:
+  *djgpp*)
+    lt_prog_compiler_pic_CXX=
+    ;;
+  *)
+    lt_prog_compiler_pic_CXX="$lt_prog_compiler_pic_CXX -DPIC"
+    ;;
+esac
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_prog_compiler_pic_CXX" >&5
+$as_echo "$lt_prog_compiler_pic_CXX" >&6; }
+
+
+
+#
+# Check to make sure the PIC flag actually works.
+#
+if test -n "$lt_prog_compiler_pic_CXX"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler PIC flag $lt_prog_compiler_pic_CXX works" >&5
+$as_echo_n "checking if $compiler PIC flag $lt_prog_compiler_pic_CXX works... " >&6; }
+if test "${lt_cv_prog_compiler_pic_works_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_pic_works_CXX=no
+   ac_outfile=conftest.$ac_objext
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+   lt_compiler_flag="$lt_prog_compiler_pic_CXX -DPIC"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   # The option is referenced via a variable to avoid confusing sed.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:16065: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>conftest.err)
+   ac_status=$?
+   cat conftest.err >&5
+   echo "$as_me:16069: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s "$ac_outfile"; then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings other than the usual output.
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' >conftest.exp
+     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_pic_works_CXX=yes
+     fi
+   fi
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_pic_works_CXX" >&5
+$as_echo "$lt_cv_prog_compiler_pic_works_CXX" >&6; }
+
+if test x"$lt_cv_prog_compiler_pic_works_CXX" = xyes; then
+    case $lt_prog_compiler_pic_CXX in
+     "" | " "*) ;;
+     *) lt_prog_compiler_pic_CXX=" $lt_prog_compiler_pic_CXX" ;;
+     esac
+else
+    lt_prog_compiler_pic_CXX=
+     lt_prog_compiler_can_build_shared_CXX=no
+fi
+
+fi
+
+
+
+#
+# Check to make sure the static flag actually works.
+#
+wl=$lt_prog_compiler_wl_CXX eval lt_tmp_static_flag=\"$lt_prog_compiler_static_CXX\"
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler static flag $lt_tmp_static_flag works" >&5
+$as_echo_n "checking if $compiler static flag $lt_tmp_static_flag works... " >&6; }
+if test "${lt_cv_prog_compiler_static_works_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_static_works_CXX=no
+   save_LDFLAGS="$LDFLAGS"
+   LDFLAGS="$LDFLAGS $lt_tmp_static_flag"
+   echo "$lt_simple_link_test_code" > conftest.$ac_ext
+   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then
+     # The linker can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     if test -s conftest.err; then
+       # Append any errors to the config.log.
+       cat conftest.err 1>&5
+       $ECHO "X$_lt_linker_boilerplate" | $Xsed -e '/^$/d' > conftest.exp
+       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+       if diff conftest.exp conftest.er2 >/dev/null; then
+         lt_cv_prog_compiler_static_works_CXX=yes
+       fi
+     else
+       lt_cv_prog_compiler_static_works_CXX=yes
+     fi
+   fi
+   $RM -r conftest*
+   LDFLAGS="$save_LDFLAGS"
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_static_works_CXX" >&5
+$as_echo "$lt_cv_prog_compiler_static_works_CXX" >&6; }
+
+if test x"$lt_cv_prog_compiler_static_works_CXX" = xyes; then
+    :
+else
+    lt_prog_compiler_static_CXX=
+fi
+
+
+
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler supports -c -o file.$ac_objext" >&5
+$as_echo_n "checking if $compiler supports -c -o file.$ac_objext... " >&6; }
+if test "${lt_cv_prog_compiler_c_o_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_c_o_CXX=no
+   $RM -r conftest 2>/dev/null
+   mkdir conftest
+   cd conftest
+   mkdir out
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+   lt_compiler_flag="-o out/conftest2.$ac_objext"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:16164: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>out/conftest.err)
+   ac_status=$?
+   cat out/conftest.err >&5
+   echo "$as_me:16168: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s out/conftest2.$ac_objext
+   then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' > out/conftest.exp
+     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2
+     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_c_o_CXX=yes
+     fi
+   fi
+   chmod u+w . 2>&5
+   $RM conftest*
+   # SGI C++ compiler will create directory out/ii_files/ for
+   # template instantiation
+   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files
+   $RM out/* && rmdir out
+   cd ..
+   $RM -r conftest
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_c_o_CXX" >&5
+$as_echo "$lt_cv_prog_compiler_c_o_CXX" >&6; }
+
+
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking if $compiler supports -c -o file.$ac_objext" >&5
+$as_echo_n "checking if $compiler supports -c -o file.$ac_objext... " >&6; }
+if test "${lt_cv_prog_compiler_c_o_CXX+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  lt_cv_prog_compiler_c_o_CXX=no
+   $RM -r conftest 2>/dev/null
+   mkdir conftest
+   cd conftest
+   mkdir out
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+   lt_compiler_flag="-o out/conftest2.$ac_objext"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:16216: $lt_compile\"" >&5)
+   (eval "$lt_compile" 2>out/conftest.err)
+   ac_status=$?
+   cat out/conftest.err >&5
+   echo "$as_me:16220: \$? = $ac_status" >&5
+   if (exit $ac_status) && test -s out/conftest2.$ac_objext
+   then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' > out/conftest.exp
+     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2
+     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then
+       lt_cv_prog_compiler_c_o_CXX=yes
+     fi
+   fi
+   chmod u+w . 2>&5
+   $RM conftest*
+   # SGI C++ compiler will create directory out/ii_files/ for
+   # template instantiation
+   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files
+   $RM out/* && rmdir out
+   cd ..
+   $RM -r conftest
+   $RM conftest*
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_c_o_CXX" >&5
+$as_echo "$lt_cv_prog_compiler_c_o_CXX" >&6; }
+
+
+
+
+hard_links="nottested"
+if test "$lt_cv_prog_compiler_c_o_CXX" = no && test "$need_locks" != no; then
+  # do not overwrite the value of need_locks provided by the user
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if we can lock with hard links" >&5
+$as_echo_n "checking if we can lock with hard links... " >&6; }
+  hard_links=yes
+  $RM conftest*
+  ln conftest.a conftest.b 2>/dev/null && hard_links=no
+  touch conftest.a
+  ln conftest.a conftest.b 2>&5 || hard_links=no
+  ln conftest.a conftest.b 2>/dev/null && hard_links=no
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $hard_links" >&5
+$as_echo "$hard_links" >&6; }
+  if test "$hard_links" = no; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: \`$CC' does not support \`-c -o', so \`make -j' may be unsafe" >&5
+$as_echo "$as_me: WARNING: \`$CC' does not support \`-c -o', so \`make -j' may be unsafe" >&2;}
+    need_locks=warn
+  fi
+else
+  need_locks=no
+fi
+
+
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the $compiler linker ($LD) supports shared libraries" >&5
+$as_echo_n "checking whether the $compiler linker ($LD) supports shared libraries... " >&6; }
+
+  export_symbols_cmds_CXX='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
+  case $host_os in
+  aix[4-9]*)
+    # If we're using GNU nm, then we don't want the "-C" option.
+    # -C means demangle to AIX nm, but means don't demangle with GNU nm
+    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then
+      export_symbols_cmds_CXX='$NM -Bpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && (substr(\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+    else
+      export_symbols_cmds_CXX='$NM -BCpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && (substr(\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+    fi
+    ;;
+  pw32*)
+    export_symbols_cmds_CXX="$ltdll_cmds"
+  ;;
+  cygwin* | mingw* | cegcc*)
+    export_symbols_cmds_CXX='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\''/^[BCDGRS][ ]/s/.*[ ]\([^ ]*\)/\1 DATA/;/^.*[ ]__nm__/s/^.*[ ]__nm__\([^ ]*\)[ ][^ ]*/\1 DATA/;/^I[ ]/d;/^[AITW][ ]/s/.* //'\'' | sort | uniq > $export_symbols'
+  ;;
+  linux* | k*bsd*-gnu)
+    link_all_deplibs_CXX=no
+  ;;
+  *)
+    export_symbols_cmds_CXX='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
+  ;;
+  esac
+  exclude_expsyms_CXX='_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*'
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ld_shlibs_CXX" >&5
+$as_echo "$ld_shlibs_CXX" >&6; }
+test "$ld_shlibs_CXX" = no && can_build_shared=no
+
+with_gnu_ld_CXX=$with_gnu_ld
+
+
+
+
+
+
+#
+# Do we need to explicitly link libc?
+#
+case "x$archive_cmds_need_lc_CXX" in
+x|xyes)
+  # Assume -lc should be added
+  archive_cmds_need_lc_CXX=yes
+
+  if test "$enable_shared" = yes && test "$GCC" = yes; then
+    case $archive_cmds_CXX in
+    *'~'*)
+      # FIXME: we may have to deal with multi-command sequences.
+      ;;
+    '$CC '*)
+      # Test whether the compiler implicitly links with -lc since on some
+      # systems, -lgcc has to come before -lc. If gcc already passes -lc
+      # to ld, don't add -lc before -lgcc.
+      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -lc should be explicitly linked in" >&5
+$as_echo_n "checking whether -lc should be explicitly linked in... " >&6; }
+      $RM conftest*
+      echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+      if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
+  (eval $ac_compile) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } 2>conftest.err; then
+        soname=conftest
+        lib=conftest
+        libobjs=conftest.$ac_objext
+        deplibs=
+        wl=$lt_prog_compiler_wl_CXX
+	pic_flag=$lt_prog_compiler_pic_CXX
+        compiler_flags=-v
+        linker_flags=-v
+        verstring=
+        output_objdir=.
+        libname=conftest
+        lt_save_allow_undefined_flag=$allow_undefined_flag_CXX
+        allow_undefined_flag_CXX=
+        if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$archive_cmds_CXX 2\>\&1 \| $GREP \" -lc \" \>/dev/null 2\>\&1\""; } >&5
+  (eval $archive_cmds_CXX 2\>\&1 \| $GREP \" -lc \" \>/dev/null 2\>\&1) 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+        then
+	  archive_cmds_need_lc_CXX=no
+        else
+	  archive_cmds_need_lc_CXX=yes
+        fi
+        allow_undefined_flag_CXX=$lt_save_allow_undefined_flag
+      else
+        cat conftest.err 1>&5
+      fi
+      $RM conftest*
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: $archive_cmds_need_lc_CXX" >&5
+$as_echo "$archive_cmds_need_lc_CXX" >&6; }
+      ;;
+    esac
+  fi
+  ;;
+esac
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking dynamic linker characteristics" >&5
+$as_echo_n "checking dynamic linker characteristics... " >&6; }
+
+library_names_spec=
+libname_spec='lib$name'
+soname_spec=
+shrext_cmds=".so"
+postinstall_cmds=
+postuninstall_cmds=
+finish_cmds=
+finish_eval=
+shlibpath_var=
+shlibpath_overrides_runpath=unknown
+version_type=none
+dynamic_linker="$host_os ld.so"
+sys_lib_dlsearch_path_spec="/lib /usr/lib"
+need_lib_prefix=unknown
+hardcode_into_libs=no
+
+# when you set need_version to no, make sure it does not cause -set_version
+# flags to be left without arguments
+need_version=unknown
+
+case $host_os in
+aix3*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'
+  shlibpath_var=LIBPATH
+
+  # AIX 3 has no versioning support, so we append a major version to the name.
+  soname_spec='${libname}${release}${shared_ext}$major'
+  ;;
+
+aix[4-9]*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  hardcode_into_libs=yes
+  if test "$host_cpu" = ia64; then
+    # AIX 5 supports IA64
+    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'
+    shlibpath_var=LD_LIBRARY_PATH
+  else
+    # With GCC up to 2.95.x, collect2 would create an import file
+    # for dependence libraries.  The import file would start with
+    # the line `#! .'.  This would cause the generated library to
+    # depend on `.', always an invalid library.  This was fixed in
+    # development snapshots of GCC prior to 3.0.
+    case $host_os in
+      aix4 | aix4.[01] | aix4.[01].*)
+      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'
+	   echo ' yes '
+	   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then
+	:
+      else
+	can_build_shared=no
+      fi
+      ;;
+    esac
+    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct
+    # soname into executable. Probably we can add versioning support to
+    # collect2, so additional links can be useful in future.
+    if test "$aix_use_runtimelinking" = yes; then
+      # If using run time linking (on AIX 4.2 or later) use lib<name>.so
+      # instead of lib<name>.a to let people know that these are not
+      # typical AIX shared libraries.
+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    else
+      # We preserve .a as extension for shared libraries through AIX4.2
+      # and later when we are not doing run time linking.
+      library_names_spec='${libname}${release}.a $libname.a'
+      soname_spec='${libname}${release}${shared_ext}$major'
+    fi
+    shlibpath_var=LIBPATH
+  fi
+  ;;
+
+amigaos*)
+  case $host_cpu in
+  powerpc)
+    # Since July 2007 AmigaOS4 officially supports .so libraries.
+    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    ;;
+  m68k)
+    library_names_spec='$libname.ixlibrary $libname.a'
+    # Create ${libname}_ixlibrary.a entries in /sys/libs.
+    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$ECHO "X$lib" | $Xsed -e '\''s%^.*/\([^/]*\)\.ixlibrary$%\1%'\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show "cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'
+    ;;
+  esac
+  ;;
+
+beos*)
+  library_names_spec='${libname}${shared_ext}'
+  dynamic_linker="$host_os ld.so"
+  shlibpath_var=LIBRARY_PATH
+  ;;
+
+bsdi[45]*)
+  version_type=linux
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  sys_lib_search_path_spec="/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib"
+  sys_lib_dlsearch_path_spec="/shlib /usr/lib /usr/local/lib"
+  # the default ld.so.conf also contains /usr/contrib/lib and
+  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow
+  # libtool to hard-code these into programs
+  ;;
+
+cygwin* | mingw* | pw32* | cegcc*)
+  version_type=windows
+  shrext_cmds=".dll"
+  need_version=no
+  need_lib_prefix=no
+
+  case $GCC,$host_os in
+  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)
+    library_names_spec='$libname.dll.a'
+    # DLL is installed to $(libdir)/../bin by postinstall_cmds
+    postinstall_cmds='base_file=`basename \${file}`~
+      dlpath=`$SHELL 2>&1 -c '\''. $dir/'\''\${base_file}'\''i; echo \$dlname'\''`~
+      dldir=$destdir/`dirname \$dlpath`~
+      test -d \$dldir || mkdir -p \$dldir~
+      $install_prog $dir/$dlname \$dldir/$dlname~
+      chmod a+x \$dldir/$dlname~
+      if test -n '\''$stripme'\'' && test -n '\''$striplib'\''; then
+        eval '\''$striplib \$dldir/$dlname'\'' || exit \$?;
+      fi'
+    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\''. $file; echo \$dlname'\''`~
+      dlpath=$dir/\$dldll~
+       $RM \$dlpath'
+    shlibpath_overrides_runpath=yes
+
+    case $host_os in
+    cygwin*)
+      # Cygwin DLLs use 'cyg' prefix rather than 'lib'
+      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'
+      sys_lib_search_path_spec="/usr/lib /lib/w32api /lib /usr/local/lib"
+      ;;
+    mingw* | cegcc*)
+      # MinGW DLLs use traditional 'lib' prefix
+      soname_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'
+      sys_lib_search_path_spec=`$CC -print-search-dirs | $GREP "^libraries:" | $SED -e "s/^libraries://" -e "s,=/,/,g"`
+      if $ECHO "$sys_lib_search_path_spec" | $GREP ';[c-zC-Z]:/' >/dev/null; then
+        # It is most probably a Windows format PATH printed by
+        # mingw gcc, but we are running on Cygwin. Gcc prints its search
+        # path with ; separators, and with drive letters. We can handle the
+        # drive letters (cygwin fileutils understands them), so leave them,
+        # especially as we might pass files found there to a mingw objdump,
+        # which wouldn't understand a cygwinified path. Ahh.
+        sys_lib_search_path_spec=`$ECHO "$sys_lib_search_path_spec" | $SED -e 's/;/ /g'`
+      else
+        sys_lib_search_path_spec=`$ECHO "$sys_lib_search_path_spec" | $SED  -e "s/$PATH_SEPARATOR/ /g"`
+      fi
+      ;;
+    pw32*)
+      # pw32 DLLs use 'pw' prefix rather than 'lib'
+      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'
+      ;;
+    esac
+    ;;
+
+  *)
+    library_names_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext} $libname.lib'
+    ;;
+  esac
+  dynamic_linker='Win32 ld.exe'
+  # FIXME: first we should search . and the directory the executable is in
+  shlibpath_var=PATH
+  ;;
+
+darwin* | rhapsody*)
+  dynamic_linker="$host_os dyld"
+  version_type=darwin
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'
+  soname_spec='${libname}${release}${major}$shared_ext'
+  shlibpath_overrides_runpath=yes
+  shlibpath_var=DYLD_LIBRARY_PATH
+  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'
+
+  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'
+  ;;
+
+dgux*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  ;;
+
+freebsd1*)
+  dynamic_linker=no
+  ;;
+
+freebsd* | dragonfly*)
+  # DragonFly does not have aout.  When/if they implement a new
+  # versioning mechanism, adjust this.
+  if test -x /usr/bin/objformat; then
+    objformat=`/usr/bin/objformat`
+  else
+    case $host_os in
+    freebsd[123]*) objformat=aout ;;
+    *) objformat=elf ;;
+    esac
+  fi
+  version_type=freebsd-$objformat
+  case $version_type in
+    freebsd-elf*)
+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'
+      need_version=no
+      need_lib_prefix=no
+      ;;
+    freebsd-*)
+      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'
+      need_version=yes
+      ;;
+  esac
+  shlibpath_var=LD_LIBRARY_PATH
+  case $host_os in
+  freebsd2*)
+    shlibpath_overrides_runpath=yes
+    ;;
+  freebsd3.[01]* | freebsdelf3.[01]*)
+    shlibpath_overrides_runpath=yes
+    hardcode_into_libs=yes
+    ;;
+  freebsd3.[2-9]* | freebsdelf3.[2-9]* | \
+  freebsd4.[0-5] | freebsdelf4.[0-5] | freebsd4.1.1 | freebsdelf4.1.1)
+    shlibpath_overrides_runpath=no
+    hardcode_into_libs=yes
+    ;;
+  *) # from 4.6 on, and DragonFly
+    shlibpath_overrides_runpath=yes
+    hardcode_into_libs=yes
+    ;;
+  esac
+  ;;
+
+gnu*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+  ;;
+
+hpux9* | hpux10* | hpux11*)
+  # Give a soname corresponding to the major version so that dld.sl refuses to
+  # link against other versions.
+  version_type=sunos
+  need_lib_prefix=no
+  need_version=no
+  case $host_cpu in
+  ia64*)
+    shrext_cmds='.so'
+    hardcode_into_libs=yes
+    dynamic_linker="$host_os dld.so"
+    shlibpath_var=LD_LIBRARY_PATH
+    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    if test "X$HPUX_IA64_MODE" = X32; then
+      sys_lib_search_path_spec="/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib"
+    else
+      sys_lib_search_path_spec="/usr/lib/hpux64 /usr/local/lib/hpux64"
+    fi
+    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec
+    ;;
+  hppa*64*)
+    shrext_cmds='.sl'
+    hardcode_into_libs=yes
+    dynamic_linker="$host_os dld.sl"
+    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH
+    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    sys_lib_search_path_spec="/usr/lib/pa20_64 /usr/ccs/lib/pa20_64"
+    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec
+    ;;
+  *)
+    shrext_cmds='.sl'
+    dynamic_linker="$host_os dld.sl"
+    shlibpath_var=SHLIB_PATH
+    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    ;;
+  esac
+  # HP-UX runs *really* slowly unless shared libraries are mode 555.
+  postinstall_cmds='chmod 555 $lib'
+  ;;
+
+interix[3-9]*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  ;;
+
+irix5* | irix6* | nonstopux*)
+  case $host_os in
+    nonstopux*) version_type=nonstopux ;;
+    *)
+	if test "$lt_cv_prog_gnu_ld" = yes; then
+		version_type=linux
+	else
+		version_type=irix
+	fi ;;
+  esac
+  need_lib_prefix=no
+  need_version=no
+  soname_spec='${libname}${release}${shared_ext}$major'
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'
+  case $host_os in
+  irix5* | nonstopux*)
+    libsuff= shlibsuff=
+    ;;
+  *)
+    case $LD in # libtool.m4 will add one of these switches to LD
+    *-32|*"-32 "|*-melf32bsmip|*"-melf32bsmip ")
+      libsuff= shlibsuff= libmagic=32-bit;;
+    *-n32|*"-n32 "|*-melf32bmipn32|*"-melf32bmipn32 ")
+      libsuff=32 shlibsuff=N32 libmagic=N32;;
+    *-64|*"-64 "|*-melf64bmip|*"-melf64bmip ")
+      libsuff=64 shlibsuff=64 libmagic=64-bit;;
+    *) libsuff= shlibsuff= libmagic=never-match;;
+    esac
+    ;;
+  esac
+  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH
+  shlibpath_overrides_runpath=no
+  sys_lib_search_path_spec="/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}"
+  sys_lib_dlsearch_path_spec="/usr/lib${libsuff} /lib${libsuff}"
+  hardcode_into_libs=yes
+  ;;
+
+# No shared lib support for Linux oldld, aout, or coff.
+linux*oldld* | linux*aout* | linux*coff*)
+  dynamic_linker=no
+  ;;
+
+# This must be Linux ELF.
+linux* | k*bsd*-gnu | kopensolaris*-gnu)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig -n $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  # Some binutils ld are patched to set DT_RUNPATH
+  save_LDFLAGS=$LDFLAGS
+  save_libdir=$libdir
+  eval "libdir=/foo; wl=\"$lt_prog_compiler_wl_CXX\"; \
+       LDFLAGS=\"\$LDFLAGS $hardcode_libdir_flag_spec_CXX\""
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+  if  ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep "RUNPATH.*$libdir" >/dev/null; then :
+  shlibpath_overrides_runpath=yes
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+  LDFLAGS=$save_LDFLAGS
+  libdir=$save_libdir
+
+  # This implies no fast_install, which is unacceptable.
+  # Some rework will be needed to allow for fast_install
+  # before this can be enabled.
+  hardcode_into_libs=yes
+
+  # Append ld.so.conf contents to the search path
+  if test -f /etc/ld.so.conf; then
+    lt_ld_extra=`awk '/^include / { system(sprintf("cd /etc; cat %s 2>/dev/null", \$2)); skip = 1; } { if (!skip) print \$0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[	 ]*hwcap[	 ]/d;s/[:,	]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\n' ' '`
+    sys_lib_dlsearch_path_spec="/lib /usr/lib $lt_ld_extra"
+  fi
+
+  # We used to test for /lib/ld.so.1 and disable shared libraries on
+  # powerpc, because MkLinux only supported shared libraries with the
+  # GNU dynamic linker.  Since this was broken with cross compilers,
+  # most powerpc-linux boxes support dynamic linking these days and
+  # people can always --disable-shared, the test was removed, and we
+  # assume the GNU/Linux dynamic linker is in use.
+  dynamic_linker='GNU/Linux ld.so'
+  ;;
+
+netbsdelf*-gnu)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  dynamic_linker='NetBSD ld.elf_so'
+  ;;
+
+netbsd*)
+  version_type=sunos
+  need_lib_prefix=no
+  need_version=no
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+    finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
+    dynamic_linker='NetBSD (a.out) ld.so'
+  else
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    dynamic_linker='NetBSD ld.elf_so'
+  fi
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  ;;
+
+newsos6)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  ;;
+
+*nto* | *qnx*)
+  version_type=qnx
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  dynamic_linker='ldqnx.so'
+  ;;
+
+openbsd*)
+  version_type=sunos
+  sys_lib_dlsearch_path_spec="/usr/lib"
+  need_lib_prefix=no
+  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.
+  case $host_os in
+    openbsd3.3 | openbsd3.3.*)	need_version=yes ;;
+    *)				need_version=no  ;;
+  esac
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    case $host_os in
+      openbsd2.[89] | openbsd2.[89].*)
+	shlibpath_overrides_runpath=no
+	;;
+      *)
+	shlibpath_overrides_runpath=yes
+	;;
+      esac
+  else
+    shlibpath_overrides_runpath=yes
+  fi
+  ;;
+
+os2*)
+  libname_spec='$name'
+  shrext_cmds=".dll"
+  need_lib_prefix=no
+  library_names_spec='$libname${shared_ext} $libname.a'
+  dynamic_linker='OS/2 ld.exe'
+  shlibpath_var=LIBPATH
+  ;;
+
+osf3* | osf4* | osf5*)
+  version_type=osf
+  need_lib_prefix=no
+  need_version=no
+  soname_spec='${libname}${release}${shared_ext}$major'
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  sys_lib_search_path_spec="/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib"
+  sys_lib_dlsearch_path_spec="$sys_lib_search_path_spec"
+  ;;
+
+rdos*)
+  dynamic_linker=no
+  ;;
+
+solaris*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  # ldd complains unless libraries are executable
+  postinstall_cmds='chmod +x $lib'
+  ;;
+
+sunos4*)
+  version_type=sunos
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+  finish_cmds='PATH="\$PATH:/usr/etc" ldconfig $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  if test "$with_gnu_ld" = yes; then
+    need_lib_prefix=no
+  fi
+  need_version=yes
+  ;;
+
+sysv4 | sysv4.3*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  case $host_vendor in
+    sni)
+      shlibpath_overrides_runpath=no
+      need_lib_prefix=no
+      runpath_var=LD_RUN_PATH
+      ;;
+    siemens)
+      need_lib_prefix=no
+      ;;
+    motorola)
+      need_lib_prefix=no
+      need_version=no
+      shlibpath_overrides_runpath=no
+      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'
+      ;;
+  esac
+  ;;
+
+sysv4*MP*)
+  if test -d /usr/nec ;then
+    version_type=linux
+    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'
+    soname_spec='$libname${shared_ext}.$major'
+    shlibpath_var=LD_LIBRARY_PATH
+  fi
+  ;;
+
+sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
+  version_type=freebsd-elf
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  if test "$with_gnu_ld" = yes; then
+    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'
+  else
+    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'
+    case $host_os in
+      sco3.2v5*)
+        sys_lib_search_path_spec="$sys_lib_search_path_spec /lib"
+	;;
+    esac
+  fi
+  sys_lib_dlsearch_path_spec='/usr/lib'
+  ;;
+
+tpf*)
+  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  ;;
+
+uts4*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  ;;
+
+*)
+  dynamic_linker=no
+  ;;
+esac
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $dynamic_linker" >&5
+$as_echo "$dynamic_linker" >&6; }
+test "$dynamic_linker" = no && can_build_shared=no
+
+variables_saved_for_relink="PATH $shlibpath_var $runpath_var"
+if test "$GCC" = yes; then
+  variables_saved_for_relink="$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH"
+fi
+
+if test "${lt_cv_sys_lib_search_path_spec+set}" = set; then
+  sys_lib_search_path_spec="$lt_cv_sys_lib_search_path_spec"
+fi
+if test "${lt_cv_sys_lib_dlsearch_path_spec+set}" = set; then
+  sys_lib_dlsearch_path_spec="$lt_cv_sys_lib_dlsearch_path_spec"
+fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking how to hardcode library paths into programs" >&5
+$as_echo_n "checking how to hardcode library paths into programs... " >&6; }
+hardcode_action_CXX=
+if test -n "$hardcode_libdir_flag_spec_CXX" ||
+   test -n "$runpath_var_CXX" ||
+   test "X$hardcode_automatic_CXX" = "Xyes" ; then
+
+  # We can hardcode non-existent directories.
+  if test "$hardcode_direct_CXX" != no &&
+     # If the only mechanism to avoid hardcoding is shlibpath_var, we
+     # have to relink, otherwise we might link with an installed library
+     # when we should be linking with a yet-to-be-installed one
+     ## test "$_LT_TAGVAR(hardcode_shlibpath_var, CXX)" != no &&
+     test "$hardcode_minus_L_CXX" != no; then
+    # Linking always hardcodes the temporary library directory.
+    hardcode_action_CXX=relink
+  else
+    # We can link without hardcoding, and we can hardcode nonexisting dirs.
+    hardcode_action_CXX=immediate
+  fi
+else
+  # We cannot hardcode anything, or else we can only hardcode existing
+  # directories.
+  hardcode_action_CXX=unsupported
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $hardcode_action_CXX" >&5
+$as_echo "$hardcode_action_CXX" >&6; }
+
+if test "$hardcode_action_CXX" = relink ||
+   test "$inherit_rpath_CXX" = yes; then
+  # Fast installation is not supported
+  enable_fast_install=no
+elif test "$shlibpath_overrides_runpath" = yes ||
+     test "$enable_shared" = no; then
+  # Fast installation is not necessary
+  enable_fast_install=needless
+fi
+
+
+
+
+
+
+
+  fi # test -n "$compiler"
+
+  CC=$lt_save_CC
+  LDCXX=$LD
+  LD=$lt_save_LD
+  GCC=$lt_save_GCC
+  with_gnu_ld=$lt_save_with_gnu_ld
+  lt_cv_path_LDCXX=$lt_cv_path_LD
+  lt_cv_path_LD=$lt_save_path_LD
+  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld
+  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld
+fi # test "$_lt_caught_CXX_error" != yes
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+
+
+if test "$GCC" = "yes" ; then
+#    AC_HAVE_GCC_VERSION(4,0,0,0,
+#        [
+#        AC_DEFINE(GCC_HASCLASSVISIBILITY,1,
+#            [Define to enable class visibility control in gcc.])
+#        GCC_CFLAGS="$GCC_CFLAGS -fvisibility=hidden -fvisibility-inlines-hidden"
+#        GCC_CXXFLAGS="$GCC_CXXFLAGS -fvisibility=hidden -fvisibility-inlines-hidden"
+#        ])
+    CFLAGS="$GCC_CFLAGS"
+    CXXFLAGS="$GCC_CXXFLAGS"
+else
+# Fix for Sun Workshop compiler in debug mode, may be Sun case #6360993
+	case "${host_cpu}-${host_os}" in
+	        *solaris*)
+			if test "$CXX" = "CC" ; then
+				CXXFLAGS="$CXXFLAGS -Qoption ccfe -stabs=no%dfltlit+no%dflthlp"
+			fi
+	        ;;
+	esac
+fi
+
+# Checks for typedefs, structures, and compiler characteristics.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for an ANSI C-conforming const" >&5
+$as_echo_n "checking for an ANSI C-conforming const... " >&6; }
+if test "${ac_cv_c_const+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+/* FIXME: Include the comments suggested by Paul. */
+#ifndef __cplusplus
+  /* Ultrix mips cc rejects this.  */
+  typedef int charset[2];
+  const charset cs;
+  /* SunOS 4.1.1 cc rejects this.  */
+  char const *const *pcpcc;
+  char **ppc;
+  /* NEC SVR4.0.2 mips cc rejects this.  */
+  struct point {int x, y;};
+  static struct point const zero = {0,0};
+  /* AIX XL C 1.02.0.0 rejects this.
+     It does not let you subtract one const X* pointer from another in
+     an arm of an if-expression whose if-part is not a constant
+     expression */
+  const char *g = "string";
+  pcpcc = &g + (g ? g-g : 0);
+  /* HPUX 7.0 cc rejects these. */
+  ++pcpcc;
+  ppc = (char**) pcpcc;
+  pcpcc = (char const *const *) ppc;
+  { /* SCO 3.2v4 cc rejects this.  */
+    char *t;
+    char const *s = 0 ? (char *) 0 : (char const *) 0;
+
+    *t++ = 0;
+    if (s) return 0;
+  }
+  { /* Someone thinks the Sun supposedly-ANSI compiler will reject this.  */
+    int x[] = {25, 17};
+    const int *foo = &x[0];
+    ++foo;
+  }
+  { /* Sun SC1.0 ANSI compiler rejects this -- but not the above. */
+    typedef const int *iptr;
+    iptr p = 0;
+    ++p;
+  }
+  { /* AIX XL C 1.02.0.0 rejects this saying
+       "k.c", line 2.27: 1506-025 (S) Operand must be a modifiable lvalue. */
+    struct s { int j; const int *ap[3]; };
+    struct s *b; b->j = 5;
+  }
+  { /* ULTRIX-32 V3.1 (Rev 9) vcc rejects this */
+    const int foo = 10;
+    if (!foo) return 0;
+  }
+  return !cs[0] && !zero.x;
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_c_const=yes
+else
+  ac_cv_c_const=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_const" >&5
+$as_echo "$ac_cv_c_const" >&6; }
+if test $ac_cv_c_const = no; then
+
+$as_echo "#define const /**/" >>confdefs.h
+
+fi
+
+ac_fn_c_check_type "$LINENO" "size_t" "ac_cv_type_size_t" "$ac_includes_default"
+if test "x$ac_cv_type_size_t" = x""yes; then :
+
+else
+
+cat >>confdefs.h <<_ACEOF
+#define size_t unsigned int
+_ACEOF
+
+fi
+
+
+# Checks for library functions.
+for ac_func in strchr strdup strstr
+do :
+  as_ac_var=`$as_echo "ac_cv_func_$ac_func" | $as_tr_sh`
+ac_fn_c_check_func "$LINENO" "$ac_func" "$as_ac_var"
+if eval test \"x\$"$as_ac_var"\" = x"yes"; then :
+  cat >>confdefs.h <<_ACEOF
+#define `$as_echo "HAVE_$ac_func" | $as_tr_cpp` 1
+_ACEOF
+
+fi
+done
+
+# The cast to long int works around a bug in the HP C Compiler
+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
+# This bug is HP SR number 8606223364.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking size of time_t" >&5
+$as_echo_n "checking size of time_t... " >&6; }
+if test "${ac_cv_sizeof_time_t+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if ac_fn_c_compute_int "$LINENO" "(long int) (sizeof (time_t))" "ac_cv_sizeof_time_t"        "$ac_includes_default"; then :
+
+else
+  if test "$ac_cv_type_time_t" = yes; then
+     { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error 77 "cannot compute sizeof (time_t)
+See \`config.log' for more details" "$LINENO" 5 ; }
+   else
+     ac_cv_sizeof_time_t=0
+   fi
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_time_t" >&5
+$as_echo "$ac_cv_sizeof_time_t" >&6; }
+
+
+
+cat >>confdefs.h <<_ACEOF
+#define SIZEOF_TIME_T $ac_cv_sizeof_time_t
+_ACEOF
+
+
+
+# checks for pthreads
+
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+acx_pthread_ok=no
+
+# We used to check for pthread.h first, but this fails if pthread.h
+# requires special compiler flags (e.g. on True64 or Sequent).
+# It gets checked for in the link test anyway.
+
+# First of all, check if the user has set any of the PTHREAD_LIBS,
+# etcetera environment variables, and if threads linking works using
+# them:
+if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
+        save_CFLAGS="$CFLAGS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        save_LIBS="$LIBS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS" >&5
+$as_echo_n "checking for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS... " >&6; }
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char pthread_join ();
+int
+main ()
+{
+return pthread_join ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  acx_pthread_ok=yes
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $acx_pthread_ok" >&5
+$as_echo "$acx_pthread_ok" >&6; }
+        if test x"$acx_pthread_ok" = xno; then
+                PTHREAD_LIBS=""
+                PTHREAD_CFLAGS=""
+        fi
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+fi
+
+# We must check for the threads library under a number of different
+# names; the ordering is very important because some systems
+# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
+# libraries is broken (non-POSIX).
+
+# Create a list of thread flags to try.  Items starting with a "-" are
+# C compiler flags, and other items are library names, except for "none"
+# which indicates that we try without any flags at all, and "pthread-config"
+# which is a program returning the flags for the Pth emulation library.
+
+acx_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config"
+
+# The ordering *is* (sometimes) important.  Some notes on the
+# individual items follow:
+
+# pthreads: AIX (must check this before -lpthread)
+# none: in case threads are in libc; should be tried before -Kthread and
+#       other compiler flags to prevent continual compiler warnings
+# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
+# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
+# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
+# -pthreads: Solaris/gcc
+# -mthreads: Mingw32/gcc, Lynx/gcc
+# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
+#      doesn't hurt to check since this sometimes defines pthreads too;
+#      also defines -D_REENTRANT)
+#      ... -mt is also the pthreads flag for HP/aCC
+# pthread: Linux, etcetera
+# --thread-safe: KAI C++
+# pthread-config: use pthread-config program (for GNU Pth library)
+
+case "${host_cpu}-${host_os}" in
+        *solaris*)
+
+        # On Solaris (at least, for some versions), libc contains stubbed
+        # (non-functional) versions of the pthreads routines, so link-based
+        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/
+        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
+        # a function called by this macro, so we could check for that, but
+        # who knows whether they'll stub that too in a future libc.)  So,
+        # we'll just look for -pthreads and -lpthread first:
+
+        acx_pthread_flags="-pthreads pthread -mt -pthread $acx_pthread_flags"
+        ;;
+esac
+
+if test x"$acx_pthread_ok" = xno; then
+for flag in $acx_pthread_flags; do
+
+        case $flag in
+                none)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work without any flags" >&5
+$as_echo_n "checking whether pthreads work without any flags... " >&6; }
+                ;;
+
+                -*)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work with $flag" >&5
+$as_echo_n "checking whether pthreads work with $flag... " >&6; }
+                PTHREAD_CFLAGS="$flag"
+                ;;
+
+		pthread-config)
+		# Extract the first word of "pthread-config", so it can be a program name with args.
+set dummy pthread-config; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_acx_pthread_config+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$acx_pthread_config"; then
+  ac_cv_prog_acx_pthread_config="$acx_pthread_config" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_acx_pthread_config="yes"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  test -z "$ac_cv_prog_acx_pthread_config" && ac_cv_prog_acx_pthread_config="no"
+fi
+fi
+acx_pthread_config=$ac_cv_prog_acx_pthread_config
+if test -n "$acx_pthread_config"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $acx_pthread_config" >&5
+$as_echo "$acx_pthread_config" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+		if test x"$acx_pthread_config" = xno; then continue; fi
+		PTHREAD_CFLAGS="`pthread-config --cflags`"
+		PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
+		;;
+
+                *)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the pthreads library -l$flag" >&5
+$as_echo_n "checking for the pthreads library -l$flag... " >&6; }
+                PTHREAD_LIBS="-l$flag"
+                ;;
+        esac
+
+        save_LIBS="$LIBS"
+        save_CFLAGS="$CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+
+        # Check for various functions.  We must include pthread.h,
+        # since some functions may be macros.  (On the Sequent, we
+        # need a special flag -Kthread to make this header compile.)
+        # We check for pthread_join because it is in -lpthread on IRIX
+        # while pthread_create is in libc.  We check for pthread_attr_init
+        # due to DEC craziness with -lpthreads.  We check for
+        # pthread_cleanup_push because it is one of the few pthread
+        # functions on Solaris that doesn't have a non-functional libc stub.
+        # We try pthread_create on general principles.
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <pthread.h>
+int
+main ()
+{
+pthread_t th; pthread_join(th, 0);
+                     pthread_attr_init(0); pthread_cleanup_push(0, 0);
+                     pthread_create(0,0,0,0); pthread_cleanup_pop(0);
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  acx_pthread_ok=yes
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $acx_pthread_ok" >&5
+$as_echo "$acx_pthread_ok" >&6; }
+        if test "x$acx_pthread_ok" = xyes; then
+                break;
+        fi
+
+        PTHREAD_LIBS=""
+        PTHREAD_CFLAGS=""
+done
+fi
+
+# Various other checks:
+if test "x$acx_pthread_ok" = xyes; then
+        save_LIBS="$LIBS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        save_CFLAGS="$CFLAGS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+
+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for joinable pthread attribute" >&5
+$as_echo_n "checking for joinable pthread attribute... " >&6; }
+	attr_name=unknown
+	for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
+	    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <pthread.h>
+int
+main ()
+{
+int attr=$attr; return attr;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  attr_name=$attr; break
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+	done
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $attr_name" >&5
+$as_echo "$attr_name" >&6; }
+        if test "$attr_name" != PTHREAD_CREATE_JOINABLE; then
+
+cat >>confdefs.h <<_ACEOF
+#define PTHREAD_CREATE_JOINABLE $attr_name
+_ACEOF
+
+        fi
+
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking if more special flags are required for pthreads" >&5
+$as_echo_n "checking if more special flags are required for pthreads... " >&6; }
+        flag=no
+        case "${host_cpu}-${host_os}" in
+                *-aix* | *-freebsd*)     flag="-D_THREAD_SAFE";;
+                *-osf* | *-hpux*) flag="-D_REENTRANT";;
+                *solaris*)
+                if test "$GCC" = "yes"; then
+                    flag="-D_REENTRANT"
+                else
+                    flag="-mt -D_REENTRANT"
+                fi
+                ;;
+        esac
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: ${flag}" >&5
+$as_echo "${flag}" >&6; }
+        if test "x$flag" != xno; then
+            PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
+        fi
+
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+
+        # More AIX lossage: must compile with xlc_r or cc_r
+	if test x"$GCC" != xyes; then
+          for ac_prog in xlc_r cc_r
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_prog_PTHREAD_CC+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$PTHREAD_CC"; then
+  ac_cv_prog_PTHREAD_CC="$PTHREAD_CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_PTHREAD_CC="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+PTHREAD_CC=$ac_cv_prog_PTHREAD_CC
+if test -n "$PTHREAD_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $PTHREAD_CC" >&5
+$as_echo "$PTHREAD_CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+  test -n "$PTHREAD_CC" && break
+done
+test -n "$PTHREAD_CC" || PTHREAD_CC="${CC}"
+
+        else
+          PTHREAD_CC=$CC
+	fi
+else
+        PTHREAD_CC="$CC"
+fi
+
+
+
+
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$acx_pthread_ok" = xyes; then
+        enable_threads="pthread"
+        :
+else
+        acx_pthread_ok=no
+        enable_threads="no"
+fi
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+if test $enable_threads != "pthread"; then
+    as_fn_error $? "unable to find pthreads, currently this is required" "$LINENO" 5
+else
+
+$as_echo "#define HAVE_PTHREAD 1" >>confdefs.h
+
+    LIBS="$PTHREAD_LIBS $LIBS"
+    CFLAGS="$PTHREAD_CFLAGS $CFLAGS"
+    CXXFLAGS="$PTHREAD_CFLAGS $CXXFLAGS"
+fi
+
+# zlib settings
+
+# Check whether --with-zlib was given.
+if test "${with_zlib+set}" = set; then :
+  withval=$with_zlib;
+        if test -d "$withval" ; then
+            CPPFLAGS="${CPPFLAGS} -I$withval/include"
+            LDFLAGS="${LDFLAGS} -L$withval/lib"
+        fi
+
+
+fi
+
+ac_fn_c_check_header_mongrel "$LINENO" "zlib.h" "ac_cv_header_zlib_h" "$ac_includes_default"
+if test "x$ac_cv_header_zlib_h" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find zlib header files" "$LINENO" 5
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for deflateInit2_ in -lz" >&5
+$as_echo_n "checking for deflateInit2_ in -lz... " >&6; }
+if test "${ac_cv_lib_z_deflateInit2_+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lz  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char deflateInit2_ ();
+int
+main ()
+{
+return deflateInit2_ ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_z_deflateInit2_=yes
+else
+  ac_cv_lib_z_deflateInit2_=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_z_deflateInit2_" >&5
+$as_echo "$ac_cv_lib_z_deflateInit2_" >&6; }
+if test "x$ac_cv_lib_z_deflateInit2_" = x""yes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_LIBZ 1
+_ACEOF
+
+  LIBS="-lz $LIBS"
+
+else
+  as_fn_error $? "unable to link with zlib library" "$LINENO" 5
+fi
+
+
+# OpenSSL settings
+
+# Check whether --with-openssl was given.
+if test "${with_openssl+set}" = set; then :
+  withval=$with_openssl; if test x_$with_openssl != x_/usr; then
+        SSLFLAGS="-I${with_openssl}/include"
+    fi
+fi
+
+
+if test "x$with_openssl" = "x" ; then
+    # Extract the first word of "pkg-config", so it can be a program name with args.
+set dummy pkg-config; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_PKG_CONFIG+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $PKG_CONFIG in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_PKG_CONFIG="$PKG_CONFIG" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_PKG_CONFIG="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+PKG_CONFIG=$ac_cv_path_PKG_CONFIG
+if test -n "$PKG_CONFIG"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $PKG_CONFIG" >&5
+$as_echo "$PKG_CONFIG" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+    if test "x$PKG_CONFIG" != x && test "x$PKG_CONFIG" != "xno" ; then
+        if pkg-config openssl ; then
+            SSLFLAGS="`$PKG_CONFIG --cflags openssl`"
+        else
+            { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: OpenSSL not supported by pkg-config, try --with-openssl instead" >&5
+$as_echo "$as_me: WARNING: OpenSSL not supported by pkg-config, try --with-openssl instead" >&2;}
+        fi
+    fi
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for OpenSSL cflags" >&5
+$as_echo_n "checking for OpenSSL cflags... " >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $SSLFLAGS" >&5
+$as_echo "$SSLFLAGS" >&6; }
+CPPFLAGS="$SSLFLAGS $CPPFLAGS"
+
+ac_fn_c_check_header_mongrel "$LINENO" "openssl/x509.h" "ac_cv_header_openssl_x509_h" "$ac_includes_default"
+if test "x$ac_cv_header_openssl_x509_h" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find openssl header files" "$LINENO" 5
+fi
+
+
+
+ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+
+
+# C++ requirements
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the compiler implements namespaces" >&5
+$as_echo_n "checking whether the compiler implements namespaces... " >&6; }
+if test "${ac_cv_cxx_namespaces+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+
+ ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+
+ cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+namespace Outer { namespace Inner { int i = 0; }}
+int
+main ()
+{
+using namespace Outer::Inner; return i;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_cv_cxx_namespaces=yes
+else
+  ac_cv_cxx_namespaces=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_cxx_namespaces" >&5
+$as_echo "$ac_cv_cxx_namespaces" >&6; }
+if test "$ac_cv_cxx_namespaces" = yes; then
+
+$as_echo "#define HAVE_NAMESPACES 1" >>confdefs.h
+
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the compiler supports Standard Template Library" >&5
+$as_echo_n "checking whether the compiler supports Standard Template Library... " >&6; }
+if test "${ac_cv_cxx_have_stl+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+
+ ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+
+ cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <list>
+#include <deque>
+#ifdef HAVE_NAMESPACES
+using namespace std;
+#endif
+int
+main ()
+{
+list<int> x; x.push_back(5);
+list<int>::iterator iter = x.begin(); if (iter != x.end()) ++iter; return 0;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  ac_cv_cxx_have_stl=yes
+else
+  ac_cv_cxx_have_stl=no
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ ac_ext=cpp
+ac_cpp='$CXXCPP $CPPFLAGS'
+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
+
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_cxx_have_stl" >&5
+$as_echo "$ac_cv_cxx_have_stl" >&6; }
+if test "x_$ac_cv_cxx_have_stl" != x_yes; then
+  as_fn_error $? "C++ Standard Template Libary unsupported" "$LINENO" 5
+fi
+
+
+# log4shib settings (favor this version over the log4cpp code)
+# Extract the first word of "log4shib-config", so it can be a program name with args.
+set dummy log4shib-config; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_LOG4SHIB_CONFIG+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $LOG4SHIB_CONFIG in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_LOG4SHIB_CONFIG="$LOG4SHIB_CONFIG" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_LOG4SHIB_CONFIG="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+LOG4SHIB_CONFIG=$ac_cv_path_LOG4SHIB_CONFIG
+if test -n "$LOG4SHIB_CONFIG"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LOG4SHIB_CONFIG" >&5
+$as_echo "$LOG4SHIB_CONFIG" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+
+# Check whether --with-log4shib was given.
+if test "${with_log4shib+set}" = set; then :
+  withval=$with_log4shib;
+    LOG4SHIB_CONFIG="${with_log4shib}"
+    if ! test -f "${LOG4SHIB_CONFIG}"; then
+    	LOG4SHIB_CONFIG="${with_log4shib}/bin/log4shib-config"
+    fi
+
+fi
+
+if test -f "${LOG4SHIB_CONFIG}" ; then
+    LIBS="`${LOG4SHIB_CONFIG} --libs` $LIBS"
+    CPPFLAGS="`${LOG4SHIB_CONFIG} --cflags` $CPPFLAGS"
+
+ac_fn_cxx_check_header_mongrel "$LINENO" "log4shib/CategoryStream.hh" "ac_cv_header_log4shib_CategoryStream_hh" "$ac_includes_default"
+if test "x$ac_cv_header_log4shib_CategoryStream_hh" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find log4shib header files" "$LINENO" 5
+fi
+
+
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <log4shib/Category.hh>
+#include <log4shib/CategoryStream.hh>
+int
+main ()
+{
+log4shib::Category::getInstance("foo").errorStream() << log4shib::eol
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+$as_echo "#define OPENSAML_LOG4SHIB 1" >>confdefs.h
+
+else
+  as_fn_error $? "unable to link with log4shib" "$LINENO" 5
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+else
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: log4shib-config not found, may need to use --with-log4shib option" >&5
+$as_echo "$as_me: WARNING: log4shib-config not found, may need to use --with-log4shib option" >&2;}
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: will look for original log4cpp library" >&5
+$as_echo "$as_me: WARNING: will look for original log4cpp library" >&2;}
+
+    # log4cpp settings
+    # Extract the first word of "log4cpp-config", so it can be a program name with args.
+set dummy log4cpp-config; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if test "${ac_cv_path_LOG4CPP_CONFIG+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  case $LOG4CPP_CONFIG in
+  [\\/]* | ?:[\\/]*)
+  ac_cv_path_LOG4CPP_CONFIG="$LOG4CPP_CONFIG" # Let the user override the test with a path.
+  ;;
+  *)
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_path_LOG4CPP_CONFIG="$as_dir/$ac_word$ac_exec_ext"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+  ;;
+esac
+fi
+LOG4CPP_CONFIG=$ac_cv_path_LOG4CPP_CONFIG
+if test -n "$LOG4CPP_CONFIG"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LOG4CPP_CONFIG" >&5
+$as_echo "$LOG4CPP_CONFIG" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+
+
+
+# Check whether --with-log4cpp was given.
+if test "${with_log4cpp+set}" = set; then :
+  withval=$with_log4cpp;
+        LOG4CPP_CONFIG="${with_log4cpp}"
+        if ! test -f "${LOG4CPP_CONFIG}"; then
+        	LOG4CPP_CONFIG="${with_log4cpp}/bin/log4cpp-config"
+        fi
+
+fi
+
+    if test -f "${LOG4CPP_CONFIG}"; then
+        { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: will try to use log4cpp, note that most non-Internet2 supplied versions are not thread-safe" >&5
+$as_echo "$as_me: WARNING: will try to use log4cpp, note that most non-Internet2 supplied versions are not thread-safe" >&2;}
+        LIBS="`${LOG4CPP_CONFIG} --libs` $LIBS"
+        CPPFLAGS="`${LOG4CPP_CONFIG} --cflags` $CPPFLAGS"
+        ac_fn_cxx_check_header_mongrel "$LINENO" "log4cpp/CategoryStream.hh" "ac_cv_header_log4cpp_CategoryStream_hh" "$ac_includes_default"
+if test "x$ac_cv_header_log4cpp_CategoryStream_hh" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find log4cpp header files" "$LINENO" 5
+fi
+
+
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <log4cpp/Category.hh>
+#include <log4cpp/CategoryStream.hh>
+int
+main ()
+{
+log4cpp::Category::getInstance("foo").errorStream() << log4cpp::eol
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+$as_echo "#define OPENSAML_LOG4CPP 1" >>confdefs.h
+
+else
+  as_fn_error $? "unable to link with log4cpp, need version 1.0 or later" "$LINENO" 5
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+    else
+        as_fn_error $? "log4cpp-config not found, may need to use --with-log4cpp option" "$LINENO" 5
+    fi
+fi
+
+# Xerces settings
+
+# Check whether --with-xerces was given.
+if test "${with_xerces+set}" = set; then :
+  withval=$with_xerces; if test x_$with_xerces != x_/usr; then
+        LDFLAGS="-L${with_xerces}/lib $LDFLAGS"
+        CPPFLAGS="-I${with_xerces}/include $CPPFLAGS"
+    fi
+fi
+
+LIBS="-lxerces-c $LIBS"
+ac_fn_cxx_check_header_mongrel "$LINENO" "xercesc/dom/DOM.hpp" "ac_cv_header_xercesc_dom_DOM_hpp" "$ac_includes_default"
+if test "x$ac_cv_header_xercesc_dom_DOM_hpp" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find xerces header files" "$LINENO" 5
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking Xerces version" >&5
+$as_echo_n "checking Xerces version... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <xercesc/util/XercesVersion.hpp>
+int
+main ()
+{
+#if  _XERCES_VERSION != 20600
+int i = 0;
+#else
+#error cannot use version 2.6.0
+#endif
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: OK" >&5
+$as_echo "OK" >&6; }
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "Xerces-C v2.6.0 has bugs that inhibit use with signed XML, please use a newer version
+See \`config.log' for more details" "$LINENO" 5 ; }
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <xercesc/util/PlatformUtils.hpp>
+int
+main ()
+{
+xercesc::XMLPlatformUtils::Initialize()
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+else
+  as_fn_error $? "unable to link with Xerces" "$LINENO" 5
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether Xerces XMLString::release(XMLByte**) exists" >&5
+$as_echo_n "checking whether Xerces XMLString::release(XMLByte**) exists... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <xercesc/util/XMLString.hpp>
+int
+main ()
+{
+using namespace XERCES_CPP_NAMESPACE; XMLByte* buf=NULL; XMLString::release(&buf);
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+$as_echo "#define OPENSAML_XERCESC_HAS_XMLBYTE_RELEASE 1" >>confdefs.h
+
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+# XML-Security settings
+
+# Check whether --with-xmlsec was given.
+if test "${with_xmlsec+set}" = set; then :
+  withval=$with_xmlsec; if test x_$with_xmlsec != x_/usr; then
+        LDFLAGS="-L${with_xmlsec}/lib $LDFLAGS"
+        CPPFLAGS="-I${with_xmlsec}/include $CPPFLAGS"
+    fi
+fi
+
+LIBS="-lxml-security-c $LIBS"
+ac_fn_cxx_check_header_mongrel "$LINENO" "xsec/utils/XSECPlatformUtils.hpp" "ac_cv_header_xsec_utils_XSECPlatformUtils_hpp" "$ac_includes_default"
+if test "x$ac_cv_header_xsec_utils_XSECPlatformUtils_hpp" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find xmlsec header files" "$LINENO" 5
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking XML-Security version" >&5
+$as_echo_n "checking XML-Security version... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <xsec/utils/XSECPlatformUtils.hpp>
+int
+main ()
+{
+#if XSEC_VERSION_MAJOR > 1 || (XSEC_VERSION_MAJOR == 1 && XSEC_VERSION_MEDIUM > 3)
+int i = 0;
+#else
+#error need version 1.4.0 or later
+#endif
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_cpp "$LINENO"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: OK" >&5
+$as_echo "OK" >&6; }
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "XML-Security version 1.4.0 or greater is required.
+See \`config.log' for more details" "$LINENO" 5 ; }
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <xsec/utils/XSECPlatformUtils.hpp>
+int
+main ()
+{
+XSECPlatformUtils::Initialise()
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+else
+  as_fn_error $? "unable to link with XML-Security" "$LINENO" 5
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+
+# XML-Tooling settings
+
+# Check whether --with-xmltooling was given.
+if test "${with_xmltooling+set}" = set; then :
+  withval=$with_xmltooling; if test x_$with_xmltooling != x_/usr; then
+        LDFLAGS="-L${with_xmltooling}/lib $LDFLAGS"
+        CPPFLAGS="-I${with_xmltooling}/include $CPPFLAGS"
+        DX_INCLUDE="${with_xmltooling}/include"
+    fi
+fi
+
+LIBS="-lxmltooling $LIBS"
+ac_fn_cxx_check_header_mongrel "$LINENO" "xmltooling/XMLToolingConfig.h" "ac_cv_header_xmltooling_XMLToolingConfig_h" "$ac_includes_default"
+if test "x$ac_cv_header_xmltooling_XMLToolingConfig_h" = x""yes; then :
+
+else
+  as_fn_error $? "unable to find xmltooling header files" "$LINENO" 5
+fi
+
+
+
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <xmltooling/XMLToolingConfig.h>
+#include <xmltooling/version.h>
+int
+main ()
+{
+#if _XMLTOOLING_VERSION >= 10400
+xmltooling::XMLToolingConfig::getConfig();
+#else
+#error Need XMLTooling version 1.4 or higher
+#endif
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_link "$LINENO"; then :
+
+else
+  as_fn_error $? "unable to link with XMLTooling, or version was too old" "$LINENO" 5
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+
+# Check for unit test support
+CXXTEST="/usr/bin/cxxtestgen.pl"
+CXXTESTFLAGS=""
+
+# Check whether --with-cxxtest was given.
+if test "${with_cxxtest+set}" = set; then :
+  withval=$with_cxxtest; if test x_$with_cxxtest != x_/usr; then
+        CXXTEST="${with_cxxtest}/cxxtestgen.pl"
+        CXXTESTFLAGS="-I${with_cxxtest}"
+    fi
+fi
+
+if ! test -f "${CXXTEST}"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cxxtestgen not found, won't build unit tests" >&5
+$as_echo "$as_me: WARNING: cxxtestgen not found, won't build unit tests" >&2;}
+fi
+
+
+
+ if test -f ${CXXTEST}; then
+  BUILD_UNITTEST_TRUE=
+  BUILD_UNITTEST_FALSE='#'
+else
+  BUILD_UNITTEST_TRUE='#'
+  BUILD_UNITTEST_FALSE=
+fi
+
+
+
+# we need the expanded forms...
+test "x$prefix" = xNONE && prefix=$ac_default_prefix
+test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig libname" >&5
+$as_echo_n "checking our pkgconfig libname... " >&6; }
+test ".$ax_create_pkgconfig_libname" != "." || \
+ax_create_pkgconfig_libname="${PACKAGE_NAME}"
+test ".$ax_create_pkgconfig_libname" != "." || \
+ax_create_pkgconfig_libname="$PACKAGE"
+ax_create_pkgconfig_libname=`eval echo "$ax_create_pkgconfig_libname"`
+ax_create_pkgconfig_libname=`eval echo "$ax_create_pkgconfig_libname"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_libname" >&5
+$as_echo "$ax_create_pkgconfig_libname" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig version" >&5
+$as_echo_n "checking our pkgconfig version... " >&6; }
+test ".$ax_create_pkgconfig_version" != "." || \
+ax_create_pkgconfig_version="${PACKAGE_VERSION}"
+test ".$ax_create_pkgconfig_version" != "." || \
+ax_create_pkgconfig_version="$VERSION"
+ax_create_pkgconfig_version=`eval echo "$ax_create_pkgconfig_version"`
+ax_create_pkgconfig_version=`eval echo "$ax_create_pkgconfig_version"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_version" >&5
+$as_echo "$ax_create_pkgconfig_version" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig_libdir" >&5
+$as_echo_n "checking our pkgconfig_libdir... " >&6; }
+test ".$pkgconfig_libdir" = "." && \
+pkgconfig_libdir='${libdir}/pkgconfig'
+ax_create_pkgconfig_libdir=`eval echo "$pkgconfig_libdir"`
+ax_create_pkgconfig_libdir=`eval echo "$ax_create_pkgconfig_libdir"`
+ax_create_pkgconfig_libdir=`eval echo "$ax_create_pkgconfig_libdir"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $pkgconfig_libdir" >&5
+$as_echo "$pkgconfig_libdir" >&6; }
+test "$pkgconfig_libdir" != "$ax_create_pkgconfig_libdir" && (
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: expanded our pkgconfig_libdir... $ax_create_pkgconfig_libdir" >&5
+$as_echo "expanded our pkgconfig_libdir... $ax_create_pkgconfig_libdir" >&6; })
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig_libfile" >&5
+$as_echo_n "checking our pkgconfig_libfile... " >&6; }
+test ".$pkgconfig_libfile" != "." || \
+pkgconfig_libfile="$ax_create_pkgconfig_libname.pc"
+ax_create_pkgconfig_libfile=`eval echo "$pkgconfig_libfile"`
+ax_create_pkgconfig_libfile=`eval echo "$ax_create_pkgconfig_libfile"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $pkgconfig_libfile" >&5
+$as_echo "$pkgconfig_libfile" >&6; }
+test "$pkgconfig_libfile" != "$ax_create_pkgconfig_libfile" && (
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: expanded our pkgconfig_libfile... $ax_create_pkgconfig_libfile" >&5
+$as_echo "expanded our pkgconfig_libfile... $ax_create_pkgconfig_libfile" >&6; })
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our package / suffix" >&5
+$as_echo_n "checking our package / suffix... " >&6; }
+ax_create_pkgconfig_suffix="$program_suffix"
+test ".$ax_create_pkgconfig_suffix" != .NONE || ax_create_pkgconfig_suffix=""
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: ${PACKAGE_NAME} / ${ax_create_pkgconfig_suffix}" >&5
+$as_echo "${PACKAGE_NAME} / ${ax_create_pkgconfig_suffix}" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig description" >&5
+$as_echo_n "checking our pkgconfig description... " >&6; }
+ax_create_pkgconfig_description="OpenSAML library"
+test ".$ax_create_pkgconfig_description" != "." || \
+ax_create_pkgconfig_description="$ax_create_pkgconfig_libname Library"
+ax_create_pkgconfig_description=`eval echo "$ax_create_pkgconfig_description"`
+ax_create_pkgconfig_description=`eval echo "$ax_create_pkgconfig_description"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_description" >&5
+$as_echo "$ax_create_pkgconfig_description" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig requires" >&5
+$as_echo_n "checking our pkgconfig requires... " >&6; }
+ax_create_pkgconfig_requires="$PACKAGE_REQUIRES"
+ax_create_pkgconfig_requires=`eval echo "$ax_create_pkgconfig_requires"`
+ax_create_pkgconfig_requires=`eval echo "$ax_create_pkgconfig_requires"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_requires" >&5
+$as_echo "$ax_create_pkgconfig_requires" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig ext libs" >&5
+$as_echo_n "checking our pkgconfig ext libs... " >&6; }
+ax_create_pkgconfig_pkglibs="$PACKAGE_LIBS"
+test ".$ax_create_pkgconfig_pkglibs" != "." || ax_create_pkgconfig_pkglibs="-l$ax_create_pkgconfig_libname"
+ax_create_pkgconfig_libs="$LIBS -lsaml"
+ax_create_pkgconfig_libs=`eval echo "$ax_create_pkgconfig_libs"`
+ax_create_pkgconfig_libs=`eval echo "$ax_create_pkgconfig_libs"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_libs" >&5
+$as_echo "$ax_create_pkgconfig_libs" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig cppflags" >&5
+$as_echo_n "checking our pkgconfig cppflags... " >&6; }
+ax_create_pkgconfig_cppflags="$CPPFLAGS $PACKAGE_CFLAGS"
+ax_create_pkgconfig_cppflags=`eval echo "$ax_create_pkgconfig_cppflags"`
+ax_create_pkgconfig_cppflags=`eval echo "$ax_create_pkgconfig_cppflags"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_cppflags" >&5
+$as_echo "$ax_create_pkgconfig_cppflags" >&6; }
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking our pkgconfig ldflags" >&5
+$as_echo_n "checking our pkgconfig ldflags... " >&6; }
+ax_create_pkgconfig_ldflags="$LDFLAGS $PACKAGE_LDFLAGS"
+ax_create_pkgconfig_ldflags=`eval echo "$ax_create_pkgconfig_ldflags"`
+ax_create_pkgconfig_ldflags=`eval echo "$ax_create_pkgconfig_ldflags"`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_create_pkgconfig_ldflags" >&5
+$as_echo "$ax_create_pkgconfig_ldflags" >&6; }
+
+test ".$ax_create_pkgconfig_generate" != "." || \
+ax_create_pkgconfig_generate="$ax_create_pkgconfig_libname.pc"
+ax_create_pkgconfig_generate=`eval echo "$ax_create_pkgconfig_generate"`
+ax_create_pkgconfig_generate=`eval echo "$ax_create_pkgconfig_generate"`
+test "$pkgconfig_libfile" != "$ax_create_pkgconfig_generate" && (
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: generate the pkgconfig later... $ax_create_pkgconfig_generate" >&5
+$as_echo "generate the pkgconfig later... $ax_create_pkgconfig_generate" >&6; })
+
+if test ".$ax_create_pkgconfig_src_libdir" = "." ; then
+ax_create_pkgconfig_src_libdir=`pwd`
+ax_create_pkgconfig_src_libdir=`$as_dirname -- "$ax_create_pkgconfig_src_libdir/$ax_create_pkgconfig_generate" ||
+$as_expr X"$ax_create_pkgconfig_src_libdir/$ax_create_pkgconfig_generate" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$ax_create_pkgconfig_src_libdir/$ax_create_pkgconfig_generate" : 'X\(//\)[^/]' \| \
+	 X"$ax_create_pkgconfig_src_libdir/$ax_create_pkgconfig_generate" : 'X\(//\)$' \| \
+	 X"$ax_create_pkgconfig_src_libdir/$ax_create_pkgconfig_generate" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$ax_create_pkgconfig_src_libdir/$ax_create_pkgconfig_generate" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+test ! -d $ax_create_pkgconfig_src_libdir/src || \
+ax_create_pkgconfig_src_libdir="$ax_create_pkgconfig_src_libdir/src"
+case ".$objdir" in
+*libs) ax_create_pkgconfig_src_libdir="$ax_create_pkgconfig_src_libdir/$objdir" ;; esac
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: noninstalled pkgconfig -L $ax_create_pkgconfig_src_libdir" >&5
+$as_echo "noninstalled pkgconfig -L $ax_create_pkgconfig_src_libdir" >&6; }
+fi
+
+if test ".$ax_create_pkgconfig_src_headers" = "." ; then
+ax_create_pkgconfig_src_headers=`pwd`
+v="$ac_top_srcdir" ;
+test ".$v" != "." || v="$ax_spec_dir"
+test ".$v" != "." || v="$srcdir"
+case "$v" in /*) ax_create_pkgconfig_src_headers="" ;; esac
+ax_create_pkgconfig_src_headers=`$as_dirname -- "$ax_create_pkgconfig_src_headers/$v/x" ||
+$as_expr X"$ax_create_pkgconfig_src_headers/$v/x" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$ax_create_pkgconfig_src_headers/$v/x" : 'X\(//\)[^/]' \| \
+	 X"$ax_create_pkgconfig_src_headers/$v/x" : 'X\(//\)$' \| \
+	 X"$ax_create_pkgconfig_src_headers/$v/x" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$ax_create_pkgconfig_src_headers/$v/x" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+test ! -d $ax_create_pkgconfig_src_headers/include || \
+ax_create_pkgconfig_src_headers="$ax_create_pkgconfig_src_headers/include"
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: noninstalled pkgconfig -I $ax_create_pkgconfig_src_headers" >&5
+$as_echo "noninstalled pkgconfig -I $ax_create_pkgconfig_src_headers" >&6; }
+fi
+
+
+ac_config_commands="$ac_config_commands $ax_create_pkgconfig_generate"
+
+
+
+LIBTOOL="$LIBTOOL --silent"
+
+# output packaging and makefiles
+cat >confcache <<\_ACEOF
+# This file is a shell script that caches the results of configure
+# tests run on this system so they can be shared between configure
+# scripts and configure runs, see configure's option --config-cache.
+# It is not useful on other systems.  If it contains results you don't
+# want to keep, you may remove or edit it.
+#
+# config.status only pays attention to the cache file if you give it
+# the --recheck option to rerun configure.
+#
+# `ac_cv_env_foo' variables (set or unset) will be overridden when
+# loading this file, other *unset* `ac_cv_foo' will be assigned the
+# following values.
+
+_ACEOF
+
+# The following way of writing the cache mishandles newlines in values,
+# but we know of no workaround that is simple, portable, and efficient.
+# So, we kill variables containing newlines.
+# Ultrix sh set writes to stderr and can't be redirected directly,
+# and sets the high bit in the cache file unless we assign to the vars.
+(
+  for ac_var in `(set) 2>&1 | sed -n 's/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'`; do
+    eval ac_val=\$$ac_var
+    case $ac_val in #(
+    *${as_nl}*)
+      case $ac_var in #(
+      *_cv_*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline" >&5
+$as_echo "$as_me: WARNING: cache variable $ac_var contains a newline" >&2;} ;;
+      esac
+      case $ac_var in #(
+      _ | IFS | as_nl) ;; #(
+      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(
+      *) { eval $ac_var=; unset $ac_var;} ;;
+      esac ;;
+    esac
+  done
+
+  (set) 2>&1 |
+    case $as_nl`(ac_space=' '; set) 2>&1` in #(
+    *${as_nl}ac_space=\ *)
+      # `set' does not quote correctly, so add quotes: double-quote
+      # substitution turns \\\\ into \\, and sed turns \\ into \.
+      sed -n \
+	"s/'/'\\\\''/g;
+	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\\2'/p"
+      ;; #(
+    *)
+      # `set' quotes correctly as required by POSIX, so do not add quotes.
+      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
+      ;;
+    esac |
+    sort
+) |
+  sed '
+     /^ac_cv_env_/b end
+     t clear
+     :clear
+     s/^\([^=]*\)=\(.*[{}].*\)$/test "${\1+set}" = set || &/
+     t end
+     s/^\([^=]*\)=\(.*\)$/\1=${\1=\2}/
+     :end' >>confcache
+if diff "$cache_file" confcache >/dev/null 2>&1; then :; else
+  if test -w "$cache_file"; then
+    test "x$cache_file" != "x/dev/null" &&
+      { $as_echo "$as_me:${as_lineno-$LINENO}: updating cache $cache_file" >&5
+$as_echo "$as_me: updating cache $cache_file" >&6;}
+    cat confcache >$cache_file
+  else
+    { $as_echo "$as_me:${as_lineno-$LINENO}: not updating unwritable cache $cache_file" >&5
+$as_echo "$as_me: not updating unwritable cache $cache_file" >&6;}
+  fi
+fi
+rm -f confcache
+
+test "x$prefix" = xNONE && prefix=$ac_default_prefix
+# Let make expand exec_prefix.
+test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
+
+DEFS=-DHAVE_CONFIG_H
+
+ac_libobjs=
+ac_ltlibobjs=
+U=
+for ac_i in : $LIBOBJS; do test "x$ac_i" = x: && continue
+  # 1. Remove the extension, and $U if already installed.
+  ac_script='s/\$U\././;s/\.o$//;s/\.obj$//'
+  ac_i=`$as_echo "$ac_i" | sed "$ac_script"`
+  # 2. Prepend LIBOBJDIR.  When used with automake>=1.10 LIBOBJDIR
+  #    will be set to the directory where LIBOBJS objects are built.
+  as_fn_append ac_libobjs " \${LIBOBJDIR}$ac_i\$U.$ac_objext"
+  as_fn_append ac_ltlibobjs " \${LIBOBJDIR}$ac_i"'$U.lo'
+done
+LIBOBJS=$ac_libobjs
+
+LTLIBOBJS=$ac_ltlibobjs
+
+
+ if test -n "$EXEEXT"; then
+  am__EXEEXT_TRUE=
+  am__EXEEXT_FALSE='#'
+else
+  am__EXEEXT_TRUE='#'
+  am__EXEEXT_FALSE=
+fi
+
+if test -z "${AMDEP_TRUE}" && test -z "${AMDEP_FALSE}"; then
+  as_fn_error $? "conditional \"AMDEP\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${am__fastdepCC_TRUE}" && test -z "${am__fastdepCC_FALSE}"; then
+  as_fn_error $? "conditional \"am__fastdepCC\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_doc_TRUE}" && test -z "${DX_COND_doc_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_doc\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_doc_TRUE}" && test -z "${DX_COND_doc_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_doc\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_dot_TRUE}" && test -z "${DX_COND_dot_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_dot\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_dot_TRUE}" && test -z "${DX_COND_dot_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_dot\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_man_TRUE}" && test -z "${DX_COND_man_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_man\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_man_TRUE}" && test -z "${DX_COND_man_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_man\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_rtf_TRUE}" && test -z "${DX_COND_rtf_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_rtf\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_rtf_TRUE}" && test -z "${DX_COND_rtf_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_rtf\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_xml_TRUE}" && test -z "${DX_COND_xml_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_xml\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_xml_TRUE}" && test -z "${DX_COND_xml_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_xml\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_chm_TRUE}" && test -z "${DX_COND_chm_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_chm\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_chm_TRUE}" && test -z "${DX_COND_chm_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_chm\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_chi_TRUE}" && test -z "${DX_COND_chi_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_chi\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_chi_TRUE}" && test -z "${DX_COND_chi_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_chi\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_html_TRUE}" && test -z "${DX_COND_html_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_html\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_html_TRUE}" && test -z "${DX_COND_html_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_html\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_ps_TRUE}" && test -z "${DX_COND_ps_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_ps\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_ps_TRUE}" && test -z "${DX_COND_ps_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_ps\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_pdf_TRUE}" && test -z "${DX_COND_pdf_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_pdf\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_pdf_TRUE}" && test -z "${DX_COND_pdf_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_pdf\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_latex_TRUE}" && test -z "${DX_COND_latex_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_latex\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${DX_COND_latex_TRUE}" && test -z "${DX_COND_latex_FALSE}"; then
+  as_fn_error $? "conditional \"DX_COND_latex\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${am__fastdepCC_TRUE}" && test -z "${am__fastdepCC_FALSE}"; then
+  as_fn_error $? "conditional \"am__fastdepCC\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${am__fastdepCXX_TRUE}" && test -z "${am__fastdepCXX_FALSE}"; then
+  as_fn_error $? "conditional \"am__fastdepCXX\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${am__fastdepCXX_TRUE}" && test -z "${am__fastdepCXX_FALSE}"; then
+  as_fn_error $? "conditional \"am__fastdepCXX\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${BUILD_UNITTEST_TRUE}" && test -z "${BUILD_UNITTEST_FALSE}"; then
+  as_fn_error $? "conditional \"BUILD_UNITTEST\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+
+: ${CONFIG_STATUS=./config.status}
+ac_write_fail=0
+ac_clean_files_save=$ac_clean_files
+ac_clean_files="$ac_clean_files $CONFIG_STATUS"
+{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $CONFIG_STATUS" >&5
+$as_echo "$as_me: creating $CONFIG_STATUS" >&6;}
+as_write_fail=0
+cat >$CONFIG_STATUS <<_ASEOF || as_write_fail=1
+#! $SHELL
+# Generated by $as_me.
+# Run this file to recreate the current configuration.
+# Compiler output produced by configure, useful for debugging
+# configure, is in config.log if it exists.
+
+debug=false
+ac_cs_recheck=false
+ac_cs_silent=false
+
+SHELL=\${CONFIG_SHELL-$SHELL}
+export SHELL
+_ASEOF
+cat >>$CONFIG_STATUS <<\_ASEOF || as_write_fail=1
+## -------------------- ##
+## M4sh Initialization. ##
+## -------------------- ##
+
+# Be more Bourne compatible
+DUALCASE=1; export DUALCASE # for MKS sh
+if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
+  emulate sh
+  NULLCMD=:
+  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
+  # is contrary to our usage.  Disable this feature.
+  alias -g '${1+"$@"}'='"$@"'
+  setopt NO_GLOB_SUBST
+else
+  case `(set -o) 2>/dev/null` in #(
+  *posix*) :
+    set -o posix ;; #(
+  *) :
+     ;;
+esac
+fi
+
+
+as_nl='
+'
+export as_nl
+# Printing a long string crashes Solaris 7 /usr/bin/printf.
+as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
+as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
+as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
+# Prefer a ksh shell builtin over an external printf program on Solaris,
+# but without wasting forks for bash or zsh.
+if test -z "$BASH_VERSION$ZSH_VERSION" \
+    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
+  as_echo='print -r --'
+  as_echo_n='print -rn --'
+elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
+  as_echo='printf %s\n'
+  as_echo_n='printf %s'
+else
+  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
+    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
+    as_echo_n='/usr/ucb/echo -n'
+  else
+    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
+    as_echo_n_body='eval
+      arg=$1;
+      case $arg in #(
+      *"$as_nl"*)
+	expr "X$arg" : "X\\(.*\\)$as_nl";
+	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
+      esac;
+      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
+    '
+    export as_echo_n_body
+    as_echo_n='sh -c $as_echo_n_body as_echo'
+  fi
+  export as_echo_body
+  as_echo='sh -c $as_echo_body as_echo'
+fi
+
+# The user is always right.
+if test "${PATH_SEPARATOR+set}" != set; then
+  PATH_SEPARATOR=:
+  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
+    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
+      PATH_SEPARATOR=';'
+  }
+fi
+
+
+# IFS
+# We need space, tab and new line, in precisely that order.  Quoting is
+# there to prevent editors from complaining about space-tab.
+# (If _AS_PATH_WALK were called with IFS unset, it would disable word
+# splitting by setting IFS to empty value.)
+IFS=" ""	$as_nl"
+
+# Find who we are.  Look in the path if we contain no directory separator.
+case $0 in #((
+  *[\\/]* ) as_myself=$0 ;;
+  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
+  done
+IFS=$as_save_IFS
+
+     ;;
+esac
+# We did not find ourselves, most probably we were run as `sh COMMAND'
+# in which case we are not to be found in the path.
+if test "x$as_myself" = x; then
+  as_myself=$0
+fi
+if test ! -f "$as_myself"; then
+  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
+  exit 1
+fi
+
+# Unset variables that we do not need and which cause bugs (e.g. in
+# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
+# suppresses any "Segmentation fault" message there.  '((' could
+# trigger a bug in pdksh 5.2.14.
+for as_var in BASH_ENV ENV MAIL MAILPATH
+do eval test x\${$as_var+set} = xset \
+  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
+done
+PS1='$ '
+PS2='> '
+PS4='+ '
+
+# NLS nuisances.
+LC_ALL=C
+export LC_ALL
+LANGUAGE=C
+export LANGUAGE
+
+# CDPATH.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+
+# as_fn_error STATUS ERROR [LINENO LOG_FD]
+# ----------------------------------------
+# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
+# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
+# script with STATUS, using 1 if that was 0.
+as_fn_error ()
+{
+  as_status=$1; test $as_status -eq 0 && as_status=1
+  if test "$4"; then
+    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
+  fi
+  $as_echo "$as_me: error: $2" >&2
+  as_fn_exit $as_status
+} # as_fn_error
+
+
+# as_fn_set_status STATUS
+# -----------------------
+# Set $? to STATUS, without forking.
+as_fn_set_status ()
+{
+  return $1
+} # as_fn_set_status
+
+# as_fn_exit STATUS
+# -----------------
+# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
+as_fn_exit ()
+{
+  set +e
+  as_fn_set_status $1
+  exit $1
+} # as_fn_exit
+
+# as_fn_unset VAR
+# ---------------
+# Portably unset VAR.
+as_fn_unset ()
+{
+  { eval $1=; unset $1;}
+}
+as_unset=as_fn_unset
+# as_fn_append VAR VALUE
+# ----------------------
+# Append the text in VALUE to the end of the definition contained in VAR. Take
+# advantage of any shell optimizations that allow amortized linear growth over
+# repeated appends, instead of the typical quadratic growth present in naive
+# implementations.
+if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
+  eval 'as_fn_append ()
+  {
+    eval $1+=\$2
+  }'
+else
+  as_fn_append ()
+  {
+    eval $1=\$$1\$2
+  }
+fi # as_fn_append
+
+# as_fn_arith ARG...
+# ------------------
+# Perform arithmetic evaluation on the ARGs, and store the result in the
+# global $as_val. Take advantage of shells that can avoid forks. The arguments
+# must be portable across $(()) and expr.
+if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
+  eval 'as_fn_arith ()
+  {
+    as_val=$(( $* ))
+  }'
+else
+  as_fn_arith ()
+  {
+    as_val=`expr "$@" || test $? -eq 1`
+  }
+fi # as_fn_arith
+
+
+if expr a : '\(a\)' >/dev/null 2>&1 &&
+   test "X`expr 00001 : '.*\(...\)'`" = X001; then
+  as_expr=expr
+else
+  as_expr=false
+fi
+
+if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
+  as_basename=basename
+else
+  as_basename=false
+fi
+
+if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
+  as_dirname=dirname
+else
+  as_dirname=false
+fi
+
+as_me=`$as_basename -- "$0" ||
+$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
+	 X"$0" : 'X\(//\)$' \| \
+	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X/"$0" |
+    sed '/^.*\/\([^/][^/]*\)\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\/\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\/\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+
+# Avoid depending upon Character Ranges.
+as_cr_letters='abcdefghijklmnopqrstuvwxyz'
+as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
+as_cr_Letters=$as_cr_letters$as_cr_LETTERS
+as_cr_digits='0123456789'
+as_cr_alnum=$as_cr_Letters$as_cr_digits
+
+ECHO_C= ECHO_N= ECHO_T=
+case `echo -n x` in #(((((
+-n*)
+  case `echo 'xy\c'` in
+  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
+  xy)  ECHO_C='\c';;
+  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
+       ECHO_T='	';;
+  esac;;
+*)
+  ECHO_N='-n';;
+esac
+
+rm -f conf$$ conf$$.exe conf$$.file
+if test -d conf$$.dir; then
+  rm -f conf$$.dir/conf$$.file
+else
+  rm -f conf$$.dir
+  mkdir conf$$.dir 2>/dev/null
+fi
+if (echo >conf$$.file) 2>/dev/null; then
+  if ln -s conf$$.file conf$$ 2>/dev/null; then
+    as_ln_s='ln -s'
+    # ... but there are two gotchas:
+    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
+    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
+    # In both cases, we have to default to `cp -p'.
+    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
+      as_ln_s='cp -p'
+  elif ln conf$$.file conf$$ 2>/dev/null; then
+    as_ln_s=ln
+  else
+    as_ln_s='cp -p'
+  fi
+else
+  as_ln_s='cp -p'
+fi
+rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
+rmdir conf$$.dir 2>/dev/null
+
+
+# as_fn_mkdir_p
+# -------------
+# Create "$as_dir" as a directory, including parents if necessary.
+as_fn_mkdir_p ()
+{
+
+  case $as_dir in #(
+  -*) as_dir=./$as_dir;;
+  esac
+  test -d "$as_dir" || eval $as_mkdir_p || {
+    as_dirs=
+    while :; do
+      case $as_dir in #(
+      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
+      *) as_qdir=$as_dir;;
+      esac
+      as_dirs="'$as_qdir' $as_dirs"
+      as_dir=`$as_dirname -- "$as_dir" ||
+$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$as_dir" : 'X\(//\)[^/]' \| \
+	 X"$as_dir" : 'X\(//\)$' \| \
+	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$as_dir" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+      test -d "$as_dir" && break
+    done
+    test -z "$as_dirs" || eval "mkdir $as_dirs"
+  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"
+
+
+} # as_fn_mkdir_p
+if mkdir -p . 2>/dev/null; then
+  as_mkdir_p='mkdir -p "$as_dir"'
+else
+  test -d ./-p && rmdir ./-p
+  as_mkdir_p=false
+fi
+
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
+else
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+	test -d "$1/.";
+      else
+	case $1 in #(
+	-*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
+fi
+as_executable_p=$as_test_x
+
+# Sed expression to map a string onto a valid CPP name.
+as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
+
+# Sed expression to map a string onto a valid variable name.
+as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"
+
+
+exec 6>&1
+## ----------------------------------- ##
+## Main body of $CONFIG_STATUS script. ##
+## ----------------------------------- ##
+_ASEOF
+test $as_write_fail = 0 && chmod +x $CONFIG_STATUS || ac_write_fail=1
+
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+# Save the log message, to keep $0 and so on meaningful, and to
+# report actual input values of CONFIG_FILES etc. instead of their
+# values after options handling.
+ac_log="
+This file was extended by opensaml $as_me 2.4, which was
+generated by GNU Autoconf 2.67.  Invocation command line was
+
+  CONFIG_FILES    = $CONFIG_FILES
+  CONFIG_HEADERS  = $CONFIG_HEADERS
+  CONFIG_LINKS    = $CONFIG_LINKS
+  CONFIG_COMMANDS = $CONFIG_COMMANDS
+  $ $0 $@
+
+on `(hostname || uname -n) 2>/dev/null | sed 1q`
+"
+
+_ACEOF
+
+case $ac_config_files in *"
+"*) set x $ac_config_files; shift; ac_config_files=$*;;
+esac
+
+case $ac_config_headers in *"
+"*) set x $ac_config_headers; shift; ac_config_headers=$*;;
+esac
+
+
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+# Files that config.status was made for.
+config_files="$ac_config_files"
+config_headers="$ac_config_headers"
+config_commands="$ac_config_commands"
+
+_ACEOF
+
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+ac_cs_usage="\
+\`$as_me' instantiates files and other configuration actions
+from templates according to the current configuration.  Unless the files
+and actions are specified as TAGs, all are instantiated by default.
+
+Usage: $0 [OPTION]... [TAG]...
+
+  -h, --help       print this help, then exit
+  -V, --version    print version number and configuration settings, then exit
+      --config     print configuration, then exit
+  -q, --quiet, --silent
+                   do not print progress messages
+  -d, --debug      don't remove temporary files
+      --recheck    update $as_me by reconfiguring in the same conditions
+      --file=FILE[:TEMPLATE]
+                   instantiate the configuration file FILE
+      --header=FILE[:TEMPLATE]
+                   instantiate the configuration header FILE
+
+Configuration files:
+$config_files
+
+Configuration headers:
+$config_headers
+
+Configuration commands:
+$config_commands
+
+Report bugs to <https://bugs.internet2.edu/>."
+
+_ACEOF
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
+ac_cs_version="\\
+opensaml config.status 2.4
+configured by $0, generated by GNU Autoconf 2.67,
+  with options \\"\$ac_cs_config\\"
+
+Copyright (C) 2010 Free Software Foundation, Inc.
+This config.status script is free software; the Free Software Foundation
+gives unlimited permission to copy, distribute and modify it."
+
+ac_pwd='$ac_pwd'
+srcdir='$srcdir'
+INSTALL='$INSTALL'
+MKDIR_P='$MKDIR_P'
+AWK='$AWK'
+test -n "\$AWK" || AWK=awk
+_ACEOF
+
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+# The default lists apply if the user does not specify any file.
+ac_need_defaults=:
+while test $# != 0
+do
+  case $1 in
+  --*=?*)
+    ac_option=`expr "X$1" : 'X\([^=]*\)='`
+    ac_optarg=`expr "X$1" : 'X[^=]*=\(.*\)'`
+    ac_shift=:
+    ;;
+  --*=)
+    ac_option=`expr "X$1" : 'X\([^=]*\)='`
+    ac_optarg=
+    ac_shift=:
+    ;;
+  *)
+    ac_option=$1
+    ac_optarg=$2
+    ac_shift=shift
+    ;;
+  esac
+
+  case $ac_option in
+  # Handling of the options.
+  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
+    ac_cs_recheck=: ;;
+  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )
+    $as_echo "$ac_cs_version"; exit ;;
+  --config | --confi | --conf | --con | --co | --c )
+    $as_echo "$ac_cs_config"; exit ;;
+  --debug | --debu | --deb | --de | --d | -d )
+    debug=: ;;
+  --file | --fil | --fi | --f )
+    $ac_shift
+    case $ac_optarg in
+    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
+    '') as_fn_error $? "missing file argument" ;;
+    esac
+    as_fn_append CONFIG_FILES " '$ac_optarg'"
+    ac_need_defaults=false;;
+  --header | --heade | --head | --hea )
+    $ac_shift
+    case $ac_optarg in
+    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
+    esac
+    as_fn_append CONFIG_HEADERS " '$ac_optarg'"
+    ac_need_defaults=false;;
+  --he | --h)
+    # Conflict between --help and --header
+    as_fn_error $? "ambiguous option: \`$1'
+Try \`$0 --help' for more information.";;
+  --help | --hel | -h )
+    $as_echo "$ac_cs_usage"; exit ;;
+  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
+  | -silent | --silent | --silen | --sile | --sil | --si | --s)
+    ac_cs_silent=: ;;
+
+  # This is an error.
+  -*) as_fn_error $? "unrecognized option: \`$1'
+Try \`$0 --help' for more information." ;;
+
+  *) as_fn_append ac_config_targets " $1"
+     ac_need_defaults=false ;;
+
+  esac
+  shift
+done
+
+ac_configure_extra_args=
+
+if $ac_cs_silent; then
+  exec 6>/dev/null
+  ac_configure_extra_args="$ac_configure_extra_args --silent"
+fi
+
+_ACEOF
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+if \$ac_cs_recheck; then
+  set X '$SHELL' '$0' $ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
+  shift
+  \$as_echo "running CONFIG_SHELL=$SHELL \$*" >&6
+  CONFIG_SHELL='$SHELL'
+  export CONFIG_SHELL
+  exec "\$@"
+fi
+
+_ACEOF
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+exec 5>>config.log
+{
+  echo
+  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
+## Running $as_me. ##
+_ASBOX
+  $as_echo "$ac_log"
+} >&5
+
+_ACEOF
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+#
+# INIT-COMMANDS
+#
+AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"
+
+
+# The HP-UX ksh and POSIX shell print the target directory to stdout
+# if CDPATH is set.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+sed_quote_subst='$sed_quote_subst'
+double_quote_subst='$double_quote_subst'
+delay_variable_subst='$delay_variable_subst'
+enable_static='`$ECHO "X$enable_static" | $Xsed -e "$delay_single_quote_subst"`'
+macro_version='`$ECHO "X$macro_version" | $Xsed -e "$delay_single_quote_subst"`'
+macro_revision='`$ECHO "X$macro_revision" | $Xsed -e "$delay_single_quote_subst"`'
+enable_shared='`$ECHO "X$enable_shared" | $Xsed -e "$delay_single_quote_subst"`'
+pic_mode='`$ECHO "X$pic_mode" | $Xsed -e "$delay_single_quote_subst"`'
+enable_fast_install='`$ECHO "X$enable_fast_install" | $Xsed -e "$delay_single_quote_subst"`'
+host_alias='`$ECHO "X$host_alias" | $Xsed -e "$delay_single_quote_subst"`'
+host='`$ECHO "X$host" | $Xsed -e "$delay_single_quote_subst"`'
+host_os='`$ECHO "X$host_os" | $Xsed -e "$delay_single_quote_subst"`'
+build_alias='`$ECHO "X$build_alias" | $Xsed -e "$delay_single_quote_subst"`'
+build='`$ECHO "X$build" | $Xsed -e "$delay_single_quote_subst"`'
+build_os='`$ECHO "X$build_os" | $Xsed -e "$delay_single_quote_subst"`'
+SED='`$ECHO "X$SED" | $Xsed -e "$delay_single_quote_subst"`'
+Xsed='`$ECHO "X$Xsed" | $Xsed -e "$delay_single_quote_subst"`'
+GREP='`$ECHO "X$GREP" | $Xsed -e "$delay_single_quote_subst"`'
+EGREP='`$ECHO "X$EGREP" | $Xsed -e "$delay_single_quote_subst"`'
+FGREP='`$ECHO "X$FGREP" | $Xsed -e "$delay_single_quote_subst"`'
+LD='`$ECHO "X$LD" | $Xsed -e "$delay_single_quote_subst"`'
+NM='`$ECHO "X$NM" | $Xsed -e "$delay_single_quote_subst"`'
+LN_S='`$ECHO "X$LN_S" | $Xsed -e "$delay_single_quote_subst"`'
+max_cmd_len='`$ECHO "X$max_cmd_len" | $Xsed -e "$delay_single_quote_subst"`'
+ac_objext='`$ECHO "X$ac_objext" | $Xsed -e "$delay_single_quote_subst"`'
+exeext='`$ECHO "X$exeext" | $Xsed -e "$delay_single_quote_subst"`'
+lt_unset='`$ECHO "X$lt_unset" | $Xsed -e "$delay_single_quote_subst"`'
+lt_SP2NL='`$ECHO "X$lt_SP2NL" | $Xsed -e "$delay_single_quote_subst"`'
+lt_NL2SP='`$ECHO "X$lt_NL2SP" | $Xsed -e "$delay_single_quote_subst"`'
+reload_flag='`$ECHO "X$reload_flag" | $Xsed -e "$delay_single_quote_subst"`'
+reload_cmds='`$ECHO "X$reload_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+OBJDUMP='`$ECHO "X$OBJDUMP" | $Xsed -e "$delay_single_quote_subst"`'
+deplibs_check_method='`$ECHO "X$deplibs_check_method" | $Xsed -e "$delay_single_quote_subst"`'
+file_magic_cmd='`$ECHO "X$file_magic_cmd" | $Xsed -e "$delay_single_quote_subst"`'
+AR='`$ECHO "X$AR" | $Xsed -e "$delay_single_quote_subst"`'
+AR_FLAGS='`$ECHO "X$AR_FLAGS" | $Xsed -e "$delay_single_quote_subst"`'
+STRIP='`$ECHO "X$STRIP" | $Xsed -e "$delay_single_quote_subst"`'
+RANLIB='`$ECHO "X$RANLIB" | $Xsed -e "$delay_single_quote_subst"`'
+old_postinstall_cmds='`$ECHO "X$old_postinstall_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+old_postuninstall_cmds='`$ECHO "X$old_postuninstall_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+old_archive_cmds='`$ECHO "X$old_archive_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+CC='`$ECHO "X$CC" | $Xsed -e "$delay_single_quote_subst"`'
+CFLAGS='`$ECHO "X$CFLAGS" | $Xsed -e "$delay_single_quote_subst"`'
+compiler='`$ECHO "X$compiler" | $Xsed -e "$delay_single_quote_subst"`'
+GCC='`$ECHO "X$GCC" | $Xsed -e "$delay_single_quote_subst"`'
+lt_cv_sys_global_symbol_pipe='`$ECHO "X$lt_cv_sys_global_symbol_pipe" | $Xsed -e "$delay_single_quote_subst"`'
+lt_cv_sys_global_symbol_to_cdecl='`$ECHO "X$lt_cv_sys_global_symbol_to_cdecl" | $Xsed -e "$delay_single_quote_subst"`'
+lt_cv_sys_global_symbol_to_c_name_address='`$ECHO "X$lt_cv_sys_global_symbol_to_c_name_address" | $Xsed -e "$delay_single_quote_subst"`'
+lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='`$ECHO "X$lt_cv_sys_global_symbol_to_c_name_address_lib_prefix" | $Xsed -e "$delay_single_quote_subst"`'
+objdir='`$ECHO "X$objdir" | $Xsed -e "$delay_single_quote_subst"`'
+SHELL='`$ECHO "X$SHELL" | $Xsed -e "$delay_single_quote_subst"`'
+ECHO='`$ECHO "X$ECHO" | $Xsed -e "$delay_single_quote_subst"`'
+MAGIC_CMD='`$ECHO "X$MAGIC_CMD" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_no_builtin_flag='`$ECHO "X$lt_prog_compiler_no_builtin_flag" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_wl='`$ECHO "X$lt_prog_compiler_wl" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_pic='`$ECHO "X$lt_prog_compiler_pic" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_static='`$ECHO "X$lt_prog_compiler_static" | $Xsed -e "$delay_single_quote_subst"`'
+lt_cv_prog_compiler_c_o='`$ECHO "X$lt_cv_prog_compiler_c_o" | $Xsed -e "$delay_single_quote_subst"`'
+need_locks='`$ECHO "X$need_locks" | $Xsed -e "$delay_single_quote_subst"`'
+DSYMUTIL='`$ECHO "X$DSYMUTIL" | $Xsed -e "$delay_single_quote_subst"`'
+NMEDIT='`$ECHO "X$NMEDIT" | $Xsed -e "$delay_single_quote_subst"`'
+LIPO='`$ECHO "X$LIPO" | $Xsed -e "$delay_single_quote_subst"`'
+OTOOL='`$ECHO "X$OTOOL" | $Xsed -e "$delay_single_quote_subst"`'
+OTOOL64='`$ECHO "X$OTOOL64" | $Xsed -e "$delay_single_quote_subst"`'
+libext='`$ECHO "X$libext" | $Xsed -e "$delay_single_quote_subst"`'
+shrext_cmds='`$ECHO "X$shrext_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+extract_expsyms_cmds='`$ECHO "X$extract_expsyms_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+archive_cmds_need_lc='`$ECHO "X$archive_cmds_need_lc" | $Xsed -e "$delay_single_quote_subst"`'
+enable_shared_with_static_runtimes='`$ECHO "X$enable_shared_with_static_runtimes" | $Xsed -e "$delay_single_quote_subst"`'
+export_dynamic_flag_spec='`$ECHO "X$export_dynamic_flag_spec" | $Xsed -e "$delay_single_quote_subst"`'
+whole_archive_flag_spec='`$ECHO "X$whole_archive_flag_spec" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_needs_object='`$ECHO "X$compiler_needs_object" | $Xsed -e "$delay_single_quote_subst"`'
+old_archive_from_new_cmds='`$ECHO "X$old_archive_from_new_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+old_archive_from_expsyms_cmds='`$ECHO "X$old_archive_from_expsyms_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+archive_cmds='`$ECHO "X$archive_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+archive_expsym_cmds='`$ECHO "X$archive_expsym_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+module_cmds='`$ECHO "X$module_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+module_expsym_cmds='`$ECHO "X$module_expsym_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+with_gnu_ld='`$ECHO "X$with_gnu_ld" | $Xsed -e "$delay_single_quote_subst"`'
+allow_undefined_flag='`$ECHO "X$allow_undefined_flag" | $Xsed -e "$delay_single_quote_subst"`'
+no_undefined_flag='`$ECHO "X$no_undefined_flag" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_libdir_flag_spec='`$ECHO "X$hardcode_libdir_flag_spec" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_libdir_flag_spec_ld='`$ECHO "X$hardcode_libdir_flag_spec_ld" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_libdir_separator='`$ECHO "X$hardcode_libdir_separator" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_direct='`$ECHO "X$hardcode_direct" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_direct_absolute='`$ECHO "X$hardcode_direct_absolute" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_minus_L='`$ECHO "X$hardcode_minus_L" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_shlibpath_var='`$ECHO "X$hardcode_shlibpath_var" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_automatic='`$ECHO "X$hardcode_automatic" | $Xsed -e "$delay_single_quote_subst"`'
+inherit_rpath='`$ECHO "X$inherit_rpath" | $Xsed -e "$delay_single_quote_subst"`'
+link_all_deplibs='`$ECHO "X$link_all_deplibs" | $Xsed -e "$delay_single_quote_subst"`'
+fix_srcfile_path='`$ECHO "X$fix_srcfile_path" | $Xsed -e "$delay_single_quote_subst"`'
+always_export_symbols='`$ECHO "X$always_export_symbols" | $Xsed -e "$delay_single_quote_subst"`'
+export_symbols_cmds='`$ECHO "X$export_symbols_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+exclude_expsyms='`$ECHO "X$exclude_expsyms" | $Xsed -e "$delay_single_quote_subst"`'
+include_expsyms='`$ECHO "X$include_expsyms" | $Xsed -e "$delay_single_quote_subst"`'
+prelink_cmds='`$ECHO "X$prelink_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+file_list_spec='`$ECHO "X$file_list_spec" | $Xsed -e "$delay_single_quote_subst"`'
+variables_saved_for_relink='`$ECHO "X$variables_saved_for_relink" | $Xsed -e "$delay_single_quote_subst"`'
+need_lib_prefix='`$ECHO "X$need_lib_prefix" | $Xsed -e "$delay_single_quote_subst"`'
+need_version='`$ECHO "X$need_version" | $Xsed -e "$delay_single_quote_subst"`'
+version_type='`$ECHO "X$version_type" | $Xsed -e "$delay_single_quote_subst"`'
+runpath_var='`$ECHO "X$runpath_var" | $Xsed -e "$delay_single_quote_subst"`'
+shlibpath_var='`$ECHO "X$shlibpath_var" | $Xsed -e "$delay_single_quote_subst"`'
+shlibpath_overrides_runpath='`$ECHO "X$shlibpath_overrides_runpath" | $Xsed -e "$delay_single_quote_subst"`'
+libname_spec='`$ECHO "X$libname_spec" | $Xsed -e "$delay_single_quote_subst"`'
+library_names_spec='`$ECHO "X$library_names_spec" | $Xsed -e "$delay_single_quote_subst"`'
+soname_spec='`$ECHO "X$soname_spec" | $Xsed -e "$delay_single_quote_subst"`'
+postinstall_cmds='`$ECHO "X$postinstall_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+postuninstall_cmds='`$ECHO "X$postuninstall_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+finish_cmds='`$ECHO "X$finish_cmds" | $Xsed -e "$delay_single_quote_subst"`'
+finish_eval='`$ECHO "X$finish_eval" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_into_libs='`$ECHO "X$hardcode_into_libs" | $Xsed -e "$delay_single_quote_subst"`'
+sys_lib_search_path_spec='`$ECHO "X$sys_lib_search_path_spec" | $Xsed -e "$delay_single_quote_subst"`'
+sys_lib_dlsearch_path_spec='`$ECHO "X$sys_lib_dlsearch_path_spec" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_action='`$ECHO "X$hardcode_action" | $Xsed -e "$delay_single_quote_subst"`'
+enable_dlopen='`$ECHO "X$enable_dlopen" | $Xsed -e "$delay_single_quote_subst"`'
+enable_dlopen_self='`$ECHO "X$enable_dlopen_self" | $Xsed -e "$delay_single_quote_subst"`'
+enable_dlopen_self_static='`$ECHO "X$enable_dlopen_self_static" | $Xsed -e "$delay_single_quote_subst"`'
+old_striplib='`$ECHO "X$old_striplib" | $Xsed -e "$delay_single_quote_subst"`'
+striplib='`$ECHO "X$striplib" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_lib_search_dirs='`$ECHO "X$compiler_lib_search_dirs" | $Xsed -e "$delay_single_quote_subst"`'
+predep_objects='`$ECHO "X$predep_objects" | $Xsed -e "$delay_single_quote_subst"`'
+postdep_objects='`$ECHO "X$postdep_objects" | $Xsed -e "$delay_single_quote_subst"`'
+predeps='`$ECHO "X$predeps" | $Xsed -e "$delay_single_quote_subst"`'
+postdeps='`$ECHO "X$postdeps" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_lib_search_path='`$ECHO "X$compiler_lib_search_path" | $Xsed -e "$delay_single_quote_subst"`'
+LD_CXX='`$ECHO "X$LD_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+old_archive_cmds_CXX='`$ECHO "X$old_archive_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_CXX='`$ECHO "X$compiler_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+GCC_CXX='`$ECHO "X$GCC_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_no_builtin_flag_CXX='`$ECHO "X$lt_prog_compiler_no_builtin_flag_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_wl_CXX='`$ECHO "X$lt_prog_compiler_wl_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_pic_CXX='`$ECHO "X$lt_prog_compiler_pic_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+lt_prog_compiler_static_CXX='`$ECHO "X$lt_prog_compiler_static_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+lt_cv_prog_compiler_c_o_CXX='`$ECHO "X$lt_cv_prog_compiler_c_o_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+archive_cmds_need_lc_CXX='`$ECHO "X$archive_cmds_need_lc_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+enable_shared_with_static_runtimes_CXX='`$ECHO "X$enable_shared_with_static_runtimes_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+export_dynamic_flag_spec_CXX='`$ECHO "X$export_dynamic_flag_spec_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+whole_archive_flag_spec_CXX='`$ECHO "X$whole_archive_flag_spec_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_needs_object_CXX='`$ECHO "X$compiler_needs_object_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+old_archive_from_new_cmds_CXX='`$ECHO "X$old_archive_from_new_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+old_archive_from_expsyms_cmds_CXX='`$ECHO "X$old_archive_from_expsyms_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+archive_cmds_CXX='`$ECHO "X$archive_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+archive_expsym_cmds_CXX='`$ECHO "X$archive_expsym_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+module_cmds_CXX='`$ECHO "X$module_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+module_expsym_cmds_CXX='`$ECHO "X$module_expsym_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+with_gnu_ld_CXX='`$ECHO "X$with_gnu_ld_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+allow_undefined_flag_CXX='`$ECHO "X$allow_undefined_flag_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+no_undefined_flag_CXX='`$ECHO "X$no_undefined_flag_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_libdir_flag_spec_CXX='`$ECHO "X$hardcode_libdir_flag_spec_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_libdir_flag_spec_ld_CXX='`$ECHO "X$hardcode_libdir_flag_spec_ld_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_libdir_separator_CXX='`$ECHO "X$hardcode_libdir_separator_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_direct_CXX='`$ECHO "X$hardcode_direct_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_direct_absolute_CXX='`$ECHO "X$hardcode_direct_absolute_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_minus_L_CXX='`$ECHO "X$hardcode_minus_L_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_shlibpath_var_CXX='`$ECHO "X$hardcode_shlibpath_var_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_automatic_CXX='`$ECHO "X$hardcode_automatic_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+inherit_rpath_CXX='`$ECHO "X$inherit_rpath_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+link_all_deplibs_CXX='`$ECHO "X$link_all_deplibs_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+fix_srcfile_path_CXX='`$ECHO "X$fix_srcfile_path_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+always_export_symbols_CXX='`$ECHO "X$always_export_symbols_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+export_symbols_cmds_CXX='`$ECHO "X$export_symbols_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+exclude_expsyms_CXX='`$ECHO "X$exclude_expsyms_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+include_expsyms_CXX='`$ECHO "X$include_expsyms_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+prelink_cmds_CXX='`$ECHO "X$prelink_cmds_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+file_list_spec_CXX='`$ECHO "X$file_list_spec_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+hardcode_action_CXX='`$ECHO "X$hardcode_action_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_lib_search_dirs_CXX='`$ECHO "X$compiler_lib_search_dirs_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+predep_objects_CXX='`$ECHO "X$predep_objects_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+postdep_objects_CXX='`$ECHO "X$postdep_objects_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+predeps_CXX='`$ECHO "X$predeps_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+postdeps_CXX='`$ECHO "X$postdeps_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+compiler_lib_search_path_CXX='`$ECHO "X$compiler_lib_search_path_CXX" | $Xsed -e "$delay_single_quote_subst"`'
+
+LTCC='$LTCC'
+LTCFLAGS='$LTCFLAGS'
+compiler='$compiler_DEFAULT'
+
+# Quote evaled strings.
+for var in SED \
+GREP \
+EGREP \
+FGREP \
+LD \
+NM \
+LN_S \
+lt_SP2NL \
+lt_NL2SP \
+reload_flag \
+OBJDUMP \
+deplibs_check_method \
+file_magic_cmd \
+AR \
+AR_FLAGS \
+STRIP \
+RANLIB \
+CC \
+CFLAGS \
+compiler \
+lt_cv_sys_global_symbol_pipe \
+lt_cv_sys_global_symbol_to_cdecl \
+lt_cv_sys_global_symbol_to_c_name_address \
+lt_cv_sys_global_symbol_to_c_name_address_lib_prefix \
+SHELL \
+ECHO \
+lt_prog_compiler_no_builtin_flag \
+lt_prog_compiler_wl \
+lt_prog_compiler_pic \
+lt_prog_compiler_static \
+lt_cv_prog_compiler_c_o \
+need_locks \
+DSYMUTIL \
+NMEDIT \
+LIPO \
+OTOOL \
+OTOOL64 \
+shrext_cmds \
+export_dynamic_flag_spec \
+whole_archive_flag_spec \
+compiler_needs_object \
+with_gnu_ld \
+allow_undefined_flag \
+no_undefined_flag \
+hardcode_libdir_flag_spec \
+hardcode_libdir_flag_spec_ld \
+hardcode_libdir_separator \
+fix_srcfile_path \
+exclude_expsyms \
+include_expsyms \
+file_list_spec \
+variables_saved_for_relink \
+libname_spec \
+library_names_spec \
+soname_spec \
+finish_eval \
+old_striplib \
+striplib \
+compiler_lib_search_dirs \
+predep_objects \
+postdep_objects \
+predeps \
+postdeps \
+compiler_lib_search_path \
+LD_CXX \
+compiler_CXX \
+lt_prog_compiler_no_builtin_flag_CXX \
+lt_prog_compiler_wl_CXX \
+lt_prog_compiler_pic_CXX \
+lt_prog_compiler_static_CXX \
+lt_cv_prog_compiler_c_o_CXX \
+export_dynamic_flag_spec_CXX \
+whole_archive_flag_spec_CXX \
+compiler_needs_object_CXX \
+with_gnu_ld_CXX \
+allow_undefined_flag_CXX \
+no_undefined_flag_CXX \
+hardcode_libdir_flag_spec_CXX \
+hardcode_libdir_flag_spec_ld_CXX \
+hardcode_libdir_separator_CXX \
+fix_srcfile_path_CXX \
+exclude_expsyms_CXX \
+include_expsyms_CXX \
+file_list_spec_CXX \
+compiler_lib_search_dirs_CXX \
+predep_objects_CXX \
+postdep_objects_CXX \
+predeps_CXX \
+postdeps_CXX \
+compiler_lib_search_path_CXX; do
+    case \`eval \\\\\$ECHO "X\\\\\$\$var"\` in
+    *[\\\\\\\`\\"\\\$]*)
+      eval "lt_\$var=\\\\\\"\\\`\\\$ECHO \\"X\\\$\$var\\" | \\\$Xsed -e \\"\\\$sed_quote_subst\\"\\\`\\\\\\""
+      ;;
+    *)
+      eval "lt_\$var=\\\\\\"\\\$\$var\\\\\\""
+      ;;
+    esac
+done
+
+# Double-quote double-evaled strings.
+for var in reload_cmds \
+old_postinstall_cmds \
+old_postuninstall_cmds \
+old_archive_cmds \
+extract_expsyms_cmds \
+old_archive_from_new_cmds \
+old_archive_from_expsyms_cmds \
+archive_cmds \
+archive_expsym_cmds \
+module_cmds \
+module_expsym_cmds \
+export_symbols_cmds \
+prelink_cmds \
+postinstall_cmds \
+postuninstall_cmds \
+finish_cmds \
+sys_lib_search_path_spec \
+sys_lib_dlsearch_path_spec \
+old_archive_cmds_CXX \
+old_archive_from_new_cmds_CXX \
+old_archive_from_expsyms_cmds_CXX \
+archive_cmds_CXX \
+archive_expsym_cmds_CXX \
+module_cmds_CXX \
+module_expsym_cmds_CXX \
+export_symbols_cmds_CXX \
+prelink_cmds_CXX; do
+    case \`eval \\\\\$ECHO "X\\\\\$\$var"\` in
+    *[\\\\\\\`\\"\\\$]*)
+      eval "lt_\$var=\\\\\\"\\\`\\\$ECHO \\"X\\\$\$var\\" | \\\$Xsed -e \\"\\\$double_quote_subst\\" -e \\"\\\$sed_quote_subst\\" -e \\"\\\$delay_variable_subst\\"\\\`\\\\\\""
+      ;;
+    *)
+      eval "lt_\$var=\\\\\\"\\\$\$var\\\\\\""
+      ;;
+    esac
+done
+
+# Fix-up fallback echo if it was mangled by the above quoting rules.
+case \$lt_ECHO in
+*'\\\$0 --fallback-echo"')  lt_ECHO=\`\$ECHO "X\$lt_ECHO" | \$Xsed -e 's/\\\\\\\\\\\\\\\$0 --fallback-echo"\$/\$0 --fallback-echo"/'\`
+  ;;
+esac
+
+ac_aux_dir='$ac_aux_dir'
+xsi_shell='$xsi_shell'
+lt_shell_append='$lt_shell_append'
+
+# See if we are running on zsh, and set the options which allow our
+# commands through without removal of \ escapes INIT.
+if test -n "\${ZSH_VERSION+set}" ; then
+   setopt NO_GLOB_SUBST
+fi
+
+
+    PACKAGE='$PACKAGE'
+    VERSION='$VERSION'
+    TIMESTAMP='$TIMESTAMP'
+    RM='$RM'
+    ofile='$ofile'
+
+
+
+
+
+
+ax_create_pkgconfig_generate="$ax_create_pkgconfig_generate"
+pkgconfig_prefix='$prefix'
+pkgconfig_execprefix='$exec_prefix'
+pkgconfig_bindir='$bindir'
+pkgconfig_libdir='$libdir'
+pkgconfig_includedir='$includedir'
+pkgconfig_datarootdir='$datarootdir'
+pkgconfig_datadir='$datadir'
+pkgconfig_sysconfdir='$sysconfdir'
+pkgconfig_suffix='$ax_create_pkgconfig_suffix'
+pkgconfig_package='$PACKAGE_NAME'
+pkgconfig_libname='$ax_create_pkgconfig_libname'
+pkgconfig_description='$ax_create_pkgconfig_description'
+pkgconfig_version='$ax_create_pkgconfig_version'
+pkgconfig_requires='$ax_create_pkgconfig_requires'
+pkgconfig_libs='$ax_create_pkgconfig_libs'
+pkgconfig_ldflags='$ax_create_pkgconfig_ldflags'
+pkgconfig_cppflags='$ax_create_pkgconfig_cppflags'
+pkgconfig_src_libdir='$ax_create_pkgconfig_src_libdir'
+pkgconfig_src_headers='$ax_create_pkgconfig_src_headers'
+
+
+_ACEOF
+
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+
+# Handling of arguments.
+for ac_config_target in $ac_config_targets
+do
+  case $ac_config_target in
+    "depfiles") CONFIG_COMMANDS="$CONFIG_COMMANDS depfiles" ;;
+    "libtool") CONFIG_COMMANDS="$CONFIG_COMMANDS libtool" ;;
+    "config.h") CONFIG_HEADERS="$CONFIG_HEADERS config.h" ;;
+    "opensaml.spec") CONFIG_FILES="$CONFIG_FILES opensaml.spec" ;;
+    "pkginfo") CONFIG_FILES="$CONFIG_FILES pkginfo" ;;
+    "Portfile") CONFIG_FILES="$CONFIG_FILES Portfile" ;;
+    "Makefile") CONFIG_FILES="$CONFIG_FILES Makefile" ;;
+    "saml/Makefile") CONFIG_FILES="$CONFIG_FILES saml/Makefile" ;;
+    "samltest/Makefile") CONFIG_FILES="$CONFIG_FILES samltest/Makefile" ;;
+    "samlsign/Makefile") CONFIG_FILES="$CONFIG_FILES samlsign/Makefile" ;;
+    "schemas/Makefile") CONFIG_FILES="$CONFIG_FILES schemas/Makefile" ;;
+    "doc/Makefile") CONFIG_FILES="$CONFIG_FILES doc/Makefile" ;;
+    "$ax_create_pkgconfig_generate") CONFIG_COMMANDS="$CONFIG_COMMANDS $ax_create_pkgconfig_generate" ;;
+
+  *) as_fn_error $? "invalid argument: \`$ac_config_target'" "$LINENO" 5 ;;
+  esac
+done
+
+
+# If the user did not use the arguments to specify the items to instantiate,
+# then the envvar interface is used.  Set only those that are not.
+# We use the long form for the default assignment because of an extremely
+# bizarre bug on SunOS 4.1.3.
+if $ac_need_defaults; then
+  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
+  test "${CONFIG_HEADERS+set}" = set || CONFIG_HEADERS=$config_headers
+  test "${CONFIG_COMMANDS+set}" = set || CONFIG_COMMANDS=$config_commands
+fi
+
+# Have a temporary directory for convenience.  Make it in the build tree
+# simply because there is no reason against having it here, and in addition,
+# creating and moving files from /tmp can sometimes cause problems.
+# Hook for its removal unless debugging.
+# Note that there is a small window in which the directory will not be cleaned:
+# after its creation but before its name has been assigned to `$tmp'.
+$debug ||
+{
+  tmp=
+  trap 'exit_status=$?
+  { test -z "$tmp" || test ! -d "$tmp" || rm -fr "$tmp"; } && exit $exit_status
+' 0
+  trap 'as_fn_exit 1' 1 2 13 15
+}
+# Create a (secure) tmp directory for tmp files.
+
+{
+  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
+  test -n "$tmp" && test -d "$tmp"
+}  ||
+{
+  tmp=./conf$$-$RANDOM
+  (umask 077 && mkdir "$tmp")
+} || as_fn_error $? "cannot create a temporary directory in ." "$LINENO" 5
+
+# Set up the scripts for CONFIG_FILES section.
+# No need to generate them if there are no CONFIG_FILES.
+# This happens for instance with `./config.status config.h'.
+if test -n "$CONFIG_FILES"; then
+
+
+ac_cr=`echo X | tr X '\015'`
+# On cygwin, bash can eat \r inside `` if the user requested igncr.
+# But we know of no other shell where ac_cr would be empty at this
+# point, so we can use a bashism as a fallback.
+if test "x$ac_cr" = x; then
+  eval ac_cr=\$\'\\r\'
+fi
+ac_cs_awk_cr=`$AWK 'BEGIN { print "a\rb" }' </dev/null 2>/dev/null`
+if test "$ac_cs_awk_cr" = "a${ac_cr}b"; then
+  ac_cs_awk_cr='\\r'
+else
+  ac_cs_awk_cr=$ac_cr
+fi
+
+echo 'BEGIN {' >"$tmp/subs1.awk" &&
+_ACEOF
+
+
+{
+  echo "cat >conf$$subs.awk <<_ACEOF" &&
+  echo "$ac_subst_vars" | sed 's/.*/&!$&$ac_delim/' &&
+  echo "_ACEOF"
+} >conf$$subs.sh ||
+  as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
+ac_delim_num=`echo "$ac_subst_vars" | grep -c '^'`
+ac_delim='%!_!# '
+for ac_last_try in false false false false false :; do
+  . ./conf$$subs.sh ||
+    as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
+
+  ac_delim_n=`sed -n "s/.*$ac_delim\$/X/p" conf$$subs.awk | grep -c X`
+  if test $ac_delim_n = $ac_delim_num; then
+    break
+  elif $ac_last_try; then
+    as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
+  else
+    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
+  fi
+done
+rm -f conf$$subs.sh
+
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+cat >>"\$tmp/subs1.awk" <<\\_ACAWK &&
+_ACEOF
+sed -n '
+h
+s/^/S["/; s/!.*/"]=/
+p
+g
+s/^[^!]*!//
+:repl
+t repl
+s/'"$ac_delim"'$//
+t delim
+:nl
+h
+s/\(.\{148\}\)..*/\1/
+t more1
+s/["\\]/\\&/g; s/^/"/; s/$/\\n"\\/
+p
+n
+b repl
+:more1
+s/["\\]/\\&/g; s/^/"/; s/$/"\\/
+p
+g
+s/.\{148\}//
+t nl
+:delim
+h
+s/\(.\{148\}\)..*/\1/
+t more2
+s/["\\]/\\&/g; s/^/"/; s/$/"/
+p
+b
+:more2
+s/["\\]/\\&/g; s/^/"/; s/$/"\\/
+p
+g
+s/.\{148\}//
+t delim
+' <conf$$subs.awk | sed '
+/^[^""]/{
+  N
+  s/\n//
+}
+' >>$CONFIG_STATUS || ac_write_fail=1
+rm -f conf$$subs.awk
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+_ACAWK
+cat >>"\$tmp/subs1.awk" <<_ACAWK &&
+  for (key in S) S_is_set[key] = 1
+  FS = ""
+
+}
+{
+  line = $ 0
+  nfields = split(line, field, "@")
+  substed = 0
+  len = length(field[1])
+  for (i = 2; i < nfields; i++) {
+    key = field[i]
+    keylen = length(key)
+    if (S_is_set[key]) {
+      value = S[key]
+      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
+      len += length(value) + length(field[++i])
+      substed = 1
+    } else
+      len += 1 + keylen
+  }
+
+  print line
+}
+
+_ACAWK
+_ACEOF
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+if sed "s/$ac_cr//" < /dev/null > /dev/null 2>&1; then
+  sed "s/$ac_cr\$//; s/$ac_cr/$ac_cs_awk_cr/g"
+else
+  cat
+fi < "$tmp/subs1.awk" > "$tmp/subs.awk" \
+  || as_fn_error $? "could not setup config files machinery" "$LINENO" 5
+_ACEOF
+
+# VPATH may cause trouble with some makes, so we remove sole $(srcdir),
+# ${srcdir} and @srcdir@ entries from VPATH if srcdir is ".", strip leading and
+# trailing colons and then remove the whole line if VPATH becomes empty
+# (actually we leave an empty line to preserve line numbers).
+if test "x$srcdir" = x.; then
+  ac_vpsub='/^[	 ]*VPATH[	 ]*=[	 ]*/{
+h
+s///
+s/^/:/
+s/[	 ]*$/:/
+s/:\$(srcdir):/:/g
+s/:\${srcdir}:/:/g
+s/:@srcdir@:/:/g
+s/^:*//
+s/:*$//
+x
+s/\(=[	 ]*\).*/\1/
+G
+s/\n//
+s/^[^=]*=[	 ]*$//
+}'
+fi
+
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+fi # test -n "$CONFIG_FILES"
+
+# Set up the scripts for CONFIG_HEADERS section.
+# No need to generate them if there are no CONFIG_HEADERS.
+# This happens for instance with `./config.status Makefile'.
+if test -n "$CONFIG_HEADERS"; then
+cat >"$tmp/defines.awk" <<\_ACAWK ||
+BEGIN {
+_ACEOF
+
+# Transform confdefs.h into an awk script `defines.awk', embedded as
+# here-document in config.status, that substitutes the proper values into
+# config.h.in to produce config.h.
+
+# Create a delimiter string that does not exist in confdefs.h, to ease
+# handling of long lines.
+ac_delim='%!_!# '
+for ac_last_try in false false :; do
+  ac_t=`sed -n "/$ac_delim/p" confdefs.h`
+  if test -z "$ac_t"; then
+    break
+  elif $ac_last_try; then
+    as_fn_error $? "could not make $CONFIG_HEADERS" "$LINENO" 5
+  else
+    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
+  fi
+done
+
+# For the awk script, D is an array of macro values keyed by name,
+# likewise P contains macro parameters if any.  Preserve backslash
+# newline sequences.
+
+ac_word_re=[_$as_cr_Letters][_$as_cr_alnum]*
+sed -n '
+s/.\{148\}/&'"$ac_delim"'/g
+t rset
+:rset
+s/^[	 ]*#[	 ]*define[	 ][	 ]*/ /
+t def
+d
+:def
+s/\\$//
+t bsnl
+s/["\\]/\\&/g
+s/^ \('"$ac_word_re"'\)\(([^()]*)\)[	 ]*\(.*\)/P["\1"]="\2"\
+D["\1"]=" \3"/p
+s/^ \('"$ac_word_re"'\)[	 ]*\(.*\)/D["\1"]=" \2"/p
+d
+:bsnl
+s/["\\]/\\&/g
+s/^ \('"$ac_word_re"'\)\(([^()]*)\)[	 ]*\(.*\)/P["\1"]="\2"\
+D["\1"]=" \3\\\\\\n"\\/p
+t cont
+s/^ \('"$ac_word_re"'\)[	 ]*\(.*\)/D["\1"]=" \2\\\\\\n"\\/p
+t cont
+d
+:cont
+n
+s/.\{148\}/&'"$ac_delim"'/g
+t clear
+:clear
+s/\\$//
+t bsnlc
+s/["\\]/\\&/g; s/^/"/; s/$/"/p
+d
+:bsnlc
+s/["\\]/\\&/g; s/^/"/; s/$/\\\\\\n"\\/p
+b cont
+' <confdefs.h | sed '
+s/'"$ac_delim"'/"\\\
+"/g' >>$CONFIG_STATUS || ac_write_fail=1
+
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+  for (key in D) D_is_set[key] = 1
+  FS = ""
+}
+/^[\t ]*#[\t ]*(define|undef)[\t ]+$ac_word_re([\t (]|\$)/ {
+  line = \$ 0
+  split(line, arg, " ")
+  if (arg[1] == "#") {
+    defundef = arg[2]
+    mac1 = arg[3]
+  } else {
+    defundef = substr(arg[1], 2)
+    mac1 = arg[2]
+  }
+  split(mac1, mac2, "(") #)
+  macro = mac2[1]
+  prefix = substr(line, 1, index(line, defundef) - 1)
+  if (D_is_set[macro]) {
+    # Preserve the white space surrounding the "#".
+    print prefix "define", macro P[macro] D[macro]
+    next
+  } else {
+    # Replace #undef with comments.  This is necessary, for example,
+    # in the case of _POSIX_SOURCE, which is predefined and required
+    # on some systems where configure will not decide to define it.
+    if (defundef == "undef") {
+      print "/*", prefix defundef, macro, "*/"
+      next
+    }
+  }
+}
+{ print }
+_ACAWK
+_ACEOF
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+  as_fn_error $? "could not setup config headers machinery" "$LINENO" 5
+fi # test -n "$CONFIG_HEADERS"
+
+
+eval set X "  :F $CONFIG_FILES  :H $CONFIG_HEADERS    :C $CONFIG_COMMANDS"
+shift
+for ac_tag
+do
+  case $ac_tag in
+  :[FHLC]) ac_mode=$ac_tag; continue;;
+  esac
+  case $ac_mode$ac_tag in
+  :[FHL]*:*);;
+  :L* | :C*:*) as_fn_error $? "invalid tag \`$ac_tag'" "$LINENO" 5 ;;
+  :[FH]-) ac_tag=-:-;;
+  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;
+  esac
+  ac_save_IFS=$IFS
+  IFS=:
+  set x $ac_tag
+  IFS=$ac_save_IFS
+  shift
+  ac_file=$1
+  shift
+
+  case $ac_mode in
+  :L) ac_source=$1;;
+  :[FH])
+    ac_file_inputs=
+    for ac_f
+    do
+      case $ac_f in
+      -) ac_f="$tmp/stdin";;
+      *) # Look for the file first in the build tree, then in the source tree
+	 # (if the path is not absolute).  The absolute path cannot be DOS-style,
+	 # because $ac_f cannot contain `:'.
+	 test -f "$ac_f" ||
+	   case $ac_f in
+	   [\\/$]*) false;;
+	   *) test -f "$srcdir/$ac_f" && ac_f="$srcdir/$ac_f";;
+	   esac ||
+	   as_fn_error 1 "cannot find input file: \`$ac_f'" "$LINENO" 5 ;;
+      esac
+      case $ac_f in *\'*) ac_f=`$as_echo "$ac_f" | sed "s/'/'\\\\\\\\''/g"`;; esac
+      as_fn_append ac_file_inputs " '$ac_f'"
+    done
+
+    # Let's still pretend it is `configure' which instantiates (i.e., don't
+    # use $as_me), people would be surprised to read:
+    #    /* config.h.  Generated by config.status.  */
+    configure_input='Generated from '`
+	  $as_echo "$*" | sed 's|^[^:]*/||;s|:[^:]*/|, |g'
+	`' by configure.'
+    if test x"$ac_file" != x-; then
+      configure_input="$ac_file.  $configure_input"
+      { $as_echo "$as_me:${as_lineno-$LINENO}: creating $ac_file" >&5
+$as_echo "$as_me: creating $ac_file" >&6;}
+    fi
+    # Neutralize special characters interpreted by sed in replacement strings.
+    case $configure_input in #(
+    *\&* | *\|* | *\\* )
+       ac_sed_conf_input=`$as_echo "$configure_input" |
+       sed 's/[\\\\&|]/\\\\&/g'`;; #(
+    *) ac_sed_conf_input=$configure_input;;
+    esac
+
+    case $ac_tag in
+    *:-:* | *:-) cat >"$tmp/stdin" \
+      || as_fn_error $? "could not create $ac_file" "$LINENO" 5  ;;
+    esac
+    ;;
+  esac
+
+  ac_dir=`$as_dirname -- "$ac_file" ||
+$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$ac_file" : 'X\(//\)[^/]' \| \
+	 X"$ac_file" : 'X\(//\)$' \| \
+	 X"$ac_file" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$ac_file" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+  as_dir="$ac_dir"; as_fn_mkdir_p
+  ac_builddir=.
+
+case "$ac_dir" in
+.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
+*)
+  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
+  # A ".." for each directory in $ac_dir_suffix.
+  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
+  case $ac_top_builddir_sub in
+  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
+  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
+  esac ;;
+esac
+ac_abs_top_builddir=$ac_pwd
+ac_abs_builddir=$ac_pwd$ac_dir_suffix
+# for backward compatibility:
+ac_top_builddir=$ac_top_build_prefix
+
+case $srcdir in
+  .)  # We are building in place.
+    ac_srcdir=.
+    ac_top_srcdir=$ac_top_builddir_sub
+    ac_abs_top_srcdir=$ac_pwd ;;
+  [\\/]* | ?:[\\/]* )  # Absolute name.
+    ac_srcdir=$srcdir$ac_dir_suffix;
+    ac_top_srcdir=$srcdir
+    ac_abs_top_srcdir=$srcdir ;;
+  *) # Relative name.
+    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
+    ac_top_srcdir=$ac_top_build_prefix$srcdir
+    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
+esac
+ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix
+
+
+  case $ac_mode in
+  :F)
+  #
+  # CONFIG_FILE
+  #
+
+  case $INSTALL in
+  [\\/$]* | ?:[\\/]* ) ac_INSTALL=$INSTALL ;;
+  *) ac_INSTALL=$ac_top_build_prefix$INSTALL ;;
+  esac
+  ac_MKDIR_P=$MKDIR_P
+  case $MKDIR_P in
+  [\\/$]* | ?:[\\/]* ) ;;
+  */*) ac_MKDIR_P=$ac_top_build_prefix$MKDIR_P ;;
+  esac
+_ACEOF
+
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+# If the template does not know about datarootdir, expand it.
+# FIXME: This hack should be removed a few years after 2.60.
+ac_datarootdir_hack=; ac_datarootdir_seen=
+ac_sed_dataroot='
+/datarootdir/ {
+  p
+  q
+}
+/@datadir@/p
+/@docdir@/p
+/@infodir@/p
+/@localedir@/p
+/@mandir@/p'
+case `eval "sed -n \"\$ac_sed_dataroot\" $ac_file_inputs"` in
+*datarootdir*) ac_datarootdir_seen=yes;;
+*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)
+  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&5
+$as_echo "$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&2;}
+_ACEOF
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+  ac_datarootdir_hack='
+  s&@datadir@&$datadir&g
+  s&@docdir@&$docdir&g
+  s&@infodir@&$infodir&g
+  s&@localedir@&$localedir&g
+  s&@mandir@&$mandir&g
+  s&\\\${datarootdir}&$datarootdir&g' ;;
+esac
+_ACEOF
+
+# Neutralize VPATH when `$srcdir' = `.'.
+# Shell code in configure.ac might set extrasub.
+# FIXME: do we really want to maintain this feature?
+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
+ac_sed_extra="$ac_vpsub
+$extrasub
+_ACEOF
+cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
+:t
+/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
+s|@configure_input@|$ac_sed_conf_input|;t t
+s&@top_builddir@&$ac_top_builddir_sub&;t t
+s&@top_build_prefix@&$ac_top_build_prefix&;t t
+s&@srcdir@&$ac_srcdir&;t t
+s&@abs_srcdir@&$ac_abs_srcdir&;t t
+s&@top_srcdir@&$ac_top_srcdir&;t t
+s&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t
+s&@builddir@&$ac_builddir&;t t
+s&@abs_builddir@&$ac_abs_builddir&;t t
+s&@abs_top_builddir@&$ac_abs_top_builddir&;t t
+s&@INSTALL@&$ac_INSTALL&;t t
+s&@MKDIR_P@&$ac_MKDIR_P&;t t
+$ac_datarootdir_hack
+"
+eval sed \"\$ac_sed_extra\" "$ac_file_inputs" | $AWK -f "$tmp/subs.awk" >$tmp/out \
+  || as_fn_error $? "could not create $ac_file" "$LINENO" 5
+
+test -z "$ac_datarootdir_hack$ac_datarootdir_seen" &&
+  { ac_out=`sed -n '/\${datarootdir}/p' "$tmp/out"`; test -n "$ac_out"; } &&
+  { ac_out=`sed -n '/^[	 ]*datarootdir[	 ]*:*=/p' "$tmp/out"`; test -z "$ac_out"; } &&
+  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file contains a reference to the variable \`datarootdir'
+which seems to be undefined.  Please make sure it is defined" >&5
+$as_echo "$as_me: WARNING: $ac_file contains a reference to the variable \`datarootdir'
+which seems to be undefined.  Please make sure it is defined" >&2;}
+
+  rm -f "$tmp/stdin"
+  case $ac_file in
+  -) cat "$tmp/out" && rm -f "$tmp/out";;
+  *) rm -f "$ac_file" && mv "$tmp/out" "$ac_file";;
+  esac \
+  || as_fn_error $? "could not create $ac_file" "$LINENO" 5
+ ;;
+  :H)
+  #
+  # CONFIG_HEADER
+  #
+  if test x"$ac_file" != x-; then
+    {
+      $as_echo "/* $configure_input  */" \
+      && eval '$AWK -f "$tmp/defines.awk"' "$ac_file_inputs"
+    } >"$tmp/config.h" \
+      || as_fn_error $? "could not create $ac_file" "$LINENO" 5
+    if diff "$ac_file" "$tmp/config.h" >/dev/null 2>&1; then
+      { $as_echo "$as_me:${as_lineno-$LINENO}: $ac_file is unchanged" >&5
+$as_echo "$as_me: $ac_file is unchanged" >&6;}
+    else
+      rm -f "$ac_file"
+      mv "$tmp/config.h" "$ac_file" \
+	|| as_fn_error $? "could not create $ac_file" "$LINENO" 5
+    fi
+  else
+    $as_echo "/* $configure_input  */" \
+      && eval '$AWK -f "$tmp/defines.awk"' "$ac_file_inputs" \
+      || as_fn_error $? "could not create -" "$LINENO" 5
+  fi
+# Compute "$ac_file"'s index in $config_headers.
+_am_arg="$ac_file"
+_am_stamp_count=1
+for _am_header in $config_headers :; do
+  case $_am_header in
+    $_am_arg | $_am_arg:* )
+      break ;;
+    * )
+      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
+  esac
+done
+echo "timestamp for $_am_arg" >`$as_dirname -- "$_am_arg" ||
+$as_expr X"$_am_arg" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$_am_arg" : 'X\(//\)[^/]' \| \
+	 X"$_am_arg" : 'X\(//\)$' \| \
+	 X"$_am_arg" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$_am_arg" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`/stamp-h$_am_stamp_count
+ ;;
+
+  :C)  { $as_echo "$as_me:${as_lineno-$LINENO}: executing $ac_file commands" >&5
+$as_echo "$as_me: executing $ac_file commands" >&6;}
+ ;;
+  esac
+
+
+  case $ac_file$ac_mode in
+    "depfiles":C) test x"$AMDEP_TRUE" != x"" || {
+  # Autoconf 2.62 quotes --file arguments for eval, but not when files
+  # are listed without --file.  Let's play safe and only enable the eval
+  # if we detect the quoting.
+  case $CONFIG_FILES in
+  *\'*) eval set x "$CONFIG_FILES" ;;
+  *)   set x $CONFIG_FILES ;;
+  esac
+  shift
+  for mf
+  do
+    # Strip MF so we end up with the name of the file.
+    mf=`echo "$mf" | sed -e 's/:.*$//'`
+    # Check whether this is an Automake generated Makefile or not.
+    # We used to match only the files named `Makefile.in', but
+    # some people rename them; so instead we look at the file content.
+    # Grep'ing the first line is not enough: some people post-process
+    # each Makefile.in and add a new line on top of each file to say so.
+    # Grep'ing the whole file is not good either: AIX grep has a line
+    # limit of 2048, but all sed's we know have understand at least 4000.
+    if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
+      dirpart=`$as_dirname -- "$mf" ||
+$as_expr X"$mf" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$mf" : 'X\(//\)[^/]' \| \
+	 X"$mf" : 'X\(//\)$' \| \
+	 X"$mf" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$mf" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+    else
+      continue
+    fi
+    # Extract the definition of DEPDIR, am__include, and am__quote
+    # from the Makefile without running `make'.
+    DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
+    test -z "$DEPDIR" && continue
+    am__include=`sed -n 's/^am__include = //p' < "$mf"`
+    test -z "am__include" && continue
+    am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
+    # When using ansi2knr, U may be empty or an underscore; expand it
+    U=`sed -n 's/^U = //p' < "$mf"`
+    # Find all dependency output files, they are included files with
+    # $(DEPDIR) in their names.  We invoke sed twice because it is the
+    # simplest approach to changing $(DEPDIR) to its actual value in the
+    # expansion.
+    for file in `sed -n "
+      s/^$am__include $am__quote\(.*(DEPDIR).*\)$am__quote"'$/\1/p' <"$mf" | \
+	 sed -e 's/\$(DEPDIR)/'"$DEPDIR"'/g' -e 's/\$U/'"$U"'/g'`; do
+      # Make sure the directory exists.
+      test -f "$dirpart/$file" && continue
+      fdir=`$as_dirname -- "$file" ||
+$as_expr X"$file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$file" : 'X\(//\)[^/]' \| \
+	 X"$file" : 'X\(//\)$' \| \
+	 X"$file" : 'X\(/\)' \| . 2>/dev/null ||
+$as_echo X"$file" |
+    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)[^/].*/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\/\)$/{
+	    s//\1/
+	    q
+	  }
+	  /^X\(\/\).*/{
+	    s//\1/
+	    q
+	  }
+	  s/.*/./; q'`
+      as_dir=$dirpart/$fdir; as_fn_mkdir_p
+      # echo "creating $dirpart/$file"
+      echo '# dummy' > "$dirpart/$file"
+    done
+  done
+}
+ ;;
+    "libtool":C)
+
+    # See if we are running on zsh, and set the options which allow our
+    # commands through without removal of \ escapes.
+    if test -n "${ZSH_VERSION+set}" ; then
+      setopt NO_GLOB_SUBST
+    fi
+
+    cfgfile="${ofile}T"
+    trap "$RM \"$cfgfile\"; exit 1" 1 2 15
+    $RM "$cfgfile"
+
+    cat <<_LT_EOF >> "$cfgfile"
+#! $SHELL
+
+# `$ECHO "$ofile" | sed 's%^.*/%%'` - Provide generalized library-building support services.
+# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION
+# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:
+# NOTE: Changes made to this file will be lost: look at ltmain.sh.
+#
+#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,
+#                 2006, 2007, 2008 Free Software Foundation, Inc.
+#   Written by Gordon Matzigkeit, 1996
+#
+#   This file is part of GNU Libtool.
+#
+# GNU Libtool is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# As a special exception to the GNU General Public License,
+# if you distribute this file as part of a program or library that
+# is built using GNU Libtool, you may include this file under the
+# same distribution terms that you use for the rest of that program.
+#
+# GNU Libtool is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GNU Libtool; see the file COPYING.  If not, a copy
+# can be downloaded from http://www.gnu.org/licenses/gpl.html, or
+# obtained by writing to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+
+# The names of the tagged configurations supported by this script.
+available_tags="CXX "
+
+# ### BEGIN LIBTOOL CONFIG
+
+# Whether or not to build static libraries.
+build_old_libs=$enable_static
+
+# Which release of libtool.m4 was used?
+macro_version=$macro_version
+macro_revision=$macro_revision
+
+# Whether or not to build shared libraries.
+build_libtool_libs=$enable_shared
+
+# What type of objects to build.
+pic_mode=$pic_mode
+
+# Whether or not to optimize for fast installation.
+fast_install=$enable_fast_install
+
+# The host system.
+host_alias=$host_alias
+host=$host
+host_os=$host_os
+
+# The build system.
+build_alias=$build_alias
+build=$build
+build_os=$build_os
+
+# A sed program that does not truncate output.
+SED=$lt_SED
+
+# Sed that helps us avoid accidentally triggering echo(1) options like -n.
+Xsed="\$SED -e 1s/^X//"
+
+# A grep program that handles long lines.
+GREP=$lt_GREP
+
+# An ERE matcher.
+EGREP=$lt_EGREP
+
+# A literal string matcher.
+FGREP=$lt_FGREP
+
+# A BSD- or MS-compatible name lister.
+NM=$lt_NM
+
+# Whether we need soft or hard links.
+LN_S=$lt_LN_S
+
+# What is the maximum length of a command?
+max_cmd_len=$max_cmd_len
+
+# Object file suffix (normally "o").
+objext=$ac_objext
+
+# Executable file suffix (normally "").
+exeext=$exeext
+
+# whether the shell understands "unset".
+lt_unset=$lt_unset
+
+# turn spaces into newlines.
+SP2NL=$lt_lt_SP2NL
+
+# turn newlines into spaces.
+NL2SP=$lt_lt_NL2SP
+
+# How to create reloadable object files.
+reload_flag=$lt_reload_flag
+reload_cmds=$lt_reload_cmds
+
+# An object symbol dumper.
+OBJDUMP=$lt_OBJDUMP
+
+# Method to check whether dependent libraries are shared objects.
+deplibs_check_method=$lt_deplibs_check_method
+
+# Command to use when deplibs_check_method == "file_magic".
+file_magic_cmd=$lt_file_magic_cmd
+
+# The archiver.
+AR=$lt_AR
+AR_FLAGS=$lt_AR_FLAGS
+
+# A symbol stripping program.
+STRIP=$lt_STRIP
+
+# Commands used to install an old-style archive.
+RANLIB=$lt_RANLIB
+old_postinstall_cmds=$lt_old_postinstall_cmds
+old_postuninstall_cmds=$lt_old_postuninstall_cmds
+
+# A C compiler.
+LTCC=$lt_CC
+
+# LTCC compiler flags.
+LTCFLAGS=$lt_CFLAGS
+
+# Take the output of nm and produce a listing of raw symbols and C names.
+global_symbol_pipe=$lt_lt_cv_sys_global_symbol_pipe
+
+# Transform the output of nm in a proper C declaration.
+global_symbol_to_cdecl=$lt_lt_cv_sys_global_symbol_to_cdecl
+
+# Transform the output of nm in a C name address pair.
+global_symbol_to_c_name_address=$lt_lt_cv_sys_global_symbol_to_c_name_address
+
+# Transform the output of nm in a C name address pair when lib prefix is needed.
+global_symbol_to_c_name_address_lib_prefix=$lt_lt_cv_sys_global_symbol_to_c_name_address_lib_prefix
+
+# The name of the directory that contains temporary libtool files.
+objdir=$objdir
+
+# Shell to use when invoking shell scripts.
+SHELL=$lt_SHELL
+
+# An echo program that does not interpret backslashes.
+ECHO=$lt_ECHO
+
+# Used to examine libraries when file_magic_cmd begins with "file".
+MAGIC_CMD=$MAGIC_CMD
+
+# Must we lock files when doing compilation?
+need_locks=$lt_need_locks
+
+# Tool to manipulate archived DWARF debug symbol files on Mac OS X.
+DSYMUTIL=$lt_DSYMUTIL
+
+# Tool to change global to local symbols on Mac OS X.
+NMEDIT=$lt_NMEDIT
+
+# Tool to manipulate fat objects and archives on Mac OS X.
+LIPO=$lt_LIPO
+
+# ldd/readelf like tool for Mach-O binaries on Mac OS X.
+OTOOL=$lt_OTOOL
+
+# ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4.
+OTOOL64=$lt_OTOOL64
+
+# Old archive suffix (normally "a").
+libext=$libext
+
+# Shared library suffix (normally ".so").
+shrext_cmds=$lt_shrext_cmds
+
+# The commands to extract the exported symbol list from a shared archive.
+extract_expsyms_cmds=$lt_extract_expsyms_cmds
+
+# Variables whose values should be saved in libtool wrapper scripts and
+# restored at link time.
+variables_saved_for_relink=$lt_variables_saved_for_relink
+
+# Do we need the "lib" prefix for modules?
+need_lib_prefix=$need_lib_prefix
+
+# Do we need a version for libraries?
+need_version=$need_version
+
+# Library versioning type.
+version_type=$version_type
+
+# Shared library runtime path variable.
+runpath_var=$runpath_var
+
+# Shared library path variable.
+shlibpath_var=$shlibpath_var
+
+# Is shlibpath searched before the hard-coded library search path?
+shlibpath_overrides_runpath=$shlibpath_overrides_runpath
+
+# Format of library name prefix.
+libname_spec=$lt_libname_spec
+
+# List of archive names.  First name is the real one, the rest are links.
+# The last name is the one that the linker finds with -lNAME
+library_names_spec=$lt_library_names_spec
+
+# The coded name of the library, if different from the real name.
+soname_spec=$lt_soname_spec
+
+# Command to use after installation of a shared archive.
+postinstall_cmds=$lt_postinstall_cmds
+
+# Command to use after uninstallation of a shared archive.
+postuninstall_cmds=$lt_postuninstall_cmds
+
+# Commands used to finish a libtool library installation in a directory.
+finish_cmds=$lt_finish_cmds
+
+# As "finish_cmds", except a single script fragment to be evaled but
+# not shown.
+finish_eval=$lt_finish_eval
+
+# Whether we should hardcode library paths into libraries.
+hardcode_into_libs=$hardcode_into_libs
+
+# Compile-time system search path for libraries.
+sys_lib_search_path_spec=$lt_sys_lib_search_path_spec
+
+# Run-time system search path for libraries.
+sys_lib_dlsearch_path_spec=$lt_sys_lib_dlsearch_path_spec
+
+# Whether dlopen is supported.
+dlopen_support=$enable_dlopen
+
+# Whether dlopen of programs is supported.
+dlopen_self=$enable_dlopen_self
+
+# Whether dlopen of statically linked programs is supported.
+dlopen_self_static=$enable_dlopen_self_static
+
+# Commands to strip libraries.
+old_striplib=$lt_old_striplib
+striplib=$lt_striplib
+
+
+# The linker used to build libraries.
+LD=$lt_LD
+
+# Commands used to build an old-style archive.
+old_archive_cmds=$lt_old_archive_cmds
+
+# A language specific compiler.
+CC=$lt_compiler
+
+# Is the compiler the GNU compiler?
+with_gcc=$GCC
+
+# Compiler flag to turn off builtin functions.
+no_builtin_flag=$lt_lt_prog_compiler_no_builtin_flag
+
+# How to pass a linker flag through the compiler.
+wl=$lt_lt_prog_compiler_wl
+
+# Additional compiler flags for building library objects.
+pic_flag=$lt_lt_prog_compiler_pic
+
+# Compiler flag to prevent dynamic linking.
+link_static_flag=$lt_lt_prog_compiler_static
+
+# Does compiler simultaneously support -c and -o options?
+compiler_c_o=$lt_lt_cv_prog_compiler_c_o
+
+# Whether or not to add -lc for building shared libraries.
+build_libtool_need_lc=$archive_cmds_need_lc
+
+# Whether or not to disallow shared libs when runtime libs are static.
+allow_libtool_libs_with_static_runtimes=$enable_shared_with_static_runtimes
+
+# Compiler flag to allow reflexive dlopens.
+export_dynamic_flag_spec=$lt_export_dynamic_flag_spec
+
+# Compiler flag to generate shared objects directly from archives.
+whole_archive_flag_spec=$lt_whole_archive_flag_spec
+
+# Whether the compiler copes with passing no objects directly.
+compiler_needs_object=$lt_compiler_needs_object
+
+# Create an old-style archive from a shared archive.
+old_archive_from_new_cmds=$lt_old_archive_from_new_cmds
+
+# Create a temporary old-style archive to link instead of a shared archive.
+old_archive_from_expsyms_cmds=$lt_old_archive_from_expsyms_cmds
+
+# Commands used to build a shared archive.
+archive_cmds=$lt_archive_cmds
+archive_expsym_cmds=$lt_archive_expsym_cmds
+
+# Commands used to build a loadable module if different from building
+# a shared archive.
+module_cmds=$lt_module_cmds
+module_expsym_cmds=$lt_module_expsym_cmds
+
+# Whether we are building with GNU ld or not.
+with_gnu_ld=$lt_with_gnu_ld
+
+# Flag that allows shared libraries with undefined symbols to be built.
+allow_undefined_flag=$lt_allow_undefined_flag
+
+# Flag that enforces no undefined symbols.
+no_undefined_flag=$lt_no_undefined_flag
+
+# Flag to hardcode \$libdir into a binary during linking.
+# This must work even if \$libdir does not exist
+hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec
+
+# If ld is used when linking, flag to hardcode \$libdir into a binary
+# during linking.  This must work even if \$libdir does not exist.
+hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld
+
+# Whether we need a single "-rpath" flag with a separated argument.
+hardcode_libdir_separator=$lt_hardcode_libdir_separator
+
+# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
+# DIR into the resulting binary.
+hardcode_direct=$hardcode_direct
+
+# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
+# DIR into the resulting binary and the resulting library dependency is
+# "absolute",i.e impossible to change by setting \${shlibpath_var} if the
+# library is relocated.
+hardcode_direct_absolute=$hardcode_direct_absolute
+
+# Set to "yes" if using the -LDIR flag during linking hardcodes DIR
+# into the resulting binary.
+hardcode_minus_L=$hardcode_minus_L
+
+# Set to "yes" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR
+# into the resulting binary.
+hardcode_shlibpath_var=$hardcode_shlibpath_var
+
+# Set to "yes" if building a shared library automatically hardcodes DIR
+# into the library and all subsequent libraries and executables linked
+# against it.
+hardcode_automatic=$hardcode_automatic
+
+# Set to yes if linker adds runtime paths of dependent libraries
+# to runtime path list.
+inherit_rpath=$inherit_rpath
+
+# Whether libtool must link a program against all its dependency libraries.
+link_all_deplibs=$link_all_deplibs
+
+# Fix the shell variable \$srcfile for the compiler.
+fix_srcfile_path=$lt_fix_srcfile_path
+
+# Set to "yes" if exported symbols are required.
+always_export_symbols=$always_export_symbols
+
+# The commands to list exported symbols.
+export_symbols_cmds=$lt_export_symbols_cmds
+
+# Symbols that should not be listed in the preloaded symbols.
+exclude_expsyms=$lt_exclude_expsyms
+
+# Symbols that must always be exported.
+include_expsyms=$lt_include_expsyms
+
+# Commands necessary for linking programs (against libraries) with templates.
+prelink_cmds=$lt_prelink_cmds
+
+# Specify filename containing input files.
+file_list_spec=$lt_file_list_spec
+
+# How to hardcode a shared library path into an executable.
+hardcode_action=$hardcode_action
+
+# The directories searched by this compiler when creating a shared library.
+compiler_lib_search_dirs=$lt_compiler_lib_search_dirs
+
+# Dependencies to place before and after the objects being linked to
+# create a shared library.
+predep_objects=$lt_predep_objects
+postdep_objects=$lt_postdep_objects
+predeps=$lt_predeps
+postdeps=$lt_postdeps
+
+# The library search path used internally by the compiler when linking
+# a shared library.
+compiler_lib_search_path=$lt_compiler_lib_search_path
+
+# ### END LIBTOOL CONFIG
+
+_LT_EOF
+
+  case $host_os in
+  aix3*)
+    cat <<\_LT_EOF >> "$cfgfile"
+# AIX sometimes has problems with the GCC collect2 program.  For some
+# reason, if we set the COLLECT_NAMES environment variable, the problems
+# vanish in a puff of smoke.
+if test "X${COLLECT_NAMES+set}" != Xset; then
+  COLLECT_NAMES=
+  export COLLECT_NAMES
+fi
+_LT_EOF
+    ;;
+  esac
+
+
+ltmain="$ac_aux_dir/ltmain.sh"
+
+
+  # We use sed instead of cat because bash on DJGPP gets confused if
+  # if finds mixed CR/LF and LF-only lines.  Since sed operates in
+  # text mode, it properly converts lines to CR/LF.  This bash problem
+  # is reportedly fixed, but why not run on old versions too?
+  sed '/^# Generated shell functions inserted here/q' "$ltmain" >> "$cfgfile" \
+    || (rm -f "$cfgfile"; exit 1)
+
+  case $xsi_shell in
+  yes)
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_dirname file append nondir_replacement
+# Compute the dirname of FILE.  If nonempty, add APPEND to the result,
+# otherwise set result to NONDIR_REPLACEMENT.
+func_dirname ()
+{
+  case ${1} in
+    */*) func_dirname_result="${1%/*}${2}" ;;
+    *  ) func_dirname_result="${3}" ;;
+  esac
+}
+
+# func_basename file
+func_basename ()
+{
+  func_basename_result="${1##*/}"
+}
+
+# func_dirname_and_basename file append nondir_replacement
+# perform func_basename and func_dirname in a single function
+# call:
+#   dirname:  Compute the dirname of FILE.  If nonempty,
+#             add APPEND to the result, otherwise set result
+#             to NONDIR_REPLACEMENT.
+#             value returned in "$func_dirname_result"
+#   basename: Compute filename of FILE.
+#             value retuned in "$func_basename_result"
+# Implementation must be kept synchronized with func_dirname
+# and func_basename. For efficiency, we do not delegate to
+# those functions but instead duplicate the functionality here.
+func_dirname_and_basename ()
+{
+  case ${1} in
+    */*) func_dirname_result="${1%/*}${2}" ;;
+    *  ) func_dirname_result="${3}" ;;
+  esac
+  func_basename_result="${1##*/}"
+}
+
+# func_stripname prefix suffix name
+# strip PREFIX and SUFFIX off of NAME.
+# PREFIX and SUFFIX must not contain globbing or regex special
+# characters, hashes, percent signs, but SUFFIX may contain a leading
+# dot (in which case that matches only a dot).
+func_stripname ()
+{
+  # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are
+  # positional parameters, so assign one to ordinary parameter first.
+  func_stripname_result=${3}
+  func_stripname_result=${func_stripname_result#"${1}"}
+  func_stripname_result=${func_stripname_result%"${2}"}
+}
+
+# func_opt_split
+func_opt_split ()
+{
+  func_opt_split_opt=${1%%=*}
+  func_opt_split_arg=${1#*=}
+}
+
+# func_lo2o object
+func_lo2o ()
+{
+  case ${1} in
+    *.lo) func_lo2o_result=${1%.lo}.${objext} ;;
+    *)    func_lo2o_result=${1} ;;
+  esac
+}
+
+# func_xform libobj-or-source
+func_xform ()
+{
+  func_xform_result=${1%.*}.lo
+}
+
+# func_arith arithmetic-term...
+func_arith ()
+{
+  func_arith_result=$(( $* ))
+}
+
+# func_len string
+# STRING may not start with a hyphen.
+func_len ()
+{
+  func_len_result=${#1}
+}
+
+_LT_EOF
+    ;;
+  *) # Bourne compatible functions.
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_dirname file append nondir_replacement
+# Compute the dirname of FILE.  If nonempty, add APPEND to the result,
+# otherwise set result to NONDIR_REPLACEMENT.
+func_dirname ()
+{
+  # Extract subdirectory from the argument.
+  func_dirname_result=`$ECHO "X${1}" | $Xsed -e "$dirname"`
+  if test "X$func_dirname_result" = "X${1}"; then
+    func_dirname_result="${3}"
+  else
+    func_dirname_result="$func_dirname_result${2}"
+  fi
+}
+
+# func_basename file
+func_basename ()
+{
+  func_basename_result=`$ECHO "X${1}" | $Xsed -e "$basename"`
+}
+
+
+# func_stripname prefix suffix name
+# strip PREFIX and SUFFIX off of NAME.
+# PREFIX and SUFFIX must not contain globbing or regex special
+# characters, hashes, percent signs, but SUFFIX may contain a leading
+# dot (in which case that matches only a dot).
+# func_strip_suffix prefix name
+func_stripname ()
+{
+  case ${2} in
+    .*) func_stripname_result=`$ECHO "X${3}" \
+           | $Xsed -e "s%^${1}%%" -e "s%\\\\${2}\$%%"`;;
+    *)  func_stripname_result=`$ECHO "X${3}" \
+           | $Xsed -e "s%^${1}%%" -e "s%${2}\$%%"`;;
+  esac
+}
+
+# sed scripts:
+my_sed_long_opt='1s/^\(-[^=]*\)=.*/\1/;q'
+my_sed_long_arg='1s/^-[^=]*=//'
+
+# func_opt_split
+func_opt_split ()
+{
+  func_opt_split_opt=`$ECHO "X${1}" | $Xsed -e "$my_sed_long_opt"`
+  func_opt_split_arg=`$ECHO "X${1}" | $Xsed -e "$my_sed_long_arg"`
+}
+
+# func_lo2o object
+func_lo2o ()
+{
+  func_lo2o_result=`$ECHO "X${1}" | $Xsed -e "$lo2o"`
+}
+
+# func_xform libobj-or-source
+func_xform ()
+{
+  func_xform_result=`$ECHO "X${1}" | $Xsed -e 's/\.[^.]*$/.lo/'`
+}
+
+# func_arith arithmetic-term...
+func_arith ()
+{
+  func_arith_result=`expr "$@"`
+}
+
+# func_len string
+# STRING may not start with a hyphen.
+func_len ()
+{
+  func_len_result=`expr "$1" : ".*" 2>/dev/null || echo $max_cmd_len`
+}
+
+_LT_EOF
+esac
+
+case $lt_shell_append in
+  yes)
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_append var value
+# Append VALUE to the end of shell variable VAR.
+func_append ()
+{
+  eval "$1+=\$2"
+}
+_LT_EOF
+    ;;
+  *)
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_append var value
+# Append VALUE to the end of shell variable VAR.
+func_append ()
+{
+  eval "$1=\$$1\$2"
+}
+
+_LT_EOF
+    ;;
+  esac
+
+
+  sed -n '/^# Generated shell functions inserted here/,$p' "$ltmain" >> "$cfgfile" \
+    || (rm -f "$cfgfile"; exit 1)
+
+  mv -f "$cfgfile" "$ofile" ||
+    (rm -f "$ofile" && cp "$cfgfile" "$ofile" && rm -f "$cfgfile")
+  chmod +x "$ofile"
+
+
+    cat <<_LT_EOF >> "$ofile"
+
+# ### BEGIN LIBTOOL TAG CONFIG: CXX
+
+# The linker used to build libraries.
+LD=$lt_LD_CXX
+
+# Commands used to build an old-style archive.
+old_archive_cmds=$lt_old_archive_cmds_CXX
+
+# A language specific compiler.
+CC=$lt_compiler_CXX
+
+# Is the compiler the GNU compiler?
+with_gcc=$GCC_CXX
+
+# Compiler flag to turn off builtin functions.
+no_builtin_flag=$lt_lt_prog_compiler_no_builtin_flag_CXX
+
+# How to pass a linker flag through the compiler.
+wl=$lt_lt_prog_compiler_wl_CXX
+
+# Additional compiler flags for building library objects.
+pic_flag=$lt_lt_prog_compiler_pic_CXX
+
+# Compiler flag to prevent dynamic linking.
+link_static_flag=$lt_lt_prog_compiler_static_CXX
+
+# Does compiler simultaneously support -c and -o options?
+compiler_c_o=$lt_lt_cv_prog_compiler_c_o_CXX
+
+# Whether or not to add -lc for building shared libraries.
+build_libtool_need_lc=$archive_cmds_need_lc_CXX
+
+# Whether or not to disallow shared libs when runtime libs are static.
+allow_libtool_libs_with_static_runtimes=$enable_shared_with_static_runtimes_CXX
+
+# Compiler flag to allow reflexive dlopens.
+export_dynamic_flag_spec=$lt_export_dynamic_flag_spec_CXX
+
+# Compiler flag to generate shared objects directly from archives.
+whole_archive_flag_spec=$lt_whole_archive_flag_spec_CXX
+
+# Whether the compiler copes with passing no objects directly.
+compiler_needs_object=$lt_compiler_needs_object_CXX
+
+# Create an old-style archive from a shared archive.
+old_archive_from_new_cmds=$lt_old_archive_from_new_cmds_CXX
+
+# Create a temporary old-style archive to link instead of a shared archive.
+old_archive_from_expsyms_cmds=$lt_old_archive_from_expsyms_cmds_CXX
+
+# Commands used to build a shared archive.
+archive_cmds=$lt_archive_cmds_CXX
+archive_expsym_cmds=$lt_archive_expsym_cmds_CXX
+
+# Commands used to build a loadable module if different from building
+# a shared archive.
+module_cmds=$lt_module_cmds_CXX
+module_expsym_cmds=$lt_module_expsym_cmds_CXX
+
+# Whether we are building with GNU ld or not.
+with_gnu_ld=$lt_with_gnu_ld_CXX
+
+# Flag that allows shared libraries with undefined symbols to be built.
+allow_undefined_flag=$lt_allow_undefined_flag_CXX
+
+# Flag that enforces no undefined symbols.
+no_undefined_flag=$lt_no_undefined_flag_CXX
+
+# Flag to hardcode \$libdir into a binary during linking.
+# This must work even if \$libdir does not exist
+hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec_CXX
+
+# If ld is used when linking, flag to hardcode \$libdir into a binary
+# during linking.  This must work even if \$libdir does not exist.
+hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld_CXX
+
+# Whether we need a single "-rpath" flag with a separated argument.
+hardcode_libdir_separator=$lt_hardcode_libdir_separator_CXX
+
+# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
+# DIR into the resulting binary.
+hardcode_direct=$hardcode_direct_CXX
+
+# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
+# DIR into the resulting binary and the resulting library dependency is
+# "absolute",i.e impossible to change by setting \${shlibpath_var} if the
+# library is relocated.
+hardcode_direct_absolute=$hardcode_direct_absolute_CXX
+
+# Set to "yes" if using the -LDIR flag during linking hardcodes DIR
+# into the resulting binary.
+hardcode_minus_L=$hardcode_minus_L_CXX
+
+# Set to "yes" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR
+# into the resulting binary.
+hardcode_shlibpath_var=$hardcode_shlibpath_var_CXX
+
+# Set to "yes" if building a shared library automatically hardcodes DIR
+# into the library and all subsequent libraries and executables linked
+# against it.
+hardcode_automatic=$hardcode_automatic_CXX
+
+# Set to yes if linker adds runtime paths of dependent libraries
+# to runtime path list.
+inherit_rpath=$inherit_rpath_CXX
+
+# Whether libtool must link a program against all its dependency libraries.
+link_all_deplibs=$link_all_deplibs_CXX
+
+# Fix the shell variable \$srcfile for the compiler.
+fix_srcfile_path=$lt_fix_srcfile_path_CXX
+
+# Set to "yes" if exported symbols are required.
+always_export_symbols=$always_export_symbols_CXX
+
+# The commands to list exported symbols.
+export_symbols_cmds=$lt_export_symbols_cmds_CXX
+
+# Symbols that should not be listed in the preloaded symbols.
+exclude_expsyms=$lt_exclude_expsyms_CXX
+
+# Symbols that must always be exported.
+include_expsyms=$lt_include_expsyms_CXX
+
+# Commands necessary for linking programs (against libraries) with templates.
+prelink_cmds=$lt_prelink_cmds_CXX
+
+# Specify filename containing input files.
+file_list_spec=$lt_file_list_spec_CXX
+
+# How to hardcode a shared library path into an executable.
+hardcode_action=$hardcode_action_CXX
+
+# The directories searched by this compiler when creating a shared library.
+compiler_lib_search_dirs=$lt_compiler_lib_search_dirs_CXX
+
+# Dependencies to place before and after the objects being linked to
+# create a shared library.
+predep_objects=$lt_predep_objects_CXX
+postdep_objects=$lt_postdep_objects_CXX
+predeps=$lt_predeps_CXX
+postdeps=$lt_postdeps_CXX
+
+# The library search path used internally by the compiler when linking
+# a shared library.
+compiler_lib_search_path=$lt_compiler_lib_search_path_CXX
+
+# ### END LIBTOOL TAG CONFIG: CXX
+_LT_EOF
+
+ ;;
+    "$ax_create_pkgconfig_generate":C)
+pkgconfig_generate="$ax_create_pkgconfig_generate"
+if test ! -f "$pkgconfig_generate.in"
+then generate="true"
+elif grep ' generated by configure ' $pkgconfig_generate.in >/dev/null
+then generate="true"
+else generate="false";
+fi
+if $generate ; then
+{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $pkgconfig_generate.in" >&5
+$as_echo "$as_me: creating $pkgconfig_generate.in" >&6;}
+cat > $pkgconfig_generate.in <<AXEOF
+# generated by configure / remove this line to disable regeneration
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+bindir=@bindir@
+libdir=@libdir@
+datarootdir=@datarootdir@
+datadir=@datadir@
+sysconfdir=@sysconfdir@
+includedir=@includedir@
+package=@PACKAGE@
+suffix=@suffix@
+
+Name: @PACKAGE_NAME@
+Description: @PACKAGE_DESCRIPTION@
+Version: @PACKAGE_VERSION@
+Requires: @PACKAGE_REQUIRES@
+Libs: -L\${libdir} @LDFLAGS@ @LIBS@
+Cflags: -I\${includedir} @CPPFLAGS@
+AXEOF
+fi # DONE generate $pkgconfig_generate.in
+{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $pkgconfig_generate" >&5
+$as_echo "$as_me: creating $pkgconfig_generate" >&6;}
+cat >conftest.sed <<AXEOF
+s|@prefix@|${pkgconfig_prefix}|
+s|@exec_prefix@|${pkgconfig_execprefix}|
+s|@bindir@|${pkgconfig_bindir}|
+s|@libdir@|${pkgconfig_libdir}|
+s|@datarootdir@|${pkgconfig_datarootdir}|
+s|@datadir@|${pkgconfig_datadir}|
+s|@sysconfdir@|${pkgconfig_sysconfdir}|
+s|@includedir@|${pkgconfig_includedir}|
+s|@suffix@|${pkgconfig_suffix}|
+s|@PACKAGE@|${pkgconfig_package}|
+s|@PACKAGE_NAME@|${pkgconfig_libname}|
+s|@PACKAGE_DESCRIPTION@|${pkgconfig_description}|
+s|@PACKAGE_VERSION@|${pkgconfig_version}|
+s|@PACKAGE_REQUIRES@|${pkgconfig_requires}|
+s|@LIBS@|${pkgconfig_libs}|
+s|@LDFLAGS@|${pkgconfig_ldflags}|
+s|@CPPFLAGS@|${pkgconfig_cppflags}|
+AXEOF
+sed -f conftest.sed  $pkgconfig_generate.in > $pkgconfig_generate
+if test ! -s $pkgconfig_generate ; then
+    as_fn_error $? "$pkgconfig_generate is empty" "$LINENO" 5
+fi ; rm conftest.sed # DONE generate $pkgconfig_generate
+pkgconfig_uninstalled=`echo $pkgconfig_generate |sed 's/.pc$/-uninstalled.pc/'`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $pkgconfig_uninstalled" >&5
+$as_echo "$as_me: creating $pkgconfig_uninstalled" >&6;}
+cat >conftest.sed <<AXEOF
+s|@prefix@|${pkgconfig_prefix}|
+s|@exec_prefix@|${pkgconfig_execprefix}|
+s|@bindir@|${pkgconfig_bindir}|
+s|@libdir@|${pkgconfig_src_libdir}|
+s|@datarootdir@|${pkgconfig_datarootdir}|
+s|@datadir@|${pkgconfig_datadir}|
+s|@sysconfdir@|${pkgconfig_sysconfdir}|
+s|@includedir@|${pkgconfig_src_headers}|
+s|@suffix@|${pkgconfig_suffix}|
+s|@PACKAGE@|${pkgconfig_package}|
+s|@PACKAGE_NAME@|${pkgconfig_libname}|
+s|@PACKAGE_DESCRIPTION@|${pkgconfig_description}|
+s|@PACKAGE_VERSION@|${pkgconfig_version}|
+s|@PACKAGE_REQUIRES@|${pkgconfig_requires}|
+s|@LIBS@|${pkgconfig_libs}|
+s|@LDFLAGS@|${pkgconfig_ldflags}|
+s|@CPPFLAGS@|${pkgconfig_cppflags}|
+AXEOF
+sed -f conftest.sed $pkgconfig_generate.in > $pkgconfig_uninstalled
+if test ! -s $pkgconfig_uninstalled ; then
+    as_fn_error $? "$pkgconfig_uninstalled is empty" "$LINENO" 5
+fi ; rm conftest.sed # DONE generate $pkgconfig_uninstalled
+           pkgconfig_requires_add=`echo ${pkgconfig_requires}`
+if test ".$pkgconfig_requires_add" != "." ; then
+           pkgconfig_requires_add="pkg-config $pkgconfig_requires_add"
+    else   pkgconfig_requires_add=":" ; fi
+pkgconfig_uninstalled=`echo $pkgconfig_generate |sed 's/.pc$/-uninstalled.sh/'`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $pkgconfig_uninstalled" >&5
+$as_echo "$as_me: creating $pkgconfig_uninstalled" >&6;}
+cat >conftest.sed <<AXEOF
+s|@prefix@|\"${pkgconfig_prefix}\"|
+s|@exec_prefix@|\"${pkgconfig_execprefix}\"|
+s|@bindir@|\"${pkgconfig_bindir}\"|
+s|@libdir@|\"${pkgconfig_src_libdir}\"|
+s|@datarootdir@|\"${pkgconfig_datarootdir}\"|
+s|@datadir@|\"${pkgconfig_datadir}\"|
+s|@sysconfdir@|\"${pkgconfig_sysconfdir}\"|
+s|@includedir@|\"${pkgconfig_src_headers}\"|
+s|@suffix@|\"${pkgconfig_suffix}\"|
+s|@PACKAGE@|\"${pkgconfig_package}\"|
+s|@PACKAGE_NAME@|\"${pkgconfig_libname}\"|
+s|@PACKAGE_DESCRIPTION@|\"${pkgconfig_description}\"|
+s|@PACKAGE_VERSION@|\"${pkgconfig_version}\"|
+s|@PACKAGE_REQUIRES@|\"${pkgconfig_requires}\"|
+s|@LIBS@|\"${pkgconfig_libs}\"|
+s|@LDFLAGS@|\"${pkgconfig_ldflags}\"|
+s|@CPPFLAGS@|\"${pkgconfig_cppflags}\"|
+s>Name:>for option\\; do case \"\$option\" in --list-all|--name) echo >
+s>Description: *>\\;\\; --help) pkg-config --help \\; echo Buildscript Of >
+s>Version: *>\\;\\; --modversion|--version) echo >
+s>Requires:>\\;\\; --requires) echo $pkgconfig_requires_add>
+s>Libs: *>\\;\\; --libs) echo >
+s>Cflags: *>\\;\\; --cflags) echo >
+/--libs)/a\\
+       $pkgconfig_requires_add
+/--cflags)/a\\
+       $pkgconfig_requires_add\\
+;; --variable=*) eval echo '\$'\`echo \$option | sed -e 's/.*=//'\`\\
+;; --uninstalled) exit 0 \\
+;; *) ;; esac done
+AXEOF
+sed -f conftest.sed  $pkgconfig_generate.in > $pkgconfig_uninstalled
+if test ! -s $pkgconfig_uninstalled ; then
+    as_fn_error $? "$pkgconfig_uninstalled is empty" "$LINENO" 5
+fi ; rm conftest.sed # DONE generate $pkgconfig_uninstalled
+ ;;
+
+  esac
+done # for ac_tag
+
+
+as_fn_exit 0
+_ACEOF
+ac_clean_files=$ac_clean_files_save
+
+test $ac_write_fail = 0 ||
+  as_fn_error $? "write failure creating $CONFIG_STATUS" "$LINENO" 5
+
+
+# configure is writing to config.log, and then calls config.status.
+# config.status does its own redirection, appending to config.log.
+# Unfortunately, on DOS this fails, as config.log is still kept open
+# by configure, so config.status won't be able to write to it; its
+# output is simply discarded.  So we exec the FD to /dev/null,
+# effectively closing config.log, so it can be properly (re)opened and
+# appended to by config.status.  When coming back to configure, we
+# need to make the FD available again.
+if test "$no_create" != yes; then
+  ac_cs_success=:
+  ac_config_status_args=
+  test "$silent" = yes &&
+    ac_config_status_args="$ac_config_status_args --quiet"
+  exec 5>/dev/null
+  $SHELL $CONFIG_STATUS $ac_config_status_args || ac_cs_success=false
+  exec 5>>config.log
+  # Use ||, not &&, to avoid exiting from the if with $? = 1, which
+  # would make configure fail if this is the last instruction.
+  $ac_cs_success || as_fn_exit 1
+fi
+if test -n "$ac_unrecognized_opts" && test "$enable_option_checking" != no; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unrecognized options: $ac_unrecognized_opts" >&5
+$as_echo "$as_me: WARNING: unrecognized options: $ac_unrecognized_opts" >&2;}
+fi
+
diff --git a/doc/Makefile.in b/doc/Makefile.in
new file mode 100644
index 0000000..b1c4550
--- /dev/null
+++ b/doc/Makefile.in
@@ -0,0 +1,457 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+VPATH = @srcdir@
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+subdir = doc
+DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_create_pkgconfig_info.m4 \
+	$(top_srcdir)/m4/doxygen.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+SOURCES =
+DIST_SOURCES =
+am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
+am__vpath_adj = case $$p in \
+    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
+    *) f=$$p;; \
+  esac;
+am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
+am__install_max = 40
+am__nobase_strip_setup = \
+  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
+am__nobase_strip = \
+  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
+am__nobase_list = $(am__nobase_strip_setup); \
+  for p in $$list; do echo "$$p $$p"; done | \
+  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
+  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
+    if (++n[$$2] == $(am__install_max)) \
+      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
+    END { for (dir in files) print dir, files[dir] }'
+am__base_list = \
+  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
+  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
+am__installdirs = "$(DESTDIR)$(pkgdocdir)"
+DATA = $(pkgdoc_DATA)
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AR = @AR@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CXX = @CXX@
+CXXCPP = @CXXCPP@
+CXXDEPMODE = @CXXDEPMODE@
+CXXFLAGS = @CXXFLAGS@
+CXXTEST = @CXXTEST@
+CXXTESTFLAGS = @CXXTESTFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+DX_CONFIG = @DX_CONFIG@
+DX_DOCDIR = @DX_DOCDIR@
+DX_DOT = @DX_DOT@
+DX_DOXYGEN = @DX_DOXYGEN@
+DX_DVIPS = @DX_DVIPS@
+DX_EGREP = @DX_EGREP@
+DX_ENV = @DX_ENV@
+DX_FLAG_chi = @DX_FLAG_chi@
+DX_FLAG_chm = @DX_FLAG_chm@
+DX_FLAG_doc = @DX_FLAG_doc@
+DX_FLAG_dot = @DX_FLAG_dot@
+DX_FLAG_html = @DX_FLAG_html@
+DX_FLAG_man = @DX_FLAG_man@
+DX_FLAG_pdf = @DX_FLAG_pdf@
+DX_FLAG_ps = @DX_FLAG_ps@
+DX_FLAG_rtf = @DX_FLAG_rtf@
+DX_FLAG_xml = @DX_FLAG_xml@
+DX_HHC = @DX_HHC@
+DX_INCLUDE = @DX_INCLUDE@
+DX_LATEX = @DX_LATEX@
+DX_MAKEINDEX = @DX_MAKEINDEX@
+DX_PDFLATEX = @DX_PDFLATEX@
+DX_PERL = @DX_PERL@
+DX_PROJECT = @DX_PROJECT@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LOG4CPP_CONFIG = @LOG4CPP_CONFIG@
+LOG4SHIB_CONFIG = @LOG4SHIB_CONFIG@
+LTLIBOBJS = @LTLIBOBJS@
+MAKEINFO = @MAKEINFO@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PKG_CONFIG = @PKG_CONFIG@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+STRIP = @STRIP@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_CXX = @ac_ct_CXX@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+lt_ECHO = @lt_ECHO@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+pkgconfig_libdir = @pkgconfig_libdir@
+pkgconfig_libfile = @pkgconfig_libfile@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AUTOMAKE_OPTIONS = foreign
+pkgdocdir = $(datadir)/doc/@PACKAGE@-@PACKAGE_VERSION@
+docfiles = \
+	README.txt \
+	LICENSE.txt \
+	NOTICE.txt \
+	LOG4CPP.LICENSE
+
+pkgdoc_DATA = $(docfiles)
+EXTRA_DIST = $(docfiles) api
+all: all-am
+
+.SUFFIXES:
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign doc/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign doc/Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+install-pkgdocDATA: $(pkgdoc_DATA)
+	@$(NORMAL_INSTALL)
+	test -z "$(pkgdocdir)" || $(MKDIR_P) "$(DESTDIR)$(pkgdocdir)"
+	@list='$(pkgdoc_DATA)'; test -n "$(pkgdocdir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgdocdir)'"; \
+	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgdocdir)" || exit $$?; \
+	done
+
+uninstall-pkgdocDATA:
+	@$(NORMAL_UNINSTALL)
+	@list='$(pkgdoc_DATA)'; test -n "$(pkgdocdir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(pkgdocdir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(pkgdocdir)" && rm -f $$files
+tags: TAGS
+TAGS:
+
+ctags: CTAGS
+CTAGS:
+
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: check-am
+all-am: Makefile $(DATA)
+installdirs:
+	for dir in "$(DESTDIR)$(pkgdocdir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-am
+	-rm -f Makefile
+distclean-am: clean-am distclean-generic
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am: install-pkgdocDATA
+	@$(NORMAL_INSTALL)
+	$(MAKE) $(AM_MAKEFLAGS) install-data-hook
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am:
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-generic mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am: uninstall-pkgdocDATA
+
+.MAKE: install-am install-data-am install-strip
+
+.PHONY: all all-am check check-am clean clean-generic clean-libtool \
+	distclean distclean-generic distclean-libtool distdir dvi \
+	dvi-am html html-am info info-am install install-am \
+	install-data install-data-am install-data-hook install-dvi \
+	install-dvi-am install-exec install-exec-am install-html \
+	install-html-am install-info install-info-am install-man \
+	install-pdf install-pdf-am install-pkgdocDATA install-ps \
+	install-ps-am install-strip installcheck installcheck-am \
+	installdirs maintainer-clean maintainer-clean-generic \
+	mostlyclean mostlyclean-generic mostlyclean-libtool pdf pdf-am \
+	ps ps-am uninstall uninstall-am uninstall-pkgdocDATA
+
+
+install-data-hook:
+	cp -r api $(DESTDIR)$(pkgdocdir)
+	rm -rf `find $(DESTDIR)$(pkgdocdir)/api -name .svn`
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/m4/libtool.m4 b/m4/libtool.m4
new file mode 100644
index 0000000..a3fee53
--- /dev/null
+++ b/m4/libtool.m4
@@ -0,0 +1,7377 @@
+# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-
+#
+#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,
+#                 2006, 2007, 2008 Free Software Foundation, Inc.
+#   Written by Gordon Matzigkeit, 1996
+#
+# This file is free software; the Free Software Foundation gives
+# unlimited permission to copy and/or distribute it, with or without
+# modifications, as long as this notice is preserved.
+
+m4_define([_LT_COPYING], [dnl
+#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,
+#                 2006, 2007, 2008 Free Software Foundation, Inc.
+#   Written by Gordon Matzigkeit, 1996
+#
+#   This file is part of GNU Libtool.
+#
+# GNU Libtool is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# As a special exception to the GNU General Public License,
+# if you distribute this file as part of a program or library that
+# is built using GNU Libtool, you may include this file under the
+# same distribution terms that you use for the rest of that program.
+#
+# GNU Libtool is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GNU Libtool; see the file COPYING.  If not, a copy
+# can be downloaded from http://www.gnu.org/licenses/gpl.html, or
+# obtained by writing to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+])
+
+# serial 56 LT_INIT
+
+
+# LT_PREREQ(VERSION)
+# ------------------
+# Complain and exit if this libtool version is less that VERSION.
+m4_defun([LT_PREREQ],
+[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,
+       [m4_default([$3],
+		   [m4_fatal([Libtool version $1 or higher is required],
+		             63)])],
+       [$2])])
+
+
+# _LT_CHECK_BUILDDIR
+# ------------------
+# Complain if the absolute build directory name contains unusual characters
+m4_defun([_LT_CHECK_BUILDDIR],
+[case `pwd` in
+  *\ * | *\	*)
+    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;
+esac
+])
+
+
+# LT_INIT([OPTIONS])
+# ------------------
+AC_DEFUN([LT_INIT],
+[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT
+AC_BEFORE([$0], [LT_LANG])dnl
+AC_BEFORE([$0], [LT_OUTPUT])dnl
+AC_BEFORE([$0], [LTDL_INIT])dnl
+m4_require([_LT_CHECK_BUILDDIR])dnl
+
+dnl Autoconf doesn't catch unexpanded LT_ macros by default:
+m4_pattern_forbid([^_?LT_[A-Z_]+$])dnl
+m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl
+dnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4
+dnl unless we require an AC_DEFUNed macro:
+AC_REQUIRE([LTOPTIONS_VERSION])dnl
+AC_REQUIRE([LTSUGAR_VERSION])dnl
+AC_REQUIRE([LTVERSION_VERSION])dnl
+AC_REQUIRE([LTOBSOLETE_VERSION])dnl
+m4_require([_LT_PROG_LTMAIN])dnl
+
+dnl Parse OPTIONS
+_LT_SET_OPTIONS([$0], [$1])
+
+# This can be used to rebuild libtool when needed
+LIBTOOL_DEPS="$ltmain"
+
+# Always use our own libtool.
+LIBTOOL='$(SHELL) $(top_builddir)/libtool'
+AC_SUBST(LIBTOOL)dnl
+
+_LT_SETUP
+
+# Only expand once:
+m4_define([LT_INIT])
+])# LT_INIT
+
+# Old names:
+AU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])
+AU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_PROG_LIBTOOL], [])
+dnl AC_DEFUN([AM_PROG_LIBTOOL], [])
+
+
+# _LT_CC_BASENAME(CC)
+# -------------------
+# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.
+m4_defun([_LT_CC_BASENAME],
+[for cc_temp in $1""; do
+  case $cc_temp in
+    compile | *[[\\/]]compile | ccache | *[[\\/]]ccache ) ;;
+    distcc | *[[\\/]]distcc | purify | *[[\\/]]purify ) ;;
+    \-*) ;;
+    *) break;;
+  esac
+done
+cc_basename=`$ECHO "X$cc_temp" | $Xsed -e 's%.*/%%' -e "s%^$host_alias-%%"`
+])
+
+
+# _LT_FILEUTILS_DEFAULTS
+# ----------------------
+# It is okay to use these file commands and assume they have been set
+# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.
+m4_defun([_LT_FILEUTILS_DEFAULTS],
+[: ${CP="cp -f"}
+: ${MV="mv -f"}
+: ${RM="rm -f"}
+])# _LT_FILEUTILS_DEFAULTS
+
+
+# _LT_SETUP
+# ---------
+m4_defun([_LT_SETUP],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+AC_REQUIRE([AC_CANONICAL_BUILD])dnl
+_LT_DECL([], [host_alias], [0], [The host system])dnl
+_LT_DECL([], [host], [0])dnl
+_LT_DECL([], [host_os], [0])dnl
+dnl
+_LT_DECL([], [build_alias], [0], [The build system])dnl
+_LT_DECL([], [build], [0])dnl
+_LT_DECL([], [build_os], [0])dnl
+dnl
+AC_REQUIRE([AC_PROG_CC])dnl
+AC_REQUIRE([LT_PATH_LD])dnl
+AC_REQUIRE([LT_PATH_NM])dnl
+dnl
+AC_REQUIRE([AC_PROG_LN_S])dnl
+test -z "$LN_S" && LN_S="ln -s"
+_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl
+dnl
+AC_REQUIRE([LT_CMD_MAX_LEN])dnl
+_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally "o")])dnl
+_LT_DECL([], [exeext], [0], [Executable file suffix (normally "")])dnl
+dnl
+m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_CHECK_SHELL_FEATURES])dnl
+m4_require([_LT_CMD_RELOAD])dnl
+m4_require([_LT_CHECK_MAGIC_METHOD])dnl
+m4_require([_LT_CMD_OLD_ARCHIVE])dnl
+m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
+
+_LT_CONFIG_LIBTOOL_INIT([
+# See if we are running on zsh, and set the options which allow our
+# commands through without removal of \ escapes INIT.
+if test -n "\${ZSH_VERSION+set}" ; then
+   setopt NO_GLOB_SUBST
+fi
+])
+if test -n "${ZSH_VERSION+set}" ; then
+   setopt NO_GLOB_SUBST
+fi
+
+_LT_CHECK_OBJDIR
+
+m4_require([_LT_TAG_COMPILER])dnl
+_LT_PROG_ECHO_BACKSLASH
+
+case $host_os in
+aix3*)
+  # AIX sometimes has problems with the GCC collect2 program.  For some
+  # reason, if we set the COLLECT_NAMES environment variable, the problems
+  # vanish in a puff of smoke.
+  if test "X${COLLECT_NAMES+set}" != Xset; then
+    COLLECT_NAMES=
+    export COLLECT_NAMES
+  fi
+  ;;
+esac
+
+# Sed substitution that helps us do robust quoting.  It backslashifies
+# metacharacters that are still active within double-quoted strings.
+sed_quote_subst='s/\([["`$\\]]\)/\\\1/g'
+
+# Same as above, but do not quote variable references.
+double_quote_subst='s/\([["`\\]]\)/\\\1/g'
+
+# Sed substitution to delay expansion of an escaped shell variable in a
+# double_quote_subst'ed string.
+delay_variable_subst='s/\\\\\\\\\\\$/\\\\\\$/g'
+
+# Sed substitution to delay expansion of an escaped single quote.
+delay_single_quote_subst='s/'\''/'\'\\\\\\\'\''/g'
+
+# Sed substitution to avoid accidental globbing in evaled expressions
+no_glob_subst='s/\*/\\\*/g'
+
+# Global variables:
+ofile=libtool
+can_build_shared=yes
+
+# All known linkers require a `.a' archive for static linking (except MSVC,
+# which needs '.lib').
+libext=a
+
+with_gnu_ld="$lt_cv_prog_gnu_ld"
+
+old_CC="$CC"
+old_CFLAGS="$CFLAGS"
+
+# Set sane defaults for various variables
+test -z "$CC" && CC=cc
+test -z "$LTCC" && LTCC=$CC
+test -z "$LTCFLAGS" && LTCFLAGS=$CFLAGS
+test -z "$LD" && LD=ld
+test -z "$ac_objext" && ac_objext=o
+
+_LT_CC_BASENAME([$compiler])
+
+# Only perform the check for file, if the check method requires it
+test -z "$MAGIC_CMD" && MAGIC_CMD=file
+case $deplibs_check_method in
+file_magic*)
+  if test "$file_magic_cmd" = '$MAGIC_CMD'; then
+    _LT_PATH_MAGIC
+  fi
+  ;;
+esac
+
+# Use C for the default configuration in the libtool script
+LT_SUPPORTED_TAG([CC])
+_LT_LANG_C_CONFIG
+_LT_LANG_DEFAULT_CONFIG
+_LT_CONFIG_COMMANDS
+])# _LT_SETUP
+
+
+# _LT_PROG_LTMAIN
+# ---------------
+# Note that this code is called both from `configure', and `config.status'
+# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,
+# `config.status' has no value for ac_aux_dir unless we are using Automake,
+# so we pass a copy along to make sure it has a sensible value anyway.
+m4_defun([_LT_PROG_LTMAIN],
+[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl
+_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])
+ltmain="$ac_aux_dir/ltmain.sh"
+])# _LT_PROG_LTMAIN
+
+
+## ------------------------------------- ##
+## Accumulate code for creating libtool. ##
+## ------------------------------------- ##
+
+# So that we can recreate a full libtool script including additional
+# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS
+# in macros and then make a single call at the end using the `libtool'
+# label.
+
+
+# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])
+# ----------------------------------------
+# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.
+m4_define([_LT_CONFIG_LIBTOOL_INIT],
+[m4_ifval([$1],
+          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],
+                     [$1
+])])])
+
+# Initialize.
+m4_define([_LT_OUTPUT_LIBTOOL_INIT])
+
+
+# _LT_CONFIG_LIBTOOL([COMMANDS])
+# ------------------------------
+# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.
+m4_define([_LT_CONFIG_LIBTOOL],
+[m4_ifval([$1],
+          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],
+                     [$1
+])])])
+
+# Initialize.
+m4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])
+
+
+# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])
+# -----------------------------------------------------
+m4_defun([_LT_CONFIG_SAVE_COMMANDS],
+[_LT_CONFIG_LIBTOOL([$1])
+_LT_CONFIG_LIBTOOL_INIT([$2])
+])
+
+
+# _LT_FORMAT_COMMENT([COMMENT])
+# -----------------------------
+# Add leading comment marks to the start of each line, and a trailing
+# full-stop to the whole comment if one is not present already.
+m4_define([_LT_FORMAT_COMMENT],
+[m4_ifval([$1], [
+m4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],
+              [['`$\]], [\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])
+)])
+
+
+
+## ------------------------ ##
+## FIXME: Eliminate VARNAME ##
+## ------------------------ ##
+
+
+# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])
+# -------------------------------------------------------------------
+# CONFIGNAME is the name given to the value in the libtool script.
+# VARNAME is the (base) name used in the configure script.
+# VALUE may be 0, 1 or 2 for a computed quote escaped value based on
+# VARNAME.  Any other value will be used directly.
+m4_define([_LT_DECL],
+[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],
+    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],
+	[m4_ifval([$1], [$1], [$2])])
+    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])
+    m4_ifval([$4],
+	[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])
+    lt_dict_add_subkey([lt_decl_dict], [$2],
+	[tagged?], [m4_ifval([$5], [yes], [no])])])
+])
+
+
+# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])
+# --------------------------------------------------------
+m4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])
+
+
+# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])
+# ------------------------------------------------
+m4_define([lt_decl_tag_varnames],
+[_lt_decl_filter([tagged?], [yes], $@)])
+
+
+# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])
+# ---------------------------------------------------------
+m4_define([_lt_decl_filter],
+[m4_case([$#],
+  [0], [m4_fatal([$0: too few arguments: $#])],
+  [1], [m4_fatal([$0: too few arguments: $#: $1])],
+  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],
+  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],
+  [lt_dict_filter([lt_decl_dict], $@)])[]dnl
+])
+
+
+# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])
+# --------------------------------------------------
+m4_define([lt_decl_quote_varnames],
+[_lt_decl_filter([value], [1], $@)])
+
+
+# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])
+# ---------------------------------------------------
+m4_define([lt_decl_dquote_varnames],
+[_lt_decl_filter([value], [2], $@)])
+
+
+# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])
+# ---------------------------------------------------
+m4_define([lt_decl_varnames_tagged],
+[m4_assert([$# <= 2])dnl
+_$0(m4_quote(m4_default([$1], [[, ]])),
+    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),
+    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])
+m4_define([_lt_decl_varnames_tagged],
+[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])
+
+
+# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])
+# ------------------------------------------------
+m4_define([lt_decl_all_varnames],
+[_$0(m4_quote(m4_default([$1], [[, ]])),
+     m4_if([$2], [],
+	   m4_quote(lt_decl_varnames),
+	m4_quote(m4_shift($@))))[]dnl
+])
+m4_define([_lt_decl_all_varnames],
+[lt_join($@, lt_decl_varnames_tagged([$1],
+			lt_decl_tag_varnames([[, ]], m4_shift($@))))dnl
+])
+
+
+# _LT_CONFIG_STATUS_DECLARE([VARNAME])
+# ------------------------------------
+# Quote a variable value, and forward it to `config.status' so that its
+# declaration there will have the same value as in `configure'.  VARNAME
+# must have a single quote delimited value for this to work.
+m4_define([_LT_CONFIG_STATUS_DECLARE],
+[$1='`$ECHO "X$][$1" | $Xsed -e "$delay_single_quote_subst"`'])
+
+
+# _LT_CONFIG_STATUS_DECLARATIONS
+# ------------------------------
+# We delimit libtool config variables with single quotes, so when
+# we write them to config.status, we have to be sure to quote all
+# embedded single quotes properly.  In configure, this macro expands
+# each variable declared with _LT_DECL (and _LT_TAGDECL) into:
+#
+#    <var>='`$ECHO "X$<var>" | $Xsed -e "$delay_single_quote_subst"`'
+m4_defun([_LT_CONFIG_STATUS_DECLARATIONS],
+[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),
+    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])
+
+
+# _LT_LIBTOOL_TAGS
+# ----------------
+# Output comment and list of tags supported by the script
+m4_defun([_LT_LIBTOOL_TAGS],
+[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl
+available_tags="_LT_TAGS"dnl
+])
+
+
+# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])
+# -----------------------------------
+# Extract the dictionary values for VARNAME (optionally with TAG) and
+# expand to a commented shell variable setting:
+#
+#    # Some comment about what VAR is for.
+#    visible_name=$lt_internal_name
+m4_define([_LT_LIBTOOL_DECLARE],
+[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],
+					   [description])))[]dnl
+m4_pushdef([_libtool_name],
+    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl
+m4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),
+    [0], [_libtool_name=[$]$1],
+    [1], [_libtool_name=$lt_[]$1],
+    [2], [_libtool_name=$lt_[]$1],
+    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl
+m4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl
+])
+
+
+# _LT_LIBTOOL_CONFIG_VARS
+# -----------------------
+# Produce commented declarations of non-tagged libtool config variables
+# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'
+# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG
+# section) are produced by _LT_LIBTOOL_TAG_VARS.
+m4_defun([_LT_LIBTOOL_CONFIG_VARS],
+[m4_foreach([_lt_var],
+    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),
+    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])
+
+
+# _LT_LIBTOOL_TAG_VARS(TAG)
+# -------------------------
+m4_define([_LT_LIBTOOL_TAG_VARS],
+[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),
+    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])
+
+
+# _LT_TAGVAR(VARNAME, [TAGNAME])
+# ------------------------------
+m4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])
+
+
+# _LT_CONFIG_COMMANDS
+# -------------------
+# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of
+# variables for single and double quote escaping we saved from calls
+# to _LT_DECL, we can put quote escaped variables declarations
+# into `config.status', and then the shell code to quote escape them in
+# for loops in `config.status'.  Finally, any additional code accumulated
+# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.
+m4_defun([_LT_CONFIG_COMMANDS],
+[AC_PROVIDE_IFELSE([LT_OUTPUT],
+	dnl If the libtool generation code has been placed in $CONFIG_LT,
+	dnl instead of duplicating it all over again into config.status,
+	dnl then we will have config.status run $CONFIG_LT later, so it
+	dnl needs to know what name is stored there:
+        [AC_CONFIG_COMMANDS([libtool],
+            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],
+    dnl If the libtool generation code is destined for config.status,
+    dnl expand the accumulated commands and init code now:
+    [AC_CONFIG_COMMANDS([libtool],
+        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])
+])#_LT_CONFIG_COMMANDS
+
+
+# Initialize.
+m4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],
+[
+
+# The HP-UX ksh and POSIX shell print the target directory to stdout
+# if CDPATH is set.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+sed_quote_subst='$sed_quote_subst'
+double_quote_subst='$double_quote_subst'
+delay_variable_subst='$delay_variable_subst'
+_LT_CONFIG_STATUS_DECLARATIONS
+LTCC='$LTCC'
+LTCFLAGS='$LTCFLAGS'
+compiler='$compiler_DEFAULT'
+
+# Quote evaled strings.
+for var in lt_decl_all_varnames([[ \
+]], lt_decl_quote_varnames); do
+    case \`eval \\\\\$ECHO "X\\\\\$\$var"\` in
+    *[[\\\\\\\`\\"\\\$]]*)
+      eval "lt_\$var=\\\\\\"\\\`\\\$ECHO \\"X\\\$\$var\\" | \\\$Xsed -e \\"\\\$sed_quote_subst\\"\\\`\\\\\\""
+      ;;
+    *)
+      eval "lt_\$var=\\\\\\"\\\$\$var\\\\\\""
+      ;;
+    esac
+done
+
+# Double-quote double-evaled strings.
+for var in lt_decl_all_varnames([[ \
+]], lt_decl_dquote_varnames); do
+    case \`eval \\\\\$ECHO "X\\\\\$\$var"\` in
+    *[[\\\\\\\`\\"\\\$]]*)
+      eval "lt_\$var=\\\\\\"\\\`\\\$ECHO \\"X\\\$\$var\\" | \\\$Xsed -e \\"\\\$double_quote_subst\\" -e \\"\\\$sed_quote_subst\\" -e \\"\\\$delay_variable_subst\\"\\\`\\\\\\""
+      ;;
+    *)
+      eval "lt_\$var=\\\\\\"\\\$\$var\\\\\\""
+      ;;
+    esac
+done
+
+# Fix-up fallback echo if it was mangled by the above quoting rules.
+case \$lt_ECHO in
+*'\\\[$]0 --fallback-echo"')dnl "
+  lt_ECHO=\`\$ECHO "X\$lt_ECHO" | \$Xsed -e 's/\\\\\\\\\\\\\\\[$]0 --fallback-echo"\[$]/\[$]0 --fallback-echo"/'\`
+  ;;
+esac
+
+_LT_OUTPUT_LIBTOOL_INIT
+])
+
+
+# LT_OUTPUT
+# ---------
+# This macro allows early generation of the libtool script (before
+# AC_OUTPUT is called), incase it is used in configure for compilation
+# tests.
+AC_DEFUN([LT_OUTPUT],
+[: ${CONFIG_LT=./config.lt}
+AC_MSG_NOTICE([creating $CONFIG_LT])
+cat >"$CONFIG_LT" <<_LTEOF
+#! $SHELL
+# Generated by $as_me.
+# Run this file to recreate a libtool stub with the current configuration.
+
+lt_cl_silent=false
+SHELL=\${CONFIG_SHELL-$SHELL}
+_LTEOF
+
+cat >>"$CONFIG_LT" <<\_LTEOF
+AS_SHELL_SANITIZE
+_AS_PREPARE
+
+exec AS_MESSAGE_FD>&1
+exec AS_MESSAGE_LOG_FD>>config.log
+{
+  echo
+  AS_BOX([Running $as_me.])
+} >&AS_MESSAGE_LOG_FD
+
+lt_cl_help="\
+\`$as_me' creates a local libtool stub from the current configuration,
+for use in further configure time tests before the real libtool is
+generated.
+
+Usage: $[0] [[OPTIONS]]
+
+  -h, --help      print this help, then exit
+  -V, --version   print version number, then exit
+  -q, --quiet     do not print progress messages
+  -d, --debug     don't remove temporary files
+
+Report bugs to <bug-libtool@gnu.org>."
+
+lt_cl_version="\
+m4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl
+m4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])
+configured by $[0], generated by m4_PACKAGE_STRING.
+
+Copyright (C) 2008 Free Software Foundation, Inc.
+This config.lt script is free software; the Free Software Foundation
+gives unlimited permision to copy, distribute and modify it."
+
+while test $[#] != 0
+do
+  case $[1] in
+    --version | --v* | -V )
+      echo "$lt_cl_version"; exit 0 ;;
+    --help | --h* | -h )
+      echo "$lt_cl_help"; exit 0 ;;
+    --debug | --d* | -d )
+      debug=: ;;
+    --quiet | --q* | --silent | --s* | -q )
+      lt_cl_silent=: ;;
+
+    -*) AC_MSG_ERROR([unrecognized option: $[1]
+Try \`$[0] --help' for more information.]) ;;
+
+    *) AC_MSG_ERROR([unrecognized argument: $[1]
+Try \`$[0] --help' for more information.]) ;;
+  esac
+  shift
+done
+
+if $lt_cl_silent; then
+  exec AS_MESSAGE_FD>/dev/null
+fi
+_LTEOF
+
+cat >>"$CONFIG_LT" <<_LTEOF
+_LT_OUTPUT_LIBTOOL_COMMANDS_INIT
+_LTEOF
+
+cat >>"$CONFIG_LT" <<\_LTEOF
+AC_MSG_NOTICE([creating $ofile])
+_LT_OUTPUT_LIBTOOL_COMMANDS
+AS_EXIT(0)
+_LTEOF
+chmod +x "$CONFIG_LT"
+
+# configure is writing to config.log, but config.lt does its own redirection,
+# appending to config.log, which fails on DOS, as config.log is still kept
+# open by configure.  Here we exec the FD to /dev/null, effectively closing
+# config.log, so it can be properly (re)opened and appended to by config.lt.
+if test "$no_create" != yes; then
+  lt_cl_success=:
+  test "$silent" = yes &&
+    lt_config_lt_args="$lt_config_lt_args --quiet"
+  exec AS_MESSAGE_LOG_FD>/dev/null
+  $SHELL "$CONFIG_LT" $lt_config_lt_args || lt_cl_success=false
+  exec AS_MESSAGE_LOG_FD>>config.log
+  $lt_cl_success || AS_EXIT(1)
+fi
+])# LT_OUTPUT
+
+
+# _LT_CONFIG(TAG)
+# ---------------
+# If TAG is the built-in tag, create an initial libtool script with a
+# default configuration from the untagged config vars.  Otherwise add code
+# to config.status for appending the configuration named by TAG from the
+# matching tagged config vars.
+m4_defun([_LT_CONFIG],
+[m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+_LT_CONFIG_SAVE_COMMANDS([
+  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl
+  m4_if(_LT_TAG, [C], [
+    # See if we are running on zsh, and set the options which allow our
+    # commands through without removal of \ escapes.
+    if test -n "${ZSH_VERSION+set}" ; then
+      setopt NO_GLOB_SUBST
+    fi
+
+    cfgfile="${ofile}T"
+    trap "$RM \"$cfgfile\"; exit 1" 1 2 15
+    $RM "$cfgfile"
+
+    cat <<_LT_EOF >> "$cfgfile"
+#! $SHELL
+
+# `$ECHO "$ofile" | sed 's%^.*/%%'` - Provide generalized library-building support services.
+# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION
+# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:
+# NOTE: Changes made to this file will be lost: look at ltmain.sh.
+#
+_LT_COPYING
+_LT_LIBTOOL_TAGS
+
+# ### BEGIN LIBTOOL CONFIG
+_LT_LIBTOOL_CONFIG_VARS
+_LT_LIBTOOL_TAG_VARS
+# ### END LIBTOOL CONFIG
+
+_LT_EOF
+
+  case $host_os in
+  aix3*)
+    cat <<\_LT_EOF >> "$cfgfile"
+# AIX sometimes has problems with the GCC collect2 program.  For some
+# reason, if we set the COLLECT_NAMES environment variable, the problems
+# vanish in a puff of smoke.
+if test "X${COLLECT_NAMES+set}" != Xset; then
+  COLLECT_NAMES=
+  export COLLECT_NAMES
+fi
+_LT_EOF
+    ;;
+  esac
+
+  _LT_PROG_LTMAIN
+
+  # We use sed instead of cat because bash on DJGPP gets confused if
+  # if finds mixed CR/LF and LF-only lines.  Since sed operates in
+  # text mode, it properly converts lines to CR/LF.  This bash problem
+  # is reportedly fixed, but why not run on old versions too?
+  sed '/^# Generated shell functions inserted here/q' "$ltmain" >> "$cfgfile" \
+    || (rm -f "$cfgfile"; exit 1)
+
+  _LT_PROG_XSI_SHELLFNS
+
+  sed -n '/^# Generated shell functions inserted here/,$p' "$ltmain" >> "$cfgfile" \
+    || (rm -f "$cfgfile"; exit 1)
+
+  mv -f "$cfgfile" "$ofile" ||
+    (rm -f "$ofile" && cp "$cfgfile" "$ofile" && rm -f "$cfgfile")
+  chmod +x "$ofile"
+],
+[cat <<_LT_EOF >> "$ofile"
+
+dnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded
+dnl in a comment (ie after a #).
+# ### BEGIN LIBTOOL TAG CONFIG: $1
+_LT_LIBTOOL_TAG_VARS(_LT_TAG)
+# ### END LIBTOOL TAG CONFIG: $1
+_LT_EOF
+])dnl /m4_if
+],
+[m4_if([$1], [], [
+    PACKAGE='$PACKAGE'
+    VERSION='$VERSION'
+    TIMESTAMP='$TIMESTAMP'
+    RM='$RM'
+    ofile='$ofile'], [])
+])dnl /_LT_CONFIG_SAVE_COMMANDS
+])# _LT_CONFIG
+
+
+# LT_SUPPORTED_TAG(TAG)
+# ---------------------
+# Trace this macro to discover what tags are supported by the libtool
+# --tag option, using:
+#    autoconf --trace 'LT_SUPPORTED_TAG:$1'
+AC_DEFUN([LT_SUPPORTED_TAG], [])
+
+
+# C support is built-in for now
+m4_define([_LT_LANG_C_enabled], [])
+m4_define([_LT_TAGS], [])
+
+
+# LT_LANG(LANG)
+# -------------
+# Enable libtool support for the given language if not already enabled.
+AC_DEFUN([LT_LANG],
+[AC_BEFORE([$0], [LT_OUTPUT])dnl
+m4_case([$1],
+  [C],			[_LT_LANG(C)],
+  [C++],		[_LT_LANG(CXX)],
+  [Java],		[_LT_LANG(GCJ)],
+  [Fortran 77],		[_LT_LANG(F77)],
+  [Fortran],		[_LT_LANG(FC)],
+  [Windows Resource],	[_LT_LANG(RC)],
+  [m4_ifdef([_LT_LANG_]$1[_CONFIG],
+    [_LT_LANG($1)],
+    [m4_fatal([$0: unsupported language: "$1"])])])dnl
+])# LT_LANG
+
+
+# _LT_LANG(LANGNAME)
+# ------------------
+m4_defun([_LT_LANG],
+[m4_ifdef([_LT_LANG_]$1[_enabled], [],
+  [LT_SUPPORTED_TAG([$1])dnl
+  m4_append([_LT_TAGS], [$1 ])dnl
+  m4_define([_LT_LANG_]$1[_enabled], [])dnl
+  _LT_LANG_$1_CONFIG($1)])dnl
+])# _LT_LANG
+
+
+# _LT_LANG_DEFAULT_CONFIG
+# -----------------------
+m4_defun([_LT_LANG_DEFAULT_CONFIG],
+[AC_PROVIDE_IFELSE([AC_PROG_CXX],
+  [LT_LANG(CXX)],
+  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])
+
+AC_PROVIDE_IFELSE([AC_PROG_F77],
+  [LT_LANG(F77)],
+  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])
+
+AC_PROVIDE_IFELSE([AC_PROG_FC],
+  [LT_LANG(FC)],
+  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])
+
+dnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal
+dnl pulling things in needlessly.
+AC_PROVIDE_IFELSE([AC_PROG_GCJ],
+  [LT_LANG(GCJ)],
+  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],
+    [LT_LANG(GCJ)],
+    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],
+      [LT_LANG(GCJ)],
+      [m4_ifdef([AC_PROG_GCJ],
+	[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])
+       m4_ifdef([A][M_PROG_GCJ],
+	[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])
+       m4_ifdef([LT_PROG_GCJ],
+	[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])
+
+AC_PROVIDE_IFELSE([LT_PROG_RC],
+  [LT_LANG(RC)],
+  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])
+])# _LT_LANG_DEFAULT_CONFIG
+
+# Obsolete macros:
+AU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])
+AU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])
+AU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])
+AU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_CXX], [])
+dnl AC_DEFUN([AC_LIBTOOL_F77], [])
+dnl AC_DEFUN([AC_LIBTOOL_FC], [])
+dnl AC_DEFUN([AC_LIBTOOL_GCJ], [])
+
+
+# _LT_TAG_COMPILER
+# ----------------
+m4_defun([_LT_TAG_COMPILER],
+[AC_REQUIRE([AC_PROG_CC])dnl
+
+_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl
+_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl
+_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl
+_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl
+
+# If no C compiler was specified, use CC.
+LTCC=${LTCC-"$CC"}
+
+# If no C compiler flags were specified, use CFLAGS.
+LTCFLAGS=${LTCFLAGS-"$CFLAGS"}
+
+# Allow CC to be a program name with arguments.
+compiler=$CC
+])# _LT_TAG_COMPILER
+
+
+# _LT_COMPILER_BOILERPLATE
+# ------------------------
+# Check for compiler boilerplate output or warnings with
+# the simple compiler test code.
+m4_defun([_LT_COMPILER_BOILERPLATE],
+[m4_require([_LT_DECL_SED])dnl
+ac_outfile=conftest.$ac_objext
+echo "$lt_simple_compile_test_code" >conftest.$ac_ext
+eval "$ac_compile" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err
+_lt_compiler_boilerplate=`cat conftest.err`
+$RM conftest*
+])# _LT_COMPILER_BOILERPLATE
+
+
+# _LT_LINKER_BOILERPLATE
+# ----------------------
+# Check for linker boilerplate output or warnings with
+# the simple link test code.
+m4_defun([_LT_LINKER_BOILERPLATE],
+[m4_require([_LT_DECL_SED])dnl
+ac_outfile=conftest.$ac_objext
+echo "$lt_simple_link_test_code" >conftest.$ac_ext
+eval "$ac_link" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err
+_lt_linker_boilerplate=`cat conftest.err`
+$RM -r conftest*
+])# _LT_LINKER_BOILERPLATE
+
+# _LT_REQUIRED_DARWIN_CHECKS
+# -------------------------
+m4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[
+  case $host_os in
+    rhapsody* | darwin*)
+    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])
+    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])
+    AC_CHECK_TOOL([LIPO], [lipo], [:])
+    AC_CHECK_TOOL([OTOOL], [otool], [:])
+    AC_CHECK_TOOL([OTOOL64], [otool64], [:])
+    _LT_DECL([], [DSYMUTIL], [1],
+      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])
+    _LT_DECL([], [NMEDIT], [1],
+      [Tool to change global to local symbols on Mac OS X])
+    _LT_DECL([], [LIPO], [1],
+      [Tool to manipulate fat objects and archives on Mac OS X])
+    _LT_DECL([], [OTOOL], [1],
+      [ldd/readelf like tool for Mach-O binaries on Mac OS X])
+    _LT_DECL([], [OTOOL64], [1],
+      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])
+
+    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],
+      [lt_cv_apple_cc_single_mod=no
+      if test -z "${LT_MULTI_MODULE}"; then
+	# By default we will add the -single_module flag. You can override
+	# by either setting the environment variable LT_MULTI_MODULE
+	# non-empty at configure time, or by adding -multi_module to the
+	# link flags.
+	rm -rf libconftest.dylib*
+	echo "int foo(void){return 1;}" > conftest.c
+	echo "$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \
+-dynamiclib -Wl,-single_module conftest.c" >&AS_MESSAGE_LOG_FD
+	$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \
+	  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err
+        _lt_result=$?
+	if test -f libconftest.dylib && test ! -s conftest.err && test $_lt_result = 0; then
+	  lt_cv_apple_cc_single_mod=yes
+	else
+	  cat conftest.err >&AS_MESSAGE_LOG_FD
+	fi
+	rm -rf libconftest.dylib*
+	rm -f conftest.*
+      fi])
+    AC_CACHE_CHECK([for -exported_symbols_list linker flag],
+      [lt_cv_ld_exported_symbols_list],
+      [lt_cv_ld_exported_symbols_list=no
+      save_LDFLAGS=$LDFLAGS
+      echo "_main" > conftest.sym
+      LDFLAGS="$LDFLAGS -Wl,-exported_symbols_list,conftest.sym"
+      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],
+	[lt_cv_ld_exported_symbols_list=yes],
+	[lt_cv_ld_exported_symbols_list=no])
+	LDFLAGS="$save_LDFLAGS"
+    ])
+    case $host_os in
+    rhapsody* | darwin1.[[012]])
+      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;
+    darwin1.*)
+      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;
+    darwin*) # darwin 5.x on
+      # if running on 10.5 or later, the deployment target defaults
+      # to the OS version, if on x86, and 10.4, the deployment
+      # target defaults to 10.4. Don't you love it?
+      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in
+	10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)
+	  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
+	10.[[012]]*)
+	  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;
+	10.*)
+	  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
+      esac
+    ;;
+  esac
+    if test "$lt_cv_apple_cc_single_mod" = "yes"; then
+      _lt_dar_single_mod='$single_module'
+    fi
+    if test "$lt_cv_ld_exported_symbols_list" = "yes"; then
+      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'
+    else
+      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'
+    fi
+    if test "$DSYMUTIL" != ":"; then
+      _lt_dsymutil='~$DSYMUTIL $lib || :'
+    else
+      _lt_dsymutil=
+    fi
+    ;;
+  esac
+])
+
+
+# _LT_DARWIN_LINKER_FEATURES
+# --------------------------
+# Checks for linker and compiler features on darwin
+m4_defun([_LT_DARWIN_LINKER_FEATURES],
+[
+  m4_require([_LT_REQUIRED_DARWIN_CHECKS])
+  _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+  _LT_TAGVAR(hardcode_direct, $1)=no
+  _LT_TAGVAR(hardcode_automatic, $1)=yes
+  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported
+  _LT_TAGVAR(whole_archive_flag_spec, $1)=''
+  _LT_TAGVAR(link_all_deplibs, $1)=yes
+  _LT_TAGVAR(allow_undefined_flag, $1)="$_lt_dar_allow_undefined"
+  case $cc_basename in
+     ifort*) _lt_dar_can_shared=yes ;;
+     *) _lt_dar_can_shared=$GCC ;;
+  esac
+  if test "$_lt_dar_can_shared" = "yes"; then
+    output_verbose_link_cmd=echo
+    _LT_TAGVAR(archive_cmds, $1)="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod${_lt_dsymutil}"
+    _LT_TAGVAR(module_cmds, $1)="\$CC \$allow_undefined_flag -o \$lib -bundle \$libobjs \$deplibs \$compiler_flags${_lt_dsymutil}"
+    _LT_TAGVAR(archive_expsym_cmds, $1)="sed 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}"
+    _LT_TAGVAR(module_expsym_cmds, $1)="sed -e 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC \$allow_undefined_flag -o \$lib -bundle \$libobjs \$deplibs \$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}"
+    m4_if([$1], [CXX],
+[   if test "$lt_cv_apple_cc_single_mod" != "yes"; then
+      _LT_TAGVAR(archive_cmds, $1)="\$CC -r -keep_private_externs -nostdlib -o \${lib}-master.o \$libobjs~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \${lib}-master.o \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring${_lt_dsymutil}"
+      _LT_TAGVAR(archive_expsym_cmds, $1)="sed 's,^,_,' < \$export_symbols > \$output_objdir/\${libname}-symbols.expsym~\$CC -r -keep_private_externs -nostdlib -o \${lib}-master.o \$libobjs~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \${lib}-master.o \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring${_lt_dar_export_syms}${_lt_dsymutil}"
+    fi
+],[])
+  else
+  _LT_TAGVAR(ld_shlibs, $1)=no
+  fi
+])
+
+# _LT_SYS_MODULE_PATH_AIX
+# -----------------------
+# Links a minimal program and checks the executable
+# for the system default hardcoded library path. In most cases,
+# this is /usr/lib:/lib, but when the MPI compilers are used
+# the location of the communication and MPI libs are included too.
+# If we don't find anything, use the default library path according
+# to the aix ld manual.
+m4_defun([_LT_SYS_MODULE_PATH_AIX],
+[m4_require([_LT_DECL_SED])dnl
+AC_LINK_IFELSE(AC_LANG_PROGRAM,[
+lt_aix_libpath_sed='
+    /Import File Strings/,/^$/ {
+	/^0/ {
+	    s/^0  *\(.*\)$/\1/
+	    p
+	}
+    }'
+aix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+# Check for a 64-bit object if we didn't find anything.
+if test -z "$aix_libpath"; then
+  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e "$lt_aix_libpath_sed"`
+fi],[])
+if test -z "$aix_libpath"; then aix_libpath="/usr/lib:/lib"; fi
+])# _LT_SYS_MODULE_PATH_AIX
+
+
+# _LT_SHELL_INIT(ARG)
+# -------------------
+m4_define([_LT_SHELL_INIT],
+[ifdef([AC_DIVERSION_NOTICE],
+	     [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],
+	 [AC_DIVERT_PUSH(NOTICE)])
+$1
+AC_DIVERT_POP
+])# _LT_SHELL_INIT
+
+
+# _LT_PROG_ECHO_BACKSLASH
+# -----------------------
+# Add some code to the start of the generated configure script which
+# will find an echo command which doesn't interpret backslashes.
+m4_defun([_LT_PROG_ECHO_BACKSLASH],
+[_LT_SHELL_INIT([
+# Check that we are running under the correct shell.
+SHELL=${CONFIG_SHELL-/bin/sh}
+
+case X$lt_ECHO in
+X*--fallback-echo)
+  # Remove one level of quotation (which was required for Make).
+  ECHO=`echo "$lt_ECHO" | sed 's,\\\\\[$]\\[$]0,'[$]0','`
+  ;;
+esac
+
+ECHO=${lt_ECHO-echo}
+if test "X[$]1" = X--no-reexec; then
+  # Discard the --no-reexec flag, and continue.
+  shift
+elif test "X[$]1" = X--fallback-echo; then
+  # Avoid inline document here, it may be left over
+  :
+elif test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t' ; then
+  # Yippee, $ECHO works!
+  :
+else
+  # Restart under the correct shell.
+  exec $SHELL "[$]0" --no-reexec ${1+"[$]@"}
+fi
+
+if test "X[$]1" = X--fallback-echo; then
+  # used as fallback echo
+  shift
+  cat <<_LT_EOF
+[$]*
+_LT_EOF
+  exit 0
+fi
+
+# The HP-UX ksh and POSIX shell print the target directory to stdout
+# if CDPATH is set.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+if test -z "$lt_ECHO"; then
+  if test "X${echo_test_string+set}" != Xset; then
+    # find a string as large as possible, as long as the shell can cope with it
+    for cmd in 'sed 50q "[$]0"' 'sed 20q "[$]0"' 'sed 10q "[$]0"' 'sed 2q "[$]0"' 'echo test'; do
+      # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...
+      if { echo_test_string=`eval $cmd`; } 2>/dev/null &&
+	 { test "X$echo_test_string" = "X$echo_test_string"; } 2>/dev/null
+      then
+        break
+      fi
+    done
+  fi
+
+  if test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t' &&
+     echo_testing_string=`{ $ECHO "$echo_test_string"; } 2>/dev/null` &&
+     test "X$echo_testing_string" = "X$echo_test_string"; then
+    :
+  else
+    # The Solaris, AIX, and Digital Unix default echo programs unquote
+    # backslashes.  This makes it impossible to quote backslashes using
+    #   echo "$something" | sed 's/\\/\\\\/g'
+    #
+    # So, first we look for a working echo in the user's PATH.
+
+    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+    for dir in $PATH /usr/ucb; do
+      IFS="$lt_save_ifs"
+      if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&
+         test "X`($dir/echo '\t') 2>/dev/null`" = 'X\t' &&
+         echo_testing_string=`($dir/echo "$echo_test_string") 2>/dev/null` &&
+         test "X$echo_testing_string" = "X$echo_test_string"; then
+        ECHO="$dir/echo"
+        break
+      fi
+    done
+    IFS="$lt_save_ifs"
+
+    if test "X$ECHO" = Xecho; then
+      # We didn't find a better echo, so look for alternatives.
+      if test "X`{ print -r '\t'; } 2>/dev/null`" = 'X\t' &&
+         echo_testing_string=`{ print -r "$echo_test_string"; } 2>/dev/null` &&
+         test "X$echo_testing_string" = "X$echo_test_string"; then
+        # This shell has a builtin print -r that does the trick.
+        ECHO='print -r'
+      elif { test -f /bin/ksh || test -f /bin/ksh$ac_exeext; } &&
+	   test "X$CONFIG_SHELL" != X/bin/ksh; then
+        # If we have ksh, try running configure again with it.
+        ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}
+        export ORIGINAL_CONFIG_SHELL
+        CONFIG_SHELL=/bin/ksh
+        export CONFIG_SHELL
+        exec $CONFIG_SHELL "[$]0" --no-reexec ${1+"[$]@"}
+      else
+        # Try using printf.
+        ECHO='printf %s\n'
+        if test "X`{ $ECHO '\t'; } 2>/dev/null`" = 'X\t' &&
+	   echo_testing_string=`{ $ECHO "$echo_test_string"; } 2>/dev/null` &&
+	   test "X$echo_testing_string" = "X$echo_test_string"; then
+	  # Cool, printf works
+	  :
+        elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL "[$]0" --fallback-echo '\t') 2>/dev/null` &&
+	     test "X$echo_testing_string" = 'X\t' &&
+	     echo_testing_string=`($ORIGINAL_CONFIG_SHELL "[$]0" --fallback-echo "$echo_test_string") 2>/dev/null` &&
+	     test "X$echo_testing_string" = "X$echo_test_string"; then
+	  CONFIG_SHELL=$ORIGINAL_CONFIG_SHELL
+	  export CONFIG_SHELL
+	  SHELL="$CONFIG_SHELL"
+	  export SHELL
+	  ECHO="$CONFIG_SHELL [$]0 --fallback-echo"
+        elif echo_testing_string=`($CONFIG_SHELL "[$]0" --fallback-echo '\t') 2>/dev/null` &&
+	     test "X$echo_testing_string" = 'X\t' &&
+	     echo_testing_string=`($CONFIG_SHELL "[$]0" --fallback-echo "$echo_test_string") 2>/dev/null` &&
+	     test "X$echo_testing_string" = "X$echo_test_string"; then
+	  ECHO="$CONFIG_SHELL [$]0 --fallback-echo"
+        else
+	  # maybe with a smaller string...
+	  prev=:
+
+	  for cmd in 'echo test' 'sed 2q "[$]0"' 'sed 10q "[$]0"' 'sed 20q "[$]0"' 'sed 50q "[$]0"'; do
+	    if { test "X$echo_test_string" = "X`eval $cmd`"; } 2>/dev/null
+	    then
+	      break
+	    fi
+	    prev="$cmd"
+	  done
+
+	  if test "$prev" != 'sed 50q "[$]0"'; then
+	    echo_test_string=`eval $prev`
+	    export echo_test_string
+	    exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} "[$]0" ${1+"[$]@"}
+	  else
+	    # Oops.  We lost completely, so just stick with echo.
+	    ECHO=echo
+	  fi
+        fi
+      fi
+    fi
+  fi
+fi
+
+# Copy echo and quote the copy suitably for passing to libtool from
+# the Makefile, instead of quoting the original, which is used later.
+lt_ECHO=$ECHO
+if test "X$lt_ECHO" = "X$CONFIG_SHELL [$]0 --fallback-echo"; then
+   lt_ECHO="$CONFIG_SHELL \\\$\[$]0 --fallback-echo"
+fi
+
+AC_SUBST(lt_ECHO)
+])
+_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])
+_LT_DECL([], [ECHO], [1],
+    [An echo program that does not interpret backslashes])
+])# _LT_PROG_ECHO_BACKSLASH
+
+
+# _LT_ENABLE_LOCK
+# ---------------
+m4_defun([_LT_ENABLE_LOCK],
+[AC_ARG_ENABLE([libtool-lock],
+  [AS_HELP_STRING([--disable-libtool-lock],
+    [avoid locking (might break parallel builds)])])
+test "x$enable_libtool_lock" != xno && enable_libtool_lock=yes
+
+# Some flags need to be propagated to the compiler or linker for good
+# libtool support.
+case $host in
+ia64-*-hpux*)
+  # Find out which ABI we are using.
+  echo 'int i;' > conftest.$ac_ext
+  if AC_TRY_EVAL(ac_compile); then
+    case `/usr/bin/file conftest.$ac_objext` in
+      *ELF-32*)
+	HPUX_IA64_MODE="32"
+	;;
+      *ELF-64*)
+	HPUX_IA64_MODE="64"
+	;;
+    esac
+  fi
+  rm -rf conftest*
+  ;;
+*-*-irix6*)
+  # Find out which ABI we are using.
+  echo '[#]line __oline__ "configure"' > conftest.$ac_ext
+  if AC_TRY_EVAL(ac_compile); then
+    if test "$lt_cv_prog_gnu_ld" = yes; then
+      case `/usr/bin/file conftest.$ac_objext` in
+	*32-bit*)
+	  LD="${LD-ld} -melf32bsmip"
+	  ;;
+	*N32*)
+	  LD="${LD-ld} -melf32bmipn32"
+	  ;;
+	*64-bit*)
+	  LD="${LD-ld} -melf64bmip"
+	;;
+      esac
+    else
+      case `/usr/bin/file conftest.$ac_objext` in
+	*32-bit*)
+	  LD="${LD-ld} -32"
+	  ;;
+	*N32*)
+	  LD="${LD-ld} -n32"
+	  ;;
+	*64-bit*)
+	  LD="${LD-ld} -64"
+	  ;;
+      esac
+    fi
+  fi
+  rm -rf conftest*
+  ;;
+
+x86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \
+s390*-*linux*|s390*-*tpf*|sparc*-*linux*)
+  # Find out which ABI we are using.
+  echo 'int i;' > conftest.$ac_ext
+  if AC_TRY_EVAL(ac_compile); then
+    case `/usr/bin/file conftest.o` in
+      *32-bit*)
+	case $host in
+	  x86_64-*kfreebsd*-gnu)
+	    LD="${LD-ld} -m elf_i386_fbsd"
+	    ;;
+	  x86_64-*linux*)
+	    LD="${LD-ld} -m elf_i386"
+	    ;;
+	  ppc64-*linux*|powerpc64-*linux*)
+	    LD="${LD-ld} -m elf32ppclinux"
+	    ;;
+	  s390x-*linux*)
+	    LD="${LD-ld} -m elf_s390"
+	    ;;
+	  sparc64-*linux*)
+	    LD="${LD-ld} -m elf32_sparc"
+	    ;;
+	esac
+	;;
+      *64-bit*)
+	case $host in
+	  x86_64-*kfreebsd*-gnu)
+	    LD="${LD-ld} -m elf_x86_64_fbsd"
+	    ;;
+	  x86_64-*linux*)
+	    LD="${LD-ld} -m elf_x86_64"
+	    ;;
+	  ppc*-*linux*|powerpc*-*linux*)
+	    LD="${LD-ld} -m elf64ppc"
+	    ;;
+	  s390*-*linux*|s390*-*tpf*)
+	    LD="${LD-ld} -m elf64_s390"
+	    ;;
+	  sparc*-*linux*)
+	    LD="${LD-ld} -m elf64_sparc"
+	    ;;
+	esac
+	;;
+    esac
+  fi
+  rm -rf conftest*
+  ;;
+
+*-*-sco3.2v5*)
+  # On SCO OpenServer 5, we need -belf to get full-featured binaries.
+  SAVE_CFLAGS="$CFLAGS"
+  CFLAGS="$CFLAGS -belf"
+  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,
+    [AC_LANG_PUSH(C)
+     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])
+     AC_LANG_POP])
+  if test x"$lt_cv_cc_needs_belf" != x"yes"; then
+    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf
+    CFLAGS="$SAVE_CFLAGS"
+  fi
+  ;;
+sparc*-*solaris*)
+  # Find out which ABI we are using.
+  echo 'int i;' > conftest.$ac_ext
+  if AC_TRY_EVAL(ac_compile); then
+    case `/usr/bin/file conftest.o` in
+    *64-bit*)
+      case $lt_cv_prog_gnu_ld in
+      yes*) LD="${LD-ld} -m elf64_sparc" ;;
+      *)
+	if ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then
+	  LD="${LD-ld} -64"
+	fi
+	;;
+      esac
+      ;;
+    esac
+  fi
+  rm -rf conftest*
+  ;;
+esac
+
+need_locks="$enable_libtool_lock"
+])# _LT_ENABLE_LOCK
+
+
+# _LT_CMD_OLD_ARCHIVE
+# -------------------
+m4_defun([_LT_CMD_OLD_ARCHIVE],
+[AC_CHECK_TOOL(AR, ar, false)
+test -z "$AR" && AR=ar
+test -z "$AR_FLAGS" && AR_FLAGS=cru
+_LT_DECL([], [AR], [1], [The archiver])
+_LT_DECL([], [AR_FLAGS], [1])
+
+AC_CHECK_TOOL(STRIP, strip, :)
+test -z "$STRIP" && STRIP=:
+_LT_DECL([], [STRIP], [1], [A symbol stripping program])
+
+AC_CHECK_TOOL(RANLIB, ranlib, :)
+test -z "$RANLIB" && RANLIB=:
+_LT_DECL([], [RANLIB], [1],
+    [Commands used to install an old-style archive])
+
+# Determine commands to create old-style static archives.
+old_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'
+old_postinstall_cmds='chmod 644 $oldlib'
+old_postuninstall_cmds=
+
+if test -n "$RANLIB"; then
+  case $host_os in
+  openbsd*)
+    old_postinstall_cmds="$old_postinstall_cmds~\$RANLIB -t \$oldlib"
+    ;;
+  *)
+    old_postinstall_cmds="$old_postinstall_cmds~\$RANLIB \$oldlib"
+    ;;
+  esac
+  old_archive_cmds="$old_archive_cmds~\$RANLIB \$oldlib"
+fi
+_LT_DECL([], [old_postinstall_cmds], [2])
+_LT_DECL([], [old_postuninstall_cmds], [2])
+_LT_TAGDECL([], [old_archive_cmds], [2],
+    [Commands used to build an old-style archive])
+])# _LT_CMD_OLD_ARCHIVE
+
+
+# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,
+#		[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])
+# ----------------------------------------------------------------
+# Check whether the given compiler option works
+AC_DEFUN([_LT_COMPILER_OPTION],
+[m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_DECL_SED])dnl
+AC_CACHE_CHECK([$1], [$2],
+  [$2=no
+   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+   lt_compiler_flag="$3"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   # The option is referenced via a variable to avoid confusing sed.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [[^ ]]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:__oline__: $lt_compile\"" >&AS_MESSAGE_LOG_FD)
+   (eval "$lt_compile" 2>conftest.err)
+   ac_status=$?
+   cat conftest.err >&AS_MESSAGE_LOG_FD
+   echo "$as_me:__oline__: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
+   if (exit $ac_status) && test -s "$ac_outfile"; then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings other than the usual output.
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' >conftest.exp
+     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
+       $2=yes
+     fi
+   fi
+   $RM conftest*
+])
+
+if test x"[$]$2" = xyes; then
+    m4_if([$5], , :, [$5])
+else
+    m4_if([$6], , :, [$6])
+fi
+])# _LT_COMPILER_OPTION
+
+# Old name:
+AU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])
+
+
+# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,
+#                  [ACTION-SUCCESS], [ACTION-FAILURE])
+# ----------------------------------------------------
+# Check whether the given linker option works
+AC_DEFUN([_LT_LINKER_OPTION],
+[m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_DECL_SED])dnl
+AC_CACHE_CHECK([$1], [$2],
+  [$2=no
+   save_LDFLAGS="$LDFLAGS"
+   LDFLAGS="$LDFLAGS $3"
+   echo "$lt_simple_link_test_code" > conftest.$ac_ext
+   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then
+     # The linker can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     if test -s conftest.err; then
+       # Append any errors to the config.log.
+       cat conftest.err 1>&AS_MESSAGE_LOG_FD
+       $ECHO "X$_lt_linker_boilerplate" | $Xsed -e '/^$/d' > conftest.exp
+       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
+       if diff conftest.exp conftest.er2 >/dev/null; then
+         $2=yes
+       fi
+     else
+       $2=yes
+     fi
+   fi
+   $RM -r conftest*
+   LDFLAGS="$save_LDFLAGS"
+])
+
+if test x"[$]$2" = xyes; then
+    m4_if([$4], , :, [$4])
+else
+    m4_if([$5], , :, [$5])
+fi
+])# _LT_LINKER_OPTION
+
+# Old name:
+AU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])
+
+
+# LT_CMD_MAX_LEN
+#---------------
+AC_DEFUN([LT_CMD_MAX_LEN],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+# find the maximum length of command line arguments
+AC_MSG_CHECKING([the maximum length of command line arguments])
+AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
+  i=0
+  teststring="ABCD"
+
+  case $build_os in
+  msdosdjgpp*)
+    # On DJGPP, this test can blow up pretty badly due to problems in libc
+    # (any single argument exceeding 2000 bytes causes a buffer overrun
+    # during glob expansion).  Even if it were fixed, the result of this
+    # check would be larger than it should be.
+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right
+    ;;
+
+  gnu*)
+    # Under GNU Hurd, this test is not required because there is
+    # no limit to the length of command line arguments.
+    # Libtool will interpret -1 as no limit whatsoever
+    lt_cv_sys_max_cmd_len=-1;
+    ;;
+
+  cygwin* | mingw* | cegcc*)
+    # On Win9x/ME, this test blows up -- it succeeds, but takes
+    # about 5 minutes as the teststring grows exponentially.
+    # Worse, since 9x/ME are not pre-emptively multitasking,
+    # you end up with a "frozen" computer, even though with patience
+    # the test eventually succeeds (with a max line length of 256k).
+    # Instead, let's just punt: use the minimum linelength reported by
+    # all of the supported platforms: 8192 (on NT/2K/XP).
+    lt_cv_sys_max_cmd_len=8192;
+    ;;
+
+  amigaos*)
+    # On AmigaOS with pdksh, this test takes hours, literally.
+    # So we just punt and use a minimum line length of 8192.
+    lt_cv_sys_max_cmd_len=8192;
+    ;;
+
+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)
+    # This has been around since 386BSD, at least.  Likely further.
+    if test -x /sbin/sysctl; then
+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`
+    elif test -x /usr/sbin/sysctl; then
+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`
+    else
+      lt_cv_sys_max_cmd_len=65536	# usable default for all BSDs
+    fi
+    # And add a safety zone
+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
+    ;;
+
+  interix*)
+    # We know the value 262144 and hardcode it with a safety zone (like BSD)
+    lt_cv_sys_max_cmd_len=196608
+    ;;
+
+  osf*)
+    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure
+    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not
+    # nice to cause kernel panics so lets avoid the loop below.
+    # First set a reasonable default.
+    lt_cv_sys_max_cmd_len=16384
+    #
+    if test -x /sbin/sysconfig; then
+      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in
+        *1*) lt_cv_sys_max_cmd_len=-1 ;;
+      esac
+    fi
+    ;;
+  sco3.2v5*)
+    lt_cv_sys_max_cmd_len=102400
+    ;;
+  sysv5* | sco5v6* | sysv4.2uw2*)
+    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`
+    if test -n "$kargmax"; then
+      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[	 ]]//'`
+    else
+      lt_cv_sys_max_cmd_len=32768
+    fi
+    ;;
+  *)
+    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`
+    if test -n "$lt_cv_sys_max_cmd_len"; then
+      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
+      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
+    else
+      # Make teststring a little bigger before we do anything with it.
+      # a 1K string should be a reasonable start.
+      for i in 1 2 3 4 5 6 7 8 ; do
+        teststring=$teststring$teststring
+      done
+      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}
+      # If test is not a shell built-in, we'll probably end up computing a
+      # maximum length that is only half of the actual maximum length, but
+      # we can't tell.
+      while { test "X"`$SHELL [$]0 --fallback-echo "X$teststring$teststring" 2>/dev/null` \
+	         = "XX$teststring$teststring"; } >/dev/null 2>&1 &&
+	      test $i != 17 # 1/2 MB should be enough
+      do
+        i=`expr $i + 1`
+        teststring=$teststring$teststring
+      done
+      # Only check the string length outside the loop.
+      lt_cv_sys_max_cmd_len=`expr "X$teststring" : ".*" 2>&1`
+      teststring=
+      # Add a significant safety factor because C++ compilers can tack on
+      # massive amounts of additional arguments before passing them to the
+      # linker.  It appears as though 1/2 is a usable value.
+      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 2`
+    fi
+    ;;
+  esac
+])
+if test -n $lt_cv_sys_max_cmd_len ; then
+  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)
+else
+  AC_MSG_RESULT(none)
+fi
+max_cmd_len=$lt_cv_sys_max_cmd_len
+_LT_DECL([], [max_cmd_len], [0],
+    [What is the maximum length of a command?])
+])# LT_CMD_MAX_LEN
+
+# Old name:
+AU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])
+
+
+# _LT_HEADER_DLFCN
+# ----------------
+m4_defun([_LT_HEADER_DLFCN],
+[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl
+])# _LT_HEADER_DLFCN
+
+
+# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,
+#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)
+# ----------------------------------------------------------------
+m4_defun([_LT_TRY_DLOPEN_SELF],
+[m4_require([_LT_HEADER_DLFCN])dnl
+if test "$cross_compiling" = yes; then :
+  [$4]
+else
+  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
+  lt_status=$lt_dlunknown
+  cat > conftest.$ac_ext <<_LT_EOF
+[#line __oline__ "configure"
+#include "confdefs.h"
+
+#if HAVE_DLFCN_H
+#include <dlfcn.h>
+#endif
+
+#include <stdio.h>
+
+#ifdef RTLD_GLOBAL
+#  define LT_DLGLOBAL		RTLD_GLOBAL
+#else
+#  ifdef DL_GLOBAL
+#    define LT_DLGLOBAL		DL_GLOBAL
+#  else
+#    define LT_DLGLOBAL		0
+#  endif
+#endif
+
+/* We may have to define LT_DLLAZY_OR_NOW in the command line if we
+   find out it does not work in some platform. */
+#ifndef LT_DLLAZY_OR_NOW
+#  ifdef RTLD_LAZY
+#    define LT_DLLAZY_OR_NOW		RTLD_LAZY
+#  else
+#    ifdef DL_LAZY
+#      define LT_DLLAZY_OR_NOW		DL_LAZY
+#    else
+#      ifdef RTLD_NOW
+#        define LT_DLLAZY_OR_NOW	RTLD_NOW
+#      else
+#        ifdef DL_NOW
+#          define LT_DLLAZY_OR_NOW	DL_NOW
+#        else
+#          define LT_DLLAZY_OR_NOW	0
+#        endif
+#      endif
+#    endif
+#  endif
+#endif
+
+void fnord() { int i=42;}
+int main ()
+{
+  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);
+  int status = $lt_dlunknown;
+
+  if (self)
+    {
+      if (dlsym (self,"fnord"))       status = $lt_dlno_uscore;
+      else if (dlsym( self,"_fnord")) status = $lt_dlneed_uscore;
+      /* dlclose (self); */
+    }
+  else
+    puts (dlerror ());
+
+  return status;
+}]
+_LT_EOF
+  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then
+    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null
+    lt_status=$?
+    case x$lt_status in
+      x$lt_dlno_uscore) $1 ;;
+      x$lt_dlneed_uscore) $2 ;;
+      x$lt_dlunknown|x*) $3 ;;
+    esac
+  else :
+    # compilation failed
+    $3
+  fi
+fi
+rm -fr conftest*
+])# _LT_TRY_DLOPEN_SELF
+
+
+# LT_SYS_DLOPEN_SELF
+# ------------------
+AC_DEFUN([LT_SYS_DLOPEN_SELF],
+[m4_require([_LT_HEADER_DLFCN])dnl
+if test "x$enable_dlopen" != xyes; then
+  enable_dlopen=unknown
+  enable_dlopen_self=unknown
+  enable_dlopen_self_static=unknown
+else
+  lt_cv_dlopen=no
+  lt_cv_dlopen_libs=
+
+  case $host_os in
+  beos*)
+    lt_cv_dlopen="load_add_on"
+    lt_cv_dlopen_libs=
+    lt_cv_dlopen_self=yes
+    ;;
+
+  mingw* | pw32* | cegcc*)
+    lt_cv_dlopen="LoadLibrary"
+    lt_cv_dlopen_libs=
+    ;;
+
+  cygwin*)
+    lt_cv_dlopen="dlopen"
+    lt_cv_dlopen_libs=
+    ;;
+
+  darwin*)
+  # if libdl is installed we need to link against it
+    AC_CHECK_LIB([dl], [dlopen],
+		[lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-ldl"],[
+    lt_cv_dlopen="dyld"
+    lt_cv_dlopen_libs=
+    lt_cv_dlopen_self=yes
+    ])
+    ;;
+
+  *)
+    AC_CHECK_FUNC([shl_load],
+	  [lt_cv_dlopen="shl_load"],
+      [AC_CHECK_LIB([dld], [shl_load],
+	    [lt_cv_dlopen="shl_load" lt_cv_dlopen_libs="-ldld"],
+	[AC_CHECK_FUNC([dlopen],
+	      [lt_cv_dlopen="dlopen"],
+	  [AC_CHECK_LIB([dl], [dlopen],
+		[lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-ldl"],
+	    [AC_CHECK_LIB([svld], [dlopen],
+		  [lt_cv_dlopen="dlopen" lt_cv_dlopen_libs="-lsvld"],
+	      [AC_CHECK_LIB([dld], [dld_link],
+		    [lt_cv_dlopen="dld_link" lt_cv_dlopen_libs="-ldld"])
+	      ])
+	    ])
+	  ])
+	])
+      ])
+    ;;
+  esac
+
+  if test "x$lt_cv_dlopen" != xno; then
+    enable_dlopen=yes
+  else
+    enable_dlopen=no
+  fi
+
+  case $lt_cv_dlopen in
+  dlopen)
+    save_CPPFLAGS="$CPPFLAGS"
+    test "x$ac_cv_header_dlfcn_h" = xyes && CPPFLAGS="$CPPFLAGS -DHAVE_DLFCN_H"
+
+    save_LDFLAGS="$LDFLAGS"
+    wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $export_dynamic_flag_spec\"
+
+    save_LIBS="$LIBS"
+    LIBS="$lt_cv_dlopen_libs $LIBS"
+
+    AC_CACHE_CHECK([whether a program can dlopen itself],
+	  lt_cv_dlopen_self, [dnl
+	  _LT_TRY_DLOPEN_SELF(
+	    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,
+	    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)
+    ])
+
+    if test "x$lt_cv_dlopen_self" = xyes; then
+      wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
+      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
+	  lt_cv_dlopen_self_static, [dnl
+	  _LT_TRY_DLOPEN_SELF(
+	    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,
+	    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)
+      ])
+    fi
+
+    CPPFLAGS="$save_CPPFLAGS"
+    LDFLAGS="$save_LDFLAGS"
+    LIBS="$save_LIBS"
+    ;;
+  esac
+
+  case $lt_cv_dlopen_self in
+  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;
+  *) enable_dlopen_self=unknown ;;
+  esac
+
+  case $lt_cv_dlopen_self_static in
+  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;
+  *) enable_dlopen_self_static=unknown ;;
+  esac
+fi
+_LT_DECL([dlopen_support], [enable_dlopen], [0],
+	 [Whether dlopen is supported])
+_LT_DECL([dlopen_self], [enable_dlopen_self], [0],
+	 [Whether dlopen of programs is supported])
+_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],
+	 [Whether dlopen of statically linked programs is supported])
+])# LT_SYS_DLOPEN_SELF
+
+# Old name:
+AU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])
+
+
+# _LT_COMPILER_C_O([TAGNAME])
+# ---------------------------
+# Check to see if options -c and -o are simultaneously supported by compiler.
+# This macro does not hard code the compiler like AC_PROG_CC_C_O.
+m4_defun([_LT_COMPILER_C_O],
+[m4_require([_LT_DECL_SED])dnl
+m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_TAG_COMPILER])dnl
+AC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],
+  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],
+  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no
+   $RM -r conftest 2>/dev/null
+   mkdir conftest
+   cd conftest
+   mkdir out
+   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+   lt_compiler_flag="-o out/conftest2.$ac_objext"
+   # Insert the option either (1) after the last *FLAGS variable, or
+   # (2) before a word containing "conftest.", or (3) at the end.
+   # Note that $ac_compile itself does not contain backslashes and begins
+   # with a dollar sign (not a hyphen), so the echo should work correctly.
+   lt_compile=`echo "$ac_compile" | $SED \
+   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
+   -e 's: [[^ ]]*conftest\.: $lt_compiler_flag&:; t' \
+   -e 's:$: $lt_compiler_flag:'`
+   (eval echo "\"\$as_me:__oline__: $lt_compile\"" >&AS_MESSAGE_LOG_FD)
+   (eval "$lt_compile" 2>out/conftest.err)
+   ac_status=$?
+   cat out/conftest.err >&AS_MESSAGE_LOG_FD
+   echo "$as_me:__oline__: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
+   if (exit $ac_status) && test -s out/conftest2.$ac_objext
+   then
+     # The compiler can only warn and ignore the option if not recognized
+     # So say no if there are warnings
+     $ECHO "X$_lt_compiler_boilerplate" | $Xsed -e '/^$/d' > out/conftest.exp
+     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2
+     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then
+       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes
+     fi
+   fi
+   chmod u+w . 2>&AS_MESSAGE_LOG_FD
+   $RM conftest*
+   # SGI C++ compiler will create directory out/ii_files/ for
+   # template instantiation
+   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files
+   $RM out/* && rmdir out
+   cd ..
+   $RM -r conftest
+   $RM conftest*
+])
+_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],
+	[Does compiler simultaneously support -c and -o options?])
+])# _LT_COMPILER_C_O
+
+
+# _LT_COMPILER_FILE_LOCKS([TAGNAME])
+# ----------------------------------
+# Check to see if we can do hard links to lock some files if needed
+m4_defun([_LT_COMPILER_FILE_LOCKS],
+[m4_require([_LT_ENABLE_LOCK])dnl
+m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+_LT_COMPILER_C_O([$1])
+
+hard_links="nottested"
+if test "$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)" = no && test "$need_locks" != no; then
+  # do not overwrite the value of need_locks provided by the user
+  AC_MSG_CHECKING([if we can lock with hard links])
+  hard_links=yes
+  $RM conftest*
+  ln conftest.a conftest.b 2>/dev/null && hard_links=no
+  touch conftest.a
+  ln conftest.a conftest.b 2>&5 || hard_links=no
+  ln conftest.a conftest.b 2>/dev/null && hard_links=no
+  AC_MSG_RESULT([$hard_links])
+  if test "$hard_links" = no; then
+    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])
+    need_locks=warn
+  fi
+else
+  need_locks=no
+fi
+_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])
+])# _LT_COMPILER_FILE_LOCKS
+
+
+# _LT_CHECK_OBJDIR
+# ----------------
+m4_defun([_LT_CHECK_OBJDIR],
+[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],
+[rm -f .libs 2>/dev/null
+mkdir .libs 2>/dev/null
+if test -d .libs; then
+  lt_cv_objdir=.libs
+else
+  # MS-DOS does not allow filenames that begin with a dot.
+  lt_cv_objdir=_libs
+fi
+rmdir .libs 2>/dev/null])
+objdir=$lt_cv_objdir
+_LT_DECL([], [objdir], [0],
+         [The name of the directory that contains temporary libtool files])dnl
+m4_pattern_allow([LT_OBJDIR])dnl
+AC_DEFINE_UNQUOTED(LT_OBJDIR, "$lt_cv_objdir/",
+  [Define to the sub-directory in which libtool stores uninstalled libraries.])
+])# _LT_CHECK_OBJDIR
+
+
+# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])
+# --------------------------------------
+# Check hardcoding attributes.
+m4_defun([_LT_LINKER_HARDCODE_LIBPATH],
+[AC_MSG_CHECKING([how to hardcode library paths into programs])
+_LT_TAGVAR(hardcode_action, $1)=
+if test -n "$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)" ||
+   test -n "$_LT_TAGVAR(runpath_var, $1)" ||
+   test "X$_LT_TAGVAR(hardcode_automatic, $1)" = "Xyes" ; then
+
+  # We can hardcode non-existent directories.
+  if test "$_LT_TAGVAR(hardcode_direct, $1)" != no &&
+     # If the only mechanism to avoid hardcoding is shlibpath_var, we
+     # have to relink, otherwise we might link with an installed library
+     # when we should be linking with a yet-to-be-installed one
+     ## test "$_LT_TAGVAR(hardcode_shlibpath_var, $1)" != no &&
+     test "$_LT_TAGVAR(hardcode_minus_L, $1)" != no; then
+    # Linking always hardcodes the temporary library directory.
+    _LT_TAGVAR(hardcode_action, $1)=relink
+  else
+    # We can link without hardcoding, and we can hardcode nonexisting dirs.
+    _LT_TAGVAR(hardcode_action, $1)=immediate
+  fi
+else
+  # We cannot hardcode anything, or else we can only hardcode existing
+  # directories.
+  _LT_TAGVAR(hardcode_action, $1)=unsupported
+fi
+AC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])
+
+if test "$_LT_TAGVAR(hardcode_action, $1)" = relink ||
+   test "$_LT_TAGVAR(inherit_rpath, $1)" = yes; then
+  # Fast installation is not supported
+  enable_fast_install=no
+elif test "$shlibpath_overrides_runpath" = yes ||
+     test "$enable_shared" = no; then
+  # Fast installation is not necessary
+  enable_fast_install=needless
+fi
+_LT_TAGDECL([], [hardcode_action], [0],
+    [How to hardcode a shared library path into an executable])
+])# _LT_LINKER_HARDCODE_LIBPATH
+
+
+# _LT_CMD_STRIPLIB
+# ----------------
+m4_defun([_LT_CMD_STRIPLIB],
+[m4_require([_LT_DECL_EGREP])
+striplib=
+old_striplib=
+AC_MSG_CHECKING([whether stripping libraries is possible])
+if test -n "$STRIP" && $STRIP -V 2>&1 | $GREP "GNU strip" >/dev/null; then
+  test -z "$old_striplib" && old_striplib="$STRIP --strip-debug"
+  test -z "$striplib" && striplib="$STRIP --strip-unneeded"
+  AC_MSG_RESULT([yes])
+else
+# FIXME - insert some real tests, host_os isn't really good enough
+  case $host_os in
+  darwin*)
+    if test -n "$STRIP" ; then
+      striplib="$STRIP -x"
+      old_striplib="$STRIP -S"
+      AC_MSG_RESULT([yes])
+    else
+      AC_MSG_RESULT([no])
+    fi
+    ;;
+  *)
+    AC_MSG_RESULT([no])
+    ;;
+  esac
+fi
+_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])
+_LT_DECL([], [striplib], [1])
+])# _LT_CMD_STRIPLIB
+
+
+# _LT_SYS_DYNAMIC_LINKER([TAG])
+# -----------------------------
+# PORTME Fill in your ld.so characteristics
+m4_defun([_LT_SYS_DYNAMIC_LINKER],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+m4_require([_LT_DECL_EGREP])dnl
+m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_DECL_OBJDUMP])dnl
+m4_require([_LT_DECL_SED])dnl
+AC_MSG_CHECKING([dynamic linker characteristics])
+m4_if([$1],
+	[], [
+if test "$GCC" = yes; then
+  case $host_os in
+    darwin*) lt_awk_arg="/^libraries:/,/LR/" ;;
+    *) lt_awk_arg="/^libraries:/" ;;
+  esac
+  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e "s/^libraries://" -e "s,=/,/,g"`
+  if $ECHO "$lt_search_path_spec" | $GREP ';' >/dev/null ; then
+    # if the path contains ";" then we assume it to be the separator
+    # otherwise default to the standard path separator (i.e. ":") - it is
+    # assumed that no part of a normal pathname contains ";" but that should
+    # okay in the real world where ";" in dirpaths is itself problematic.
+    lt_search_path_spec=`$ECHO "$lt_search_path_spec" | $SED -e 's/;/ /g'`
+  else
+    lt_search_path_spec=`$ECHO "$lt_search_path_spec" | $SED  -e "s/$PATH_SEPARATOR/ /g"`
+  fi
+  # Ok, now we have the path, separated by spaces, we can step through it
+  # and add multilib dir if necessary.
+  lt_tmp_lt_search_path_spec=
+  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`
+  for lt_sys_path in $lt_search_path_spec; do
+    if test -d "$lt_sys_path/$lt_multi_os_dir"; then
+      lt_tmp_lt_search_path_spec="$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir"
+    else
+      test -d "$lt_sys_path" && \
+	lt_tmp_lt_search_path_spec="$lt_tmp_lt_search_path_spec $lt_sys_path"
+    fi
+  done
+  lt_search_path_spec=`$ECHO $lt_tmp_lt_search_path_spec | awk '
+BEGIN {RS=" "; FS="/|\n";} {
+  lt_foo="";
+  lt_count=0;
+  for (lt_i = NF; lt_i > 0; lt_i--) {
+    if ($lt_i != "" && $lt_i != ".") {
+      if ($lt_i == "..") {
+        lt_count++;
+      } else {
+        if (lt_count == 0) {
+          lt_foo="/" $lt_i lt_foo;
+        } else {
+          lt_count--;
+        }
+      }
+    }
+  }
+  if (lt_foo != "") { lt_freq[[lt_foo]]++; }
+  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }
+}'`
+  sys_lib_search_path_spec=`$ECHO $lt_search_path_spec`
+else
+  sys_lib_search_path_spec="/lib /usr/lib /usr/local/lib"
+fi])
+library_names_spec=
+libname_spec='lib$name'
+soname_spec=
+shrext_cmds=".so"
+postinstall_cmds=
+postuninstall_cmds=
+finish_cmds=
+finish_eval=
+shlibpath_var=
+shlibpath_overrides_runpath=unknown
+version_type=none
+dynamic_linker="$host_os ld.so"
+sys_lib_dlsearch_path_spec="/lib /usr/lib"
+need_lib_prefix=unknown
+hardcode_into_libs=no
+
+# when you set need_version to no, make sure it does not cause -set_version
+# flags to be left without arguments
+need_version=unknown
+
+case $host_os in
+aix3*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'
+  shlibpath_var=LIBPATH
+
+  # AIX 3 has no versioning support, so we append a major version to the name.
+  soname_spec='${libname}${release}${shared_ext}$major'
+  ;;
+
+aix[[4-9]]*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  hardcode_into_libs=yes
+  if test "$host_cpu" = ia64; then
+    # AIX 5 supports IA64
+    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'
+    shlibpath_var=LD_LIBRARY_PATH
+  else
+    # With GCC up to 2.95.x, collect2 would create an import file
+    # for dependence libraries.  The import file would start with
+    # the line `#! .'.  This would cause the generated library to
+    # depend on `.', always an invalid library.  This was fixed in
+    # development snapshots of GCC prior to 3.0.
+    case $host_os in
+      aix4 | aix4.[[01]] | aix4.[[01]].*)
+      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'
+	   echo ' yes '
+	   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then
+	:
+      else
+	can_build_shared=no
+      fi
+      ;;
+    esac
+    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct
+    # soname into executable. Probably we can add versioning support to
+    # collect2, so additional links can be useful in future.
+    if test "$aix_use_runtimelinking" = yes; then
+      # If using run time linking (on AIX 4.2 or later) use lib<name>.so
+      # instead of lib<name>.a to let people know that these are not
+      # typical AIX shared libraries.
+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    else
+      # We preserve .a as extension for shared libraries through AIX4.2
+      # and later when we are not doing run time linking.
+      library_names_spec='${libname}${release}.a $libname.a'
+      soname_spec='${libname}${release}${shared_ext}$major'
+    fi
+    shlibpath_var=LIBPATH
+  fi
+  ;;
+
+amigaos*)
+  case $host_cpu in
+  powerpc)
+    # Since July 2007 AmigaOS4 officially supports .so libraries.
+    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    ;;
+  m68k)
+    library_names_spec='$libname.ixlibrary $libname.a'
+    # Create ${libname}_ixlibrary.a entries in /sys/libs.
+    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$ECHO "X$lib" | $Xsed -e '\''s%^.*/\([[^/]]*\)\.ixlibrary$%\1%'\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show "cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'
+    ;;
+  esac
+  ;;
+
+beos*)
+  library_names_spec='${libname}${shared_ext}'
+  dynamic_linker="$host_os ld.so"
+  shlibpath_var=LIBRARY_PATH
+  ;;
+
+bsdi[[45]]*)
+  version_type=linux
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  sys_lib_search_path_spec="/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib"
+  sys_lib_dlsearch_path_spec="/shlib /usr/lib /usr/local/lib"
+  # the default ld.so.conf also contains /usr/contrib/lib and
+  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow
+  # libtool to hard-code these into programs
+  ;;
+
+cygwin* | mingw* | pw32* | cegcc*)
+  version_type=windows
+  shrext_cmds=".dll"
+  need_version=no
+  need_lib_prefix=no
+
+  case $GCC,$host_os in
+  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)
+    library_names_spec='$libname.dll.a'
+    # DLL is installed to $(libdir)/../bin by postinstall_cmds
+    postinstall_cmds='base_file=`basename \${file}`~
+      dlpath=`$SHELL 2>&1 -c '\''. $dir/'\''\${base_file}'\''i; echo \$dlname'\''`~
+      dldir=$destdir/`dirname \$dlpath`~
+      test -d \$dldir || mkdir -p \$dldir~
+      $install_prog $dir/$dlname \$dldir/$dlname~
+      chmod a+x \$dldir/$dlname~
+      if test -n '\''$stripme'\'' && test -n '\''$striplib'\''; then
+        eval '\''$striplib \$dldir/$dlname'\'' || exit \$?;
+      fi'
+    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\''. $file; echo \$dlname'\''`~
+      dlpath=$dir/\$dldll~
+       $RM \$dlpath'
+    shlibpath_overrides_runpath=yes
+
+    case $host_os in
+    cygwin*)
+      # Cygwin DLLs use 'cyg' prefix rather than 'lib'
+      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'
+      sys_lib_search_path_spec="/usr/lib /lib/w32api /lib /usr/local/lib"
+      ;;
+    mingw* | cegcc*)
+      # MinGW DLLs use traditional 'lib' prefix
+      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'
+      sys_lib_search_path_spec=`$CC -print-search-dirs | $GREP "^libraries:" | $SED -e "s/^libraries://" -e "s,=/,/,g"`
+      if $ECHO "$sys_lib_search_path_spec" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then
+        # It is most probably a Windows format PATH printed by
+        # mingw gcc, but we are running on Cygwin. Gcc prints its search
+        # path with ; separators, and with drive letters. We can handle the
+        # drive letters (cygwin fileutils understands them), so leave them,
+        # especially as we might pass files found there to a mingw objdump,
+        # which wouldn't understand a cygwinified path. Ahh.
+        sys_lib_search_path_spec=`$ECHO "$sys_lib_search_path_spec" | $SED -e 's/;/ /g'`
+      else
+        sys_lib_search_path_spec=`$ECHO "$sys_lib_search_path_spec" | $SED  -e "s/$PATH_SEPARATOR/ /g"`
+      fi
+      ;;
+    pw32*)
+      # pw32 DLLs use 'pw' prefix rather than 'lib'
+      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'
+      ;;
+    esac
+    ;;
+
+  *)
+    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'
+    ;;
+  esac
+  dynamic_linker='Win32 ld.exe'
+  # FIXME: first we should search . and the directory the executable is in
+  shlibpath_var=PATH
+  ;;
+
+darwin* | rhapsody*)
+  dynamic_linker="$host_os dyld"
+  version_type=darwin
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'
+  soname_spec='${libname}${release}${major}$shared_ext'
+  shlibpath_overrides_runpath=yes
+  shlibpath_var=DYLD_LIBRARY_PATH
+  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'
+m4_if([$1], [],[
+  sys_lib_search_path_spec="$sys_lib_search_path_spec /usr/local/lib"])
+  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'
+  ;;
+
+dgux*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  ;;
+
+freebsd1*)
+  dynamic_linker=no
+  ;;
+
+freebsd* | dragonfly*)
+  # DragonFly does not have aout.  When/if they implement a new
+  # versioning mechanism, adjust this.
+  if test -x /usr/bin/objformat; then
+    objformat=`/usr/bin/objformat`
+  else
+    case $host_os in
+    freebsd[[123]]*) objformat=aout ;;
+    *) objformat=elf ;;
+    esac
+  fi
+  version_type=freebsd-$objformat
+  case $version_type in
+    freebsd-elf*)
+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'
+      need_version=no
+      need_lib_prefix=no
+      ;;
+    freebsd-*)
+      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'
+      need_version=yes
+      ;;
+  esac
+  shlibpath_var=LD_LIBRARY_PATH
+  case $host_os in
+  freebsd2*)
+    shlibpath_overrides_runpath=yes
+    ;;
+  freebsd3.[[01]]* | freebsdelf3.[[01]]*)
+    shlibpath_overrides_runpath=yes
+    hardcode_into_libs=yes
+    ;;
+  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \
+  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)
+    shlibpath_overrides_runpath=no
+    hardcode_into_libs=yes
+    ;;
+  *) # from 4.6 on, and DragonFly
+    shlibpath_overrides_runpath=yes
+    hardcode_into_libs=yes
+    ;;
+  esac
+  ;;
+
+gnu*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+  ;;
+
+hpux9* | hpux10* | hpux11*)
+  # Give a soname corresponding to the major version so that dld.sl refuses to
+  # link against other versions.
+  version_type=sunos
+  need_lib_prefix=no
+  need_version=no
+  case $host_cpu in
+  ia64*)
+    shrext_cmds='.so'
+    hardcode_into_libs=yes
+    dynamic_linker="$host_os dld.so"
+    shlibpath_var=LD_LIBRARY_PATH
+    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    if test "X$HPUX_IA64_MODE" = X32; then
+      sys_lib_search_path_spec="/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib"
+    else
+      sys_lib_search_path_spec="/usr/lib/hpux64 /usr/local/lib/hpux64"
+    fi
+    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec
+    ;;
+  hppa*64*)
+    shrext_cmds='.sl'
+    hardcode_into_libs=yes
+    dynamic_linker="$host_os dld.sl"
+    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH
+    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    sys_lib_search_path_spec="/usr/lib/pa20_64 /usr/ccs/lib/pa20_64"
+    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec
+    ;;
+  *)
+    shrext_cmds='.sl'
+    dynamic_linker="$host_os dld.sl"
+    shlibpath_var=SHLIB_PATH
+    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    ;;
+  esac
+  # HP-UX runs *really* slowly unless shared libraries are mode 555.
+  postinstall_cmds='chmod 555 $lib'
+  ;;
+
+interix[[3-9]]*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  ;;
+
+irix5* | irix6* | nonstopux*)
+  case $host_os in
+    nonstopux*) version_type=nonstopux ;;
+    *)
+	if test "$lt_cv_prog_gnu_ld" = yes; then
+		version_type=linux
+	else
+		version_type=irix
+	fi ;;
+  esac
+  need_lib_prefix=no
+  need_version=no
+  soname_spec='${libname}${release}${shared_ext}$major'
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'
+  case $host_os in
+  irix5* | nonstopux*)
+    libsuff= shlibsuff=
+    ;;
+  *)
+    case $LD in # libtool.m4 will add one of these switches to LD
+    *-32|*"-32 "|*-melf32bsmip|*"-melf32bsmip ")
+      libsuff= shlibsuff= libmagic=32-bit;;
+    *-n32|*"-n32 "|*-melf32bmipn32|*"-melf32bmipn32 ")
+      libsuff=32 shlibsuff=N32 libmagic=N32;;
+    *-64|*"-64 "|*-melf64bmip|*"-melf64bmip ")
+      libsuff=64 shlibsuff=64 libmagic=64-bit;;
+    *) libsuff= shlibsuff= libmagic=never-match;;
+    esac
+    ;;
+  esac
+  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH
+  shlibpath_overrides_runpath=no
+  sys_lib_search_path_spec="/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}"
+  sys_lib_dlsearch_path_spec="/usr/lib${libsuff} /lib${libsuff}"
+  hardcode_into_libs=yes
+  ;;
+
+# No shared lib support for Linux oldld, aout, or coff.
+linux*oldld* | linux*aout* | linux*coff*)
+  dynamic_linker=no
+  ;;
+
+# This must be Linux ELF.
+linux* | k*bsd*-gnu | kopensolaris*-gnu)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig -n $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  # Some binutils ld are patched to set DT_RUNPATH
+  save_LDFLAGS=$LDFLAGS
+  save_libdir=$libdir
+  eval "libdir=/foo; wl=\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\"; \
+       LDFLAGS=\"\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\""
+  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],
+    [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep "RUNPATH.*$libdir" >/dev/null],
+       [shlibpath_overrides_runpath=yes])])
+  LDFLAGS=$save_LDFLAGS
+  libdir=$save_libdir
+
+  # This implies no fast_install, which is unacceptable.
+  # Some rework will be needed to allow for fast_install
+  # before this can be enabled.
+  hardcode_into_libs=yes
+
+  # Append ld.so.conf contents to the search path
+  if test -f /etc/ld.so.conf; then
+    lt_ld_extra=`awk '/^include / { system(sprintf("cd /etc; cat %s 2>/dev/null", \[$]2)); skip = 1; } { if (!skip) print \[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[	 ]*hwcap[	 ]/d;s/[:,	]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\n' ' '`
+    sys_lib_dlsearch_path_spec="/lib /usr/lib $lt_ld_extra"
+  fi
+
+  # We used to test for /lib/ld.so.1 and disable shared libraries on
+  # powerpc, because MkLinux only supported shared libraries with the
+  # GNU dynamic linker.  Since this was broken with cross compilers,
+  # most powerpc-linux boxes support dynamic linking these days and
+  # people can always --disable-shared, the test was removed, and we
+  # assume the GNU/Linux dynamic linker is in use.
+  dynamic_linker='GNU/Linux ld.so'
+  ;;
+
+netbsdelf*-gnu)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  dynamic_linker='NetBSD ld.elf_so'
+  ;;
+
+netbsd*)
+  version_type=sunos
+  need_lib_prefix=no
+  need_version=no
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+    finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
+    dynamic_linker='NetBSD (a.out) ld.so'
+  else
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+    dynamic_linker='NetBSD ld.elf_so'
+  fi
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  ;;
+
+newsos6)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  ;;
+
+*nto* | *qnx*)
+  version_type=qnx
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  dynamic_linker='ldqnx.so'
+  ;;
+
+openbsd*)
+  version_type=sunos
+  sys_lib_dlsearch_path_spec="/usr/lib"
+  need_lib_prefix=no
+  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.
+  case $host_os in
+    openbsd3.3 | openbsd3.3.*)	need_version=yes ;;
+    *)				need_version=no  ;;
+  esac
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+  finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    case $host_os in
+      openbsd2.[[89]] | openbsd2.[[89]].*)
+	shlibpath_overrides_runpath=no
+	;;
+      *)
+	shlibpath_overrides_runpath=yes
+	;;
+      esac
+  else
+    shlibpath_overrides_runpath=yes
+  fi
+  ;;
+
+os2*)
+  libname_spec='$name'
+  shrext_cmds=".dll"
+  need_lib_prefix=no
+  library_names_spec='$libname${shared_ext} $libname.a'
+  dynamic_linker='OS/2 ld.exe'
+  shlibpath_var=LIBPATH
+  ;;
+
+osf3* | osf4* | osf5*)
+  version_type=osf
+  need_lib_prefix=no
+  need_version=no
+  soname_spec='${libname}${release}${shared_ext}$major'
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  sys_lib_search_path_spec="/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib"
+  sys_lib_dlsearch_path_spec="$sys_lib_search_path_spec"
+  ;;
+
+rdos*)
+  dynamic_linker=no
+  ;;
+
+solaris*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  # ldd complains unless libraries are executable
+  postinstall_cmds='chmod +x $lib'
+  ;;
+
+sunos4*)
+  version_type=sunos
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'
+  finish_cmds='PATH="\$PATH:/usr/etc" ldconfig $libdir'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  if test "$with_gnu_ld" = yes; then
+    need_lib_prefix=no
+  fi
+  need_version=yes
+  ;;
+
+sysv4 | sysv4.3*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  case $host_vendor in
+    sni)
+      shlibpath_overrides_runpath=no
+      need_lib_prefix=no
+      runpath_var=LD_RUN_PATH
+      ;;
+    siemens)
+      need_lib_prefix=no
+      ;;
+    motorola)
+      need_lib_prefix=no
+      need_version=no
+      shlibpath_overrides_runpath=no
+      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'
+      ;;
+  esac
+  ;;
+
+sysv4*MP*)
+  if test -d /usr/nec ;then
+    version_type=linux
+    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'
+    soname_spec='$libname${shared_ext}.$major'
+    shlibpath_var=LD_LIBRARY_PATH
+  fi
+  ;;
+
+sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
+  version_type=freebsd-elf
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=yes
+  hardcode_into_libs=yes
+  if test "$with_gnu_ld" = yes; then
+    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'
+  else
+    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'
+    case $host_os in
+      sco3.2v5*)
+        sys_lib_search_path_spec="$sys_lib_search_path_spec /lib"
+	;;
+    esac
+  fi
+  sys_lib_dlsearch_path_spec='/usr/lib'
+  ;;
+
+tpf*)
+  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  shlibpath_var=LD_LIBRARY_PATH
+  shlibpath_overrides_runpath=no
+  hardcode_into_libs=yes
+  ;;
+
+uts4*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  ;;
+
+*)
+  dynamic_linker=no
+  ;;
+esac
+AC_MSG_RESULT([$dynamic_linker])
+test "$dynamic_linker" = no && can_build_shared=no
+
+variables_saved_for_relink="PATH $shlibpath_var $runpath_var"
+if test "$GCC" = yes; then
+  variables_saved_for_relink="$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH"
+fi
+
+if test "${lt_cv_sys_lib_search_path_spec+set}" = set; then
+  sys_lib_search_path_spec="$lt_cv_sys_lib_search_path_spec"
+fi
+if test "${lt_cv_sys_lib_dlsearch_path_spec+set}" = set; then
+  sys_lib_dlsearch_path_spec="$lt_cv_sys_lib_dlsearch_path_spec"
+fi
+
+_LT_DECL([], [variables_saved_for_relink], [1],
+    [Variables whose values should be saved in libtool wrapper scripts and
+    restored at link time])
+_LT_DECL([], [need_lib_prefix], [0],
+    [Do we need the "lib" prefix for modules?])
+_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])
+_LT_DECL([], [version_type], [0], [Library versioning type])
+_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])
+_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])
+_LT_DECL([], [shlibpath_overrides_runpath], [0],
+    [Is shlibpath searched before the hard-coded library search path?])
+_LT_DECL([], [libname_spec], [1], [Format of library name prefix])
+_LT_DECL([], [library_names_spec], [1],
+    [[List of archive names.  First name is the real one, the rest are links.
+    The last name is the one that the linker finds with -lNAME]])
+_LT_DECL([], [soname_spec], [1],
+    [[The coded name of the library, if different from the real name]])
+_LT_DECL([], [postinstall_cmds], [2],
+    [Command to use after installation of a shared archive])
+_LT_DECL([], [postuninstall_cmds], [2],
+    [Command to use after uninstallation of a shared archive])
+_LT_DECL([], [finish_cmds], [2],
+    [Commands used to finish a libtool library installation in a directory])
+_LT_DECL([], [finish_eval], [1],
+    [[As "finish_cmds", except a single script fragment to be evaled but
+    not shown]])
+_LT_DECL([], [hardcode_into_libs], [0],
+    [Whether we should hardcode library paths into libraries])
+_LT_DECL([], [sys_lib_search_path_spec], [2],
+    [Compile-time system search path for libraries])
+_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],
+    [Run-time system search path for libraries])
+])# _LT_SYS_DYNAMIC_LINKER
+
+
+# _LT_PATH_TOOL_PREFIX(TOOL)
+# --------------------------
+# find a file program which can recognize shared library
+AC_DEFUN([_LT_PATH_TOOL_PREFIX],
+[m4_require([_LT_DECL_EGREP])dnl
+AC_MSG_CHECKING([for $1])
+AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
+[case $MAGIC_CMD in
+[[\\/*] |  ?:[\\/]*])
+  lt_cv_path_MAGIC_CMD="$MAGIC_CMD" # Let the user override the test with a path.
+  ;;
+*)
+  lt_save_MAGIC_CMD="$MAGIC_CMD"
+  lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+dnl $ac_dummy forces splitting on constant user-supplied paths.
+dnl POSIX.2 word splitting is done only on the output of word expansions,
+dnl not every word.  This closes a longstanding sh security hole.
+  ac_dummy="m4_if([$2], , $PATH, [$2])"
+  for ac_dir in $ac_dummy; do
+    IFS="$lt_save_ifs"
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$1; then
+      lt_cv_path_MAGIC_CMD="$ac_dir/$1"
+      if test -n "$file_magic_test_file"; then
+	case $deplibs_check_method in
+	"file_magic "*)
+	  file_magic_regex=`expr "$deplibs_check_method" : "file_magic \(.*\)"`
+	  MAGIC_CMD="$lt_cv_path_MAGIC_CMD"
+	  if eval $file_magic_cmd \$file_magic_test_file 2> /dev/null |
+	    $EGREP "$file_magic_regex" > /dev/null; then
+	    :
+	  else
+	    cat <<_LT_EOF 1>&2
+
+*** Warning: the command libtool uses to detect shared libraries,
+*** $file_magic_cmd, produces output that libtool cannot recognize.
+*** The result is that libtool may fail to recognize shared libraries
+*** as such.  This will affect the creation of libtool libraries that
+*** depend on shared libraries, but programs linked with such libtool
+*** libraries will work regardless of this problem.  Nevertheless, you
+*** may want to report the problem to your system manager and/or to
+*** bug-libtool@gnu.org
+
+_LT_EOF
+	  fi ;;
+	esac
+      fi
+      break
+    fi
+  done
+  IFS="$lt_save_ifs"
+  MAGIC_CMD="$lt_save_MAGIC_CMD"
+  ;;
+esac])
+MAGIC_CMD="$lt_cv_path_MAGIC_CMD"
+if test -n "$MAGIC_CMD"; then
+  AC_MSG_RESULT($MAGIC_CMD)
+else
+  AC_MSG_RESULT(no)
+fi
+_LT_DECL([], [MAGIC_CMD], [0],
+	 [Used to examine libraries when file_magic_cmd begins with "file"])dnl
+])# _LT_PATH_TOOL_PREFIX
+
+# Old name:
+AU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])
+
+
+# _LT_PATH_MAGIC
+# --------------
+# find a file program which can recognize a shared library
+m4_defun([_LT_PATH_MAGIC],
+[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)
+if test -z "$lt_cv_path_MAGIC_CMD"; then
+  if test -n "$ac_tool_prefix"; then
+    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)
+  else
+    MAGIC_CMD=:
+  fi
+fi
+])# _LT_PATH_MAGIC
+
+
+# LT_PATH_LD
+# ----------
+# find the pathname to the GNU or non-GNU linker
+AC_DEFUN([LT_PATH_LD],
+[AC_REQUIRE([AC_PROG_CC])dnl
+AC_REQUIRE([AC_CANONICAL_HOST])dnl
+AC_REQUIRE([AC_CANONICAL_BUILD])dnl
+m4_require([_LT_DECL_SED])dnl
+m4_require([_LT_DECL_EGREP])dnl
+
+AC_ARG_WITH([gnu-ld],
+    [AS_HELP_STRING([--with-gnu-ld],
+	[assume the C compiler uses GNU ld @<:@default=no@:>@])],
+    [test "$withval" = no || with_gnu_ld=yes],
+    [with_gnu_ld=no])dnl
+
+ac_prog=ld
+if test "$GCC" = yes; then
+  # Check if gcc -print-prog-name=ld gives a path.
+  AC_MSG_CHECKING([for ld used by $CC])
+  case $host in
+  *-*-mingw*)
+    # gcc leaves a trailing carriage return which upsets mingw
+    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
+  *)
+    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
+  esac
+  case $ac_prog in
+    # Accept absolute paths.
+    [[\\/]]* | ?:[[\\/]]*)
+      re_direlt='/[[^/]][[^/]]*/\.\./'
+      # Canonicalize the pathname of ld
+      ac_prog=`$ECHO "$ac_prog"| $SED 's%\\\\%/%g'`
+      while $ECHO "$ac_prog" | $GREP "$re_direlt" > /dev/null 2>&1; do
+	ac_prog=`$ECHO $ac_prog| $SED "s%$re_direlt%/%"`
+      done
+      test -z "$LD" && LD="$ac_prog"
+      ;;
+  "")
+    # If it fails, then pretend we aren't using GCC.
+    ac_prog=ld
+    ;;
+  *)
+    # If it is relative, then search for the first ld in PATH.
+    with_gnu_ld=unknown
+    ;;
+  esac
+elif test "$with_gnu_ld" = yes; then
+  AC_MSG_CHECKING([for GNU ld])
+else
+  AC_MSG_CHECKING([for non-GNU ld])
+fi
+AC_CACHE_VAL(lt_cv_path_LD,
+[if test -z "$LD"; then
+  lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+  for ac_dir in $PATH; do
+    IFS="$lt_save_ifs"
+    test -z "$ac_dir" && ac_dir=.
+    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
+      lt_cv_path_LD="$ac_dir/$ac_prog"
+      # Check to see if the program is GNU ld.  I'd rather use --version,
+      # but apparently some variants of GNU ld only accept -v.
+      # Break only if it was the GNU/non-GNU ld that we prefer.
+      case `"$lt_cv_path_LD" -v 2>&1 </dev/null` in
+      *GNU* | *'with BFD'*)
+	test "$with_gnu_ld" != no && break
+	;;
+      *)
+	test "$with_gnu_ld" != yes && break
+	;;
+      esac
+    fi
+  done
+  IFS="$lt_save_ifs"
+else
+  lt_cv_path_LD="$LD" # Let the user override the test with a path.
+fi])
+LD="$lt_cv_path_LD"
+if test -n "$LD"; then
+  AC_MSG_RESULT($LD)
+else
+  AC_MSG_RESULT(no)
+fi
+test -z "$LD" && AC_MSG_ERROR([no acceptable ld found in \$PATH])
+_LT_PATH_LD_GNU
+AC_SUBST([LD])
+
+_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])
+])# LT_PATH_LD
+
+# Old names:
+AU_ALIAS([AM_PROG_LD], [LT_PATH_LD])
+AU_ALIAS([AC_PROG_LD], [LT_PATH_LD])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AM_PROG_LD], [])
+dnl AC_DEFUN([AC_PROG_LD], [])
+
+
+# _LT_PATH_LD_GNU
+#- --------------
+m4_defun([_LT_PATH_LD_GNU],
+[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,
+[# I'd rather use --version here, but apparently some GNU lds only accept -v.
+case `$LD -v 2>&1 </dev/null` in
+*GNU* | *'with BFD'*)
+  lt_cv_prog_gnu_ld=yes
+  ;;
+*)
+  lt_cv_prog_gnu_ld=no
+  ;;
+esac])
+with_gnu_ld=$lt_cv_prog_gnu_ld
+])# _LT_PATH_LD_GNU
+
+
+# _LT_CMD_RELOAD
+# --------------
+# find reload flag for linker
+#   -- PORTME Some linkers may need a different reload flag.
+m4_defun([_LT_CMD_RELOAD],
+[AC_CACHE_CHECK([for $LD option to reload object files],
+  lt_cv_ld_reload_flag,
+  [lt_cv_ld_reload_flag='-r'])
+reload_flag=$lt_cv_ld_reload_flag
+case $reload_flag in
+"" | " "*) ;;
+*) reload_flag=" $reload_flag" ;;
+esac
+reload_cmds='$LD$reload_flag -o $output$reload_objs'
+case $host_os in
+  darwin*)
+    if test "$GCC" = yes; then
+      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'
+    else
+      reload_cmds='$LD$reload_flag -o $output$reload_objs'
+    fi
+    ;;
+esac
+_LT_DECL([], [reload_flag], [1], [How to create reloadable object files])dnl
+_LT_DECL([], [reload_cmds], [2])dnl
+])# _LT_CMD_RELOAD
+
+
+# _LT_CHECK_MAGIC_METHOD
+# ----------------------
+# how to check for library dependencies
+#  -- PORTME fill in with the dynamic library characteristics
+m4_defun([_LT_CHECK_MAGIC_METHOD],
+[m4_require([_LT_DECL_EGREP])
+m4_require([_LT_DECL_OBJDUMP])
+AC_CACHE_CHECK([how to recognize dependent libraries],
+lt_cv_deplibs_check_method,
+[lt_cv_file_magic_cmd='$MAGIC_CMD'
+lt_cv_file_magic_test_file=
+lt_cv_deplibs_check_method='unknown'
+# Need to set the preceding variable on all platforms that support
+# interlibrary dependencies.
+# 'none' -- dependencies not supported.
+# `unknown' -- same as none, but documents that we really don't know.
+# 'pass_all' -- all dependencies passed with no checks.
+# 'test_compile' -- check by making test program.
+# 'file_magic [[regex]]' -- check by looking for files in library path
+# which responds to the $file_magic_cmd with a given extended regex.
+# If you have `file' or equivalent on your system and you're not sure
+# whether `pass_all' will *always* work, you probably want this one.
+
+case $host_os in
+aix[[4-9]]*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+beos*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+bsdi[[45]]*)
+  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'
+  lt_cv_file_magic_cmd='/usr/bin/file -L'
+  lt_cv_file_magic_test_file=/shlib/libc.so
+  ;;
+
+cygwin*)
+  # func_win32_libid is a shell function defined in ltmain.sh
+  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'
+  lt_cv_file_magic_cmd='func_win32_libid'
+  ;;
+
+mingw* | pw32*)
+  # Base MSYS/MinGW do not provide the 'file' command needed by
+  # func_win32_libid shell function, so use a weaker test based on 'objdump',
+  # unless we find 'file', for example because we are cross-compiling.
+  if ( file / ) >/dev/null 2>&1; then
+    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'
+    lt_cv_file_magic_cmd='func_win32_libid'
+  else
+    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'
+    lt_cv_file_magic_cmd='$OBJDUMP -f'
+  fi
+  ;;
+
+cegcc)
+  # use the weaker test based on 'objdump'. See mingw*.
+  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'
+  lt_cv_file_magic_cmd='$OBJDUMP -f'
+  ;;
+
+darwin* | rhapsody*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+freebsd* | dragonfly*)
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then
+    case $host_cpu in
+    i*86 )
+      # Not sure whether the presence of OpenBSD here was a mistake.
+      # Let's accept both of them until this is cleared up.
+      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'
+      lt_cv_file_magic_cmd=/usr/bin/file
+      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`
+      ;;
+    esac
+  else
+    lt_cv_deplibs_check_method=pass_all
+  fi
+  ;;
+
+gnu*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+hpux10.20* | hpux11*)
+  lt_cv_file_magic_cmd=/usr/bin/file
+  case $host_cpu in
+  ia64*)
+    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'
+    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so
+    ;;
+  hppa*64*)
+    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]']
+    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl
+    ;;
+  *)
+    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'
+    lt_cv_file_magic_test_file=/usr/lib/libc.sl
+    ;;
+  esac
+  ;;
+
+interix[[3-9]]*)
+  # PIC code is broken on Interix 3.x, that's why |\.a not |_pic\.a here
+  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\.so|\.a)$'
+  ;;
+
+irix5* | irix6* | nonstopux*)
+  case $LD in
+  *-32|*"-32 ") libmagic=32-bit;;
+  *-n32|*"-n32 ") libmagic=N32;;
+  *-64|*"-64 ") libmagic=64-bit;;
+  *) libmagic=never-match;;
+  esac
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+# This must be Linux ELF.
+linux* | k*bsd*-gnu | kopensolaris*-gnu)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+netbsd* | netbsdelf*-gnu)
+  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then
+    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\.so\.[[0-9]]+\.[[0-9]]+|_pic\.a)$'
+  else
+    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\.so|_pic\.a)$'
+  fi
+  ;;
+
+newos6*)
+  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'
+  lt_cv_file_magic_cmd=/usr/bin/file
+  lt_cv_file_magic_test_file=/usr/lib/libnls.so
+  ;;
+
+*nto* | *qnx*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+openbsd*)
+  if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\.so\.[[0-9]]+\.[[0-9]]+|\.so|_pic\.a)$'
+  else
+    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\.so\.[[0-9]]+\.[[0-9]]+|_pic\.a)$'
+  fi
+  ;;
+
+osf3* | osf4* | osf5*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+rdos*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+solaris*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
+sysv4 | sysv4.3*)
+  case $host_vendor in
+  motorola)
+    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'
+    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`
+    ;;
+  ncr)
+    lt_cv_deplibs_check_method=pass_all
+    ;;
+  sequent)
+    lt_cv_file_magic_cmd='/bin/file'
+    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'
+    ;;
+  sni)
+    lt_cv_file_magic_cmd='/bin/file'
+    lt_cv_deplibs_check_method="file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib"
+    lt_cv_file_magic_test_file=/lib/libc.so
+    ;;
+  siemens)
+    lt_cv_deplibs_check_method=pass_all
+    ;;
+  pc)
+    lt_cv_deplibs_check_method=pass_all
+    ;;
+  esac
+  ;;
+
+tpf*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+esac
+])
+file_magic_cmd=$lt_cv_file_magic_cmd
+deplibs_check_method=$lt_cv_deplibs_check_method
+test -z "$deplibs_check_method" && deplibs_check_method=unknown
+
+_LT_DECL([], [deplibs_check_method], [1],
+    [Method to check whether dependent libraries are shared objects])
+_LT_DECL([], [file_magic_cmd], [1],
+    [Command to use when deplibs_check_method == "file_magic"])
+])# _LT_CHECK_MAGIC_METHOD
+
+
+# LT_PATH_NM
+# ----------
+# find the pathname to a BSD- or MS-compatible name lister
+AC_DEFUN([LT_PATH_NM],
+[AC_REQUIRE([AC_PROG_CC])dnl
+AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
+[if test -n "$NM"; then
+  # Let the user override the test.
+  lt_cv_path_NM="$NM"
+else
+  lt_nm_to_check="${ac_tool_prefix}nm"
+  if test -n "$ac_tool_prefix" && test "$build" = "$host"; then
+    lt_nm_to_check="$lt_nm_to_check nm"
+  fi
+  for lt_tmp_nm in $lt_nm_to_check; do
+    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
+    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do
+      IFS="$lt_save_ifs"
+      test -z "$ac_dir" && ac_dir=.
+      tmp_nm="$ac_dir/$lt_tmp_nm"
+      if test -f "$tmp_nm" || test -f "$tmp_nm$ac_exeext" ; then
+	# Check to see if the nm accepts a BSD-compat flag.
+	# Adding the `sed 1q' prevents false positives on HP-UX, which says:
+	#   nm: unknown option "B" ignored
+	# Tru64's nm complains that /dev/null is an invalid object file
+	case `"$tmp_nm" -B /dev/null 2>&1 | sed '1q'` in
+	*/dev/null* | *'Invalid file or object type'*)
+	  lt_cv_path_NM="$tmp_nm -B"
+	  break
+	  ;;
+	*)
+	  case `"$tmp_nm" -p /dev/null 2>&1 | sed '1q'` in
+	  */dev/null*)
+	    lt_cv_path_NM="$tmp_nm -p"
+	    break
+	    ;;
+	  *)
+	    lt_cv_path_NM=${lt_cv_path_NM="$tmp_nm"} # keep the first match, but
+	    continue # so that we can try to find one that supports BSD flags
+	    ;;
+	  esac
+	  ;;
+	esac
+      fi
+    done
+    IFS="$lt_save_ifs"
+  done
+  : ${lt_cv_path_NM=no}
+fi])
+if test "$lt_cv_path_NM" != "no"; then
+  NM="$lt_cv_path_NM"
+else
+  # Didn't find any BSD compatible name lister, look for dumpbin.
+  AC_CHECK_TOOLS(DUMPBIN, ["dumpbin -symbols" "link -dump -symbols"], :)
+  AC_SUBST([DUMPBIN])
+  if test "$DUMPBIN" != ":"; then
+    NM="$DUMPBIN"
+  fi
+fi
+test -z "$NM" && NM=nm
+AC_SUBST([NM])
+_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl
+
+AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
+  [lt_cv_nm_interface="BSD nm"
+  echo "int some_variable = 0;" > conftest.$ac_ext
+  (eval echo "\"\$as_me:__oline__: $ac_compile\"" >&AS_MESSAGE_LOG_FD)
+  (eval "$ac_compile" 2>conftest.err)
+  cat conftest.err >&AS_MESSAGE_LOG_FD
+  (eval echo "\"\$as_me:__oline__: $NM \\\"conftest.$ac_objext\\\"\"" >&AS_MESSAGE_LOG_FD)
+  (eval "$NM \"conftest.$ac_objext\"" 2>conftest.err > conftest.out)
+  cat conftest.err >&AS_MESSAGE_LOG_FD
+  (eval echo "\"\$as_me:__oline__: output\"" >&AS_MESSAGE_LOG_FD)
+  cat conftest.out >&AS_MESSAGE_LOG_FD
+  if $GREP 'External.*some_variable' conftest.out > /dev/null; then
+    lt_cv_nm_interface="MS dumpbin"
+  fi
+  rm -f conftest*])
+])# LT_PATH_NM
+
+# Old names:
+AU_ALIAS([AM_PROG_NM], [LT_PATH_NM])
+AU_ALIAS([AC_PROG_NM], [LT_PATH_NM])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AM_PROG_NM], [])
+dnl AC_DEFUN([AC_PROG_NM], [])
+
+
+# LT_LIB_M
+# --------
+# check for math library
+AC_DEFUN([LT_LIB_M],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+LIBM=
+case $host in
+*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)
+  # These system don't have libm, or don't need it
+  ;;
+*-ncr-sysv4.3*)
+  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM="-lmw")
+  AC_CHECK_LIB(m, cos, LIBM="$LIBM -lm")
+  ;;
+*)
+  AC_CHECK_LIB(m, cos, LIBM="-lm")
+  ;;
+esac
+AC_SUBST([LIBM])
+])# LT_LIB_M
+
+# Old name:
+AU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_CHECK_LIBM], [])
+
+
+# _LT_COMPILER_NO_RTTI([TAGNAME])
+# -------------------------------
+m4_defun([_LT_COMPILER_NO_RTTI],
+[m4_require([_LT_TAG_COMPILER])dnl
+
+_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=
+
+if test "$GCC" = yes; then
+  _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'
+
+  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],
+    lt_cv_prog_compiler_rtti_exceptions,
+    [-fno-rtti -fno-exceptions], [],
+    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)="$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions"])
+fi
+_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],
+	[Compiler flag to turn off builtin functions])
+])# _LT_COMPILER_NO_RTTI
+
+
+# _LT_CMD_GLOBAL_SYMBOLS
+# ----------------------
+m4_defun([_LT_CMD_GLOBAL_SYMBOLS],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+AC_REQUIRE([AC_PROG_CC])dnl
+AC_REQUIRE([LT_PATH_NM])dnl
+AC_REQUIRE([LT_PATH_LD])dnl
+m4_require([_LT_DECL_SED])dnl
+m4_require([_LT_DECL_EGREP])dnl
+m4_require([_LT_TAG_COMPILER])dnl
+
+# Check for command to grab the raw symbol name followed by C symbol from nm.
+AC_MSG_CHECKING([command to parse $NM output from $compiler object])
+AC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],
+[
+# These are sane defaults that work on at least a few old systems.
+# [They come from Ultrix.  What could be older than Ultrix?!! ;)]
+
+# Character class describing NM global symbol codes.
+symcode='[[BCDEGRST]]'
+
+# Regexp to match symbols that can be accessed directly from C.
+sympat='\([[_A-Za-z]][[_A-Za-z0-9]]*\)'
+
+# Define system-specific variables.
+case $host_os in
+aix*)
+  symcode='[[BCDT]]'
+  ;;
+cygwin* | mingw* | pw32* | cegcc*)
+  symcode='[[ABCDGISTW]]'
+  ;;
+hpux*)
+  if test "$host_cpu" = ia64; then
+    symcode='[[ABCDEGRST]]'
+  fi
+  ;;
+irix* | nonstopux*)
+  symcode='[[BCDEGRST]]'
+  ;;
+osf*)
+  symcode='[[BCDEGQRST]]'
+  ;;
+solaris*)
+  symcode='[[BDRT]]'
+  ;;
+sco3.2v5*)
+  symcode='[[DT]]'
+  ;;
+sysv4.2uw2*)
+  symcode='[[DT]]'
+  ;;
+sysv5* | sco5v6* | unixware* | OpenUNIX*)
+  symcode='[[ABDT]]'
+  ;;
+sysv4)
+  symcode='[[DFNSTU]]'
+  ;;
+esac
+
+# If we're using GNU nm, then use its standard symbol codes.
+case `$NM -V 2>&1` in
+*GNU* | *'with BFD'*)
+  symcode='[[ABCDGIRSTW]]' ;;
+esac
+
+# Transform an extracted symbol line into a proper C declaration.
+# Some systems (esp. on ia64) link data and code symbols differently,
+# so use this general approach.
+lt_cv_sys_global_symbol_to_cdecl="sed -n -e 's/^T .* \(.*\)$/extern int \1();/p' -e 's/^$symcode* .* \(.*\)$/extern char \1;/p'"
+
+# Transform an extracted symbol line into symbol name and symbol address
+lt_cv_sys_global_symbol_to_c_name_address="sed -n -e 's/^: \([[^ ]]*\) $/  {\\\"\1\\\", (void *) 0},/p' -e 's/^$symcode* \([[^ ]]*\) \([[^ ]]*\)$/  {\"\2\", (void *) \&\2},/p'"
+lt_cv_sys_global_symbol_to_c_name_address_lib_prefix="sed -n -e 's/^: \([[^ ]]*\) $/  {\\\"\1\\\", (void *) 0},/p' -e 's/^$symcode* \([[^ ]]*\) \(lib[[^ ]]*\)$/  {\"\2\", (void *) \&\2},/p' -e 's/^$symcode* \([[^ ]]*\) \([[^ ]]*\)$/  {\"lib\2\", (void *) \&\2},/p'"
+
+# Handle CRLF in mingw tool chain
+opt_cr=
+case $build_os in
+mingw*)
+  opt_cr=`$ECHO 'x\{0,1\}' | tr x '\015'` # option cr in regexp
+  ;;
+esac
+
+# Try without a prefix underscore, then with it.
+for ac_symprfx in "" "_"; do
+
+  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.
+  symxfrm="\\1 $ac_symprfx\\2 \\2"
+
+  # Write the raw and C identifiers.
+  if test "$lt_cv_nm_interface" = "MS dumpbin"; then
+    # Fake it for dumpbin and say T for any non-static function
+    # and D for any global variable.
+    # Also find C++ and __fastcall symbols from MSVC++,
+    # which start with @ or ?.
+    lt_cv_sys_global_symbol_pipe="$AWK ['"\
+"     {last_section=section; section=\$ 3};"\
+"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};"\
+"     \$ 0!~/External *\|/{next};"\
+"     / 0+ UNDEF /{next}; / UNDEF \([^|]\)*()/{next};"\
+"     {if(hide[section]) next};"\
+"     {f=0}; \$ 0~/\(\).*\|/{f=1}; {printf f ? \"T \" : \"D \"};"\
+"     {split(\$ 0, a, /\||\r/); split(a[2], s)};"\
+"     s[1]~/^[@?]/{print s[1], s[1]; next};"\
+"     s[1]~prfx {split(s[1],t,\"@\"); print t[1], substr(t[1],length(prfx))}"\
+"     ' prfx=^$ac_symprfx]"
+  else
+    lt_cv_sys_global_symbol_pipe="sed -n -e 's/^.*[[	 ]]\($symcode$symcode*\)[[	 ]][[	 ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'"
+  fi
+
+  # Check to see that the pipe works correctly.
+  pipe_works=no
+
+  rm -f conftest*
+  cat > conftest.$ac_ext <<_LT_EOF
+#ifdef __cplusplus
+extern "C" {
+#endif
+char nm_test_var;
+void nm_test_func(void);
+void nm_test_func(void){}
+#ifdef __cplusplus
+}
+#endif
+int main(){nm_test_var='a';nm_test_func();return(0);}
+_LT_EOF
+
+  if AC_TRY_EVAL(ac_compile); then
+    # Now try to grab the symbols.
+    nlist=conftest.nm
+    if AC_TRY_EVAL(NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $nlist) && test -s "$nlist"; then
+      # Try sorting and uniquifying the output.
+      if sort "$nlist" | uniq > "$nlist"T; then
+	mv -f "$nlist"T "$nlist"
+      else
+	rm -f "$nlist"T
+      fi
+
+      # Make sure that we snagged all the symbols we need.
+      if $GREP ' nm_test_var$' "$nlist" >/dev/null; then
+	if $GREP ' nm_test_func$' "$nlist" >/dev/null; then
+	  cat <<_LT_EOF > conftest.$ac_ext
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+_LT_EOF
+	  # Now generate the symbol file.
+	  eval "$lt_cv_sys_global_symbol_to_cdecl"' < "$nlist" | $GREP -v main >> conftest.$ac_ext'
+
+	  cat <<_LT_EOF >> conftest.$ac_ext
+
+/* The mapping between symbol names and symbols.  */
+const struct {
+  const char *name;
+  void       *address;
+}
+lt__PROGRAM__LTX_preloaded_symbols[[]] =
+{
+  { "@PROGRAM@", (void *) 0 },
+_LT_EOF
+	  $SED "s/^$symcode$symcode* \(.*\) \(.*\)$/  {\"\2\", (void *) \&\2},/" < "$nlist" | $GREP -v main >> conftest.$ac_ext
+	  cat <<\_LT_EOF >> conftest.$ac_ext
+  {0, (void *) 0}
+};
+
+/* This works around a problem in FreeBSD linker */
+#ifdef FREEBSD_WORKAROUND
+static const void *lt_preloaded_setup() {
+  return lt__PROGRAM__LTX_preloaded_symbols;
+}
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+_LT_EOF
+	  # Now try linking the two files.
+	  mv conftest.$ac_objext conftstm.$ac_objext
+	  lt_save_LIBS="$LIBS"
+	  lt_save_CFLAGS="$CFLAGS"
+	  LIBS="conftstm.$ac_objext"
+	  CFLAGS="$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)"
+	  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then
+	    pipe_works=yes
+	  fi
+	  LIBS="$lt_save_LIBS"
+	  CFLAGS="$lt_save_CFLAGS"
+	else
+	  echo "cannot find nm_test_func in $nlist" >&AS_MESSAGE_LOG_FD
+	fi
+      else
+	echo "cannot find nm_test_var in $nlist" >&AS_MESSAGE_LOG_FD
+      fi
+    else
+      echo "cannot run $lt_cv_sys_global_symbol_pipe" >&AS_MESSAGE_LOG_FD
+    fi
+  else
+    echo "$progname: failed program was:" >&AS_MESSAGE_LOG_FD
+    cat conftest.$ac_ext >&5
+  fi
+  rm -rf conftest* conftst*
+
+  # Do not use the global_symbol_pipe unless it works.
+  if test "$pipe_works" = yes; then
+    break
+  else
+    lt_cv_sys_global_symbol_pipe=
+  fi
+done
+])
+if test -z "$lt_cv_sys_global_symbol_pipe"; then
+  lt_cv_sys_global_symbol_to_cdecl=
+fi
+if test -z "$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl"; then
+  AC_MSG_RESULT(failed)
+else
+  AC_MSG_RESULT(ok)
+fi
+
+_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],
+    [Take the output of nm and produce a listing of raw symbols and C names])
+_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],
+    [Transform the output of nm in a proper C declaration])
+_LT_DECL([global_symbol_to_c_name_address],
+    [lt_cv_sys_global_symbol_to_c_name_address], [1],
+    [Transform the output of nm in a C name address pair])
+_LT_DECL([global_symbol_to_c_name_address_lib_prefix],
+    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],
+    [Transform the output of nm in a C name address pair when lib prefix is needed])
+]) # _LT_CMD_GLOBAL_SYMBOLS
+
+
+# _LT_COMPILER_PIC([TAGNAME])
+# ---------------------------
+m4_defun([_LT_COMPILER_PIC],
+[m4_require([_LT_TAG_COMPILER])dnl
+_LT_TAGVAR(lt_prog_compiler_wl, $1)=
+_LT_TAGVAR(lt_prog_compiler_pic, $1)=
+_LT_TAGVAR(lt_prog_compiler_static, $1)=
+
+AC_MSG_CHECKING([for $compiler option to produce PIC])
+m4_if([$1], [CXX], [
+  # C++ specific cases for pic, static, wl, etc.
+  if test "$GXX" = yes; then
+    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+
+    case $host_os in
+    aix*)
+      # All AIX code is PIC.
+      if test "$host_cpu" = ia64; then
+	# AIX 5 now supports IA64 processor
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+        ;;
+      m68k)
+            # FIXME: we need at least 68020 code to build shared libraries, but
+            # adding the `-m68020' flag to GCC prevents building anything better,
+            # like `-m68040'.
+            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'
+        ;;
+      esac
+      ;;
+
+    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)
+      # PIC is the default for these OSes.
+      ;;
+    mingw* | cygwin* | os2* | pw32* | cegcc*)
+      # This hack is so that the source file can tell whether it is being
+      # built for inclusion in a dll (and should export symbols for example).
+      # Although the cygwin gcc ignores -fPIC, still need this for old-style
+      # (--disable-auto-import) libraries
+      m4_if([$1], [GCJ], [],
+	[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])
+      ;;
+    darwin* | rhapsody*)
+      # PIC is the default on this platform
+      # Common symbols not allowed in MH_DYLIB files
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'
+      ;;
+    *djgpp*)
+      # DJGPP does not support shared libraries at all
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)=
+      ;;
+    interix[[3-9]]*)
+      # Interix 3.x gcc -fpic/-fPIC options generate broken code.
+      # Instead, we relocate shared libraries at runtime.
+      ;;
+    sysv4*MP*)
+      if test -d /usr/nec; then
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic
+      fi
+      ;;
+    hpux*)
+      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit
+      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag
+      # sets the default TLS model and affects inlining.
+      case $host_cpu in
+      hppa*64*)
+	;;
+      *)
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+	;;
+      esac
+      ;;
+    *qnx* | *nto*)
+      # QNX uses GNU C++, but need to define -shared option too, otherwise
+      # it will coredump.
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'
+      ;;
+    *)
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+      ;;
+    esac
+  else
+    case $host_os in
+      aix[[4-9]]*)
+	# All AIX code is PIC.
+	if test "$host_cpu" = ia64; then
+	  # AIX 5 now supports IA64 processor
+	  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	else
+	  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'
+	fi
+	;;
+      chorus*)
+	case $cc_basename in
+	cxch68*)
+	  # Green Hills C++ Compiler
+	  # _LT_TAGVAR(lt_prog_compiler_static, $1)="--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a"
+	  ;;
+	esac
+	;;
+      dgux*)
+	case $cc_basename in
+	  ec++*)
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	    ;;
+	  ghcx*)
+	    # Green Hills C++ Compiler
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      freebsd* | dragonfly*)
+	# FreeBSD uses GNU C++
+	;;
+      hpux9* | hpux10* | hpux11*)
+	case $cc_basename in
+	  CC*)
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'
+	    if test "$host_cpu" != ia64; then
+	      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'
+	    fi
+	    ;;
+	  aCC*)
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'
+	    case $host_cpu in
+	    hppa*64*|ia64*)
+	      # +Z the default
+	      ;;
+	    *)
+	      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'
+	      ;;
+	    esac
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      interix*)
+	# This is c89, which is MS Visual C++ (no shared libs)
+	# Anyone wants to do a port?
+	;;
+      irix5* | irix6* | nonstopux*)
+	case $cc_basename in
+	  CC*)
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+	    # CC pic flag -KPIC is the default.
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      linux* | k*bsd*-gnu | kopensolaris*-gnu)
+	case $cc_basename in
+	  KCC*)
+	    # KAI C++ Compiler
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+	    ;;
+	  ecpc* )
+	    # old Intel C++ for x86_64 which still supported -KPIC.
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+	    ;;
+	  icpc* )
+	    # Intel C++, used to be incompatible with GCC.
+	    # ICC 10 doesn't accept -KPIC any more.
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+	    ;;
+	  pgCC* | pgcpp*)
+	    # Portland Group C++ compiler
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	    ;;
+	  cxx*)
+	    # Compaq C++
+	    # Make sure the PIC flag is empty.  It appears that all Alpha
+	    # Linux and Compaq Tru64 Unix objects are PIC.
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)=
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+	    ;;
+	  xlc* | xlC*)
+	    # IBM XL 8.0 on PPC
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'
+	    ;;
+	  *)
+	    case `$CC -V 2>&1 | sed 5q` in
+	    *Sun\ C*)
+	      # Sun C++ 5.9
+	      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '
+	      ;;
+	    esac
+	    ;;
+	esac
+	;;
+      lynxos*)
+	;;
+      m88k*)
+	;;
+      mvs*)
+	case $cc_basename in
+	  cxx*)
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      netbsd* | netbsdelf*-gnu)
+	;;
+      *qnx* | *nto*)
+        # QNX uses GNU C++, but need to define -shared option too, otherwise
+        # it will coredump.
+        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'
+        ;;
+      osf3* | osf4* | osf5*)
+	case $cc_basename in
+	  KCC*)
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'
+	    ;;
+	  RCC*)
+	    # Rational C++ 2.4.1
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'
+	    ;;
+	  cxx*)
+	    # Digital/Compaq C++
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    # Make sure the PIC flag is empty.  It appears that all Alpha
+	    # Linux and Compaq Tru64 Unix objects are PIC.
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)=
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      psos*)
+	;;
+      solaris*)
+	case $cc_basename in
+	  CC*)
+	    # Sun C++ 4.2, 5.x and Centerline C++
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '
+	    ;;
+	  gcx*)
+	    # Green Hills C++ Compiler
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      sunos4*)
+	case $cc_basename in
+	  CC*)
+	    # Sun C++ 4.x
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	    ;;
+	  lcc*)
+	    # Lucid
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)
+	case $cc_basename in
+	  CC*)
+	    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	    ;;
+	esac
+	;;
+      tandem*)
+	case $cc_basename in
+	  NCC*)
+	    # NonStop-UX NCC 3.20
+	    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	    ;;
+	  *)
+	    ;;
+	esac
+	;;
+      vxworks*)
+	;;
+      *)
+	_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no
+	;;
+    esac
+  fi
+],
+[
+  if test "$GCC" = yes; then
+    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+
+    case $host_os in
+      aix*)
+      # All AIX code is PIC.
+      if test "$host_cpu" = ia64; then
+	# AIX 5 now supports IA64 processor
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+        ;;
+      m68k)
+            # FIXME: we need at least 68020 code to build shared libraries, but
+            # adding the `-m68020' flag to GCC prevents building anything better,
+            # like `-m68040'.
+            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'
+        ;;
+      esac
+      ;;
+
+    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)
+      # PIC is the default for these OSes.
+      ;;
+
+    mingw* | cygwin* | pw32* | os2* | cegcc*)
+      # This hack is so that the source file can tell whether it is being
+      # built for inclusion in a dll (and should export symbols for example).
+      # Although the cygwin gcc ignores -fPIC, still need this for old-style
+      # (--disable-auto-import) libraries
+      m4_if([$1], [GCJ], [],
+	[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])
+      ;;
+
+    darwin* | rhapsody*)
+      # PIC is the default on this platform
+      # Common symbols not allowed in MH_DYLIB files
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'
+      ;;
+
+    hpux*)
+      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit
+      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag
+      # sets the default TLS model and affects inlining.
+      case $host_cpu in
+      hppa*64*)
+	# +Z the default
+	;;
+      *)
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+	;;
+      esac
+      ;;
+
+    interix[[3-9]]*)
+      # Interix 3.x gcc -fpic/-fPIC options generate broken code.
+      # Instead, we relocate shared libraries at runtime.
+      ;;
+
+    msdosdjgpp*)
+      # Just because we use GCC doesn't mean we suddenly get shared libraries
+      # on systems that don't support them.
+      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no
+      enable_shared=no
+      ;;
+
+    *nto* | *qnx*)
+      # QNX uses GNU C++, but need to define -shared option too, otherwise
+      # it will coredump.
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'
+      ;;
+
+    sysv4*MP*)
+      if test -d /usr/nec; then
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic
+      fi
+      ;;
+
+    *)
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+      ;;
+    esac
+  else
+    # PORTME Check for flag to pass linker flags through the system compiler.
+    case $host_os in
+    aix*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      if test "$host_cpu" = ia64; then
+	# AIX 5 now supports IA64 processor
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      else
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'
+      fi
+      ;;
+
+    mingw* | cygwin* | pw32* | os2* | cegcc*)
+      # This hack is so that the source file can tell whether it is being
+      # built for inclusion in a dll (and should export symbols for example).
+      m4_if([$1], [GCJ], [],
+	[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])
+      ;;
+
+    hpux9* | hpux10* | hpux11*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but
+      # not for PA HP-UX.
+      case $host_cpu in
+      hppa*64*|ia64*)
+	# +Z the default
+	;;
+      *)
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'
+	;;
+      esac
+      # Is there a better lt_prog_compiler_static that works with the bundled CC?
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'
+      ;;
+
+    irix5* | irix6* | nonstopux*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      # PIC (with -KPIC) is the default.
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+      ;;
+
+    linux* | k*bsd*-gnu | kopensolaris*-gnu)
+      case $cc_basename in
+      # old Intel for x86_64 which still supported -KPIC.
+      ecc*)
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+        ;;
+      # icc used to be incompatible with GCC.
+      # ICC 10 doesn't accept -KPIC any more.
+      icc* | ifort*)
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+        ;;
+      # Lahey Fortran 8.1.
+      lf95*)
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'
+	;;
+      pgcc* | pgf77* | pgf90* | pgf95*)
+        # Portland Group compilers (*not* the Pentium gcc compiler,
+	# which looks to be a dead project)
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+        ;;
+      ccc*)
+        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+        # All Alpha code is PIC.
+        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+        ;;
+      xl*)
+	# IBM XL C 8.0/Fortran 10.1 on PPC
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'
+	;;
+      *)
+	case `$CC -V 2>&1 | sed 5q` in
+	*Sun\ C*)
+	  # Sun C 5.9
+	  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+	  ;;
+	*Sun\ F*)
+	  # Sun Fortran 8.3 passes all unrecognized flags to the linker
+	  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+	  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+	  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''
+	  ;;
+	esac
+	;;
+      esac
+      ;;
+
+    newsos6)
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      ;;
+
+    *nto* | *qnx*)
+      # QNX uses GNU C++, but need to define -shared option too, otherwise
+      # it will coredump.
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'
+      ;;
+
+    osf3* | osf4* | osf5*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      # All OSF/1 code is PIC.
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+      ;;
+
+    rdos*)
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'
+      ;;
+
+    solaris*)
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      case $cc_basename in
+      f77* | f90* | f95*)
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;
+      *)
+	_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;
+      esac
+      ;;
+
+    sunos4*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      ;;
+
+    sysv4 | sysv4.2uw2* | sysv4.3*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      ;;
+
+    sysv4*MP*)
+      if test -d /usr/nec ;then
+	_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'
+	_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      fi
+      ;;
+
+    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      ;;
+
+    unicos*)
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no
+      ;;
+
+    uts4*)
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
+      ;;
+
+    *)
+      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no
+      ;;
+    esac
+  fi
+])
+case $host_os in
+  # For platforms which do not support PIC, -DPIC is meaningless:
+  *djgpp*)
+    _LT_TAGVAR(lt_prog_compiler_pic, $1)=
+    ;;
+  *)
+    _LT_TAGVAR(lt_prog_compiler_pic, $1)="$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])"
+    ;;
+esac
+AC_MSG_RESULT([$_LT_TAGVAR(lt_prog_compiler_pic, $1)])
+_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],
+	[How to pass a linker flag through the compiler])
+
+#
+# Check to make sure the PIC flag actually works.
+#
+if test -n "$_LT_TAGVAR(lt_prog_compiler_pic, $1)"; then
+  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],
+    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],
+    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],
+    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in
+     "" | " "*) ;;
+     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=" $_LT_TAGVAR(lt_prog_compiler_pic, $1)" ;;
+     esac],
+    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=
+     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])
+fi
+_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],
+	[Additional compiler flags for building library objects])
+
+#
+# Check to make sure the static flag actually works.
+#
+wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\"
+_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],
+  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),
+  $lt_tmp_static_flag,
+  [],
+  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])
+_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],
+	[Compiler flag to prevent dynamic linking])
+])# _LT_COMPILER_PIC
+
+
+# _LT_LINKER_SHLIBS([TAGNAME])
+# ----------------------------
+# See if the linker supports building shared libraries.
+m4_defun([_LT_LINKER_SHLIBS],
+[AC_REQUIRE([LT_PATH_LD])dnl
+AC_REQUIRE([LT_PATH_NM])dnl
+m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_DECL_EGREP])dnl
+m4_require([_LT_DECL_SED])dnl
+m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
+m4_require([_LT_TAG_COMPILER])dnl
+AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])
+m4_if([$1], [CXX], [
+  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
+  case $host_os in
+  aix[[4-9]]*)
+    # If we're using GNU nm, then we don't want the "-C" option.
+    # -C means demangle to AIX nm, but means don't demangle with GNU nm
+    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then
+      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && ([substr](\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+    else
+      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && ([substr](\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+    fi
+    ;;
+  pw32*)
+    _LT_TAGVAR(export_symbols_cmds, $1)="$ltdll_cmds"
+  ;;
+  cygwin* | mingw* | cegcc*)
+    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\([[^ ]]*\)/\1 DATA/;/^.*[[ ]]__nm__/s/^.*[[ ]]__nm__\([[^ ]]*\)[[ ]][[^ ]]*/\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\'' | sort | uniq > $export_symbols'
+  ;;
+  linux* | k*bsd*-gnu)
+    _LT_TAGVAR(link_all_deplibs, $1)=no
+  ;;
+  *)
+    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
+  ;;
+  esac
+  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']
+], [
+  runpath_var=
+  _LT_TAGVAR(allow_undefined_flag, $1)=
+  _LT_TAGVAR(always_export_symbols, $1)=no
+  _LT_TAGVAR(archive_cmds, $1)=
+  _LT_TAGVAR(archive_expsym_cmds, $1)=
+  _LT_TAGVAR(compiler_needs_object, $1)=no
+  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no
+  _LT_TAGVAR(export_dynamic_flag_spec, $1)=
+  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
+  _LT_TAGVAR(hardcode_automatic, $1)=no
+  _LT_TAGVAR(hardcode_direct, $1)=no
+  _LT_TAGVAR(hardcode_direct_absolute, $1)=no
+  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=
+  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=
+  _LT_TAGVAR(hardcode_libdir_separator, $1)=
+  _LT_TAGVAR(hardcode_minus_L, $1)=no
+  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported
+  _LT_TAGVAR(inherit_rpath, $1)=no
+  _LT_TAGVAR(link_all_deplibs, $1)=unknown
+  _LT_TAGVAR(module_cmds, $1)=
+  _LT_TAGVAR(module_expsym_cmds, $1)=
+  _LT_TAGVAR(old_archive_from_new_cmds, $1)=
+  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=
+  _LT_TAGVAR(thread_safe_flag_spec, $1)=
+  _LT_TAGVAR(whole_archive_flag_spec, $1)=
+  # include_expsyms should be a list of space-separated symbols to be *always*
+  # included in the symbol list
+  _LT_TAGVAR(include_expsyms, $1)=
+  # exclude_expsyms can be an extended regexp of symbols to exclude
+  # it will be wrapped by ` (' and `)$', so one must not match beginning or
+  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',
+  # as well as any symbol that contains `d'.
+  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']
+  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out
+  # platforms (ab)use it in PIC code, but their linkers get confused if
+  # the symbol is explicitly referenced.  Since portable code cannot
+  # rely on this symbol name, it's probably fine to never include it in
+  # preloaded symbol tables.
+  # Exclude shared library initialization/finalization symbols.
+dnl Note also adjust exclude_expsyms for C++ above.
+  extract_expsyms_cmds=
+
+  case $host_os in
+  cygwin* | mingw* | pw32* | cegcc*)
+    # FIXME: the MSVC++ port hasn't been tested in a loooong time
+    # When not using gcc, we currently assume that we are using
+    # Microsoft Visual C++.
+    if test "$GCC" != yes; then
+      with_gnu_ld=no
+    fi
+    ;;
+  interix*)
+    # we just hope/assume this is gcc and not c89 (= MSVC++)
+    with_gnu_ld=yes
+    ;;
+  openbsd*)
+    with_gnu_ld=no
+    ;;
+  linux* | k*bsd*-gnu)
+    _LT_TAGVAR(link_all_deplibs, $1)=no
+    ;;
+  esac
+
+  _LT_TAGVAR(ld_shlibs, $1)=yes
+  if test "$with_gnu_ld" = yes; then
+    # If archive_cmds runs LD, not CC, wlarc should be empty
+    wlarc='${wl}'
+
+    # Set some defaults for GNU ld with shared library support. These
+    # are reset later if shared libraries are not supported. Putting them
+    # here allows them to be overridden if necessary.
+    runpath_var=LD_RUN_PATH
+    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'
+    # ancient GNU ld didn't support --whole-archive et. al.
+    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then
+      _LT_TAGVAR(whole_archive_flag_spec, $1)="$wlarc"'--whole-archive$convenience '"$wlarc"'--no-whole-archive'
+    else
+      _LT_TAGVAR(whole_archive_flag_spec, $1)=
+    fi
+    supports_anon_versioning=no
+    case `$LD -v 2>&1` in
+      *GNU\ gold*) supports_anon_versioning=yes ;;
+      *\ [[01]].* | *\ 2.[[0-9]].* | *\ 2.10.*) ;; # catch versions < 2.11
+      *\ 2.11.93.0.2\ *) supports_anon_versioning=yes ;; # RH7.3 ...
+      *\ 2.11.92.0.12\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...
+      *\ 2.11.*) ;; # other 2.11 versions
+      *) supports_anon_versioning=yes ;;
+    esac
+
+    # See if GNU ld supports shared libraries.
+    case $host_os in
+    aix[[3-9]]*)
+      # On AIX/PPC, the GNU linker is very broken
+      if test "$host_cpu" != ia64; then
+	_LT_TAGVAR(ld_shlibs, $1)=no
+	cat <<_LT_EOF 1>&2
+
+*** Warning: the GNU linker, at least up to release 2.9.1, is reported
+*** to be unable to reliably create shared libraries on AIX.
+*** Therefore, libtool is disabling shared libraries support.  If you
+*** really care for shared libraries, you may want to modify your PATH
+*** so that a non-GNU linker is found, and then restart.
+
+_LT_EOF
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+            _LT_TAGVAR(archive_expsym_cmds, $1)=''
+        ;;
+      m68k)
+            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO "#define NAME $libname" > $output_objdir/a2ixlibrary.data~$ECHO "#define LIBRARY_ID 1" >> $output_objdir/a2ixlibrary.data~$ECHO "#define VERSION $major" >> $output_objdir/a2ixlibrary.data~$ECHO "#define REVISION $revision" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'
+            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+            _LT_TAGVAR(hardcode_minus_L, $1)=yes
+        ;;
+      esac
+      ;;
+
+    beos*)
+      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	_LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+	# Joseph Beckenbach <jrb3@best.com> says some releases of gcc
+	# support --undefined.  This deserves some investigation.  FIXME
+	_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+      else
+	_LT_TAGVAR(ld_shlibs, $1)=no
+      fi
+      ;;
+
+    cygwin* | mingw* | pw32* | cegcc*)
+      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,
+      # as there is no search path for DLLs.
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+      _LT_TAGVAR(always_export_symbols, $1)=no
+      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes
+      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\([[^ ]]*\)/\1 DATA/'\'' | $SED -e '\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\'' | sort | uniq > $export_symbols'
+
+      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then
+        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+	# If the export-symbols file already is a .def file (1st line
+	# is EXPORTS), use it as is; otherwise, prepend...
+	_LT_TAGVAR(archive_expsym_cmds, $1)='if test "x`$SED 1q $export_symbols`" = xEXPORTS; then
+	  cp $export_symbols $output_objdir/$soname.def;
+	else
+	  echo EXPORTS > $output_objdir/$soname.def;
+	  cat $export_symbols >> $output_objdir/$soname.def;
+	fi~
+	$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+      else
+	_LT_TAGVAR(ld_shlibs, $1)=no
+      fi
+      ;;
+
+    interix[[3-9]]*)
+      _LT_TAGVAR(hardcode_direct, $1)=no
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.
+      # Instead, shared libraries are loaded at an image base (0x10000000 by
+      # default) and relocated if they conflict, which is a slow very memory
+      # consuming and fragmenting process.  To avoid this, we pick a random,
+      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link
+      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.
+      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+      _LT_TAGVAR(archive_expsym_cmds, $1)='sed "s,^,_," $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+      ;;
+
+    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)
+      tmp_diet=no
+      if test "$host_os" = linux-dietlibc; then
+	case $cc_basename in
+	  diet\ *) tmp_diet=yes;;	# linux-dietlibc with static linking (!diet-dyn)
+	esac
+      fi
+      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \
+	 && test "$tmp_diet" = no
+      then
+	tmp_addflag=
+	tmp_sharedflag='-shared'
+	case $cc_basename,$host_cpu in
+        pgcc*)				# Portland Group C compiler
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	  tmp_addflag=' $pic_flag'
+	  ;;
+	pgf77* | pgf90* | pgf95*)	# Portland Group f77 and f90 compilers
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	  tmp_addflag=' $pic_flag -Mnomain' ;;
+	ecc*,ia64* | icc*,ia64*)	# Intel C compiler on ia64
+	  tmp_addflag=' -i_dynamic' ;;
+	efc*,ia64* | ifort*,ia64*)	# Intel Fortran compiler on ia64
+	  tmp_addflag=' -i_dynamic -nofor_main' ;;
+	ifc* | ifort*)			# Intel Fortran compiler
+	  tmp_addflag=' -nofor_main' ;;
+	lf95*)				# Lahey Fortran 8.1
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)=
+	  tmp_sharedflag='--shared' ;;
+	xl[[cC]]*)			# IBM XL C 8.0 on PPC (deal with xlf below)
+	  tmp_sharedflag='-qmkshrobj'
+	  tmp_addflag= ;;
+	esac
+	case `$CC -V 2>&1 | sed 5q` in
+	*Sun\ C*)			# Sun C 5.9
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\"\"; do test -z \"$conv\" || new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	  _LT_TAGVAR(compiler_needs_object, $1)=yes
+	  tmp_sharedflag='-G' ;;
+	*Sun\ F*)			# Sun Fortran 8.3
+	  tmp_sharedflag='-G' ;;
+	esac
+	_LT_TAGVAR(archive_cmds, $1)='$CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+
+        if test "x$supports_anon_versioning" = xyes; then
+          _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $output_objdir/$libname.ver~
+	    cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+	    echo "local: *; };" >> $output_objdir/$libname.ver~
+	    $CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
+        fi
+
+	case $cc_basename in
+	xlf*)
+	  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=
+	  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'
+	  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $compiler_flags -soname $soname -o $lib'
+	  if test "x$supports_anon_versioning" = xyes; then
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $output_objdir/$libname.ver~
+	      cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+	      echo "local: *; };" >> $output_objdir/$libname.ver~
+	      $LD -shared $libobjs $deplibs $compiler_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'
+	  fi
+	  ;;
+	esac
+      else
+        _LT_TAGVAR(ld_shlibs, $1)=no
+      fi
+      ;;
+
+    netbsd* | netbsdelf*-gnu)
+      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+	_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'
+	wlarc=
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+      fi
+      ;;
+
+    solaris*)
+      if $LD -v 2>&1 | $GREP 'BFD 2\.8' > /dev/null; then
+	_LT_TAGVAR(ld_shlibs, $1)=no
+	cat <<_LT_EOF 1>&2
+
+*** Warning: The releases 2.8.* of the GNU linker cannot reliably
+*** create shared libraries on Solaris systems.  Therefore, libtool
+*** is disabling shared libraries support.  We urge you to upgrade GNU
+*** binutils to release 2.9.1 or newer.  Another option is to modify
+*** your PATH or compiler configuration so that the native linker is
+*** used, and then restart.
+
+_LT_EOF
+      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+      else
+	_LT_TAGVAR(ld_shlibs, $1)=no
+      fi
+      ;;
+
+    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)
+      case `$LD -v 2>&1` in
+        *\ [[01]].* | *\ 2.[[0-9]].* | *\ 2.1[[0-5]].*)
+	_LT_TAGVAR(ld_shlibs, $1)=no
+	cat <<_LT_EOF 1>&2
+
+*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not
+*** reliably create shared libraries on SCO systems.  Therefore, libtool
+*** is disabling shared libraries support.  We urge you to upgrade GNU
+*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify
+*** your PATH or compiler configuration so that the native linker is
+*** used, and then restart.
+
+_LT_EOF
+	;;
+	*)
+	  # For security reasons, it is highly recommended that you always
+	  # use absolute paths for naming shared libraries, and exclude the
+	  # DT_RUNPATH tag from executables and libraries.  But doing so
+	  # requires that you compile everything twice, which is a pain.
+	  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+	  else
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	  fi
+	;;
+      esac
+      ;;
+
+    sunos4*)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+      wlarc=
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    *)
+      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+      else
+	_LT_TAGVAR(ld_shlibs, $1)=no
+      fi
+      ;;
+    esac
+
+    if test "$_LT_TAGVAR(ld_shlibs, $1)" = no; then
+      runpath_var=
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)=
+      _LT_TAGVAR(whole_archive_flag_spec, $1)=
+    fi
+  else
+    # PORTME fill in a description of your system's linker (not GNU ld)
+    case $host_os in
+    aix3*)
+      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+      _LT_TAGVAR(always_export_symbols, $1)=yes
+      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'
+      # Note: this linker hardcodes the directories in LIBPATH if there
+      # are no directories specified by -L.
+      _LT_TAGVAR(hardcode_minus_L, $1)=yes
+      if test "$GCC" = yes && test -z "$lt_prog_compiler_static"; then
+	# Neither direct hardcoding nor static linking is supported with a
+	# broken collect2.
+	_LT_TAGVAR(hardcode_direct, $1)=unsupported
+      fi
+      ;;
+
+    aix[[4-9]]*)
+      if test "$host_cpu" = ia64; then
+	# On IA64, the linker does run time linking by default, so we don't
+	# have to do anything special.
+	aix_use_runtimelinking=no
+	exp_sym_flag='-Bexport'
+	no_entry_flag=""
+      else
+	# If we're using GNU nm, then we don't want the "-C" option.
+	# -C means demangle to AIX nm, but means don't demangle with GNU nm
+	if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then
+	  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && ([substr](\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+	else
+	  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\''{ if (((\$ 2 == "T") || (\$ 2 == "D") || (\$ 2 == "B")) && ([substr](\$ 3,1,1) != ".")) { print \$ 3 } }'\'' | sort -u > $export_symbols'
+	fi
+	aix_use_runtimelinking=no
+
+	# Test if we are trying to use run time linking or normal
+	# AIX style linking. If -brtl is somewhere in LDFLAGS, we
+	# need to do runtime linking.
+	case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)
+	  for ld_flag in $LDFLAGS; do
+	  if (test $ld_flag = "-brtl" || test $ld_flag = "-Wl,-brtl"); then
+	    aix_use_runtimelinking=yes
+	    break
+	  fi
+	  done
+	  ;;
+	esac
+
+	exp_sym_flag='-bexport'
+	no_entry_flag='-bnoentry'
+      fi
+
+      # When large executables or shared objects are built, AIX ld can
+      # have problems creating the table of contents.  If linking a library
+      # or program results in "error TOC overflow" add -mminimal-toc to
+      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not
+      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.
+
+      _LT_TAGVAR(archive_cmds, $1)=''
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'
+      _LT_TAGVAR(link_all_deplibs, $1)=yes
+      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'
+
+      if test "$GCC" = yes; then
+	case $host_os in aix4.[[012]]|aix4.[[012]].*)
+	# We only want to do this on AIX 4.2 and lower, the check
+	# below for broken collect2 doesn't work under 4.3+
+	  collect2name=`${CC} -print-prog-name=collect2`
+	  if test -f "$collect2name" &&
+	   strings "$collect2name" | $GREP resolve_lib_name >/dev/null
+	  then
+	  # We have reworked collect2
+	  :
+	  else
+	  # We have old collect2
+	  _LT_TAGVAR(hardcode_direct, $1)=unsupported
+	  # It fails to find uninstalled libraries when the uninstalled
+	  # path is not listed in the libpath.  Setting hardcode_minus_L
+	  # to unsupported forces relinking
+	  _LT_TAGVAR(hardcode_minus_L, $1)=yes
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+	  _LT_TAGVAR(hardcode_libdir_separator, $1)=
+	  fi
+	  ;;
+	esac
+	shared_flag='-shared'
+	if test "$aix_use_runtimelinking" = yes; then
+	  shared_flag="$shared_flag "'${wl}-G'
+	fi
+	_LT_TAGVAR(link_all_deplibs, $1)=no
+      else
+	# not using gcc
+	if test "$host_cpu" = ia64; then
+	# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release
+	# chokes on -Wl,-G. The following line is correct:
+	  shared_flag='-G'
+	else
+	  if test "$aix_use_runtimelinking" = yes; then
+	    shared_flag='${wl}-G'
+	  else
+	    shared_flag='${wl}-bM:SRE'
+	  fi
+	fi
+      fi
+
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'
+      # It seems that -bexpall does not export symbols beginning with
+      # underscore (_), so it is better to generate a list of symbols to export.
+      _LT_TAGVAR(always_export_symbols, $1)=yes
+      if test "$aix_use_runtimelinking" = yes; then
+	# Warning - without using the other runtime loading flags (-brtl),
+	# -berok will link without error, but may produce a broken library.
+	_LT_TAGVAR(allow_undefined_flag, $1)='-berok'
+        # Determine the default libpath from the value encoded in an
+        # empty executable.
+        _LT_SYS_MODULE_PATH_AIX
+        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'"$aix_libpath"
+        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags `if test "x${allow_undefined_flag}" != "x"; then $ECHO "X${wl}${allow_undefined_flag}" | $Xsed; else :; fi` '"\${wl}$exp_sym_flag:\$export_symbols $shared_flag"
+      else
+	if test "$host_cpu" = ia64; then
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'
+	  _LT_TAGVAR(allow_undefined_flag, $1)="-z nodefs"
+	  _LT_TAGVAR(archive_expsym_cmds, $1)="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags ${wl}${allow_undefined_flag} '"\${wl}$exp_sym_flag:\$export_symbols"
+	else
+	 # Determine the default libpath from the value encoded in an
+	 # empty executable.
+	 _LT_SYS_MODULE_PATH_AIX
+	 _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'"$aix_libpath"
+	  # Warning - without using the other run time loading flags,
+	  # -berok will link without error, but may produce a broken library.
+	  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'
+	  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'
+	  # Exported symbols can be pulled into shared objects from archives
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'
+	  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes
+	  # This is similar to how AIX traditionally builds its shared libraries.
+	  _LT_TAGVAR(archive_expsym_cmds, $1)="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'
+	fi
+      fi
+      ;;
+
+    amigaos*)
+      case $host_cpu in
+      powerpc)
+            # see comment about AmigaOS4 .so support
+            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+            _LT_TAGVAR(archive_expsym_cmds, $1)=''
+        ;;
+      m68k)
+            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO "#define NAME $libname" > $output_objdir/a2ixlibrary.data~$ECHO "#define LIBRARY_ID 1" >> $output_objdir/a2ixlibrary.data~$ECHO "#define VERSION $major" >> $output_objdir/a2ixlibrary.data~$ECHO "#define REVISION $revision" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'
+            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+            _LT_TAGVAR(hardcode_minus_L, $1)=yes
+        ;;
+      esac
+      ;;
+
+    bsdi[[45]]*)
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic
+      ;;
+
+    cygwin* | mingw* | pw32* | cegcc*)
+      # When not using gcc, we currently assume that we are using
+      # Microsoft Visual C++.
+      # hardcode_libdir_flag_spec is actually meaningless, as there is
+      # no search path for DLLs.
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '
+      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+      # Tell ltmain to make .lib files, not .a files.
+      libext=lib
+      # Tell ltmain to make .dll files, not .so files.
+      shrext_cmds=".dll"
+      # FIXME: Setting linknames here is a bad hack.
+      _LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `$ECHO "X$deplibs" | $Xsed -e '\''s/ -lc$//'\''` -link -dll~linknames='
+      # The linker will automatically build a .lib file if we build a DLL.
+      _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'
+      # FIXME: Should let the user specify the lib program.
+      _LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'
+      _LT_TAGVAR(fix_srcfile_path, $1)='`cygpath -w "$srcfile"`'
+      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes
+      ;;
+
+    darwin* | rhapsody*)
+      _LT_DARWIN_LINKER_FEATURES($1)
+      ;;
+
+    dgux*)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    freebsd1*)
+      _LT_TAGVAR(ld_shlibs, $1)=no
+      ;;
+
+    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor
+    # support.  Future versions do this automatically, but an explicit c++rt0.o
+    # does not break anything, and helps significantly (at the cost of a little
+    # extra space).
+    freebsd2.2*)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    # Unfortunately, older versions of FreeBSD 2 do not have this feature.
+    freebsd2*)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_minus_L, $1)=yes
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.
+    freebsd* | dragonfly*)
+      _LT_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    hpux9*)
+      if test "$GCC" = yes; then
+	_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+      fi
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+
+      # hardcode_minus_L: Not really in the search PATH,
+      # but as the default location of the library.
+      _LT_TAGVAR(hardcode_minus_L, $1)=yes
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+      ;;
+
+    hpux10*)
+      if test "$GCC" = yes -a "$with_gnu_ld" = no; then
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'
+      fi
+      if test "$with_gnu_ld" = no; then
+	_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'
+	_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'
+	_LT_TAGVAR(hardcode_libdir_separator, $1)=:
+	_LT_TAGVAR(hardcode_direct, $1)=yes
+	_LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+	_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+	# hardcode_minus_L: Not really in the search PATH,
+	# but as the default location of the library.
+	_LT_TAGVAR(hardcode_minus_L, $1)=yes
+      fi
+      ;;
+
+    hpux11*)
+      if test "$GCC" = yes -a "$with_gnu_ld" = no; then
+	case $host_cpu in
+	hppa*64*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	ia64*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	esac
+      else
+	case $host_cpu in
+	hppa*64*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	ia64*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	esac
+      fi
+      if test "$with_gnu_ld" = no; then
+	_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'
+	_LT_TAGVAR(hardcode_libdir_separator, $1)=:
+
+	case $host_cpu in
+	hppa*64*|ia64*)
+	  _LT_TAGVAR(hardcode_direct, $1)=no
+	  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	  ;;
+	*)
+	  _LT_TAGVAR(hardcode_direct, $1)=yes
+	  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+	  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+
+	  # hardcode_minus_L: Not really in the search PATH,
+	  # but as the default location of the library.
+	  _LT_TAGVAR(hardcode_minus_L, $1)=yes
+	  ;;
+	esac
+      fi
+      ;;
+
+    irix5* | irix6* | nonstopux*)
+      if test "$GCC" = yes; then
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+	# Try to use the -exported_symbol ld option, if it does not
+	# work, assume that -exports_file does not work either and
+	# implicitly export all symbols.
+        save_LDFLAGS="$LDFLAGS"
+        LDFLAGS="$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null"
+        AC_LINK_IFELSE(int foo(void) {},
+          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'
+        )
+        LDFLAGS="$save_LDFLAGS"
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'
+      fi
+      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+      _LT_TAGVAR(inherit_rpath, $1)=yes
+      _LT_TAGVAR(link_all_deplibs, $1)=yes
+      ;;
+
+    netbsd* | netbsdelf*-gnu)
+      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+	_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF
+      fi
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    newsos6)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    *nto* | *qnx*)
+      ;;
+
+    openbsd*)
+      if test -f /usr/libexec/ld.so; then
+	_LT_TAGVAR(hardcode_direct, $1)=yes
+	_LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	_LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+	if test -z "`echo __ELF__ | $CC -E - | $GREP __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'
+	  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+	else
+	  case $host_os in
+	   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)
+	     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'
+	     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+	     ;;
+	   *)
+	     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'
+	     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	     ;;
+	  esac
+	fi
+      else
+	_LT_TAGVAR(ld_shlibs, $1)=no
+      fi
+      ;;
+
+    os2*)
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+      _LT_TAGVAR(hardcode_minus_L, $1)=yes
+      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+      _LT_TAGVAR(archive_cmds, $1)='$ECHO "LIBRARY $libname INITINSTANCE" > $output_objdir/$libname.def~$ECHO "DESCRIPTION \"$libname\"" >> $output_objdir/$libname.def~$ECHO DATA >> $output_objdir/$libname.def~$ECHO " SINGLE NONSHARED" >> $output_objdir/$libname.def~$ECHO EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'
+      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'
+      ;;
+
+    osf3*)
+      if test "$GCC" = yes; then
+	_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\*'
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+      else
+	_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \*'
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+      fi
+      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+      ;;
+
+    osf4* | osf5*)	# as osf3* with the addition of -msym flag
+      if test "$GCC" = yes; then
+	_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\*'
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+	_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+      else
+	_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \*'
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf "%s %s\\n" -exported_symbol "\$i" >> $lib.exp; done; printf "%s\\n" "-hidden">> $lib.exp~
+	$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'
+
+	# Both c and cxx compiler support -rpath directly
+	_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'
+      fi
+      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+      ;;
+
+    solaris*)
+      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'
+      if test "$GCC" = yes; then
+	wlarc='${wl}'
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	  $CC -shared ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'
+      else
+	case `$CC -V 2>&1` in
+	*"Compilers 5.0"*)
+	  wlarc=''
+	  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	  _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'
+	  ;;
+	*)
+	  wlarc='${wl}'
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'
+	  _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'
+	  ;;
+	esac
+      fi
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      case $host_os in
+      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;
+      *)
+	# The compiler driver will combine and reorder linker options,
+	# but understands `-z linker_flag'.  GCC discards it without `$wl',
+	# but is careful enough not to reorder.
+	# Supported since Solaris 2.6 (maybe 2.5.1?)
+	if test "$GCC" = yes; then
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'
+	else
+	  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'
+	fi
+	;;
+      esac
+      _LT_TAGVAR(link_all_deplibs, $1)=yes
+      ;;
+
+    sunos4*)
+      if test "x$host_vendor" = xsequent; then
+	# Use $CC to link under sequent, because it throws in some extra .o
+	# files that make .init and .fini sections work.
+	_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'
+      fi
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+      _LT_TAGVAR(hardcode_direct, $1)=yes
+      _LT_TAGVAR(hardcode_minus_L, $1)=yes
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    sysv4)
+      case $host_vendor in
+	sni)
+	  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???
+	;;
+	siemens)
+	  ## LD is ld it makes a PLAMLIB
+	  ## CC just makes a GrossModule.
+	  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'
+	  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'
+	  _LT_TAGVAR(hardcode_direct, $1)=no
+        ;;
+	motorola)
+	  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie
+	;;
+      esac
+      runpath_var='LD_RUN_PATH'
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    sysv4.3*)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'
+      ;;
+
+    sysv4*MP*)
+      if test -d /usr/nec; then
+	_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+	_LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	runpath_var=LD_RUN_PATH
+	hardcode_runpath_var=yes
+	_LT_TAGVAR(ld_shlibs, $1)=yes
+      fi
+      ;;
+
+    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)
+      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'
+      _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      runpath_var='LD_RUN_PATH'
+
+      if test "$GCC" = yes; then
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      fi
+      ;;
+
+    sysv5* | sco3.2v5* | sco5v6*)
+      # Note: We can NOT use -z defs as we might desire, because we do not
+      # link with -lc, and that would cause any symbols used from libc to
+      # always be unresolved, which means just about no library would
+      # ever link correctly.  If we're not using GNU ld we use -z text
+      # though, which does catch some bad symbols but isn't as heavy-handed
+      # as -z defs.
+      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'
+      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'
+      _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'
+      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'
+      _LT_TAGVAR(link_all_deplibs, $1)=yes
+      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'
+      runpath_var='LD_RUN_PATH'
+
+      if test "$GCC" = yes; then
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      else
+	_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+      fi
+      ;;
+
+    uts4*)
+      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      ;;
+
+    *)
+      _LT_TAGVAR(ld_shlibs, $1)=no
+      ;;
+    esac
+
+    if test x$host_vendor = xsni; then
+      case $host in
+      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)
+	_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'
+	;;
+      esac
+    fi
+  fi
+])
+AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])
+test "$_LT_TAGVAR(ld_shlibs, $1)" = no && can_build_shared=no
+
+_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld
+
+_LT_DECL([], [libext], [0], [Old archive suffix (normally "a")])dnl
+_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally ".so")])dnl
+_LT_DECL([], [extract_expsyms_cmds], [2],
+    [The commands to extract the exported symbol list from a shared archive])
+
+#
+# Do we need to explicitly link libc?
+#
+case "x$_LT_TAGVAR(archive_cmds_need_lc, $1)" in
+x|xyes)
+  # Assume -lc should be added
+  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes
+
+  if test "$enable_shared" = yes && test "$GCC" = yes; then
+    case $_LT_TAGVAR(archive_cmds, $1) in
+    *'~'*)
+      # FIXME: we may have to deal with multi-command sequences.
+      ;;
+    '$CC '*)
+      # Test whether the compiler implicitly links with -lc since on some
+      # systems, -lgcc has to come before -lc. If gcc already passes -lc
+      # to ld, don't add -lc before -lgcc.
+      AC_MSG_CHECKING([whether -lc should be explicitly linked in])
+      $RM conftest*
+      echo "$lt_simple_compile_test_code" > conftest.$ac_ext
+
+      if AC_TRY_EVAL(ac_compile) 2>conftest.err; then
+        soname=conftest
+        lib=conftest
+        libobjs=conftest.$ac_objext
+        deplibs=
+        wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)
+	pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)
+        compiler_flags=-v
+        linker_flags=-v
+        verstring=
+        output_objdir=.
+        libname=conftest
+        lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)
+        _LT_TAGVAR(allow_undefined_flag, $1)=
+        if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\>\&1 \| $GREP \" -lc \" \>/dev/null 2\>\&1)
+        then
+	  _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+        else
+	  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes
+        fi
+        _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag
+      else
+        cat conftest.err 1>&5
+      fi
+      $RM conftest*
+      AC_MSG_RESULT([$_LT_TAGVAR(archive_cmds_need_lc, $1)])
+      ;;
+    esac
+  fi
+  ;;
+esac
+
+_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],
+    [Whether or not to add -lc for building shared libraries])
+_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],
+    [enable_shared_with_static_runtimes], [0],
+    [Whether or not to disallow shared libs when runtime libs are static])
+_LT_TAGDECL([], [export_dynamic_flag_spec], [1],
+    [Compiler flag to allow reflexive dlopens])
+_LT_TAGDECL([], [whole_archive_flag_spec], [1],
+    [Compiler flag to generate shared objects directly from archives])
+_LT_TAGDECL([], [compiler_needs_object], [1],
+    [Whether the compiler copes with passing no objects directly])
+_LT_TAGDECL([], [old_archive_from_new_cmds], [2],
+    [Create an old-style archive from a shared archive])
+_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],
+    [Create a temporary old-style archive to link instead of a shared archive])
+_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])
+_LT_TAGDECL([], [archive_expsym_cmds], [2])
+_LT_TAGDECL([], [module_cmds], [2],
+    [Commands used to build a loadable module if different from building
+    a shared archive.])
+_LT_TAGDECL([], [module_expsym_cmds], [2])
+_LT_TAGDECL([], [with_gnu_ld], [1],
+    [Whether we are building with GNU ld or not])
+_LT_TAGDECL([], [allow_undefined_flag], [1],
+    [Flag that allows shared libraries with undefined symbols to be built])
+_LT_TAGDECL([], [no_undefined_flag], [1],
+    [Flag that enforces no undefined symbols])
+_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],
+    [Flag to hardcode $libdir into a binary during linking.
+    This must work even if $libdir does not exist])
+_LT_TAGDECL([], [hardcode_libdir_flag_spec_ld], [1],
+    [[If ld is used when linking, flag to hardcode $libdir into a binary
+    during linking.  This must work even if $libdir does not exist]])
+_LT_TAGDECL([], [hardcode_libdir_separator], [1],
+    [Whether we need a single "-rpath" flag with a separated argument])
+_LT_TAGDECL([], [hardcode_direct], [0],
+    [Set to "yes" if using DIR/libNAME${shared_ext} during linking hardcodes
+    DIR into the resulting binary])
+_LT_TAGDECL([], [hardcode_direct_absolute], [0],
+    [Set to "yes" if using DIR/libNAME${shared_ext} during linking hardcodes
+    DIR into the resulting binary and the resulting library dependency is
+    "absolute", i.e impossible to change by setting ${shlibpath_var} if the
+    library is relocated])
+_LT_TAGDECL([], [hardcode_minus_L], [0],
+    [Set to "yes" if using the -LDIR flag during linking hardcodes DIR
+    into the resulting binary])
+_LT_TAGDECL([], [hardcode_shlibpath_var], [0],
+    [Set to "yes" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR
+    into the resulting binary])
+_LT_TAGDECL([], [hardcode_automatic], [0],
+    [Set to "yes" if building a shared library automatically hardcodes DIR
+    into the library and all subsequent libraries and executables linked
+    against it])
+_LT_TAGDECL([], [inherit_rpath], [0],
+    [Set to yes if linker adds runtime paths of dependent libraries
+    to runtime path list])
+_LT_TAGDECL([], [link_all_deplibs], [0],
+    [Whether libtool must link a program against all its dependency libraries])
+_LT_TAGDECL([], [fix_srcfile_path], [1],
+    [Fix the shell variable $srcfile for the compiler])
+_LT_TAGDECL([], [always_export_symbols], [0],
+    [Set to "yes" if exported symbols are required])
+_LT_TAGDECL([], [export_symbols_cmds], [2],
+    [The commands to list exported symbols])
+_LT_TAGDECL([], [exclude_expsyms], [1],
+    [Symbols that should not be listed in the preloaded symbols])
+_LT_TAGDECL([], [include_expsyms], [1],
+    [Symbols that must always be exported])
+_LT_TAGDECL([], [prelink_cmds], [2],
+    [Commands necessary for linking programs (against libraries) with templates])
+_LT_TAGDECL([], [file_list_spec], [1],
+    [Specify filename containing input files])
+dnl FIXME: Not yet implemented
+dnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],
+dnl    [Compiler flag to generate thread safe objects])
+])# _LT_LINKER_SHLIBS
+
+
+# _LT_LANG_C_CONFIG([TAG])
+# ------------------------
+# Ensure that the configuration variables for a C compiler are suitably
+# defined.  These variables are subsequently used by _LT_CONFIG to write
+# the compiler configuration to `libtool'.
+m4_defun([_LT_LANG_C_CONFIG],
+[m4_require([_LT_DECL_EGREP])dnl
+lt_save_CC="$CC"
+AC_LANG_PUSH(C)
+
+# Source file extension for C test sources.
+ac_ext=c
+
+# Object file extension for compiled C test sources.
+objext=o
+_LT_TAGVAR(objext, $1)=$objext
+
+# Code to be used in simple compile tests
+lt_simple_compile_test_code="int some_variable = 0;"
+
+# Code to be used in simple link tests
+lt_simple_link_test_code='int main(){return(0);}'
+
+_LT_TAG_COMPILER
+# Save the default compiler, since it gets overwritten when the other
+# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.
+compiler_DEFAULT=$CC
+
+# save warnings/boilerplate of simple test code
+_LT_COMPILER_BOILERPLATE
+_LT_LINKER_BOILERPLATE
+
+## CAVEAT EMPTOR:
+## There is no encapsulation within the following macros, do not change
+## the running order or otherwise move them around unless you know exactly
+## what you are doing...
+if test -n "$compiler"; then
+  _LT_COMPILER_NO_RTTI($1)
+  _LT_COMPILER_PIC($1)
+  _LT_COMPILER_C_O($1)
+  _LT_COMPILER_FILE_LOCKS($1)
+  _LT_LINKER_SHLIBS($1)
+  _LT_SYS_DYNAMIC_LINKER($1)
+  _LT_LINKER_HARDCODE_LIBPATH($1)
+  LT_SYS_DLOPEN_SELF
+  _LT_CMD_STRIPLIB
+
+  # Report which library types will actually be built
+  AC_MSG_CHECKING([if libtool supports shared libraries])
+  AC_MSG_RESULT([$can_build_shared])
+
+  AC_MSG_CHECKING([whether to build shared libraries])
+  test "$can_build_shared" = "no" && enable_shared=no
+
+  # On AIX, shared libraries and static libraries use the same namespace, and
+  # are all built from PIC.
+  case $host_os in
+  aix3*)
+    test "$enable_shared" = yes && enable_static=no
+    if test -n "$RANLIB"; then
+      archive_cmds="$archive_cmds~\$RANLIB \$lib"
+      postinstall_cmds='$RANLIB $lib'
+    fi
+    ;;
+
+  aix[[4-9]]*)
+    if test "$host_cpu" != ia64 && test "$aix_use_runtimelinking" = no ; then
+      test "$enable_shared" = yes && enable_static=no
+    fi
+    ;;
+  esac
+  AC_MSG_RESULT([$enable_shared])
+
+  AC_MSG_CHECKING([whether to build static libraries])
+  # Make sure either enable_shared or enable_static is yes.
+  test "$enable_shared" = yes || enable_static=yes
+  AC_MSG_RESULT([$enable_static])
+
+  _LT_CONFIG($1)
+fi
+AC_LANG_POP
+CC="$lt_save_CC"
+])# _LT_LANG_C_CONFIG
+
+
+# _LT_PROG_CXX
+# ------------
+# Since AC_PROG_CXX is broken, in that it returns g++ if there is no c++
+# compiler, we have our own version here.
+m4_defun([_LT_PROG_CXX],
+[
+pushdef([AC_MSG_ERROR], [_lt_caught_CXX_error=yes])
+AC_PROG_CXX
+if test -n "$CXX" && ( test "X$CXX" != "Xno" &&
+    ( (test "X$CXX" = "Xg++" && `g++ -v >/dev/null 2>&1` ) ||
+    (test "X$CXX" != "Xg++"))) ; then
+  AC_PROG_CXXCPP
+else
+  _lt_caught_CXX_error=yes
+fi
+popdef([AC_MSG_ERROR])
+])# _LT_PROG_CXX
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([_LT_PROG_CXX], [])
+
+
+# _LT_LANG_CXX_CONFIG([TAG])
+# --------------------------
+# Ensure that the configuration variables for a C++ compiler are suitably
+# defined.  These variables are subsequently used by _LT_CONFIG to write
+# the compiler configuration to `libtool'.
+m4_defun([_LT_LANG_CXX_CONFIG],
+[AC_REQUIRE([_LT_PROG_CXX])dnl
+m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+m4_require([_LT_DECL_EGREP])dnl
+
+AC_LANG_PUSH(C++)
+_LT_TAGVAR(archive_cmds_need_lc, $1)=no
+_LT_TAGVAR(allow_undefined_flag, $1)=
+_LT_TAGVAR(always_export_symbols, $1)=no
+_LT_TAGVAR(archive_expsym_cmds, $1)=
+_LT_TAGVAR(compiler_needs_object, $1)=no
+_LT_TAGVAR(export_dynamic_flag_spec, $1)=
+_LT_TAGVAR(hardcode_direct, $1)=no
+_LT_TAGVAR(hardcode_direct_absolute, $1)=no
+_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=
+_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=
+_LT_TAGVAR(hardcode_libdir_separator, $1)=
+_LT_TAGVAR(hardcode_minus_L, $1)=no
+_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported
+_LT_TAGVAR(hardcode_automatic, $1)=no
+_LT_TAGVAR(inherit_rpath, $1)=no
+_LT_TAGVAR(module_cmds, $1)=
+_LT_TAGVAR(module_expsym_cmds, $1)=
+_LT_TAGVAR(link_all_deplibs, $1)=unknown
+_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds
+_LT_TAGVAR(no_undefined_flag, $1)=
+_LT_TAGVAR(whole_archive_flag_spec, $1)=
+_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no
+
+# Source file extension for C++ test sources.
+ac_ext=cpp
+
+# Object file extension for compiled C++ test sources.
+objext=o
+_LT_TAGVAR(objext, $1)=$objext
+
+# No sense in running all these tests if we already determined that
+# the CXX compiler isn't working.  Some variables (like enable_shared)
+# are currently assumed to apply to all compilers on this platform,
+# and will be corrupted by setting them based on a non-working compiler.
+if test "$_lt_caught_CXX_error" != yes; then
+  # Code to be used in simple compile tests
+  lt_simple_compile_test_code="int some_variable = 0;"
+
+  # Code to be used in simple link tests
+  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'
+
+  # ltmain only uses $CC for tagged configurations so make sure $CC is set.
+  _LT_TAG_COMPILER
+
+  # save warnings/boilerplate of simple test code
+  _LT_COMPILER_BOILERPLATE
+  _LT_LINKER_BOILERPLATE
+
+  # Allow CC to be a program name with arguments.
+  lt_save_CC=$CC
+  lt_save_LD=$LD
+  lt_save_GCC=$GCC
+  GCC=$GXX
+  lt_save_with_gnu_ld=$with_gnu_ld
+  lt_save_path_LD=$lt_cv_path_LD
+  if test -n "${lt_cv_prog_gnu_ldcxx+set}"; then
+    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx
+  else
+    $as_unset lt_cv_prog_gnu_ld
+  fi
+  if test -n "${lt_cv_path_LDCXX+set}"; then
+    lt_cv_path_LD=$lt_cv_path_LDCXX
+  else
+    $as_unset lt_cv_path_LD
+  fi
+  test -z "${LDCXX+set}" || LD=$LDCXX
+  CC=${CXX-"c++"}
+  compiler=$CC
+  _LT_TAGVAR(compiler, $1)=$CC
+  _LT_CC_BASENAME([$compiler])
+
+  if test -n "$compiler"; then
+    # We don't want -fno-exception when compiling C++ code, so set the
+    # no_builtin_flag separately
+    if test "$GXX" = yes; then
+      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'
+    else
+      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=
+    fi
+
+    if test "$GXX" = yes; then
+      # Set up default GNU C++ configuration
+
+      LT_PATH_LD
+
+      # Check if GNU C++ uses GNU ld as the underlying linker, since the
+      # archiving commands below assume that GNU ld is being used.
+      if test "$with_gnu_ld" = yes; then
+        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'
+        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+
+        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'
+
+        # If archive_cmds runs LD, not CC, wlarc should be empty
+        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to
+        #     investigate it a little bit more. (MM)
+        wlarc='${wl}'
+
+        # ancient GNU ld didn't support --whole-archive et. al.
+        if eval "`$CC -print-prog-name=ld` --help 2>&1" |
+	  $GREP 'no-whole-archive' > /dev/null; then
+          _LT_TAGVAR(whole_archive_flag_spec, $1)="$wlarc"'--whole-archive$convenience '"$wlarc"'--no-whole-archive'
+        else
+          _LT_TAGVAR(whole_archive_flag_spec, $1)=
+        fi
+      else
+        with_gnu_ld=no
+        wlarc=
+
+        # A generic and very simple default shared library creation
+        # command for GNU C++ for the case where it uses the native
+        # linker, instead of GNU ld.  If possible, this setting should
+        # overridden to take advantage of the native linker features on
+        # the platform it is being used on.
+        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'
+      fi
+
+      # Commands to make compiler produce verbose output that lists
+      # what "hidden" libraries, object files and flags are used when
+      # linking a shared library.
+      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+
+    else
+      GXX=no
+      with_gnu_ld=no
+      wlarc=
+    fi
+
+    # PORTME: fill in a description of your system's C++ link characteristics
+    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])
+    _LT_TAGVAR(ld_shlibs, $1)=yes
+    case $host_os in
+      aix3*)
+        # FIXME: insert proper C++ library support
+        _LT_TAGVAR(ld_shlibs, $1)=no
+        ;;
+      aix[[4-9]]*)
+        if test "$host_cpu" = ia64; then
+          # On IA64, the linker does run time linking by default, so we don't
+          # have to do anything special.
+          aix_use_runtimelinking=no
+          exp_sym_flag='-Bexport'
+          no_entry_flag=""
+        else
+          aix_use_runtimelinking=no
+
+          # Test if we are trying to use run time linking or normal
+          # AIX style linking. If -brtl is somewhere in LDFLAGS, we
+          # need to do runtime linking.
+          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)
+	    for ld_flag in $LDFLAGS; do
+	      case $ld_flag in
+	      *-brtl*)
+	        aix_use_runtimelinking=yes
+	        break
+	        ;;
+	      esac
+	    done
+	    ;;
+          esac
+
+          exp_sym_flag='-bexport'
+          no_entry_flag='-bnoentry'
+        fi
+
+        # When large executables or shared objects are built, AIX ld can
+        # have problems creating the table of contents.  If linking a library
+        # or program results in "error TOC overflow" add -mminimal-toc to
+        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not
+        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.
+
+        _LT_TAGVAR(archive_cmds, $1)=''
+        _LT_TAGVAR(hardcode_direct, $1)=yes
+        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'
+        _LT_TAGVAR(link_all_deplibs, $1)=yes
+        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'
+
+        if test "$GXX" = yes; then
+          case $host_os in aix4.[[012]]|aix4.[[012]].*)
+          # We only want to do this on AIX 4.2 and lower, the check
+          # below for broken collect2 doesn't work under 4.3+
+	  collect2name=`${CC} -print-prog-name=collect2`
+	  if test -f "$collect2name" &&
+	     strings "$collect2name" | $GREP resolve_lib_name >/dev/null
+	  then
+	    # We have reworked collect2
+	    :
+	  else
+	    # We have old collect2
+	    _LT_TAGVAR(hardcode_direct, $1)=unsupported
+	    # It fails to find uninstalled libraries when the uninstalled
+	    # path is not listed in the libpath.  Setting hardcode_minus_L
+	    # to unsupported forces relinking
+	    _LT_TAGVAR(hardcode_minus_L, $1)=yes
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+	    _LT_TAGVAR(hardcode_libdir_separator, $1)=
+	  fi
+          esac
+          shared_flag='-shared'
+	  if test "$aix_use_runtimelinking" = yes; then
+	    shared_flag="$shared_flag "'${wl}-G'
+	  fi
+        else
+          # not using gcc
+          if test "$host_cpu" = ia64; then
+	  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release
+	  # chokes on -Wl,-G. The following line is correct:
+	  shared_flag='-G'
+          else
+	    if test "$aix_use_runtimelinking" = yes; then
+	      shared_flag='${wl}-G'
+	    else
+	      shared_flag='${wl}-bM:SRE'
+	    fi
+          fi
+        fi
+
+        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'
+        # It seems that -bexpall does not export symbols beginning with
+        # underscore (_), so it is better to generate a list of symbols to
+	# export.
+        _LT_TAGVAR(always_export_symbols, $1)=yes
+        if test "$aix_use_runtimelinking" = yes; then
+          # Warning - without using the other runtime loading flags (-brtl),
+          # -berok will link without error, but may produce a broken library.
+          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'
+          # Determine the default libpath from the value encoded in an empty
+          # executable.
+          _LT_SYS_MODULE_PATH_AIX
+          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'"$aix_libpath"
+
+          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags `if test "x${allow_undefined_flag}" != "x"; then $ECHO "X${wl}${allow_undefined_flag}" | $Xsed; else :; fi` '"\${wl}$exp_sym_flag:\$export_symbols $shared_flag"
+        else
+          if test "$host_cpu" = ia64; then
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'
+	    _LT_TAGVAR(allow_undefined_flag, $1)="-z nodefs"
+	    _LT_TAGVAR(archive_expsym_cmds, $1)="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs '"\${wl}$no_entry_flag"' $compiler_flags ${wl}${allow_undefined_flag} '"\${wl}$exp_sym_flag:\$export_symbols"
+          else
+	    # Determine the default libpath from the value encoded in an
+	    # empty executable.
+	    _LT_SYS_MODULE_PATH_AIX
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'"$aix_libpath"
+	    # Warning - without using the other run time loading flags,
+	    # -berok will link without error, but may produce a broken library.
+	    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'
+	    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'
+	    # Exported symbols can be pulled into shared objects from archives
+	    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'
+	    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes
+	    # This is similar to how AIX traditionally builds its shared
+	    # libraries.
+	    _LT_TAGVAR(archive_expsym_cmds, $1)="\$CC $shared_flag"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'
+          fi
+        fi
+        ;;
+
+      beos*)
+	if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then
+	  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+	  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc
+	  # support --undefined.  This deserves some investigation.  FIXME
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	else
+	  _LT_TAGVAR(ld_shlibs, $1)=no
+	fi
+	;;
+
+      chorus*)
+        case $cc_basename in
+          *)
+	  # FIXME: insert proper C++ library support
+	  _LT_TAGVAR(ld_shlibs, $1)=no
+	  ;;
+        esac
+        ;;
+
+      cygwin* | mingw* | pw32* | cegcc*)
+        # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,
+        # as there is no search path for DLLs.
+        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'
+        _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
+        _LT_TAGVAR(always_export_symbols, $1)=no
+        _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes
+
+        if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then
+          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+          # If the export-symbols file already is a .def file (1st line
+          # is EXPORTS), use it as is; otherwise, prepend...
+          _LT_TAGVAR(archive_expsym_cmds, $1)='if test "x`$SED 1q $export_symbols`" = xEXPORTS; then
+	    cp $export_symbols $output_objdir/$soname.def;
+          else
+	    echo EXPORTS > $output_objdir/$soname.def;
+	    cat $export_symbols >> $output_objdir/$soname.def;
+          fi~
+          $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'
+        else
+          _LT_TAGVAR(ld_shlibs, $1)=no
+        fi
+        ;;
+      darwin* | rhapsody*)
+        _LT_DARWIN_LINKER_FEATURES($1)
+	;;
+
+      dgux*)
+        case $cc_basename in
+          ec++*)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          ghcx*)
+	    # Green Hills C++ Compiler
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          *)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+        esac
+        ;;
+
+      freebsd[[12]]*)
+        # C++ shared libraries reported to be fairly broken before
+	# switch to ELF
+        _LT_TAGVAR(ld_shlibs, $1)=no
+        ;;
+
+      freebsd-elf*)
+        _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+        ;;
+
+      freebsd* | dragonfly*)
+        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF
+        # conventions
+        _LT_TAGVAR(ld_shlibs, $1)=yes
+        ;;
+
+      gnu*)
+        ;;
+
+      hpux9*)
+        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'
+        _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+        _LT_TAGVAR(hardcode_direct, $1)=yes
+        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,
+				             # but as the default
+				             # location of the library.
+
+        case $cc_basename in
+          CC*)
+            # FIXME: insert proper C++ library support
+            _LT_TAGVAR(ld_shlibs, $1)=no
+            ;;
+          aCC*)
+            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+            # Commands to make compiler produce verbose output that lists
+            # what "hidden" libraries, object files and flags are used when
+            # linking a shared library.
+            #
+            # There doesn't appear to be a way to prevent this compiler from
+            # explicitly linking system object files so we need to strip them
+            # from the output so that they don't get included in the library
+            # dependencies.
+            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP "\-L"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+            ;;
+          *)
+            if test "$GXX" = yes; then
+              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'
+            else
+              # FIXME: insert proper C++ library support
+              _LT_TAGVAR(ld_shlibs, $1)=no
+            fi
+            ;;
+        esac
+        ;;
+
+      hpux10*|hpux11*)
+        if test $with_gnu_ld = no; then
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'
+	  _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+
+          case $host_cpu in
+            hppa*64*|ia64*)
+              ;;
+            *)
+	      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+              ;;
+          esac
+        fi
+        case $host_cpu in
+          hppa*64*|ia64*)
+            _LT_TAGVAR(hardcode_direct, $1)=no
+            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+            ;;
+          *)
+            _LT_TAGVAR(hardcode_direct, $1)=yes
+            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,
+					         # but as the default
+					         # location of the library.
+            ;;
+        esac
+
+        case $cc_basename in
+          CC*)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          aCC*)
+	    case $host_cpu in
+	      hppa*64*)
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	        ;;
+	      ia64*)
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	        ;;
+	      *)
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	        ;;
+	    esac
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP "\-L"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+	    ;;
+          *)
+	    if test "$GXX" = yes; then
+	      if test $with_gnu_ld = no; then
+	        case $host_cpu in
+	          hppa*64*)
+	            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	            ;;
+	          ia64*)
+	            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	            ;;
+	          *)
+	            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	            ;;
+	        esac
+	      fi
+	    else
+	      # FIXME: insert proper C++ library support
+	      _LT_TAGVAR(ld_shlibs, $1)=no
+	    fi
+	    ;;
+        esac
+        ;;
+
+      interix[[3-9]]*)
+	_LT_TAGVAR(hardcode_direct, $1)=no
+	_LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+	# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.
+	# Instead, shared libraries are loaded at an image base (0x10000000 by
+	# default) and relocated if they conflict, which is a slow very memory
+	# consuming and fragmenting process.  To avoid this, we pick a random,
+	# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link
+	# time.  Moving up from 0x10000000 also allows more sbrk(2) space.
+	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+	_LT_TAGVAR(archive_expsym_cmds, $1)='sed "s,^,_," $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
+	;;
+      irix5* | irix6*)
+        case $cc_basename in
+          CC*)
+	    # SGI C++
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+
+	    # Archives containing C++ object files must be created using
+	    # "CC -ar", where "CC" is the IRIX C++ compiler.  This is
+	    # necessary to make sure instantiated templates are included
+	    # in the archive.
+	    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'
+	    ;;
+          *)
+	    if test "$GXX" = yes; then
+	      if test "$with_gnu_ld" = no; then
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+	      else
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` -o $lib'
+	      fi
+	    fi
+	    _LT_TAGVAR(link_all_deplibs, $1)=yes
+	    ;;
+        esac
+        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+        _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+        _LT_TAGVAR(inherit_rpath, $1)=yes
+        ;;
+
+      linux* | k*bsd*-gnu | kopensolaris*-gnu)
+        case $cc_basename in
+          KCC*)
+	    # Kuck and Associates, Inc. (KAI) C++ Compiler
+
+	    # KCC will only create a shared library if the output file
+	    # ends with ".so" (or ".sl" for HP-UX), so rename the library
+	    # to its proper name (with version) after linking.
+	    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\''s/\([[^()0-9A-Za-z{}]]\)/\\\\\1/g'\''`; templib=`echo $lib | $SED -e "s/\${tempext}\..*/.so/"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \$templib; mv \$templib $lib'
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\''s/\([[^()0-9A-Za-z{}]]\)/\\\\\1/g'\''`; templib=`echo $lib | $SED -e "s/\${tempext}\..*/.so/"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \$templib ${wl}-retain-symbols-file,$export_symbols; mv \$templib $lib'
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP "ld"`; rm -f libconftest$shared_ext; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'
+
+	    # Archives containing C++ object files must be created using
+	    # "CC -Bstatic", where "CC" is the KAI C++ compiler.
+	    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'
+	    ;;
+	  icpc* | ecpc* )
+	    # Intel C++
+	    with_gnu_ld=yes
+	    # version 8.0 and above of icpc choke on multiply defined symbols
+	    # if we add $predep_objects and $postdep_objects, however 7.1 and
+	    # earlier do not add the objects themselves.
+	    case `$CC -V 2>&1` in
+	      *"Version 7."*)
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'
+		_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+		;;
+	      *)  # Version 8.0 or newer
+	        tmp_idyn=
+	        case $host_cpu in
+		  ia64*) tmp_idyn=' -i_dynamic';;
+		esac
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'"$tmp_idyn"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+		_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'"$tmp_idyn"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'
+		;;
+	    esac
+	    _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'
+	    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'
+	    ;;
+          pgCC* | pgcpp*)
+            # Portland Group C++ compiler
+	    case `$CC -V` in
+	    *pgCC\ [[1-5]]* | *pgcpp\ [[1-5]]*)
+	      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~
+		compile_command="$compile_command `find $tpldir -name \*.o | $NL2SP`"'
+	      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~
+		$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \*.o | $NL2SP`~
+		$RANLIB $oldlib'
+	      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~
+		$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'
+	      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~
+		rm -rf $tpldir~
+		$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~
+		$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'
+	      ;;
+	    *) # Version 6 will use weak symbols
+	      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'
+	      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'
+	      ;;
+	    esac
+
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'
+	    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'
+	    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+            ;;
+	  cxx*)
+	    # Compaq C++
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'
+
+	    runpath_var=LD_RUN_PATH
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'
+	    _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "ld"`; templist=`$ECHO "X$templist" | $Xsed -e "s/\(^.*ld.*\)\( .*ld .*$\)/\1/"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+	    ;;
+	  xl*)
+	    # IBM XL 8.0 on PPC, with GNU ld
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+	    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'
+	    if test "x$supports_anon_versioning" = xyes; then
+	      _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $output_objdir/$libname.ver~
+		cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+		echo "local: *; };" >> $output_objdir/$libname.ver~
+		$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
+	    fi
+	    ;;
+	  *)
+	    case `$CC -V 2>&1 | sed 5q` in
+	    *Sun\ C*)
+	      # Sun C++ 5.9
+	      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'
+	      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'
+	      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+	      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\"\"; do test -z \"$conv\" || new_convenience=\"$new_convenience,$conv\"; done; $ECHO \"$new_convenience\"` ${wl}--no-whole-archive'
+	      _LT_TAGVAR(compiler_needs_object, $1)=yes
+
+	      # Not sure whether something based on
+	      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1
+	      # would be better.
+	      output_verbose_link_cmd='echo'
+
+	      # Archives containing C++ object files must be created using
+	      # "CC -xar", where "CC" is the Sun C++ compiler.  This is
+	      # necessary to make sure instantiated templates are included
+	      # in the archive.
+	      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'
+	      ;;
+	    esac
+	    ;;
+	esac
+	;;
+
+      lynxos*)
+        # FIXME: insert proper C++ library support
+	_LT_TAGVAR(ld_shlibs, $1)=no
+	;;
+
+      m88k*)
+        # FIXME: insert proper C++ library support
+        _LT_TAGVAR(ld_shlibs, $1)=no
+	;;
+
+      mvs*)
+        case $cc_basename in
+          cxx*)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+	  *)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+	esac
+	;;
+
+      netbsd*)
+        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then
+	  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'
+	  wlarc=
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+	  _LT_TAGVAR(hardcode_direct, $1)=yes
+	  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	fi
+	# Workaround some broken pre-1.5 toolchains
+	output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e "s:-lgcc -lc -lgcc::"'
+	;;
+
+      *nto* | *qnx*)
+        _LT_TAGVAR(ld_shlibs, $1)=yes
+	;;
+
+      openbsd2*)
+        # C++ shared libraries are fairly broken
+	_LT_TAGVAR(ld_shlibs, $1)=no
+	;;
+
+      openbsd*)
+	if test -f /usr/libexec/ld.so; then
+	  _LT_TAGVAR(hardcode_direct, $1)=yes
+	  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'
+	  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	  if test -z "`echo __ELF__ | $CC -E - | grep __ELF__`" || test "$host_os-$host_cpu" = "openbsd2.8-powerpc"; then
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'
+	    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'
+	    _LT_TAGVAR(whole_archive_flag_spec, $1)="$wlarc"'--whole-archive$convenience '"$wlarc"'--no-whole-archive'
+	  fi
+	  output_verbose_link_cmd=echo
+	else
+	  _LT_TAGVAR(ld_shlibs, $1)=no
+	fi
+	;;
+
+      osf3* | osf4* | osf5*)
+        case $cc_basename in
+          KCC*)
+	    # Kuck and Associates, Inc. (KAI) C++ Compiler
+
+	    # KCC will only create a shared library if the output file
+	    # ends with ".so" (or ".sl" for HP-UX), so rename the library
+	    # to its proper name (with version) after linking.
+	    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\''s/\([[^()0-9A-Za-z{}]]\)/\\\\\1/g'\''`; templib=`echo "$lib" | $SED -e "s/\${tempext}\..*/.so/"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \$templib; mv \$templib $lib'
+
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+	    _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+
+	    # Archives containing C++ object files must be created using
+	    # the KAI C++ compiler.
+	    case $host in
+	      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;
+	      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;
+	    esac
+	    ;;
+          RCC*)
+	    # Rational C++ 2.4.1
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          cxx*)
+	    case $host in
+	      osf3*)
+	        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\*'
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n "$verstring" && $ECHO "X${wl}-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+		;;
+	      *)
+	        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \*'
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'
+	        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf "%s %s\\n" -exported_symbol "\$i" >> $lib.exp; done~
+	          echo "-hidden">> $lib.exp~
+	          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n "$verstring" && $ECHO "X-set_version $verstring" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~
+	          $RM $lib.exp'
+	        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'
+		;;
+	    esac
+
+	    _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+
+	    # Commands to make compiler produce verbose output that lists
+	    # what "hidden" libraries, object files and flags are used when
+	    # linking a shared library.
+	    #
+	    # There doesn't appear to be a way to prevent this compiler from
+	    # explicitly linking system object files so we need to strip them
+	    # from the output so that they don't get included in the library
+	    # dependencies.
+	    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "ld" | $GREP -v "ld:"`; templist=`$ECHO "X$templist" | $Xsed -e "s/\(^.*ld.*\)\( .*ld.*$\)/\1/"`; list=""; for z in $templist; do case $z in conftest.$objext) list="$list $z";; *.$objext);; *) list="$list $z";;esac; done; $ECHO "X$list" | $Xsed'
+	    ;;
+	  *)
+	    if test "$GXX" = yes && test "$with_gnu_ld" = no; then
+	      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\*'
+	      case $host in
+	        osf3*)
+	          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "X${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+		  ;;
+	        *)
+	          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n "$verstring" && $ECHO "${wl}-set_version ${wl}$verstring" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'
+		  ;;
+	      esac
+
+	      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'
+	      _LT_TAGVAR(hardcode_libdir_separator, $1)=:
+
+	      # Commands to make compiler produce verbose output that lists
+	      # what "hidden" libraries, object files and flags are used when
+	      # linking a shared library.
+	      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+
+	    else
+	      # FIXME: insert proper C++ library support
+	      _LT_TAGVAR(ld_shlibs, $1)=no
+	    fi
+	    ;;
+        esac
+        ;;
+
+      psos*)
+        # FIXME: insert proper C++ library support
+        _LT_TAGVAR(ld_shlibs, $1)=no
+        ;;
+
+      sunos4*)
+        case $cc_basename in
+          CC*)
+	    # Sun C++ 4.x
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          lcc*)
+	    # Lucid
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          *)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+        esac
+        ;;
+
+      solaris*)
+        case $cc_basename in
+          CC*)
+	    # Sun C++ 4.2, 5.x and Centerline C++
+            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes
+	    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+	      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'
+
+	    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'
+	    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	    case $host_os in
+	      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;
+	      *)
+		# The compiler driver will combine and reorder linker options,
+		# but understands `-z linker_flag'.
+	        # Supported since Solaris 2.6 (maybe 2.5.1?)
+		_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'
+	        ;;
+	    esac
+	    _LT_TAGVAR(link_all_deplibs, $1)=yes
+
+	    output_verbose_link_cmd='echo'
+
+	    # Archives containing C++ object files must be created using
+	    # "CC -xar", where "CC" is the Sun C++ compiler.  This is
+	    # necessary to make sure instantiated templates are included
+	    # in the archive.
+	    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'
+	    ;;
+          gcx*)
+	    # Green Hills C++ Compiler
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'
+
+	    # The C++ compiler must be used to create the archive.
+	    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'
+	    ;;
+          *)
+	    # GNU C++ compiler with Solaris linker
+	    if test "$GXX" = yes && test "$with_gnu_ld" = no; then
+	      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'
+	      if $CC --version | $GREP -v '^2\.7' > /dev/null; then
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'
+	        _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+		  $CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'
+
+	        # Commands to make compiler produce verbose output that lists
+	        # what "hidden" libraries, object files and flags are used when
+	        # linking a shared library.
+	        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+	      else
+	        # g++ 2.7 appears to require `-G' NOT `-shared' on this
+	        # platform.
+	        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'
+	        _LT_TAGVAR(archive_expsym_cmds, $1)='echo "{ global:" > $lib.exp~cat $export_symbols | $SED -e "s/\(.*\)/\1;/" >> $lib.exp~echo "local: *; };" >> $lib.exp~
+		  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'
+
+	        # Commands to make compiler produce verbose output that lists
+	        # what "hidden" libraries, object files and flags are used when
+	        # linking a shared library.
+	        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP "\-L"'
+	      fi
+
+	      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'
+	      case $host_os in
+		solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;
+		*)
+		  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'
+		  ;;
+	      esac
+	    fi
+	    ;;
+        esac
+        ;;
+
+    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)
+      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'
+      _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      runpath_var='LD_RUN_PATH'
+
+      case $cc_basename in
+        CC*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+	*)
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	  ;;
+      esac
+      ;;
+
+      sysv5* | sco3.2v5* | sco5v6*)
+	# Note: We can NOT use -z defs as we might desire, because we do not
+	# link with -lc, and that would cause any symbols used from libc to
+	# always be unresolved, which means just about no library would
+	# ever link correctly.  If we're not using GNU ld we use -z text
+	# though, which does catch some bad symbols but isn't as heavy-handed
+	# as -z defs.
+	_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'
+	_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'
+	_LT_TAGVAR(archive_cmds_need_lc, $1)=no
+	_LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+	_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'
+	_LT_TAGVAR(hardcode_libdir_separator, $1)=':'
+	_LT_TAGVAR(link_all_deplibs, $1)=yes
+	_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'
+	runpath_var='LD_RUN_PATH'
+
+	case $cc_basename in
+          CC*)
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    ;;
+	  *)
+	    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'
+	    ;;
+	esac
+      ;;
+
+      tandem*)
+        case $cc_basename in
+          NCC*)
+	    # NonStop-UX NCC 3.20
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+          *)
+	    # FIXME: insert proper C++ library support
+	    _LT_TAGVAR(ld_shlibs, $1)=no
+	    ;;
+        esac
+        ;;
+
+      vxworks*)
+        # FIXME: insert proper C++ library support
+        _LT_TAGVAR(ld_shlibs, $1)=no
+        ;;
+
+      *)
+        # FIXME: insert proper C++ library support
+        _LT_TAGVAR(ld_shlibs, $1)=no
+        ;;
+    esac
+
+    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])
+    test "$_LT_TAGVAR(ld_shlibs, $1)" = no && can_build_shared=no
+
+    _LT_TAGVAR(GCC, $1)="$GXX"
+    _LT_TAGVAR(LD, $1)="$LD"
+
+    ## CAVEAT EMPTOR:
+    ## There is no encapsulation within the following macros, do not change
+    ## the running order or otherwise move them around unless you know exactly
+    ## what you are doing...
+    _LT_SYS_HIDDEN_LIBDEPS($1)
+    _LT_COMPILER_PIC($1)
+    _LT_COMPILER_C_O($1)
+    _LT_COMPILER_FILE_LOCKS($1)
+    _LT_LINKER_SHLIBS($1)
+    _LT_SYS_DYNAMIC_LINKER($1)
+    _LT_LINKER_HARDCODE_LIBPATH($1)
+
+    _LT_CONFIG($1)
+  fi # test -n "$compiler"
+
+  CC=$lt_save_CC
+  LDCXX=$LD
+  LD=$lt_save_LD
+  GCC=$lt_save_GCC
+  with_gnu_ld=$lt_save_with_gnu_ld
+  lt_cv_path_LDCXX=$lt_cv_path_LD
+  lt_cv_path_LD=$lt_save_path_LD
+  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld
+  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld
+fi # test "$_lt_caught_CXX_error" != yes
+
+AC_LANG_POP
+])# _LT_LANG_CXX_CONFIG
+
+
+# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])
+# ---------------------------------
+# Figure out "hidden" library dependencies from verbose
+# compiler output when linking a shared library.
+# Parse the compiler output and extract the necessary
+# objects, libraries and library flags.
+m4_defun([_LT_SYS_HIDDEN_LIBDEPS],
+[m4_require([_LT_FILEUTILS_DEFAULTS])dnl
+# Dependencies to place before and after the object being linked:
+_LT_TAGVAR(predep_objects, $1)=
+_LT_TAGVAR(postdep_objects, $1)=
+_LT_TAGVAR(predeps, $1)=
+_LT_TAGVAR(postdeps, $1)=
+_LT_TAGVAR(compiler_lib_search_path, $1)=
+
+dnl we can't use the lt_simple_compile_test_code here,
+dnl because it contains code intended for an executable,
+dnl not a library.  It's possible we should let each
+dnl tag define a new lt_????_link_test_code variable,
+dnl but it's only used here...
+m4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF
+int a;
+void foo (void) { a = 0; }
+_LT_EOF
+], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF
+class Foo
+{
+public:
+  Foo (void) { a = 0; }
+private:
+  int a;
+};
+_LT_EOF
+], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF
+      subroutine foo
+      implicit none
+      integer*4 a
+      a=0
+      return
+      end
+_LT_EOF
+], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF
+      subroutine foo
+      implicit none
+      integer a
+      a=0
+      return
+      end
+_LT_EOF
+], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF
+public class foo {
+  private int a;
+  public void bar (void) {
+    a = 0;
+  }
+};
+_LT_EOF
+])
+dnl Parse the compiler output and extract the necessary
+dnl objects, libraries and library flags.
+if AC_TRY_EVAL(ac_compile); then
+  # Parse the compiler output and extract the necessary
+  # objects, libraries and library flags.
+
+  # Sentinel used to keep track of whether or not we are before
+  # the conftest object file.
+  pre_test_object_deps_done=no
+
+  for p in `eval "$output_verbose_link_cmd"`; do
+    case $p in
+
+    -L* | -R* | -l*)
+       # Some compilers place space between "-{L,R}" and the path.
+       # Remove the space.
+       if test $p = "-L" ||
+          test $p = "-R"; then
+	 prev=$p
+	 continue
+       else
+	 prev=
+       fi
+
+       if test "$pre_test_object_deps_done" = no; then
+	 case $p in
+	 -L* | -R*)
+	   # Internal compiler library paths should come after those
+	   # provided the user.  The postdeps already come after the
+	   # user supplied libs so there is no need to process them.
+	   if test -z "$_LT_TAGVAR(compiler_lib_search_path, $1)"; then
+	     _LT_TAGVAR(compiler_lib_search_path, $1)="${prev}${p}"
+	   else
+	     _LT_TAGVAR(compiler_lib_search_path, $1)="${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}"
+	   fi
+	   ;;
+	 # The "-l" case would never come before the object being
+	 # linked, so don't bother handling this case.
+	 esac
+       else
+	 if test -z "$_LT_TAGVAR(postdeps, $1)"; then
+	   _LT_TAGVAR(postdeps, $1)="${prev}${p}"
+	 else
+	   _LT_TAGVAR(postdeps, $1)="${_LT_TAGVAR(postdeps, $1)} ${prev}${p}"
+	 fi
+       fi
+       ;;
+
+    *.$objext)
+       # This assumes that the test object file only shows up
+       # once in the compiler output.
+       if test "$p" = "conftest.$objext"; then
+	 pre_test_object_deps_done=yes
+	 continue
+       fi
+
+       if test "$pre_test_object_deps_done" = no; then
+	 if test -z "$_LT_TAGVAR(predep_objects, $1)"; then
+	   _LT_TAGVAR(predep_objects, $1)="$p"
+	 else
+	   _LT_TAGVAR(predep_objects, $1)="$_LT_TAGVAR(predep_objects, $1) $p"
+	 fi
+       else
+	 if test -z "$_LT_TAGVAR(postdep_objects, $1)"; then
+	   _LT_TAGVAR(postdep_objects, $1)="$p"
+	 else
+	   _LT_TAGVAR(postdep_objects, $1)="$_LT_TAGVAR(postdep_objects, $1) $p"
+	 fi
+       fi
+       ;;
+
+    *) ;; # Ignore the rest.
+
+    esac
+  done
+
+  # Clean up.
+  rm -f a.out a.exe
+else
+  echo "libtool.m4: error: problem compiling $1 test program"
+fi
+
+$RM -f confest.$objext
+
+# PORTME: override above test on systems where it is broken
+m4_if([$1], [CXX],
+[case $host_os in
+interix[[3-9]]*)
+  # Interix 3.5 installs completely hosed .la files for C++, so rather than
+  # hack all around it, let's just trust "g++" to DTRT.
+  _LT_TAGVAR(predep_objects,$1)=
+  _LT_TAGVAR(postdep_objects,$1)=
+  _LT_TAGVAR(postdeps,$1)=
+  ;;
+
+linux*)
+  case `$CC -V 2>&1 | sed 5q` in
+  *Sun\ C*)
+    # Sun C++ 5.9
+
+    # The more standards-conforming stlport4 library is
+    # incompatible with the Cstd library. Avoid specifying
+    # it if it's in CXXFLAGS. Ignore libCrun as
+    # -library=stlport4 depends on it.
+    case " $CXX $CXXFLAGS " in
+    *" -library=stlport4 "*)
+      solaris_use_stlport4=yes
+      ;;
+    esac
+
+    if test "$solaris_use_stlport4" != yes; then
+      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'
+    fi
+    ;;
+  esac
+  ;;
+
+solaris*)
+  case $cc_basename in
+  CC*)
+    # The more standards-conforming stlport4 library is
+    # incompatible with the Cstd library. Avoid specifying
+    # it if it's in CXXFLAGS. Ignore libCrun as
+    # -library=stlport4 depends on it.
+    case " $CXX $CXXFLAGS " in
+    *" -library=stlport4 "*)
+      solaris_use_stlport4=yes
+      ;;
+    esac
+
+    # Adding this requires a known-good setup of shared libraries for
+    # Sun compiler versions before 5.6, else PIC objects from an old
+    # archive will be linked into the output, leading to subtle bugs.
+    if test "$solaris_use_stlport4" != yes; then
+      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'
+    fi
+    ;;
+  esac
+  ;;
+esac
+])
+
+case " $_LT_TAGVAR(postdeps, $1) " in
+*" -lc "*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;
+esac
+ _LT_TAGVAR(compiler_lib_search_dirs, $1)=
+if test -n "${_LT_TAGVAR(compiler_lib_search_path, $1)}"; then
+ _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo " ${_LT_TAGVAR(compiler_lib_search_path, $1)}" | ${SED} -e 's! -L! !g' -e 's!^ !!'`
+fi
+_LT_TAGDECL([], [compiler_lib_search_dirs], [1],
+    [The directories searched by this compiler when creating a shared library])
+_LT_TAGDECL([], [predep_objects], [1],
+    [Dependencies to place before and after the objects being linked to
+    create a shared library])
+_LT_TAGDECL([], [postdep_objects], [1])
+_LT_TAGDECL([], [predeps], [1])
+_LT_TAGDECL([], [postdeps], [1])
+_LT_TAGDECL([], [compiler_lib_search_path], [1],
+    [The library search path used internally by the compiler when linking
+    a shared library])
+])# _LT_SYS_HIDDEN_LIBDEPS
+
+
+# _LT_PROG_F77
+# ------------
+# Since AC_PROG_F77 is broken, in that it returns the empty string
+# if there is no fortran compiler, we have our own version here.
+m4_defun([_LT_PROG_F77],
+[
+pushdef([AC_MSG_ERROR], [_lt_disable_F77=yes])
+AC_PROG_F77
+if test -z "$F77" || test "X$F77" = "Xno"; then
+  _lt_disable_F77=yes
+fi
+popdef([AC_MSG_ERROR])
+])# _LT_PROG_F77
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([_LT_PROG_F77], [])
+
+
+# _LT_LANG_F77_CONFIG([TAG])
+# --------------------------
+# Ensure that the configuration variables for a Fortran 77 compiler are
+# suitably defined.  These variables are subsequently used by _LT_CONFIG
+# to write the compiler configuration to `libtool'.
+m4_defun([_LT_LANG_F77_CONFIG],
+[AC_REQUIRE([_LT_PROG_F77])dnl
+AC_LANG_PUSH(Fortran 77)
+
+_LT_TAGVAR(archive_cmds_need_lc, $1)=no
+_LT_TAGVAR(allow_undefined_flag, $1)=
+_LT_TAGVAR(always_export_symbols, $1)=no
+_LT_TAGVAR(archive_expsym_cmds, $1)=
+_LT_TAGVAR(export_dynamic_flag_spec, $1)=
+_LT_TAGVAR(hardcode_direct, $1)=no
+_LT_TAGVAR(hardcode_direct_absolute, $1)=no
+_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=
+_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=
+_LT_TAGVAR(hardcode_libdir_separator, $1)=
+_LT_TAGVAR(hardcode_minus_L, $1)=no
+_LT_TAGVAR(hardcode_automatic, $1)=no
+_LT_TAGVAR(inherit_rpath, $1)=no
+_LT_TAGVAR(module_cmds, $1)=
+_LT_TAGVAR(module_expsym_cmds, $1)=
+_LT_TAGVAR(link_all_deplibs, $1)=unknown
+_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds
+_LT_TAGVAR(no_undefined_flag, $1)=
+_LT_TAGVAR(whole_archive_flag_spec, $1)=
+_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no
+
+# Source file extension for f77 test sources.
+ac_ext=f
+
+# Object file extension for compiled f77 test sources.
+objext=o
+_LT_TAGVAR(objext, $1)=$objext
+
+# No sense in running all these tests if we already determined that
+# the F77 compiler isn't working.  Some variables (like enable_shared)
+# are currently assumed to apply to all compilers on this platform,
+# and will be corrupted by setting them based on a non-working compiler.
+if test "$_lt_disable_F77" != yes; then
+  # Code to be used in simple compile tests
+  lt_simple_compile_test_code="\
+      subroutine t
+      return
+      end
+"
+
+  # Code to be used in simple link tests
+  lt_simple_link_test_code="\
+      program t
+      end
+"
+
+  # ltmain only uses $CC for tagged configurations so make sure $CC is set.
+  _LT_TAG_COMPILER
+
+  # save warnings/boilerplate of simple test code
+  _LT_COMPILER_BOILERPLATE
+  _LT_LINKER_BOILERPLATE
+
+  # Allow CC to be a program name with arguments.
+  lt_save_CC="$CC"
+  lt_save_GCC=$GCC
+  CC=${F77-"f77"}
+  compiler=$CC
+  _LT_TAGVAR(compiler, $1)=$CC
+  _LT_CC_BASENAME([$compiler])
+  GCC=$G77
+  if test -n "$compiler"; then
+    AC_MSG_CHECKING([if libtool supports shared libraries])
+    AC_MSG_RESULT([$can_build_shared])
+
+    AC_MSG_CHECKING([whether to build shared libraries])
+    test "$can_build_shared" = "no" && enable_shared=no
+
+    # On AIX, shared libraries and static libraries use the same namespace, and
+    # are all built from PIC.
+    case $host_os in
+      aix3*)
+        test "$enable_shared" = yes && enable_static=no
+        if test -n "$RANLIB"; then
+          archive_cmds="$archive_cmds~\$RANLIB \$lib"
+          postinstall_cmds='$RANLIB $lib'
+        fi
+        ;;
+      aix[[4-9]]*)
+	if test "$host_cpu" != ia64 && test "$aix_use_runtimelinking" = no ; then
+	  test "$enable_shared" = yes && enable_static=no
+	fi
+        ;;
+    esac
+    AC_MSG_RESULT([$enable_shared])
+
+    AC_MSG_CHECKING([whether to build static libraries])
+    # Make sure either enable_shared or enable_static is yes.
+    test "$enable_shared" = yes || enable_static=yes
+    AC_MSG_RESULT([$enable_static])
+
+    _LT_TAGVAR(GCC, $1)="$G77"
+    _LT_TAGVAR(LD, $1)="$LD"
+
+    ## CAVEAT EMPTOR:
+    ## There is no encapsulation within the following macros, do not change
+    ## the running order or otherwise move them around unless you know exactly
+    ## what you are doing...
+    _LT_COMPILER_PIC($1)
+    _LT_COMPILER_C_O($1)
+    _LT_COMPILER_FILE_LOCKS($1)
+    _LT_LINKER_SHLIBS($1)
+    _LT_SYS_DYNAMIC_LINKER($1)
+    _LT_LINKER_HARDCODE_LIBPATH($1)
+
+    _LT_CONFIG($1)
+  fi # test -n "$compiler"
+
+  GCC=$lt_save_GCC
+  CC="$lt_save_CC"
+fi # test "$_lt_disable_F77" != yes
+
+AC_LANG_POP
+])# _LT_LANG_F77_CONFIG
+
+
+# _LT_PROG_FC
+# -----------
+# Since AC_PROG_FC is broken, in that it returns the empty string
+# if there is no fortran compiler, we have our own version here.
+m4_defun([_LT_PROG_FC],
+[
+pushdef([AC_MSG_ERROR], [_lt_disable_FC=yes])
+AC_PROG_FC
+if test -z "$FC" || test "X$FC" = "Xno"; then
+  _lt_disable_FC=yes
+fi
+popdef([AC_MSG_ERROR])
+])# _LT_PROG_FC
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([_LT_PROG_FC], [])
+
+
+# _LT_LANG_FC_CONFIG([TAG])
+# -------------------------
+# Ensure that the configuration variables for a Fortran compiler are
+# suitably defined.  These variables are subsequently used by _LT_CONFIG
+# to write the compiler configuration to `libtool'.
+m4_defun([_LT_LANG_FC_CONFIG],
+[AC_REQUIRE([_LT_PROG_FC])dnl
+AC_LANG_PUSH(Fortran)
+
+_LT_TAGVAR(archive_cmds_need_lc, $1)=no
+_LT_TAGVAR(allow_undefined_flag, $1)=
+_LT_TAGVAR(always_export_symbols, $1)=no
+_LT_TAGVAR(archive_expsym_cmds, $1)=
+_LT_TAGVAR(export_dynamic_flag_spec, $1)=
+_LT_TAGVAR(hardcode_direct, $1)=no
+_LT_TAGVAR(hardcode_direct_absolute, $1)=no
+_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=
+_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=
+_LT_TAGVAR(hardcode_libdir_separator, $1)=
+_LT_TAGVAR(hardcode_minus_L, $1)=no
+_LT_TAGVAR(hardcode_automatic, $1)=no
+_LT_TAGVAR(inherit_rpath, $1)=no
+_LT_TAGVAR(module_cmds, $1)=
+_LT_TAGVAR(module_expsym_cmds, $1)=
+_LT_TAGVAR(link_all_deplibs, $1)=unknown
+_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds
+_LT_TAGVAR(no_undefined_flag, $1)=
+_LT_TAGVAR(whole_archive_flag_spec, $1)=
+_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no
+
+# Source file extension for fc test sources.
+ac_ext=${ac_fc_srcext-f}
+
+# Object file extension for compiled fc test sources.
+objext=o
+_LT_TAGVAR(objext, $1)=$objext
+
+# No sense in running all these tests if we already determined that
+# the FC compiler isn't working.  Some variables (like enable_shared)
+# are currently assumed to apply to all compilers on this platform,
+# and will be corrupted by setting them based on a non-working compiler.
+if test "$_lt_disable_FC" != yes; then
+  # Code to be used in simple compile tests
+  lt_simple_compile_test_code="\
+      subroutine t
+      return
+      end
+"
+
+  # Code to be used in simple link tests
+  lt_simple_link_test_code="\
+      program t
+      end
+"
+
+  # ltmain only uses $CC for tagged configurations so make sure $CC is set.
+  _LT_TAG_COMPILER
+
+  # save warnings/boilerplate of simple test code
+  _LT_COMPILER_BOILERPLATE
+  _LT_LINKER_BOILERPLATE
+
+  # Allow CC to be a program name with arguments.
+  lt_save_CC="$CC"
+  lt_save_GCC=$GCC
+  CC=${FC-"f95"}
+  compiler=$CC
+  GCC=$ac_cv_fc_compiler_gnu
+
+  _LT_TAGVAR(compiler, $1)=$CC
+  _LT_CC_BASENAME([$compiler])
+
+  if test -n "$compiler"; then
+    AC_MSG_CHECKING([if libtool supports shared libraries])
+    AC_MSG_RESULT([$can_build_shared])
+
+    AC_MSG_CHECKING([whether to build shared libraries])
+    test "$can_build_shared" = "no" && enable_shared=no
+
+    # On AIX, shared libraries and static libraries use the same namespace, and
+    # are all built from PIC.
+    case $host_os in
+      aix3*)
+        test "$enable_shared" = yes && enable_static=no
+        if test -n "$RANLIB"; then
+          archive_cmds="$archive_cmds~\$RANLIB \$lib"
+          postinstall_cmds='$RANLIB $lib'
+        fi
+        ;;
+      aix[[4-9]]*)
+	if test "$host_cpu" != ia64 && test "$aix_use_runtimelinking" = no ; then
+	  test "$enable_shared" = yes && enable_static=no
+	fi
+        ;;
+    esac
+    AC_MSG_RESULT([$enable_shared])
+
+    AC_MSG_CHECKING([whether to build static libraries])
+    # Make sure either enable_shared or enable_static is yes.
+    test "$enable_shared" = yes || enable_static=yes
+    AC_MSG_RESULT([$enable_static])
+
+    _LT_TAGVAR(GCC, $1)="$ac_cv_fc_compiler_gnu"
+    _LT_TAGVAR(LD, $1)="$LD"
+
+    ## CAVEAT EMPTOR:
+    ## There is no encapsulation within the following macros, do not change
+    ## the running order or otherwise move them around unless you know exactly
+    ## what you are doing...
+    _LT_SYS_HIDDEN_LIBDEPS($1)
+    _LT_COMPILER_PIC($1)
+    _LT_COMPILER_C_O($1)
+    _LT_COMPILER_FILE_LOCKS($1)
+    _LT_LINKER_SHLIBS($1)
+    _LT_SYS_DYNAMIC_LINKER($1)
+    _LT_LINKER_HARDCODE_LIBPATH($1)
+
+    _LT_CONFIG($1)
+  fi # test -n "$compiler"
+
+  GCC=$lt_save_GCC
+  CC="$lt_save_CC"
+fi # test "$_lt_disable_FC" != yes
+
+AC_LANG_POP
+])# _LT_LANG_FC_CONFIG
+
+
+# _LT_LANG_GCJ_CONFIG([TAG])
+# --------------------------
+# Ensure that the configuration variables for the GNU Java Compiler compiler
+# are suitably defined.  These variables are subsequently used by _LT_CONFIG
+# to write the compiler configuration to `libtool'.
+m4_defun([_LT_LANG_GCJ_CONFIG],
+[AC_REQUIRE([LT_PROG_GCJ])dnl
+AC_LANG_SAVE
+
+# Source file extension for Java test sources.
+ac_ext=java
+
+# Object file extension for compiled Java test sources.
+objext=o
+_LT_TAGVAR(objext, $1)=$objext
+
+# Code to be used in simple compile tests
+lt_simple_compile_test_code="class foo {}"
+
+# Code to be used in simple link tests
+lt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'
+
+# ltmain only uses $CC for tagged configurations so make sure $CC is set.
+_LT_TAG_COMPILER
+
+# save warnings/boilerplate of simple test code
+_LT_COMPILER_BOILERPLATE
+_LT_LINKER_BOILERPLATE
+
+# Allow CC to be a program name with arguments.
+lt_save_CC="$CC"
+lt_save_GCC=$GCC
+GCC=yes
+CC=${GCJ-"gcj"}
+compiler=$CC
+_LT_TAGVAR(compiler, $1)=$CC
+_LT_TAGVAR(LD, $1)="$LD"
+_LT_CC_BASENAME([$compiler])
+
+# GCJ did not exist at the time GCC didn't implicitly link libc in.
+_LT_TAGVAR(archive_cmds_need_lc, $1)=no
+
+_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds
+
+## CAVEAT EMPTOR:
+## There is no encapsulation within the following macros, do not change
+## the running order or otherwise move them around unless you know exactly
+## what you are doing...
+if test -n "$compiler"; then
+  _LT_COMPILER_NO_RTTI($1)
+  _LT_COMPILER_PIC($1)
+  _LT_COMPILER_C_O($1)
+  _LT_COMPILER_FILE_LOCKS($1)
+  _LT_LINKER_SHLIBS($1)
+  _LT_LINKER_HARDCODE_LIBPATH($1)
+
+  _LT_CONFIG($1)
+fi
+
+AC_LANG_RESTORE
+
+GCC=$lt_save_GCC
+CC="$lt_save_CC"
+])# _LT_LANG_GCJ_CONFIG
+
+
+# _LT_LANG_RC_CONFIG([TAG])
+# -------------------------
+# Ensure that the configuration variables for the Windows resource compiler
+# are suitably defined.  These variables are subsequently used by _LT_CONFIG
+# to write the compiler configuration to `libtool'.
+m4_defun([_LT_LANG_RC_CONFIG],
+[AC_REQUIRE([LT_PROG_RC])dnl
+AC_LANG_SAVE
+
+# Source file extension for RC test sources.
+ac_ext=rc
+
+# Object file extension for compiled RC test sources.
+objext=o
+_LT_TAGVAR(objext, $1)=$objext
+
+# Code to be used in simple compile tests
+lt_simple_compile_test_code='sample MENU { MENUITEM "&Soup", 100, CHECKED }'
+
+# Code to be used in simple link tests
+lt_simple_link_test_code="$lt_simple_compile_test_code"
+
+# ltmain only uses $CC for tagged configurations so make sure $CC is set.
+_LT_TAG_COMPILER
+
+# save warnings/boilerplate of simple test code
+_LT_COMPILER_BOILERPLATE
+_LT_LINKER_BOILERPLATE
+
+# Allow CC to be a program name with arguments.
+lt_save_CC="$CC"
+lt_save_GCC=$GCC
+GCC=
+CC=${RC-"windres"}
+compiler=$CC
+_LT_TAGVAR(compiler, $1)=$CC
+_LT_CC_BASENAME([$compiler])
+_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes
+
+if test -n "$compiler"; then
+  :
+  _LT_CONFIG($1)
+fi
+
+GCC=$lt_save_GCC
+AC_LANG_RESTORE
+CC="$lt_save_CC"
+])# _LT_LANG_RC_CONFIG
+
+
+# LT_PROG_GCJ
+# -----------
+AC_DEFUN([LT_PROG_GCJ],
+[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],
+  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],
+    [AC_CHECK_TOOL(GCJ, gcj,)
+      test "x${GCJFLAGS+set}" = xset || GCJFLAGS="-g -O2"
+      AC_SUBST(GCJFLAGS)])])[]dnl
+])
+
+# Old name:
+AU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([LT_AC_PROG_GCJ], [])
+
+
+# LT_PROG_RC
+# ----------
+AC_DEFUN([LT_PROG_RC],
+[AC_CHECK_TOOL(RC, windres,)
+])
+
+# Old name:
+AU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([LT_AC_PROG_RC], [])
+
+
+# _LT_DECL_EGREP
+# --------------
+# If we don't have a new enough Autoconf to choose the best grep
+# available, choose the one first in the user's PATH.
+m4_defun([_LT_DECL_EGREP],
+[AC_REQUIRE([AC_PROG_EGREP])dnl
+AC_REQUIRE([AC_PROG_FGREP])dnl
+test -z "$GREP" && GREP=grep
+_LT_DECL([], [GREP], [1], [A grep program that handles long lines])
+_LT_DECL([], [EGREP], [1], [An ERE matcher])
+_LT_DECL([], [FGREP], [1], [A literal string matcher])
+dnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too
+AC_SUBST([GREP])
+])
+
+
+# _LT_DECL_OBJDUMP
+# --------------
+# If we don't have a new enough Autoconf to choose the best objdump
+# available, choose the one first in the user's PATH.
+m4_defun([_LT_DECL_OBJDUMP],
+[AC_CHECK_TOOL(OBJDUMP, objdump, false)
+test -z "$OBJDUMP" && OBJDUMP=objdump
+_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])
+AC_SUBST([OBJDUMP])
+])
+
+
+# _LT_DECL_SED
+# ------------
+# Check for a fully-functional sed program, that truncates
+# as few characters as possible.  Prefer GNU sed if found.
+m4_defun([_LT_DECL_SED],
+[AC_PROG_SED
+test -z "$SED" && SED=sed
+Xsed="$SED -e 1s/^X//"
+_LT_DECL([], [SED], [1], [A sed program that does not truncate output])
+_LT_DECL([], [Xsed], ["\$SED -e 1s/^X//"],
+    [Sed that helps us avoid accidentally triggering echo(1) options like -n])
+])# _LT_DECL_SED
+
+m4_ifndef([AC_PROG_SED], [
+############################################################
+# NOTE: This macro has been submitted for inclusion into   #
+#  GNU Autoconf as AC_PROG_SED.  When it is available in   #
+#  a released version of Autoconf we should remove this    #
+#  macro and use it instead.                               #
+############################################################
+
+m4_defun([AC_PROG_SED],
+[AC_MSG_CHECKING([for a sed that does not truncate output])
+AC_CACHE_VAL(lt_cv_path_SED,
+[# Loop through the user's path and test for sed and gsed.
+# Then use that list of sed's as ones to test for truncation.
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+  for lt_ac_prog in sed gsed; do
+    for ac_exec_ext in '' $ac_executable_extensions; do
+      if $as_executable_p "$as_dir/$lt_ac_prog$ac_exec_ext"; then
+        lt_ac_sed_list="$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext"
+      fi
+    done
+  done
+done
+IFS=$as_save_IFS
+lt_ac_max=0
+lt_ac_count=0
+# Add /usr/xpg4/bin/sed as it is typically found on Solaris
+# along with /bin/sed that truncates output.
+for lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do
+  test ! -f $lt_ac_sed && continue
+  cat /dev/null > conftest.in
+  lt_ac_count=0
+  echo $ECHO_N "0123456789$ECHO_C" >conftest.in
+  # Check for GNU sed and select it if it is found.
+  if "$lt_ac_sed" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then
+    lt_cv_path_SED=$lt_ac_sed
+    break
+  fi
+  while true; do
+    cat conftest.in conftest.in >conftest.tmp
+    mv conftest.tmp conftest.in
+    cp conftest.in conftest.nl
+    echo >>conftest.nl
+    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break
+    cmp -s conftest.out conftest.nl || break
+    # 10000 chars as input seems more than enough
+    test $lt_ac_count -gt 10 && break
+    lt_ac_count=`expr $lt_ac_count + 1`
+    if test $lt_ac_count -gt $lt_ac_max; then
+      lt_ac_max=$lt_ac_count
+      lt_cv_path_SED=$lt_ac_sed
+    fi
+  done
+done
+])
+SED=$lt_cv_path_SED
+AC_SUBST([SED])
+AC_MSG_RESULT([$SED])
+])#AC_PROG_SED
+])#m4_ifndef
+
+# Old name:
+AU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([LT_AC_PROG_SED], [])
+
+
+# _LT_CHECK_SHELL_FEATURES
+# ------------------------
+# Find out whether the shell is Bourne or XSI compatible,
+# or has some other useful features.
+m4_defun([_LT_CHECK_SHELL_FEATURES],
+[AC_MSG_CHECKING([whether the shell understands some XSI constructs])
+# Try some XSI features
+xsi_shell=no
+( _lt_dummy="a/b/c"
+  test "${_lt_dummy##*/},${_lt_dummy%/*},"${_lt_dummy%"$_lt_dummy"}, \
+      = c,a/b,, \
+    && eval 'test $(( 1 + 1 )) -eq 2 \
+    && test "${#_lt_dummy}" -eq 5' ) >/dev/null 2>&1 \
+  && xsi_shell=yes
+AC_MSG_RESULT([$xsi_shell])
+_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])
+
+AC_MSG_CHECKING([whether the shell understands "+="])
+lt_shell_append=no
+( foo=bar; set foo baz; eval "$[1]+=\$[2]" && test "$foo" = barbaz ) \
+    >/dev/null 2>&1 \
+  && lt_shell_append=yes
+AC_MSG_RESULT([$lt_shell_append])
+_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])
+
+if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
+  lt_unset=unset
+else
+  lt_unset=false
+fi
+_LT_DECL([], [lt_unset], [0], [whether the shell understands "unset"])dnl
+
+# test EBCDIC or ASCII
+case `echo X|tr X '\101'` in
+ A) # ASCII based system
+    # \n is not interpreted correctly by Solaris 8 /usr/ucb/tr
+  lt_SP2NL='tr \040 \012'
+  lt_NL2SP='tr \015\012 \040\040'
+  ;;
+ *) # EBCDIC based system
+  lt_SP2NL='tr \100 \n'
+  lt_NL2SP='tr \r\n \100\100'
+  ;;
+esac
+_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl
+_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl
+])# _LT_CHECK_SHELL_FEATURES
+
+
+# _LT_PROG_XSI_SHELLFNS
+# ---------------------
+# Bourne and XSI compatible variants of some useful shell functions.
+m4_defun([_LT_PROG_XSI_SHELLFNS],
+[case $xsi_shell in
+  yes)
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_dirname file append nondir_replacement
+# Compute the dirname of FILE.  If nonempty, add APPEND to the result,
+# otherwise set result to NONDIR_REPLACEMENT.
+func_dirname ()
+{
+  case ${1} in
+    */*) func_dirname_result="${1%/*}${2}" ;;
+    *  ) func_dirname_result="${3}" ;;
+  esac
+}
+
+# func_basename file
+func_basename ()
+{
+  func_basename_result="${1##*/}"
+}
+
+# func_dirname_and_basename file append nondir_replacement
+# perform func_basename and func_dirname in a single function
+# call:
+#   dirname:  Compute the dirname of FILE.  If nonempty,
+#             add APPEND to the result, otherwise set result
+#             to NONDIR_REPLACEMENT.
+#             value returned in "$func_dirname_result"
+#   basename: Compute filename of FILE.
+#             value retuned in "$func_basename_result"
+# Implementation must be kept synchronized with func_dirname
+# and func_basename. For efficiency, we do not delegate to
+# those functions but instead duplicate the functionality here.
+func_dirname_and_basename ()
+{
+  case ${1} in
+    */*) func_dirname_result="${1%/*}${2}" ;;
+    *  ) func_dirname_result="${3}" ;;
+  esac
+  func_basename_result="${1##*/}"
+}
+
+# func_stripname prefix suffix name
+# strip PREFIX and SUFFIX off of NAME.
+# PREFIX and SUFFIX must not contain globbing or regex special
+# characters, hashes, percent signs, but SUFFIX may contain a leading
+# dot (in which case that matches only a dot).
+func_stripname ()
+{
+  # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are
+  # positional parameters, so assign one to ordinary parameter first.
+  func_stripname_result=${3}
+  func_stripname_result=${func_stripname_result#"${1}"}
+  func_stripname_result=${func_stripname_result%"${2}"}
+}
+
+# func_opt_split
+func_opt_split ()
+{
+  func_opt_split_opt=${1%%=*}
+  func_opt_split_arg=${1#*=}
+}
+
+# func_lo2o object
+func_lo2o ()
+{
+  case ${1} in
+    *.lo) func_lo2o_result=${1%.lo}.${objext} ;;
+    *)    func_lo2o_result=${1} ;;
+  esac
+}
+
+# func_xform libobj-or-source
+func_xform ()
+{
+  func_xform_result=${1%.*}.lo
+}
+
+# func_arith arithmetic-term...
+func_arith ()
+{
+  func_arith_result=$(( $[*] ))
+}
+
+# func_len string
+# STRING may not start with a hyphen.
+func_len ()
+{
+  func_len_result=${#1}
+}
+
+_LT_EOF
+    ;;
+  *) # Bourne compatible functions.
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_dirname file append nondir_replacement
+# Compute the dirname of FILE.  If nonempty, add APPEND to the result,
+# otherwise set result to NONDIR_REPLACEMENT.
+func_dirname ()
+{
+  # Extract subdirectory from the argument.
+  func_dirname_result=`$ECHO "X${1}" | $Xsed -e "$dirname"`
+  if test "X$func_dirname_result" = "X${1}"; then
+    func_dirname_result="${3}"
+  else
+    func_dirname_result="$func_dirname_result${2}"
+  fi
+}
+
+# func_basename file
+func_basename ()
+{
+  func_basename_result=`$ECHO "X${1}" | $Xsed -e "$basename"`
+}
+
+dnl func_dirname_and_basename
+dnl A portable version of this function is already defined in general.m4sh
+dnl so there is no need for it here.
+
+# func_stripname prefix suffix name
+# strip PREFIX and SUFFIX off of NAME.
+# PREFIX and SUFFIX must not contain globbing or regex special
+# characters, hashes, percent signs, but SUFFIX may contain a leading
+# dot (in which case that matches only a dot).
+# func_strip_suffix prefix name
+func_stripname ()
+{
+  case ${2} in
+    .*) func_stripname_result=`$ECHO "X${3}" \
+           | $Xsed -e "s%^${1}%%" -e "s%\\\\${2}\$%%"`;;
+    *)  func_stripname_result=`$ECHO "X${3}" \
+           | $Xsed -e "s%^${1}%%" -e "s%${2}\$%%"`;;
+  esac
+}
+
+# sed scripts:
+my_sed_long_opt='1s/^\(-[[^=]]*\)=.*/\1/;q'
+my_sed_long_arg='1s/^-[[^=]]*=//'
+
+# func_opt_split
+func_opt_split ()
+{
+  func_opt_split_opt=`$ECHO "X${1}" | $Xsed -e "$my_sed_long_opt"`
+  func_opt_split_arg=`$ECHO "X${1}" | $Xsed -e "$my_sed_long_arg"`
+}
+
+# func_lo2o object
+func_lo2o ()
+{
+  func_lo2o_result=`$ECHO "X${1}" | $Xsed -e "$lo2o"`
+}
+
+# func_xform libobj-or-source
+func_xform ()
+{
+  func_xform_result=`$ECHO "X${1}" | $Xsed -e 's/\.[[^.]]*$/.lo/'`
+}
+
+# func_arith arithmetic-term...
+func_arith ()
+{
+  func_arith_result=`expr "$[@]"`
+}
+
+# func_len string
+# STRING may not start with a hyphen.
+func_len ()
+{
+  func_len_result=`expr "$[1]" : ".*" 2>/dev/null || echo $max_cmd_len`
+}
+
+_LT_EOF
+esac
+
+case $lt_shell_append in
+  yes)
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_append var value
+# Append VALUE to the end of shell variable VAR.
+func_append ()
+{
+  eval "$[1]+=\$[2]"
+}
+_LT_EOF
+    ;;
+  *)
+    cat << \_LT_EOF >> "$cfgfile"
+
+# func_append var value
+# Append VALUE to the end of shell variable VAR.
+func_append ()
+{
+  eval "$[1]=\$$[1]\$[2]"
+}
+
+_LT_EOF
+    ;;
+  esac
+])
diff --git a/m4/ltoptions.m4 b/m4/ltoptions.m4
new file mode 100644
index 0000000..34151a3
--- /dev/null
+++ b/m4/ltoptions.m4
@@ -0,0 +1,368 @@
+# Helper functions for option handling.                    -*- Autoconf -*-
+#
+#   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
+#   Written by Gary V. Vaughan, 2004
+#
+# This file is free software; the Free Software Foundation gives
+# unlimited permission to copy and/or distribute it, with or without
+# modifications, as long as this notice is preserved.
+
+# serial 6 ltoptions.m4
+
+# This is to help aclocal find these macros, as it can't see m4_define.
+AC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])
+
+
+# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)
+# ------------------------------------------
+m4_define([_LT_MANGLE_OPTION],
+[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])
+
+
+# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)
+# ---------------------------------------
+# Set option OPTION-NAME for macro MACRO-NAME, and if there is a
+# matching handler defined, dispatch to it.  Other OPTION-NAMEs are
+# saved as a flag.
+m4_define([_LT_SET_OPTION],
+[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl
+m4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),
+        _LT_MANGLE_DEFUN([$1], [$2]),
+    [m4_warning([Unknown $1 option `$2'])])[]dnl
+])
+
+
+# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])
+# ------------------------------------------------------------
+# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.
+m4_define([_LT_IF_OPTION],
+[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])
+
+
+# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)
+# -------------------------------------------------------
+# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME
+# are set.
+m4_define([_LT_UNLESS_OPTIONS],
+[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),
+	    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),
+		      [m4_define([$0_found])])])[]dnl
+m4_ifdef([$0_found], [m4_undefine([$0_found])], [$3
+])[]dnl
+])
+
+
+# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)
+# ----------------------------------------
+# OPTION-LIST is a space-separated list of Libtool options associated
+# with MACRO-NAME.  If any OPTION has a matching handler declared with
+# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about
+# the unknown option and exit.
+m4_defun([_LT_SET_OPTIONS],
+[# Set options
+m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),
+    [_LT_SET_OPTION([$1], _LT_Option)])
+
+m4_if([$1],[LT_INIT],[
+  dnl
+  dnl Simply set some default values (i.e off) if boolean options were not
+  dnl specified:
+  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no
+  ])
+  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no
+  ])
+  dnl
+  dnl If no reference was made to various pairs of opposing options, then
+  dnl we run the default mode handler for the pair.  For example, if neither
+  dnl `shared' nor `disable-shared' was passed, we enable building of shared
+  dnl archives by default:
+  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])
+  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])
+  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])
+  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],
+  		   [_LT_ENABLE_FAST_INSTALL])
+  ])
+])# _LT_SET_OPTIONS
+
+
+## --------------------------------- ##
+## Macros to handle LT_INIT options. ##
+## --------------------------------- ##
+
+# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)
+# -----------------------------------------
+m4_define([_LT_MANGLE_DEFUN],
+[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])
+
+
+# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)
+# -----------------------------------------------
+m4_define([LT_OPTION_DEFINE],
+[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl
+])# LT_OPTION_DEFINE
+
+
+# dlopen
+# ------
+LT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes
+])
+
+AU_DEFUN([AC_LIBTOOL_DLOPEN],
+[_LT_SET_OPTION([LT_INIT], [dlopen])
+AC_DIAGNOSE([obsolete],
+[$0: Remove this warning and the call to _LT_SET_OPTION when you
+put the `dlopen' option into LT_INIT's first parameter.])
+])
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])
+
+
+# win32-dll
+# ---------
+# Declare package support for building win32 dll's.
+LT_OPTION_DEFINE([LT_INIT], [win32-dll],
+[enable_win32_dll=yes
+
+case $host in
+*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-cegcc*)
+  AC_CHECK_TOOL(AS, as, false)
+  AC_CHECK_TOOL(DLLTOOL, dlltool, false)
+  AC_CHECK_TOOL(OBJDUMP, objdump, false)
+  ;;
+esac
+
+test -z "$AS" && AS=as
+_LT_DECL([], [AS],      [0], [Assembler program])dnl
+
+test -z "$DLLTOOL" && DLLTOOL=dlltool
+_LT_DECL([], [DLLTOOL], [0], [DLL creation program])dnl
+
+test -z "$OBJDUMP" && OBJDUMP=objdump
+_LT_DECL([], [OBJDUMP], [0], [Object dumper program])dnl
+])# win32-dll
+
+AU_DEFUN([AC_LIBTOOL_WIN32_DLL],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+_LT_SET_OPTION([LT_INIT], [win32-dll])
+AC_DIAGNOSE([obsolete],
+[$0: Remove this warning and the call to _LT_SET_OPTION when you
+put the `win32-dll' option into LT_INIT's first parameter.])
+])
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])
+
+
+# _LT_ENABLE_SHARED([DEFAULT])
+# ----------------------------
+# implement the --enable-shared flag, and supports the `shared' and
+# `disable-shared' LT_INIT options.
+# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.
+m4_define([_LT_ENABLE_SHARED],
+[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl
+AC_ARG_ENABLE([shared],
+    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],
+	[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],
+    [p=${PACKAGE-default}
+    case $enableval in
+    yes) enable_shared=yes ;;
+    no) enable_shared=no ;;
+    *)
+      enable_shared=no
+      # Look at the argument we got.  We use all the common list separators.
+      lt_save_ifs="$IFS"; IFS="${IFS}$PATH_SEPARATOR,"
+      for pkg in $enableval; do
+	IFS="$lt_save_ifs"
+	if test "X$pkg" = "X$p"; then
+	  enable_shared=yes
+	fi
+      done
+      IFS="$lt_save_ifs"
+      ;;
+    esac],
+    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)
+
+    _LT_DECL([build_libtool_libs], [enable_shared], [0],
+	[Whether or not to build shared libraries])
+])# _LT_ENABLE_SHARED
+
+LT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])
+LT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])
+
+# Old names:
+AC_DEFUN([AC_ENABLE_SHARED],
+[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])
+])
+
+AC_DEFUN([AC_DISABLE_SHARED],
+[_LT_SET_OPTION([LT_INIT], [disable-shared])
+])
+
+AU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])
+AU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AM_ENABLE_SHARED], [])
+dnl AC_DEFUN([AM_DISABLE_SHARED], [])
+
+
+
+# _LT_ENABLE_STATIC([DEFAULT])
+# ----------------------------
+# implement the --enable-static flag, and support the `static' and
+# `disable-static' LT_INIT options.
+# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.
+m4_define([_LT_ENABLE_STATIC],
+[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl
+AC_ARG_ENABLE([static],
+    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],
+	[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],
+    [p=${PACKAGE-default}
+    case $enableval in
+    yes) enable_static=yes ;;
+    no) enable_static=no ;;
+    *)
+     enable_static=no
+      # Look at the argument we got.  We use all the common list separators.
+      lt_save_ifs="$IFS"; IFS="${IFS}$PATH_SEPARATOR,"
+      for pkg in $enableval; do
+	IFS="$lt_save_ifs"
+	if test "X$pkg" = "X$p"; then
+	  enable_static=yes
+	fi
+      done
+      IFS="$lt_save_ifs"
+      ;;
+    esac],
+    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)
+
+    _LT_DECL([build_old_libs], [enable_static], [0],
+	[Whether or not to build static libraries])
+])# _LT_ENABLE_STATIC
+
+LT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])
+LT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])
+
+# Old names:
+AC_DEFUN([AC_ENABLE_STATIC],
+[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])
+])
+
+AC_DEFUN([AC_DISABLE_STATIC],
+[_LT_SET_OPTION([LT_INIT], [disable-static])
+])
+
+AU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])
+AU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AM_ENABLE_STATIC], [])
+dnl AC_DEFUN([AM_DISABLE_STATIC], [])
+
+
+
+# _LT_ENABLE_FAST_INSTALL([DEFAULT])
+# ----------------------------------
+# implement the --enable-fast-install flag, and support the `fast-install'
+# and `disable-fast-install' LT_INIT options.
+# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.
+m4_define([_LT_ENABLE_FAST_INSTALL],
+[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl
+AC_ARG_ENABLE([fast-install],
+    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],
+    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],
+    [p=${PACKAGE-default}
+    case $enableval in
+    yes) enable_fast_install=yes ;;
+    no) enable_fast_install=no ;;
+    *)
+      enable_fast_install=no
+      # Look at the argument we got.  We use all the common list separators.
+      lt_save_ifs="$IFS"; IFS="${IFS}$PATH_SEPARATOR,"
+      for pkg in $enableval; do
+	IFS="$lt_save_ifs"
+	if test "X$pkg" = "X$p"; then
+	  enable_fast_install=yes
+	fi
+      done
+      IFS="$lt_save_ifs"
+      ;;
+    esac],
+    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)
+
+_LT_DECL([fast_install], [enable_fast_install], [0],
+	 [Whether or not to optimize for fast installation])dnl
+])# _LT_ENABLE_FAST_INSTALL
+
+LT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])
+LT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])
+
+# Old names:
+AU_DEFUN([AC_ENABLE_FAST_INSTALL],
+[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
+AC_DIAGNOSE([obsolete],
+[$0: Remove this warning and the call to _LT_SET_OPTION when you put
+the `fast-install' option into LT_INIT's first parameter.])
+])
+
+AU_DEFUN([AC_DISABLE_FAST_INSTALL],
+[_LT_SET_OPTION([LT_INIT], [disable-fast-install])
+AC_DIAGNOSE([obsolete],
+[$0: Remove this warning and the call to _LT_SET_OPTION when you put
+the `disable-fast-install' option into LT_INIT's first parameter.])
+])
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])
+dnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])
+
+
+# _LT_WITH_PIC([MODE])
+# --------------------
+# implement the --with-pic flag, and support the `pic-only' and `no-pic'
+# LT_INIT options.
+# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.
+m4_define([_LT_WITH_PIC],
+[AC_ARG_WITH([pic],
+    [AS_HELP_STRING([--with-pic],
+	[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],
+    [pic_mode="$withval"],
+    [pic_mode=default])
+
+test -z "$pic_mode" && pic_mode=m4_default([$1], [default])
+
+_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl
+])# _LT_WITH_PIC
+
+LT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])
+LT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])
+
+# Old name:
+AU_DEFUN([AC_LIBTOOL_PICMODE],
+[_LT_SET_OPTION([LT_INIT], [pic-only])
+AC_DIAGNOSE([obsolete],
+[$0: Remove this warning and the call to _LT_SET_OPTION when you
+put the `pic-only' option into LT_INIT's first parameter.])
+])
+
+dnl aclocal-1.4 backwards compatibility:
+dnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])
+
+## ----------------- ##
+## LTDL_INIT Options ##
+## ----------------- ##
+
+m4_define([_LTDL_MODE], [])
+LT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],
+		 [m4_define([_LTDL_MODE], [nonrecursive])])
+LT_OPTION_DEFINE([LTDL_INIT], [recursive],
+		 [m4_define([_LTDL_MODE], [recursive])])
+LT_OPTION_DEFINE([LTDL_INIT], [subproject],
+		 [m4_define([_LTDL_MODE], [subproject])])
+
+m4_define([_LTDL_TYPE], [])
+LT_OPTION_DEFINE([LTDL_INIT], [installable],
+		 [m4_define([_LTDL_TYPE], [installable])])
+LT_OPTION_DEFINE([LTDL_INIT], [convenience],
+		 [m4_define([_LTDL_TYPE], [convenience])])
diff --git a/m4/ltsugar.m4 b/m4/ltsugar.m4
new file mode 100644
index 0000000..9000a05
--- /dev/null
+++ b/m4/ltsugar.m4
@@ -0,0 +1,123 @@
+# ltsugar.m4 -- libtool m4 base layer.                         -*-Autoconf-*-
+#
+# Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
+# Written by Gary V. Vaughan, 2004
+#
+# This file is free software; the Free Software Foundation gives
+# unlimited permission to copy and/or distribute it, with or without
+# modifications, as long as this notice is preserved.
+
+# serial 6 ltsugar.m4
+
+# This is to help aclocal find these macros, as it can't see m4_define.
+AC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])
+
+
+# lt_join(SEP, ARG1, [ARG2...])
+# -----------------------------
+# Produce ARG1SEPARG2...SEPARGn, omitting [] arguments and their
+# associated separator.
+# Needed until we can rely on m4_join from Autoconf 2.62, since all earlier
+# versions in m4sugar had bugs.
+m4_define([lt_join],
+[m4_if([$#], [1], [],
+       [$#], [2], [[$2]],
+       [m4_if([$2], [], [], [[$2]_])$0([$1], m4_shift(m4_shift($@)))])])
+m4_define([_lt_join],
+[m4_if([$#$2], [2], [],
+       [m4_if([$2], [], [], [[$1$2]])$0([$1], m4_shift(m4_shift($@)))])])
+
+
+# lt_car(LIST)
+# lt_cdr(LIST)
+# ------------
+# Manipulate m4 lists.
+# These macros are necessary as long as will still need to support
+# Autoconf-2.59 which quotes differently.
+m4_define([lt_car], [[$1]])
+m4_define([lt_cdr],
+[m4_if([$#], 0, [m4_fatal([$0: cannot be called without arguments])],
+       [$#], 1, [],
+       [m4_dquote(m4_shift($@))])])
+m4_define([lt_unquote], $1)
+
+
+# lt_append(MACRO-NAME, STRING, [SEPARATOR])
+# ------------------------------------------
+# Redefine MACRO-NAME to hold its former content plus `SEPARATOR'`STRING'.
+# Note that neither SEPARATOR nor STRING are expanded; they are appended
+# to MACRO-NAME as is (leaving the expansion for when MACRO-NAME is invoked).
+# No SEPARATOR is output if MACRO-NAME was previously undefined (different
+# than defined and empty).
+#
+# This macro is needed until we can rely on Autoconf 2.62, since earlier
+# versions of m4sugar mistakenly expanded SEPARATOR but not STRING.
+m4_define([lt_append],
+[m4_define([$1],
+	   m4_ifdef([$1], [m4_defn([$1])[$3]])[$2])])
+
+
+
+# lt_combine(SEP, PREFIX-LIST, INFIX, SUFFIX1, [SUFFIX2...])
+# ----------------------------------------------------------
+# Produce a SEP delimited list of all paired combinations of elements of
+# PREFIX-LIST with SUFFIX1 through SUFFIXn.  Each element of the list
+# has the form PREFIXmINFIXSUFFIXn.
+# Needed until we can rely on m4_combine added in Autoconf 2.62.
+m4_define([lt_combine],
+[m4_if(m4_eval([$# > 3]), [1],
+       [m4_pushdef([_Lt_sep], [m4_define([_Lt_sep], m4_defn([lt_car]))])]]dnl
+[[m4_foreach([_Lt_prefix], [$2],
+	     [m4_foreach([_Lt_suffix],
+		]m4_dquote(m4_dquote(m4_shift(m4_shift(m4_shift($@)))))[,
+	[_Lt_sep([$1])[]m4_defn([_Lt_prefix])[$3]m4_defn([_Lt_suffix])])])])])
+
+
+# lt_if_append_uniq(MACRO-NAME, VARNAME, [SEPARATOR], [UNIQ], [NOT-UNIQ])
+# -----------------------------------------------------------------------
+# Iff MACRO-NAME does not yet contain VARNAME, then append it (delimited
+# by SEPARATOR if supplied) and expand UNIQ, else NOT-UNIQ.
+m4_define([lt_if_append_uniq],
+[m4_ifdef([$1],
+	  [m4_if(m4_index([$3]m4_defn([$1])[$3], [$3$2$3]), [-1],
+		 [lt_append([$1], [$2], [$3])$4],
+		 [$5])],
+	  [lt_append([$1], [$2], [$3])$4])])
+
+
+# lt_dict_add(DICT, KEY, VALUE)
+# -----------------------------
+m4_define([lt_dict_add],
+[m4_define([$1($2)], [$3])])
+
+
+# lt_dict_add_subkey(DICT, KEY, SUBKEY, VALUE)
+# --------------------------------------------
+m4_define([lt_dict_add_subkey],
+[m4_define([$1($2:$3)], [$4])])
+
+
+# lt_dict_fetch(DICT, KEY, [SUBKEY])
+# ----------------------------------
+m4_define([lt_dict_fetch],
+[m4_ifval([$3],
+	m4_ifdef([$1($2:$3)], [m4_defn([$1($2:$3)])]),
+    m4_ifdef([$1($2)], [m4_defn([$1($2)])]))])
+
+
+# lt_if_dict_fetch(DICT, KEY, [SUBKEY], VALUE, IF-TRUE, [IF-FALSE])
+# -----------------------------------------------------------------
+m4_define([lt_if_dict_fetch],
+[m4_if(lt_dict_fetch([$1], [$2], [$3]), [$4],
+	[$5],
+    [$6])])
+
+
+# lt_dict_filter(DICT, [SUBKEY], VALUE, [SEPARATOR], KEY, [...])
+# --------------------------------------------------------------
+m4_define([lt_dict_filter],
+[m4_if([$5], [], [],
+  [lt_join(m4_quote(m4_default([$4], [[, ]])),
+           lt_unquote(m4_split(m4_normalize(m4_foreach(_Lt_key, lt_car([m4_shiftn(4, $@)]),
+		      [lt_if_dict_fetch([$1], _Lt_key, [$2], [$3], [_Lt_key ])])))))])[]dnl
+])
diff --git a/m4/ltversion.m4 b/m4/ltversion.m4
new file mode 100644
index 0000000..f3c5309
--- /dev/null
+++ b/m4/ltversion.m4
@@ -0,0 +1,23 @@
+# ltversion.m4 -- version numbers			-*- Autoconf -*-
+#
+#   Copyright (C) 2004 Free Software Foundation, Inc.
+#   Written by Scott James Remnant, 2004
+#
+# This file is free software; the Free Software Foundation gives
+# unlimited permission to copy and/or distribute it, with or without
+# modifications, as long as this notice is preserved.
+
+# Generated from ltversion.in.
+
+# serial 3017 ltversion.m4
+# This file is part of GNU Libtool
+
+m4_define([LT_PACKAGE_VERSION], [2.2.6b])
+m4_define([LT_PACKAGE_REVISION], [1.3017])
+
+AC_DEFUN([LTVERSION_VERSION],
+[macro_version='2.2.6b'
+macro_revision='1.3017'
+_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])
+_LT_DECL(, macro_revision, 0)
+])
diff --git a/m4/lt~obsolete.m4 b/m4/lt~obsolete.m4
new file mode 100644
index 0000000..637bb20
--- /dev/null
+++ b/m4/lt~obsolete.m4
@@ -0,0 +1,92 @@
+# lt~obsolete.m4 -- aclocal satisfying obsolete definitions.    -*-Autoconf-*-
+#
+#   Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.
+#   Written by Scott James Remnant, 2004.
+#
+# This file is free software; the Free Software Foundation gives
+# unlimited permission to copy and/or distribute it, with or without
+# modifications, as long as this notice is preserved.
+
+# serial 4 lt~obsolete.m4
+
+# These exist entirely to fool aclocal when bootstrapping libtool.
+#
+# In the past libtool.m4 has provided macros via AC_DEFUN (or AU_DEFUN)
+# which have later been changed to m4_define as they aren't part of the
+# exported API, or moved to Autoconf or Automake where they belong.
+#
+# The trouble is, aclocal is a bit thick.  It'll see the old AC_DEFUN
+# in /usr/share/aclocal/libtool.m4 and remember it, then when it sees us
+# using a macro with the same name in our local m4/libtool.m4 it'll
+# pull the old libtool.m4 in (it doesn't see our shiny new m4_define
+# and doesn't know about Autoconf macros at all.)
+#
+# So we provide this file, which has a silly filename so it's always
+# included after everything else.  This provides aclocal with the
+# AC_DEFUNs it wants, but when m4 processes it, it doesn't do anything
+# because those macros already exist, or will be overwritten later.
+# We use AC_DEFUN over AU_DEFUN for compatibility with aclocal-1.6. 
+#
+# Anytime we withdraw an AC_DEFUN or AU_DEFUN, remember to add it here.
+# Yes, that means every name once taken will need to remain here until
+# we give up compatibility with versions before 1.7, at which point
+# we need to keep only those names which we still refer to.
+
+# This is to help aclocal find these macros, as it can't see m4_define.
+AC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])
+
+m4_ifndef([AC_LIBTOOL_LINKER_OPTION],	[AC_DEFUN([AC_LIBTOOL_LINKER_OPTION])])
+m4_ifndef([AC_PROG_EGREP],		[AC_DEFUN([AC_PROG_EGREP])])
+m4_ifndef([_LT_AC_PROG_ECHO_BACKSLASH],	[AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])])
+m4_ifndef([_LT_AC_SHELL_INIT],		[AC_DEFUN([_LT_AC_SHELL_INIT])])
+m4_ifndef([_LT_AC_SYS_LIBPATH_AIX],	[AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])])
+m4_ifndef([_LT_PROG_LTMAIN],		[AC_DEFUN([_LT_PROG_LTMAIN])])
+m4_ifndef([_LT_AC_TAGVAR],		[AC_DEFUN([_LT_AC_TAGVAR])])
+m4_ifndef([AC_LTDL_ENABLE_INSTALL],	[AC_DEFUN([AC_LTDL_ENABLE_INSTALL])])
+m4_ifndef([AC_LTDL_PREOPEN],		[AC_DEFUN([AC_LTDL_PREOPEN])])
+m4_ifndef([_LT_AC_SYS_COMPILER],	[AC_DEFUN([_LT_AC_SYS_COMPILER])])
+m4_ifndef([_LT_AC_LOCK],		[AC_DEFUN([_LT_AC_LOCK])])
+m4_ifndef([AC_LIBTOOL_SYS_OLD_ARCHIVE],	[AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])])
+m4_ifndef([_LT_AC_TRY_DLOPEN_SELF],	[AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])])
+m4_ifndef([AC_LIBTOOL_PROG_CC_C_O],	[AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])])
+m4_ifndef([AC_LIBTOOL_SYS_HARD_LINK_LOCKS], [AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])])
+m4_ifndef([AC_LIBTOOL_OBJDIR],		[AC_DEFUN([AC_LIBTOOL_OBJDIR])])
+m4_ifndef([AC_LTDL_OBJDIR],		[AC_DEFUN([AC_LTDL_OBJDIR])])
+m4_ifndef([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH], [AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])])
+m4_ifndef([AC_LIBTOOL_SYS_LIB_STRIP],	[AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])])
+m4_ifndef([AC_PATH_MAGIC],		[AC_DEFUN([AC_PATH_MAGIC])])
+m4_ifndef([AC_PROG_LD_GNU],		[AC_DEFUN([AC_PROG_LD_GNU])])
+m4_ifndef([AC_PROG_LD_RELOAD_FLAG],	[AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])])
+m4_ifndef([AC_DEPLIBS_CHECK_METHOD],	[AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])])
+m4_ifndef([AC_LIBTOOL_PROG_COMPILER_NO_RTTI], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])])
+m4_ifndef([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE], [AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])])
+m4_ifndef([AC_LIBTOOL_PROG_COMPILER_PIC], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])])
+m4_ifndef([AC_LIBTOOL_PROG_LD_SHLIBS],	[AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])])
+m4_ifndef([AC_LIBTOOL_POSTDEP_PREDEP],	[AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])])
+m4_ifndef([LT_AC_PROG_EGREP],		[AC_DEFUN([LT_AC_PROG_EGREP])])
+m4_ifndef([LT_AC_PROG_SED],		[AC_DEFUN([LT_AC_PROG_SED])])
+m4_ifndef([_LT_CC_BASENAME],		[AC_DEFUN([_LT_CC_BASENAME])])
+m4_ifndef([_LT_COMPILER_BOILERPLATE],	[AC_DEFUN([_LT_COMPILER_BOILERPLATE])])
+m4_ifndef([_LT_LINKER_BOILERPLATE],	[AC_DEFUN([_LT_LINKER_BOILERPLATE])])
+m4_ifndef([_AC_PROG_LIBTOOL],		[AC_DEFUN([_AC_PROG_LIBTOOL])])
+m4_ifndef([AC_LIBTOOL_SETUP],		[AC_DEFUN([AC_LIBTOOL_SETUP])])
+m4_ifndef([_LT_AC_CHECK_DLFCN],		[AC_DEFUN([_LT_AC_CHECK_DLFCN])])
+m4_ifndef([AC_LIBTOOL_SYS_DYNAMIC_LINKER],	[AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])])
+m4_ifndef([_LT_AC_TAGCONFIG],		[AC_DEFUN([_LT_AC_TAGCONFIG])])
+m4_ifndef([AC_DISABLE_FAST_INSTALL],	[AC_DEFUN([AC_DISABLE_FAST_INSTALL])])
+m4_ifndef([_LT_AC_LANG_CXX],		[AC_DEFUN([_LT_AC_LANG_CXX])])
+m4_ifndef([_LT_AC_LANG_F77],		[AC_DEFUN([_LT_AC_LANG_F77])])
+m4_ifndef([_LT_AC_LANG_GCJ],		[AC_DEFUN([_LT_AC_LANG_GCJ])])
+m4_ifndef([AC_LIBTOOL_RC],		[AC_DEFUN([AC_LIBTOOL_RC])])
+m4_ifndef([AC_LIBTOOL_LANG_C_CONFIG],	[AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])])
+m4_ifndef([_LT_AC_LANG_C_CONFIG],	[AC_DEFUN([_LT_AC_LANG_C_CONFIG])])
+m4_ifndef([AC_LIBTOOL_LANG_CXX_CONFIG],	[AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])])
+m4_ifndef([_LT_AC_LANG_CXX_CONFIG],	[AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])])
+m4_ifndef([AC_LIBTOOL_LANG_F77_CONFIG],	[AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])])
+m4_ifndef([_LT_AC_LANG_F77_CONFIG],	[AC_DEFUN([_LT_AC_LANG_F77_CONFIG])])
+m4_ifndef([AC_LIBTOOL_LANG_GCJ_CONFIG],	[AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])])
+m4_ifndef([_LT_AC_LANG_GCJ_CONFIG],	[AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])])
+m4_ifndef([AC_LIBTOOL_LANG_RC_CONFIG],	[AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])])
+m4_ifndef([_LT_AC_LANG_RC_CONFIG],	[AC_DEFUN([_LT_AC_LANG_RC_CONFIG])])
+m4_ifndef([AC_LIBTOOL_CONFIG],		[AC_DEFUN([AC_LIBTOOL_CONFIG])])
+m4_ifndef([_LT_AC_FILE_LTDLL_C],	[AC_DEFUN([_LT_AC_FILE_LTDLL_C])])
diff --git a/opensaml2_2.3.orig.tar.gz b/opensaml2_2.3.orig.tar.gz
new file mode 100644
index 0000000000000000000000000000000000000000..abca989aeed91fecd08d6013eb65d17ebbd74ad6
GIT binary patch
literal 926057
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%0A977NDYkLG-*SO~{?pV->Y{VtIQeLVMwV^&}L
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

literal 0
HcmV?d00001

diff --git a/saml/Makefile.in b/saml/Makefile.in
new file mode 100644
index 0000000..07fdc06
--- /dev/null
+++ b/saml/Makefile.in
@@ -0,0 +1,1702 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+
+VPATH = @srcdir@
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+subdir = saml
+DIST_COMMON = $(encinclude_HEADERS) $(libsamlinclude_HEADERS) \
+	$(noinst_HEADERS) $(saml1bindinclude_HEADERS) \
+	$(saml1coreinclude_HEADERS) $(saml1profinclude_HEADERS) \
+	$(saml2bindinclude_HEADERS) $(saml2coreinclude_HEADERS) \
+	$(saml2mdinclude_HEADERS) $(saml2profinclude_HEADERS) \
+	$(samlbindinclude_HEADERS) $(siginclude_HEADERS) \
+	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
+	$(utilinclude_HEADERS)
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_create_pkgconfig_info.m4 \
+	$(top_srcdir)/m4/doxygen.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
+am__vpath_adj = case $$p in \
+    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
+    *) f=$$p;; \
+  esac;
+am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
+am__install_max = 40
+am__nobase_strip_setup = \
+  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
+am__nobase_strip = \
+  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
+am__nobase_list = $(am__nobase_strip_setup); \
+  for p in $$list; do echo "$$p $$p"; done | \
+  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
+  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
+    if (++n[$$2] == $(am__install_max)) \
+      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
+    END { for (dir in files) print dir, files[dir] }'
+am__base_list = \
+  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
+  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
+am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(encincludedir)" \
+	"$(DESTDIR)$(libsamlincludedir)" \
+	"$(DESTDIR)$(saml1bindincludedir)" \
+	"$(DESTDIR)$(saml1coreincludedir)" \
+	"$(DESTDIR)$(saml1profincludedir)" \
+	"$(DESTDIR)$(saml2bindincludedir)" \
+	"$(DESTDIR)$(saml2coreincludedir)" \
+	"$(DESTDIR)$(saml2mdincludedir)" \
+	"$(DESTDIR)$(saml2profincludedir)" \
+	"$(DESTDIR)$(samlbindincludedir)" "$(DESTDIR)$(sigincludedir)" \
+	"$(DESTDIR)$(utilincludedir)"
+LTLIBRARIES = $(lib_LTLIBRARIES)
+libsaml_la_LIBADD =
+am_libsaml_la_OBJECTS = SAMLConfig.lo ArtifactMap.lo \
+	ClientCertAuthRule.lo MessageDecoder.lo MessageEncoder.lo \
+	MessageFlowRule.lo NullSecurityRule.lo SAMLArtifact.lo \
+	SecurityPolicy.lo SimpleSigningRule.lo SOAPClient.lo \
+	XMLSigningRule.lo AudienceRestrictionRule.lo ConditionsRule.lo \
+	IgnoreRule.lo AssertionsImpl.lo AssertionsSchemaValidators.lo \
+	ProtocolsImpl.lo ProtocolsSchemaValidators.lo \
+	SAMLArtifactType0001.lo SAMLArtifactType0002.lo \
+	SAML1ArtifactDecoder.lo SAML1ArtifactEncoder.lo \
+	SAML1MessageDecoder.lo SAML1POSTDecoder.lo SAML1POSTEncoder.lo \
+	SAML1SOAPDecoder.lo SAML1SOAPEncoder.lo SAML1SOAPClient.lo \
+	AssertionValidator.lo BrowserSSOProfileValidator.lo \
+	SAML1BrowserSSORule.lo Assertions.lo Assertions20Impl.lo \
+	Assertions20SchemaValidators.lo Protocols20Impl.lo \
+	Protocols20SchemaValidators.lo AbstractMetadataProvider.lo \
+	BlacklistMetadataFilter.lo ChainingMetadataProvider.lo \
+	DiscoverableMetadataProvider.lo DynamicMetadataProvider.lo \
+	EntityRoleMetadataFilter.lo MetadataCredentialContext.lo \
+	MetadataCredentialCriteria.lo MetadataImpl.lo \
+	MetadataProvider.lo MetadataSchemaValidators.lo \
+	NullMetadataProvider.lo ObservableMetadataProvider.lo \
+	SignatureMetadataFilter.lo RequireValidUntilMetadataFilter.lo \
+	WhitelistMetadataFilter.lo XMLMetadataProvider.lo \
+	SAML2Artifact.lo SAML2ArtifactType0004.lo \
+	SAML2ArtifactDecoder.lo SAML2ArtifactEncoder.lo \
+	SAML2ECPDecoder.lo SAML2ECPEncoder.lo SAML2MessageDecoder.lo \
+	SAML2POSTDecoder.lo SAML2POSTEncoder.lo SAML2Redirect.lo \
+	SAML2RedirectDecoder.lo SAML2RedirectEncoder.lo \
+	SAML2SOAPDecoder.lo SAML2SOAPEncoder.lo SAML2SOAPClient.lo \
+	Assertion20Validator.lo BrowserSSOProfile20Validator.lo \
+	BearerConfirmationRule.lo DelegationRestrictionRule.lo \
+	SAML2AssertionPolicy.lo EncryptedKeyResolver.lo \
+	ContentReference.lo SignatureProfileValidator.lo \
+	CommonDomainCookie.lo SAMLConstants.lo
+libsaml_la_OBJECTS = $(am_libsaml_la_OBJECTS)
+libsaml_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
+	$(CXXFLAGS) $(libsaml_la_LDFLAGS) $(LDFLAGS) -o $@
+DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
+depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
+am__depfiles_maybe = depfiles
+am__mv = mv -f
+CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+CXXLD = $(CXX)
+CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
+	$(LDFLAGS) -o $@
+SOURCES = $(libsaml_la_SOURCES)
+DIST_SOURCES = $(libsaml_la_SOURCES)
+HEADERS = $(encinclude_HEADERS) $(libsamlinclude_HEADERS) \
+	$(noinst_HEADERS) $(saml1bindinclude_HEADERS) \
+	$(saml1coreinclude_HEADERS) $(saml1profinclude_HEADERS) \
+	$(saml2bindinclude_HEADERS) $(saml2coreinclude_HEADERS) \
+	$(saml2mdinclude_HEADERS) $(saml2profinclude_HEADERS) \
+	$(samlbindinclude_HEADERS) $(siginclude_HEADERS) \
+	$(utilinclude_HEADERS)
+ETAGS = etags
+CTAGS = ctags
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AR = @AR@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CXX = @CXX@
+CXXCPP = @CXXCPP@
+CXXDEPMODE = @CXXDEPMODE@
+CXXFLAGS = @CXXFLAGS@
+CXXTEST = @CXXTEST@
+CXXTESTFLAGS = @CXXTESTFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+DX_CONFIG = @DX_CONFIG@
+DX_DOCDIR = @DX_DOCDIR@
+DX_DOT = @DX_DOT@
+DX_DOXYGEN = @DX_DOXYGEN@
+DX_DVIPS = @DX_DVIPS@
+DX_EGREP = @DX_EGREP@
+DX_ENV = @DX_ENV@
+DX_FLAG_chi = @DX_FLAG_chi@
+DX_FLAG_chm = @DX_FLAG_chm@
+DX_FLAG_doc = @DX_FLAG_doc@
+DX_FLAG_dot = @DX_FLAG_dot@
+DX_FLAG_html = @DX_FLAG_html@
+DX_FLAG_man = @DX_FLAG_man@
+DX_FLAG_pdf = @DX_FLAG_pdf@
+DX_FLAG_ps = @DX_FLAG_ps@
+DX_FLAG_rtf = @DX_FLAG_rtf@
+DX_FLAG_xml = @DX_FLAG_xml@
+DX_HHC = @DX_HHC@
+DX_INCLUDE = @DX_INCLUDE@
+DX_LATEX = @DX_LATEX@
+DX_MAKEINDEX = @DX_MAKEINDEX@
+DX_PDFLATEX = @DX_PDFLATEX@
+DX_PERL = @DX_PERL@
+DX_PROJECT = @DX_PROJECT@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LOG4CPP_CONFIG = @LOG4CPP_CONFIG@
+LOG4SHIB_CONFIG = @LOG4SHIB_CONFIG@
+LTLIBOBJS = @LTLIBOBJS@
+MAKEINFO = @MAKEINFO@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PKG_CONFIG = @PKG_CONFIG@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+STRIP = @STRIP@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_CXX = @ac_ct_CXX@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+lt_ECHO = @lt_ECHO@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+pkgconfig_libdir = @pkgconfig_libdir@
+pkgconfig_libfile = @pkgconfig_libfile@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AUTOMAKE_OPTIONS = foreign
+lib_LTLIBRARIES = libsaml.la
+libsamlincludedir = $(includedir)/saml
+encincludedir = $(includedir)/saml/encryption
+secincludedir = $(includedir)/saml/security
+sigincludedir = $(includedir)/saml/signature
+utilincludedir = $(includedir)/saml/util
+samlbindincludedir = $(includedir)/saml/binding
+saml1bindincludedir = $(includedir)/saml/saml1/binding
+saml1coreincludedir = $(includedir)/saml/saml1/core
+saml1profincludedir = $(includedir)/saml/saml1/profile
+saml2bindincludedir = $(includedir)/saml/saml2/binding
+saml2coreincludedir = $(includedir)/saml/saml2/core
+saml2mdincludedir = $(includedir)/saml/saml2/metadata
+saml2profincludedir = $(includedir)/saml/saml2/profile
+libsamlinclude_HEADERS = \
+	Assertion.h \
+	base.h \
+	exceptions.h \
+	version.h \
+	RootObject.h \
+	SAMLConfig.h
+
+samlbindinclude_HEADERS = \
+	binding/ArtifactMap.h \
+	binding/MessageDecoder.h \
+	binding/MessageEncoder.h \
+	binding/SAMLArtifact.h \
+	binding/SecurityPolicy.h \
+	binding/SecurityPolicyRule.h \
+	binding/SOAPClient.h
+
+encinclude_HEADERS = \
+	encryption/EncryptedKeyResolver.h
+
+siginclude_HEADERS = \
+	signature/ContentReference.h \
+	signature/SignableObject.h \
+	signature/SignatureProfileValidator.h
+
+utilinclude_HEADERS = \
+	util/CommonDomainCookie.h \
+	util/SAMLConstants.h
+
+saml1coreinclude_HEADERS = \
+	saml1/core/Assertions.h \
+	saml1/core/Protocols.h
+
+saml1bindinclude_HEADERS = \
+	saml1/binding/SAMLArtifactType0001.h \
+	saml1/binding/SAMLArtifactType0002.h \
+	saml1/binding/SAML1MessageDecoder.h \
+	saml1/binding/SAML1SOAPClient.h
+
+saml1profinclude_HEADERS = \
+	saml1/profile/AssertionValidator.h \
+	saml1/profile/BrowserSSOProfileValidator.h
+
+saml2coreinclude_HEADERS = \
+	saml2/core/Assertions.h \
+	saml2/core/Protocols.h
+
+saml2bindinclude_HEADERS = \
+	saml2/binding/SAML2Artifact.h \
+	saml2/binding/SAML2ArtifactType0004.h \
+	saml2/binding/SAML2MessageDecoder.h \
+	saml2/binding/SAML2Redirect.h \
+	saml2/binding/SAML2SOAPClient.h
+
+saml2mdinclude_HEADERS = \
+	saml2/metadata/AbstractMetadataProvider.h \
+	saml2/metadata/DiscoverableMetadataProvider.h \
+	saml2/metadata/DynamicMetadataProvider.h \
+	saml2/metadata/EndpointManager.h \
+	saml2/metadata/Metadata.h \
+	saml2/metadata/MetadataCredentialContext.h \
+	saml2/metadata/MetadataCredentialCriteria.h \
+	saml2/metadata/MetadataFilter.h \
+	saml2/metadata/MetadataProvider.h \
+	saml2/metadata/ObservableMetadataProvider.h
+
+saml2profinclude_HEADERS = \
+	saml2/profile/AssertionValidator.h \
+	saml2/profile/BrowserSSOProfileValidator.h \
+	saml2/profile/SAML2AssertionPolicy.h
+
+noinst_HEADERS = \
+	internal.h
+
+libsaml_la_SOURCES = \
+	SAMLConfig.cpp \
+	binding/impl/ArtifactMap.cpp \
+	binding/impl/ClientCertAuthRule.cpp \
+	binding/impl/MessageDecoder.cpp \
+	binding/impl/MessageEncoder.cpp \
+	binding/impl/MessageFlowRule.cpp \
+	binding/impl/NullSecurityRule.cpp \
+	binding/impl/SAMLArtifact.cpp \
+	binding/impl/SecurityPolicy.cpp \
+	binding/impl/SimpleSigningRule.cpp \
+	binding/impl/SOAPClient.cpp \
+	binding/impl/XMLSigningRule.cpp \
+	profile/impl/AudienceRestrictionRule.cpp \
+	profile/impl/ConditionsRule.cpp \
+	profile/impl/IgnoreRule.cpp \
+	saml1/core/impl/AssertionsImpl.cpp \
+	saml1/core/impl/AssertionsSchemaValidators.cpp \
+	saml1/core/impl/ProtocolsImpl.cpp \
+	saml1/core/impl/ProtocolsSchemaValidators.cpp \
+	saml1/binding/impl/SAMLArtifactType0001.cpp \
+	saml1/binding/impl/SAMLArtifactType0002.cpp \
+	saml1/binding/impl/SAML1ArtifactDecoder.cpp \
+	saml1/binding/impl/SAML1ArtifactEncoder.cpp \
+	saml1/binding/impl/SAML1MessageDecoder.cpp \
+	saml1/binding/impl/SAML1POSTDecoder.cpp \
+	saml1/binding/impl/SAML1POSTEncoder.cpp \
+	saml1/binding/impl/SAML1SOAPDecoder.cpp \
+	saml1/binding/impl/SAML1SOAPEncoder.cpp \
+	saml1/binding/impl/SAML1SOAPClient.cpp \
+	saml1/profile/impl/AssertionValidator.cpp \
+	saml1/profile/impl/BrowserSSOProfileValidator.cpp \
+	saml1/profile/impl/SAML1BrowserSSORule.cpp \
+	saml2/core/impl/Assertions.cpp \
+	saml2/core/impl/Assertions20Impl.cpp \
+	saml2/core/impl/Assertions20SchemaValidators.cpp \
+	saml2/core/impl/Protocols20Impl.cpp \
+	saml2/core/impl/Protocols20SchemaValidators.cpp \
+	saml2/metadata/impl/AbstractMetadataProvider.cpp \
+	saml2/metadata/impl/BlacklistMetadataFilter.cpp \
+	saml2/metadata/impl/ChainingMetadataProvider.cpp \
+	saml2/metadata/impl/DiscoverableMetadataProvider.cpp \
+	saml2/metadata/impl/DynamicMetadataProvider.cpp \
+	saml2/metadata/impl/EntityRoleMetadataFilter.cpp \
+	saml2/metadata/impl/MetadataCredentialContext.cpp \
+	saml2/metadata/impl/MetadataCredentialCriteria.cpp \
+	saml2/metadata/impl/MetadataImpl.cpp \
+	saml2/metadata/impl/MetadataProvider.cpp \
+	saml2/metadata/impl/MetadataSchemaValidators.cpp \
+	saml2/metadata/impl/NullMetadataProvider.cpp \
+	saml2/metadata/impl/ObservableMetadataProvider.cpp \
+	saml2/metadata/impl/SignatureMetadataFilter.cpp \
+	saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp \
+	saml2/metadata/impl/WhitelistMetadataFilter.cpp \
+	saml2/metadata/impl/XMLMetadataProvider.cpp \
+	saml2/binding/impl/SAML2Artifact.cpp \
+	saml2/binding/impl/SAML2ArtifactType0004.cpp \
+	saml2/binding/impl/SAML2ArtifactDecoder.cpp \
+	saml2/binding/impl/SAML2ArtifactEncoder.cpp \
+	saml2/binding/impl/SAML2ECPDecoder.cpp \
+	saml2/binding/impl/SAML2ECPEncoder.cpp \
+	saml2/binding/impl/SAML2MessageDecoder.cpp \
+	saml2/binding/impl/SAML2POSTDecoder.cpp \
+	saml2/binding/impl/SAML2POSTEncoder.cpp \
+	saml2/binding/impl/SAML2Redirect.cpp \
+	saml2/binding/impl/SAML2RedirectDecoder.cpp \
+	saml2/binding/impl/SAML2RedirectEncoder.cpp \
+	saml2/binding/impl/SAML2SOAPDecoder.cpp \
+	saml2/binding/impl/SAML2SOAPEncoder.cpp \
+	saml2/binding/impl/SAML2SOAPClient.cpp \
+	saml2/profile/impl/Assertion20Validator.cpp \
+	saml2/profile/impl/BrowserSSOProfile20Validator.cpp \
+	saml2/profile/impl/BearerConfirmationRule.cpp \
+	saml2/profile/impl/DelegationRestrictionRule.cpp \
+	saml2/profile/impl/SAML2AssertionPolicy.cpp \
+	encryption/EncryptedKeyResolver.cpp \
+	signature/ContentReference.cpp \
+	signature/SignatureProfileValidator.cpp \
+	util/CommonDomainCookie.cpp \
+	util/SAMLConstants.cpp
+
+
+# this is different from the project version
+# http://sources.redhat.com/autobook/autobook/autobook_91.html
+libsaml_la_LDFLAGS = -version-info 7:0:0
+EXTRA_DIST = saml.vcxproj saml.vcxproj.filters resource.h saml.rc
+all: all-am
+
+.SUFFIXES:
+.SUFFIXES: .cpp .lo .o .obj
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign saml/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign saml/Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+install-libLTLIBRARIES: $(lib_LTLIBRARIES)
+	@$(NORMAL_INSTALL)
+	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
+	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
+	list2=; for p in $$list; do \
+	  if test -f $$p; then \
+	    list2="$$list2 $$p"; \
+	  else :; fi; \
+	done; \
+	test -z "$$list2" || { \
+	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
+	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
+	}
+
+uninstall-libLTLIBRARIES:
+	@$(NORMAL_UNINSTALL)
+	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
+	for p in $$list; do \
+	  $(am__strip_dir) \
+	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
+	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
+	done
+
+clean-libLTLIBRARIES:
+	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
+	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
+	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
+	  test "$$dir" != "$$p" || dir=.; \
+	  echo "rm -f \"$${dir}/so_locations\""; \
+	  rm -f "$${dir}/so_locations"; \
+	done
+libsaml.la: $(libsaml_la_OBJECTS) $(libsaml_la_DEPENDENCIES) 
+	$(libsaml_la_LINK) -rpath $(libdir) $(libsaml_la_OBJECTS) $(libsaml_la_LIBADD) $(LIBS)
+
+mostlyclean-compile:
+	-rm -f *.$(OBJEXT)
+
+distclean-compile:
+	-rm -f *.tab.c
+
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AbstractMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ArtifactMap.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Assertion20Validator.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AssertionValidator.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Assertions.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Assertions20Impl.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Assertions20SchemaValidators.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AssertionsImpl.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AssertionsSchemaValidators.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AudienceRestrictionRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BearerConfirmationRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BlacklistMetadataFilter.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BrowserSSOProfile20Validator.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BrowserSSOProfileValidator.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ChainingMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ClientCertAuthRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CommonDomainCookie.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ConditionsRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ContentReference.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DelegationRestrictionRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DiscoverableMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DynamicMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/EncryptedKeyResolver.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/EntityRoleMetadataFilter.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/IgnoreRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MessageDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MessageEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MessageFlowRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MetadataCredentialContext.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MetadataCredentialCriteria.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MetadataImpl.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MetadataSchemaValidators.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/NullMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/NullSecurityRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ObservableMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Protocols20Impl.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Protocols20SchemaValidators.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ProtocolsImpl.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ProtocolsSchemaValidators.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/RequireValidUntilMetadataFilter.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1ArtifactDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1ArtifactEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1BrowserSSORule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1MessageDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1POSTDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1POSTEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1SOAPClient.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1SOAPDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML1SOAPEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2Artifact.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2ArtifactDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2ArtifactEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2ArtifactType0004.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2AssertionPolicy.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2ECPDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2ECPEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2MessageDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2POSTDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2POSTEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2Redirect.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2RedirectDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2RedirectEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2SOAPClient.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2SOAPDecoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAML2SOAPEncoder.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAMLArtifact.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAMLArtifactType0001.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAMLArtifactType0002.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAMLConfig.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SAMLConstants.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SOAPClient.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SecurityPolicy.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SignatureMetadataFilter.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SignatureProfileValidator.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SimpleSigningRule.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/WhitelistMetadataFilter.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/XMLMetadataProvider.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/XMLSigningRule.Plo@am__quote@
+
+.cpp.o:
+@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<
+
+.cpp.obj:
+@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
+
+.cpp.lo:
+@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<
+
+ArtifactMap.lo: binding/impl/ArtifactMap.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ArtifactMap.lo -MD -MP -MF $(DEPDIR)/ArtifactMap.Tpo -c -o ArtifactMap.lo `test -f 'binding/impl/ArtifactMap.cpp' || echo '$(srcdir)/'`binding/impl/ArtifactMap.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ArtifactMap.Tpo $(DEPDIR)/ArtifactMap.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/ArtifactMap.cpp' object='ArtifactMap.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ArtifactMap.lo `test -f 'binding/impl/ArtifactMap.cpp' || echo '$(srcdir)/'`binding/impl/ArtifactMap.cpp
+
+ClientCertAuthRule.lo: binding/impl/ClientCertAuthRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ClientCertAuthRule.lo -MD -MP -MF $(DEPDIR)/ClientCertAuthRule.Tpo -c -o ClientCertAuthRule.lo `test -f 'binding/impl/ClientCertAuthRule.cpp' || echo '$(srcdir)/'`binding/impl/ClientCertAuthRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ClientCertAuthRule.Tpo $(DEPDIR)/ClientCertAuthRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/ClientCertAuthRule.cpp' object='ClientCertAuthRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ClientCertAuthRule.lo `test -f 'binding/impl/ClientCertAuthRule.cpp' || echo '$(srcdir)/'`binding/impl/ClientCertAuthRule.cpp
+
+MessageDecoder.lo: binding/impl/MessageDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MessageDecoder.lo -MD -MP -MF $(DEPDIR)/MessageDecoder.Tpo -c -o MessageDecoder.lo `test -f 'binding/impl/MessageDecoder.cpp' || echo '$(srcdir)/'`binding/impl/MessageDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MessageDecoder.Tpo $(DEPDIR)/MessageDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/MessageDecoder.cpp' object='MessageDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MessageDecoder.lo `test -f 'binding/impl/MessageDecoder.cpp' || echo '$(srcdir)/'`binding/impl/MessageDecoder.cpp
+
+MessageEncoder.lo: binding/impl/MessageEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MessageEncoder.lo -MD -MP -MF $(DEPDIR)/MessageEncoder.Tpo -c -o MessageEncoder.lo `test -f 'binding/impl/MessageEncoder.cpp' || echo '$(srcdir)/'`binding/impl/MessageEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MessageEncoder.Tpo $(DEPDIR)/MessageEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/MessageEncoder.cpp' object='MessageEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MessageEncoder.lo `test -f 'binding/impl/MessageEncoder.cpp' || echo '$(srcdir)/'`binding/impl/MessageEncoder.cpp
+
+MessageFlowRule.lo: binding/impl/MessageFlowRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MessageFlowRule.lo -MD -MP -MF $(DEPDIR)/MessageFlowRule.Tpo -c -o MessageFlowRule.lo `test -f 'binding/impl/MessageFlowRule.cpp' || echo '$(srcdir)/'`binding/impl/MessageFlowRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MessageFlowRule.Tpo $(DEPDIR)/MessageFlowRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/MessageFlowRule.cpp' object='MessageFlowRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MessageFlowRule.lo `test -f 'binding/impl/MessageFlowRule.cpp' || echo '$(srcdir)/'`binding/impl/MessageFlowRule.cpp
+
+NullSecurityRule.lo: binding/impl/NullSecurityRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NullSecurityRule.lo -MD -MP -MF $(DEPDIR)/NullSecurityRule.Tpo -c -o NullSecurityRule.lo `test -f 'binding/impl/NullSecurityRule.cpp' || echo '$(srcdir)/'`binding/impl/NullSecurityRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/NullSecurityRule.Tpo $(DEPDIR)/NullSecurityRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/NullSecurityRule.cpp' object='NullSecurityRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NullSecurityRule.lo `test -f 'binding/impl/NullSecurityRule.cpp' || echo '$(srcdir)/'`binding/impl/NullSecurityRule.cpp
+
+SAMLArtifact.lo: binding/impl/SAMLArtifact.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAMLArtifact.lo -MD -MP -MF $(DEPDIR)/SAMLArtifact.Tpo -c -o SAMLArtifact.lo `test -f 'binding/impl/SAMLArtifact.cpp' || echo '$(srcdir)/'`binding/impl/SAMLArtifact.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAMLArtifact.Tpo $(DEPDIR)/SAMLArtifact.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/SAMLArtifact.cpp' object='SAMLArtifact.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAMLArtifact.lo `test -f 'binding/impl/SAMLArtifact.cpp' || echo '$(srcdir)/'`binding/impl/SAMLArtifact.cpp
+
+SecurityPolicy.lo: binding/impl/SecurityPolicy.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SecurityPolicy.lo -MD -MP -MF $(DEPDIR)/SecurityPolicy.Tpo -c -o SecurityPolicy.lo `test -f 'binding/impl/SecurityPolicy.cpp' || echo '$(srcdir)/'`binding/impl/SecurityPolicy.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SecurityPolicy.Tpo $(DEPDIR)/SecurityPolicy.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/SecurityPolicy.cpp' object='SecurityPolicy.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SecurityPolicy.lo `test -f 'binding/impl/SecurityPolicy.cpp' || echo '$(srcdir)/'`binding/impl/SecurityPolicy.cpp
+
+SimpleSigningRule.lo: binding/impl/SimpleSigningRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleSigningRule.lo -MD -MP -MF $(DEPDIR)/SimpleSigningRule.Tpo -c -o SimpleSigningRule.lo `test -f 'binding/impl/SimpleSigningRule.cpp' || echo '$(srcdir)/'`binding/impl/SimpleSigningRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SimpleSigningRule.Tpo $(DEPDIR)/SimpleSigningRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/SimpleSigningRule.cpp' object='SimpleSigningRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleSigningRule.lo `test -f 'binding/impl/SimpleSigningRule.cpp' || echo '$(srcdir)/'`binding/impl/SimpleSigningRule.cpp
+
+SOAPClient.lo: binding/impl/SOAPClient.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SOAPClient.lo -MD -MP -MF $(DEPDIR)/SOAPClient.Tpo -c -o SOAPClient.lo `test -f 'binding/impl/SOAPClient.cpp' || echo '$(srcdir)/'`binding/impl/SOAPClient.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SOAPClient.Tpo $(DEPDIR)/SOAPClient.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/SOAPClient.cpp' object='SOAPClient.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SOAPClient.lo `test -f 'binding/impl/SOAPClient.cpp' || echo '$(srcdir)/'`binding/impl/SOAPClient.cpp
+
+XMLSigningRule.lo: binding/impl/XMLSigningRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XMLSigningRule.lo -MD -MP -MF $(DEPDIR)/XMLSigningRule.Tpo -c -o XMLSigningRule.lo `test -f 'binding/impl/XMLSigningRule.cpp' || echo '$(srcdir)/'`binding/impl/XMLSigningRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/XMLSigningRule.Tpo $(DEPDIR)/XMLSigningRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='binding/impl/XMLSigningRule.cpp' object='XMLSigningRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XMLSigningRule.lo `test -f 'binding/impl/XMLSigningRule.cpp' || echo '$(srcdir)/'`binding/impl/XMLSigningRule.cpp
+
+AudienceRestrictionRule.lo: profile/impl/AudienceRestrictionRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudienceRestrictionRule.lo -MD -MP -MF $(DEPDIR)/AudienceRestrictionRule.Tpo -c -o AudienceRestrictionRule.lo `test -f 'profile/impl/AudienceRestrictionRule.cpp' || echo '$(srcdir)/'`profile/impl/AudienceRestrictionRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/AudienceRestrictionRule.Tpo $(DEPDIR)/AudienceRestrictionRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='profile/impl/AudienceRestrictionRule.cpp' object='AudienceRestrictionRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudienceRestrictionRule.lo `test -f 'profile/impl/AudienceRestrictionRule.cpp' || echo '$(srcdir)/'`profile/impl/AudienceRestrictionRule.cpp
+
+ConditionsRule.lo: profile/impl/ConditionsRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConditionsRule.lo -MD -MP -MF $(DEPDIR)/ConditionsRule.Tpo -c -o ConditionsRule.lo `test -f 'profile/impl/ConditionsRule.cpp' || echo '$(srcdir)/'`profile/impl/ConditionsRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ConditionsRule.Tpo $(DEPDIR)/ConditionsRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='profile/impl/ConditionsRule.cpp' object='ConditionsRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConditionsRule.lo `test -f 'profile/impl/ConditionsRule.cpp' || echo '$(srcdir)/'`profile/impl/ConditionsRule.cpp
+
+IgnoreRule.lo: profile/impl/IgnoreRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT IgnoreRule.lo -MD -MP -MF $(DEPDIR)/IgnoreRule.Tpo -c -o IgnoreRule.lo `test -f 'profile/impl/IgnoreRule.cpp' || echo '$(srcdir)/'`profile/impl/IgnoreRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/IgnoreRule.Tpo $(DEPDIR)/IgnoreRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='profile/impl/IgnoreRule.cpp' object='IgnoreRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o IgnoreRule.lo `test -f 'profile/impl/IgnoreRule.cpp' || echo '$(srcdir)/'`profile/impl/IgnoreRule.cpp
+
+AssertionsImpl.lo: saml1/core/impl/AssertionsImpl.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssertionsImpl.lo -MD -MP -MF $(DEPDIR)/AssertionsImpl.Tpo -c -o AssertionsImpl.lo `test -f 'saml1/core/impl/AssertionsImpl.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionsImpl.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/AssertionsImpl.Tpo $(DEPDIR)/AssertionsImpl.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AssertionsImpl.cpp' object='AssertionsImpl.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssertionsImpl.lo `test -f 'saml1/core/impl/AssertionsImpl.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionsImpl.cpp
+
+AssertionsSchemaValidators.lo: saml1/core/impl/AssertionsSchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssertionsSchemaValidators.lo -MD -MP -MF $(DEPDIR)/AssertionsSchemaValidators.Tpo -c -o AssertionsSchemaValidators.lo `test -f 'saml1/core/impl/AssertionsSchemaValidators.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionsSchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/AssertionsSchemaValidators.Tpo $(DEPDIR)/AssertionsSchemaValidators.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AssertionsSchemaValidators.cpp' object='AssertionsSchemaValidators.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssertionsSchemaValidators.lo `test -f 'saml1/core/impl/AssertionsSchemaValidators.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionsSchemaValidators.cpp
+
+ProtocolsImpl.lo: saml1/core/impl/ProtocolsImpl.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProtocolsImpl.lo -MD -MP -MF $(DEPDIR)/ProtocolsImpl.Tpo -c -o ProtocolsImpl.lo `test -f 'saml1/core/impl/ProtocolsImpl.cpp' || echo '$(srcdir)/'`saml1/core/impl/ProtocolsImpl.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ProtocolsImpl.Tpo $(DEPDIR)/ProtocolsImpl.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/ProtocolsImpl.cpp' object='ProtocolsImpl.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProtocolsImpl.lo `test -f 'saml1/core/impl/ProtocolsImpl.cpp' || echo '$(srcdir)/'`saml1/core/impl/ProtocolsImpl.cpp
+
+ProtocolsSchemaValidators.lo: saml1/core/impl/ProtocolsSchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProtocolsSchemaValidators.lo -MD -MP -MF $(DEPDIR)/ProtocolsSchemaValidators.Tpo -c -o ProtocolsSchemaValidators.lo `test -f 'saml1/core/impl/ProtocolsSchemaValidators.cpp' || echo '$(srcdir)/'`saml1/core/impl/ProtocolsSchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ProtocolsSchemaValidators.Tpo $(DEPDIR)/ProtocolsSchemaValidators.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/ProtocolsSchemaValidators.cpp' object='ProtocolsSchemaValidators.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProtocolsSchemaValidators.lo `test -f 'saml1/core/impl/ProtocolsSchemaValidators.cpp' || echo '$(srcdir)/'`saml1/core/impl/ProtocolsSchemaValidators.cpp
+
+SAMLArtifactType0001.lo: saml1/binding/impl/SAMLArtifactType0001.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAMLArtifactType0001.lo -MD -MP -MF $(DEPDIR)/SAMLArtifactType0001.Tpo -c -o SAMLArtifactType0001.lo `test -f 'saml1/binding/impl/SAMLArtifactType0001.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAMLArtifactType0001.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAMLArtifactType0001.Tpo $(DEPDIR)/SAMLArtifactType0001.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAMLArtifactType0001.cpp' object='SAMLArtifactType0001.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAMLArtifactType0001.lo `test -f 'saml1/binding/impl/SAMLArtifactType0001.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAMLArtifactType0001.cpp
+
+SAMLArtifactType0002.lo: saml1/binding/impl/SAMLArtifactType0002.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAMLArtifactType0002.lo -MD -MP -MF $(DEPDIR)/SAMLArtifactType0002.Tpo -c -o SAMLArtifactType0002.lo `test -f 'saml1/binding/impl/SAMLArtifactType0002.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAMLArtifactType0002.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAMLArtifactType0002.Tpo $(DEPDIR)/SAMLArtifactType0002.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAMLArtifactType0002.cpp' object='SAMLArtifactType0002.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAMLArtifactType0002.lo `test -f 'saml1/binding/impl/SAMLArtifactType0002.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAMLArtifactType0002.cpp
+
+SAML1ArtifactDecoder.lo: saml1/binding/impl/SAML1ArtifactDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1ArtifactDecoder.lo -MD -MP -MF $(DEPDIR)/SAML1ArtifactDecoder.Tpo -c -o SAML1ArtifactDecoder.lo `test -f 'saml1/binding/impl/SAML1ArtifactDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1ArtifactDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1ArtifactDecoder.Tpo $(DEPDIR)/SAML1ArtifactDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1ArtifactDecoder.cpp' object='SAML1ArtifactDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1ArtifactDecoder.lo `test -f 'saml1/binding/impl/SAML1ArtifactDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1ArtifactDecoder.cpp
+
+SAML1ArtifactEncoder.lo: saml1/binding/impl/SAML1ArtifactEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1ArtifactEncoder.lo -MD -MP -MF $(DEPDIR)/SAML1ArtifactEncoder.Tpo -c -o SAML1ArtifactEncoder.lo `test -f 'saml1/binding/impl/SAML1ArtifactEncoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1ArtifactEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1ArtifactEncoder.Tpo $(DEPDIR)/SAML1ArtifactEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1ArtifactEncoder.cpp' object='SAML1ArtifactEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1ArtifactEncoder.lo `test -f 'saml1/binding/impl/SAML1ArtifactEncoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1ArtifactEncoder.cpp
+
+SAML1MessageDecoder.lo: saml1/binding/impl/SAML1MessageDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1MessageDecoder.lo -MD -MP -MF $(DEPDIR)/SAML1MessageDecoder.Tpo -c -o SAML1MessageDecoder.lo `test -f 'saml1/binding/impl/SAML1MessageDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1MessageDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1MessageDecoder.Tpo $(DEPDIR)/SAML1MessageDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1MessageDecoder.cpp' object='SAML1MessageDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1MessageDecoder.lo `test -f 'saml1/binding/impl/SAML1MessageDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1MessageDecoder.cpp
+
+SAML1POSTDecoder.lo: saml1/binding/impl/SAML1POSTDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1POSTDecoder.lo -MD -MP -MF $(DEPDIR)/SAML1POSTDecoder.Tpo -c -o SAML1POSTDecoder.lo `test -f 'saml1/binding/impl/SAML1POSTDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1POSTDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1POSTDecoder.Tpo $(DEPDIR)/SAML1POSTDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1POSTDecoder.cpp' object='SAML1POSTDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1POSTDecoder.lo `test -f 'saml1/binding/impl/SAML1POSTDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1POSTDecoder.cpp
+
+SAML1POSTEncoder.lo: saml1/binding/impl/SAML1POSTEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1POSTEncoder.lo -MD -MP -MF $(DEPDIR)/SAML1POSTEncoder.Tpo -c -o SAML1POSTEncoder.lo `test -f 'saml1/binding/impl/SAML1POSTEncoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1POSTEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1POSTEncoder.Tpo $(DEPDIR)/SAML1POSTEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1POSTEncoder.cpp' object='SAML1POSTEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1POSTEncoder.lo `test -f 'saml1/binding/impl/SAML1POSTEncoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1POSTEncoder.cpp
+
+SAML1SOAPDecoder.lo: saml1/binding/impl/SAML1SOAPDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1SOAPDecoder.lo -MD -MP -MF $(DEPDIR)/SAML1SOAPDecoder.Tpo -c -o SAML1SOAPDecoder.lo `test -f 'saml1/binding/impl/SAML1SOAPDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1SOAPDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1SOAPDecoder.Tpo $(DEPDIR)/SAML1SOAPDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1SOAPDecoder.cpp' object='SAML1SOAPDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1SOAPDecoder.lo `test -f 'saml1/binding/impl/SAML1SOAPDecoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1SOAPDecoder.cpp
+
+SAML1SOAPEncoder.lo: saml1/binding/impl/SAML1SOAPEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1SOAPEncoder.lo -MD -MP -MF $(DEPDIR)/SAML1SOAPEncoder.Tpo -c -o SAML1SOAPEncoder.lo `test -f 'saml1/binding/impl/SAML1SOAPEncoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1SOAPEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1SOAPEncoder.Tpo $(DEPDIR)/SAML1SOAPEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1SOAPEncoder.cpp' object='SAML1SOAPEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1SOAPEncoder.lo `test -f 'saml1/binding/impl/SAML1SOAPEncoder.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1SOAPEncoder.cpp
+
+SAML1SOAPClient.lo: saml1/binding/impl/SAML1SOAPClient.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1SOAPClient.lo -MD -MP -MF $(DEPDIR)/SAML1SOAPClient.Tpo -c -o SAML1SOAPClient.lo `test -f 'saml1/binding/impl/SAML1SOAPClient.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1SOAPClient.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1SOAPClient.Tpo $(DEPDIR)/SAML1SOAPClient.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/impl/SAML1SOAPClient.cpp' object='SAML1SOAPClient.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1SOAPClient.lo `test -f 'saml1/binding/impl/SAML1SOAPClient.cpp' || echo '$(srcdir)/'`saml1/binding/impl/SAML1SOAPClient.cpp
+
+AssertionValidator.lo: saml1/profile/impl/AssertionValidator.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssertionValidator.lo -MD -MP -MF $(DEPDIR)/AssertionValidator.Tpo -c -o AssertionValidator.lo `test -f 'saml1/profile/impl/AssertionValidator.cpp' || echo '$(srcdir)/'`saml1/profile/impl/AssertionValidator.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/AssertionValidator.Tpo $(DEPDIR)/AssertionValidator.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/profile/impl/AssertionValidator.cpp' object='AssertionValidator.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssertionValidator.lo `test -f 'saml1/profile/impl/AssertionValidator.cpp' || echo '$(srcdir)/'`saml1/profile/impl/AssertionValidator.cpp
+
+BrowserSSOProfileValidator.lo: saml1/profile/impl/BrowserSSOProfileValidator.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BrowserSSOProfileValidator.lo -MD -MP -MF $(DEPDIR)/BrowserSSOProfileValidator.Tpo -c -o BrowserSSOProfileValidator.lo `test -f 'saml1/profile/impl/BrowserSSOProfileValidator.cpp' || echo '$(srcdir)/'`saml1/profile/impl/BrowserSSOProfileValidator.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/BrowserSSOProfileValidator.Tpo $(DEPDIR)/BrowserSSOProfileValidator.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/profile/impl/BrowserSSOProfileValidator.cpp' object='BrowserSSOProfileValidator.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BrowserSSOProfileValidator.lo `test -f 'saml1/profile/impl/BrowserSSOProfileValidator.cpp' || echo '$(srcdir)/'`saml1/profile/impl/BrowserSSOProfileValidator.cpp
+
+SAML1BrowserSSORule.lo: saml1/profile/impl/SAML1BrowserSSORule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML1BrowserSSORule.lo -MD -MP -MF $(DEPDIR)/SAML1BrowserSSORule.Tpo -c -o SAML1BrowserSSORule.lo `test -f 'saml1/profile/impl/SAML1BrowserSSORule.cpp' || echo '$(srcdir)/'`saml1/profile/impl/SAML1BrowserSSORule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML1BrowserSSORule.Tpo $(DEPDIR)/SAML1BrowserSSORule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/profile/impl/SAML1BrowserSSORule.cpp' object='SAML1BrowserSSORule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML1BrowserSSORule.lo `test -f 'saml1/profile/impl/SAML1BrowserSSORule.cpp' || echo '$(srcdir)/'`saml1/profile/impl/SAML1BrowserSSORule.cpp
+
+Assertions.lo: saml2/core/impl/Assertions.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assertions.lo -MD -MP -MF $(DEPDIR)/Assertions.Tpo -c -o Assertions.lo `test -f 'saml2/core/impl/Assertions.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertions.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/Assertions.Tpo $(DEPDIR)/Assertions.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Assertions.cpp' object='Assertions.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assertions.lo `test -f 'saml2/core/impl/Assertions.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertions.cpp
+
+Assertions20Impl.lo: saml2/core/impl/Assertions20Impl.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assertions20Impl.lo -MD -MP -MF $(DEPDIR)/Assertions20Impl.Tpo -c -o Assertions20Impl.lo `test -f 'saml2/core/impl/Assertions20Impl.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertions20Impl.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/Assertions20Impl.Tpo $(DEPDIR)/Assertions20Impl.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Assertions20Impl.cpp' object='Assertions20Impl.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assertions20Impl.lo `test -f 'saml2/core/impl/Assertions20Impl.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertions20Impl.cpp
+
+Assertions20SchemaValidators.lo: saml2/core/impl/Assertions20SchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assertions20SchemaValidators.lo -MD -MP -MF $(DEPDIR)/Assertions20SchemaValidators.Tpo -c -o Assertions20SchemaValidators.lo `test -f 'saml2/core/impl/Assertions20SchemaValidators.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertions20SchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/Assertions20SchemaValidators.Tpo $(DEPDIR)/Assertions20SchemaValidators.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Assertions20SchemaValidators.cpp' object='Assertions20SchemaValidators.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assertions20SchemaValidators.lo `test -f 'saml2/core/impl/Assertions20SchemaValidators.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertions20SchemaValidators.cpp
+
+Protocols20Impl.lo: saml2/core/impl/Protocols20Impl.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Protocols20Impl.lo -MD -MP -MF $(DEPDIR)/Protocols20Impl.Tpo -c -o Protocols20Impl.lo `test -f 'saml2/core/impl/Protocols20Impl.cpp' || echo '$(srcdir)/'`saml2/core/impl/Protocols20Impl.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/Protocols20Impl.Tpo $(DEPDIR)/Protocols20Impl.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Protocols20Impl.cpp' object='Protocols20Impl.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Protocols20Impl.lo `test -f 'saml2/core/impl/Protocols20Impl.cpp' || echo '$(srcdir)/'`saml2/core/impl/Protocols20Impl.cpp
+
+Protocols20SchemaValidators.lo: saml2/core/impl/Protocols20SchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Protocols20SchemaValidators.lo -MD -MP -MF $(DEPDIR)/Protocols20SchemaValidators.Tpo -c -o Protocols20SchemaValidators.lo `test -f 'saml2/core/impl/Protocols20SchemaValidators.cpp' || echo '$(srcdir)/'`saml2/core/impl/Protocols20SchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/Protocols20SchemaValidators.Tpo $(DEPDIR)/Protocols20SchemaValidators.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Protocols20SchemaValidators.cpp' object='Protocols20SchemaValidators.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Protocols20SchemaValidators.lo `test -f 'saml2/core/impl/Protocols20SchemaValidators.cpp' || echo '$(srcdir)/'`saml2/core/impl/Protocols20SchemaValidators.cpp
+
+AbstractMetadataProvider.lo: saml2/metadata/impl/AbstractMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AbstractMetadataProvider.lo -MD -MP -MF $(DEPDIR)/AbstractMetadataProvider.Tpo -c -o AbstractMetadataProvider.lo `test -f 'saml2/metadata/impl/AbstractMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/AbstractMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/AbstractMetadataProvider.Tpo $(DEPDIR)/AbstractMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/AbstractMetadataProvider.cpp' object='AbstractMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AbstractMetadataProvider.lo `test -f 'saml2/metadata/impl/AbstractMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/AbstractMetadataProvider.cpp
+
+BlacklistMetadataFilter.lo: saml2/metadata/impl/BlacklistMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BlacklistMetadataFilter.lo -MD -MP -MF $(DEPDIR)/BlacklistMetadataFilter.Tpo -c -o BlacklistMetadataFilter.lo `test -f 'saml2/metadata/impl/BlacklistMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/BlacklistMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/BlacklistMetadataFilter.Tpo $(DEPDIR)/BlacklistMetadataFilter.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/BlacklistMetadataFilter.cpp' object='BlacklistMetadataFilter.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BlacklistMetadataFilter.lo `test -f 'saml2/metadata/impl/BlacklistMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/BlacklistMetadataFilter.cpp
+
+ChainingMetadataProvider.lo: saml2/metadata/impl/ChainingMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ChainingMetadataProvider.lo -MD -MP -MF $(DEPDIR)/ChainingMetadataProvider.Tpo -c -o ChainingMetadataProvider.lo `test -f 'saml2/metadata/impl/ChainingMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/ChainingMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ChainingMetadataProvider.Tpo $(DEPDIR)/ChainingMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/ChainingMetadataProvider.cpp' object='ChainingMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ChainingMetadataProvider.lo `test -f 'saml2/metadata/impl/ChainingMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/ChainingMetadataProvider.cpp
+
+DiscoverableMetadataProvider.lo: saml2/metadata/impl/DiscoverableMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DiscoverableMetadataProvider.lo -MD -MP -MF $(DEPDIR)/DiscoverableMetadataProvider.Tpo -c -o DiscoverableMetadataProvider.lo `test -f 'saml2/metadata/impl/DiscoverableMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/DiscoverableMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/DiscoverableMetadataProvider.Tpo $(DEPDIR)/DiscoverableMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/DiscoverableMetadataProvider.cpp' object='DiscoverableMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DiscoverableMetadataProvider.lo `test -f 'saml2/metadata/impl/DiscoverableMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/DiscoverableMetadataProvider.cpp
+
+DynamicMetadataProvider.lo: saml2/metadata/impl/DynamicMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DynamicMetadataProvider.lo -MD -MP -MF $(DEPDIR)/DynamicMetadataProvider.Tpo -c -o DynamicMetadataProvider.lo `test -f 'saml2/metadata/impl/DynamicMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/DynamicMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/DynamicMetadataProvider.Tpo $(DEPDIR)/DynamicMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/DynamicMetadataProvider.cpp' object='DynamicMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DynamicMetadataProvider.lo `test -f 'saml2/metadata/impl/DynamicMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/DynamicMetadataProvider.cpp
+
+EntityRoleMetadataFilter.lo: saml2/metadata/impl/EntityRoleMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EntityRoleMetadataFilter.lo -MD -MP -MF $(DEPDIR)/EntityRoleMetadataFilter.Tpo -c -o EntityRoleMetadataFilter.lo `test -f 'saml2/metadata/impl/EntityRoleMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/EntityRoleMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/EntityRoleMetadataFilter.Tpo $(DEPDIR)/EntityRoleMetadataFilter.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/EntityRoleMetadataFilter.cpp' object='EntityRoleMetadataFilter.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EntityRoleMetadataFilter.lo `test -f 'saml2/metadata/impl/EntityRoleMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/EntityRoleMetadataFilter.cpp
+
+MetadataCredentialContext.lo: saml2/metadata/impl/MetadataCredentialContext.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MetadataCredentialContext.lo -MD -MP -MF $(DEPDIR)/MetadataCredentialContext.Tpo -c -o MetadataCredentialContext.lo `test -f 'saml2/metadata/impl/MetadataCredentialContext.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataCredentialContext.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MetadataCredentialContext.Tpo $(DEPDIR)/MetadataCredentialContext.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/MetadataCredentialContext.cpp' object='MetadataCredentialContext.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MetadataCredentialContext.lo `test -f 'saml2/metadata/impl/MetadataCredentialContext.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataCredentialContext.cpp
+
+MetadataCredentialCriteria.lo: saml2/metadata/impl/MetadataCredentialCriteria.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MetadataCredentialCriteria.lo -MD -MP -MF $(DEPDIR)/MetadataCredentialCriteria.Tpo -c -o MetadataCredentialCriteria.lo `test -f 'saml2/metadata/impl/MetadataCredentialCriteria.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataCredentialCriteria.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MetadataCredentialCriteria.Tpo $(DEPDIR)/MetadataCredentialCriteria.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/MetadataCredentialCriteria.cpp' object='MetadataCredentialCriteria.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MetadataCredentialCriteria.lo `test -f 'saml2/metadata/impl/MetadataCredentialCriteria.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataCredentialCriteria.cpp
+
+MetadataImpl.lo: saml2/metadata/impl/MetadataImpl.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MetadataImpl.lo -MD -MP -MF $(DEPDIR)/MetadataImpl.Tpo -c -o MetadataImpl.lo `test -f 'saml2/metadata/impl/MetadataImpl.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataImpl.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MetadataImpl.Tpo $(DEPDIR)/MetadataImpl.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/MetadataImpl.cpp' object='MetadataImpl.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MetadataImpl.lo `test -f 'saml2/metadata/impl/MetadataImpl.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataImpl.cpp
+
+MetadataProvider.lo: saml2/metadata/impl/MetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MetadataProvider.lo -MD -MP -MF $(DEPDIR)/MetadataProvider.Tpo -c -o MetadataProvider.lo `test -f 'saml2/metadata/impl/MetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MetadataProvider.Tpo $(DEPDIR)/MetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/MetadataProvider.cpp' object='MetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MetadataProvider.lo `test -f 'saml2/metadata/impl/MetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataProvider.cpp
+
+MetadataSchemaValidators.lo: saml2/metadata/impl/MetadataSchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MetadataSchemaValidators.lo -MD -MP -MF $(DEPDIR)/MetadataSchemaValidators.Tpo -c -o MetadataSchemaValidators.lo `test -f 'saml2/metadata/impl/MetadataSchemaValidators.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataSchemaValidators.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/MetadataSchemaValidators.Tpo $(DEPDIR)/MetadataSchemaValidators.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/MetadataSchemaValidators.cpp' object='MetadataSchemaValidators.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MetadataSchemaValidators.lo `test -f 'saml2/metadata/impl/MetadataSchemaValidators.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/MetadataSchemaValidators.cpp
+
+NullMetadataProvider.lo: saml2/metadata/impl/NullMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NullMetadataProvider.lo -MD -MP -MF $(DEPDIR)/NullMetadataProvider.Tpo -c -o NullMetadataProvider.lo `test -f 'saml2/metadata/impl/NullMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/NullMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/NullMetadataProvider.Tpo $(DEPDIR)/NullMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/NullMetadataProvider.cpp' object='NullMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NullMetadataProvider.lo `test -f 'saml2/metadata/impl/NullMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/NullMetadataProvider.cpp
+
+ObservableMetadataProvider.lo: saml2/metadata/impl/ObservableMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ObservableMetadataProvider.lo -MD -MP -MF $(DEPDIR)/ObservableMetadataProvider.Tpo -c -o ObservableMetadataProvider.lo `test -f 'saml2/metadata/impl/ObservableMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/ObservableMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ObservableMetadataProvider.Tpo $(DEPDIR)/ObservableMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/ObservableMetadataProvider.cpp' object='ObservableMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ObservableMetadataProvider.lo `test -f 'saml2/metadata/impl/ObservableMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/ObservableMetadataProvider.cpp
+
+SignatureMetadataFilter.lo: saml2/metadata/impl/SignatureMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SignatureMetadataFilter.lo -MD -MP -MF $(DEPDIR)/SignatureMetadataFilter.Tpo -c -o SignatureMetadataFilter.lo `test -f 'saml2/metadata/impl/SignatureMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/SignatureMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SignatureMetadataFilter.Tpo $(DEPDIR)/SignatureMetadataFilter.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/SignatureMetadataFilter.cpp' object='SignatureMetadataFilter.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SignatureMetadataFilter.lo `test -f 'saml2/metadata/impl/SignatureMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/SignatureMetadataFilter.cpp
+
+RequireValidUntilMetadataFilter.lo: saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RequireValidUntilMetadataFilter.lo -MD -MP -MF $(DEPDIR)/RequireValidUntilMetadataFilter.Tpo -c -o RequireValidUntilMetadataFilter.lo `test -f 'saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/RequireValidUntilMetadataFilter.Tpo $(DEPDIR)/RequireValidUntilMetadataFilter.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp' object='RequireValidUntilMetadataFilter.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RequireValidUntilMetadataFilter.lo `test -f 'saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/RequireValidUntilMetadataFilter.cpp
+
+WhitelistMetadataFilter.lo: saml2/metadata/impl/WhitelistMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WhitelistMetadataFilter.lo -MD -MP -MF $(DEPDIR)/WhitelistMetadataFilter.Tpo -c -o WhitelistMetadataFilter.lo `test -f 'saml2/metadata/impl/WhitelistMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/WhitelistMetadataFilter.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/WhitelistMetadataFilter.Tpo $(DEPDIR)/WhitelistMetadataFilter.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/WhitelistMetadataFilter.cpp' object='WhitelistMetadataFilter.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WhitelistMetadataFilter.lo `test -f 'saml2/metadata/impl/WhitelistMetadataFilter.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/WhitelistMetadataFilter.cpp
+
+XMLMetadataProvider.lo: saml2/metadata/impl/XMLMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XMLMetadataProvider.lo -MD -MP -MF $(DEPDIR)/XMLMetadataProvider.Tpo -c -o XMLMetadataProvider.lo `test -f 'saml2/metadata/impl/XMLMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/XMLMetadataProvider.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/XMLMetadataProvider.Tpo $(DEPDIR)/XMLMetadataProvider.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/impl/XMLMetadataProvider.cpp' object='XMLMetadataProvider.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XMLMetadataProvider.lo `test -f 'saml2/metadata/impl/XMLMetadataProvider.cpp' || echo '$(srcdir)/'`saml2/metadata/impl/XMLMetadataProvider.cpp
+
+SAML2Artifact.lo: saml2/binding/impl/SAML2Artifact.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2Artifact.lo -MD -MP -MF $(DEPDIR)/SAML2Artifact.Tpo -c -o SAML2Artifact.lo `test -f 'saml2/binding/impl/SAML2Artifact.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2Artifact.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2Artifact.Tpo $(DEPDIR)/SAML2Artifact.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2Artifact.cpp' object='SAML2Artifact.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2Artifact.lo `test -f 'saml2/binding/impl/SAML2Artifact.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2Artifact.cpp
+
+SAML2ArtifactType0004.lo: saml2/binding/impl/SAML2ArtifactType0004.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2ArtifactType0004.lo -MD -MP -MF $(DEPDIR)/SAML2ArtifactType0004.Tpo -c -o SAML2ArtifactType0004.lo `test -f 'saml2/binding/impl/SAML2ArtifactType0004.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ArtifactType0004.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2ArtifactType0004.Tpo $(DEPDIR)/SAML2ArtifactType0004.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2ArtifactType0004.cpp' object='SAML2ArtifactType0004.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2ArtifactType0004.lo `test -f 'saml2/binding/impl/SAML2ArtifactType0004.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ArtifactType0004.cpp
+
+SAML2ArtifactDecoder.lo: saml2/binding/impl/SAML2ArtifactDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2ArtifactDecoder.lo -MD -MP -MF $(DEPDIR)/SAML2ArtifactDecoder.Tpo -c -o SAML2ArtifactDecoder.lo `test -f 'saml2/binding/impl/SAML2ArtifactDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ArtifactDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2ArtifactDecoder.Tpo $(DEPDIR)/SAML2ArtifactDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2ArtifactDecoder.cpp' object='SAML2ArtifactDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2ArtifactDecoder.lo `test -f 'saml2/binding/impl/SAML2ArtifactDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ArtifactDecoder.cpp
+
+SAML2ArtifactEncoder.lo: saml2/binding/impl/SAML2ArtifactEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2ArtifactEncoder.lo -MD -MP -MF $(DEPDIR)/SAML2ArtifactEncoder.Tpo -c -o SAML2ArtifactEncoder.lo `test -f 'saml2/binding/impl/SAML2ArtifactEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ArtifactEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2ArtifactEncoder.Tpo $(DEPDIR)/SAML2ArtifactEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2ArtifactEncoder.cpp' object='SAML2ArtifactEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2ArtifactEncoder.lo `test -f 'saml2/binding/impl/SAML2ArtifactEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ArtifactEncoder.cpp
+
+SAML2ECPDecoder.lo: saml2/binding/impl/SAML2ECPDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2ECPDecoder.lo -MD -MP -MF $(DEPDIR)/SAML2ECPDecoder.Tpo -c -o SAML2ECPDecoder.lo `test -f 'saml2/binding/impl/SAML2ECPDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ECPDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2ECPDecoder.Tpo $(DEPDIR)/SAML2ECPDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2ECPDecoder.cpp' object='SAML2ECPDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2ECPDecoder.lo `test -f 'saml2/binding/impl/SAML2ECPDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ECPDecoder.cpp
+
+SAML2ECPEncoder.lo: saml2/binding/impl/SAML2ECPEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2ECPEncoder.lo -MD -MP -MF $(DEPDIR)/SAML2ECPEncoder.Tpo -c -o SAML2ECPEncoder.lo `test -f 'saml2/binding/impl/SAML2ECPEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ECPEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2ECPEncoder.Tpo $(DEPDIR)/SAML2ECPEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2ECPEncoder.cpp' object='SAML2ECPEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2ECPEncoder.lo `test -f 'saml2/binding/impl/SAML2ECPEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2ECPEncoder.cpp
+
+SAML2MessageDecoder.lo: saml2/binding/impl/SAML2MessageDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2MessageDecoder.lo -MD -MP -MF $(DEPDIR)/SAML2MessageDecoder.Tpo -c -o SAML2MessageDecoder.lo `test -f 'saml2/binding/impl/SAML2MessageDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2MessageDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2MessageDecoder.Tpo $(DEPDIR)/SAML2MessageDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2MessageDecoder.cpp' object='SAML2MessageDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2MessageDecoder.lo `test -f 'saml2/binding/impl/SAML2MessageDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2MessageDecoder.cpp
+
+SAML2POSTDecoder.lo: saml2/binding/impl/SAML2POSTDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2POSTDecoder.lo -MD -MP -MF $(DEPDIR)/SAML2POSTDecoder.Tpo -c -o SAML2POSTDecoder.lo `test -f 'saml2/binding/impl/SAML2POSTDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2POSTDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2POSTDecoder.Tpo $(DEPDIR)/SAML2POSTDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2POSTDecoder.cpp' object='SAML2POSTDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2POSTDecoder.lo `test -f 'saml2/binding/impl/SAML2POSTDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2POSTDecoder.cpp
+
+SAML2POSTEncoder.lo: saml2/binding/impl/SAML2POSTEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2POSTEncoder.lo -MD -MP -MF $(DEPDIR)/SAML2POSTEncoder.Tpo -c -o SAML2POSTEncoder.lo `test -f 'saml2/binding/impl/SAML2POSTEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2POSTEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2POSTEncoder.Tpo $(DEPDIR)/SAML2POSTEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2POSTEncoder.cpp' object='SAML2POSTEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2POSTEncoder.lo `test -f 'saml2/binding/impl/SAML2POSTEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2POSTEncoder.cpp
+
+SAML2Redirect.lo: saml2/binding/impl/SAML2Redirect.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2Redirect.lo -MD -MP -MF $(DEPDIR)/SAML2Redirect.Tpo -c -o SAML2Redirect.lo `test -f 'saml2/binding/impl/SAML2Redirect.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2Redirect.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2Redirect.Tpo $(DEPDIR)/SAML2Redirect.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2Redirect.cpp' object='SAML2Redirect.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2Redirect.lo `test -f 'saml2/binding/impl/SAML2Redirect.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2Redirect.cpp
+
+SAML2RedirectDecoder.lo: saml2/binding/impl/SAML2RedirectDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2RedirectDecoder.lo -MD -MP -MF $(DEPDIR)/SAML2RedirectDecoder.Tpo -c -o SAML2RedirectDecoder.lo `test -f 'saml2/binding/impl/SAML2RedirectDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2RedirectDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2RedirectDecoder.Tpo $(DEPDIR)/SAML2RedirectDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2RedirectDecoder.cpp' object='SAML2RedirectDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2RedirectDecoder.lo `test -f 'saml2/binding/impl/SAML2RedirectDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2RedirectDecoder.cpp
+
+SAML2RedirectEncoder.lo: saml2/binding/impl/SAML2RedirectEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2RedirectEncoder.lo -MD -MP -MF $(DEPDIR)/SAML2RedirectEncoder.Tpo -c -o SAML2RedirectEncoder.lo `test -f 'saml2/binding/impl/SAML2RedirectEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2RedirectEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2RedirectEncoder.Tpo $(DEPDIR)/SAML2RedirectEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2RedirectEncoder.cpp' object='SAML2RedirectEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2RedirectEncoder.lo `test -f 'saml2/binding/impl/SAML2RedirectEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2RedirectEncoder.cpp
+
+SAML2SOAPDecoder.lo: saml2/binding/impl/SAML2SOAPDecoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2SOAPDecoder.lo -MD -MP -MF $(DEPDIR)/SAML2SOAPDecoder.Tpo -c -o SAML2SOAPDecoder.lo `test -f 'saml2/binding/impl/SAML2SOAPDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2SOAPDecoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2SOAPDecoder.Tpo $(DEPDIR)/SAML2SOAPDecoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2SOAPDecoder.cpp' object='SAML2SOAPDecoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2SOAPDecoder.lo `test -f 'saml2/binding/impl/SAML2SOAPDecoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2SOAPDecoder.cpp
+
+SAML2SOAPEncoder.lo: saml2/binding/impl/SAML2SOAPEncoder.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2SOAPEncoder.lo -MD -MP -MF $(DEPDIR)/SAML2SOAPEncoder.Tpo -c -o SAML2SOAPEncoder.lo `test -f 'saml2/binding/impl/SAML2SOAPEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2SOAPEncoder.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2SOAPEncoder.Tpo $(DEPDIR)/SAML2SOAPEncoder.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2SOAPEncoder.cpp' object='SAML2SOAPEncoder.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2SOAPEncoder.lo `test -f 'saml2/binding/impl/SAML2SOAPEncoder.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2SOAPEncoder.cpp
+
+SAML2SOAPClient.lo: saml2/binding/impl/SAML2SOAPClient.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2SOAPClient.lo -MD -MP -MF $(DEPDIR)/SAML2SOAPClient.Tpo -c -o SAML2SOAPClient.lo `test -f 'saml2/binding/impl/SAML2SOAPClient.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2SOAPClient.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2SOAPClient.Tpo $(DEPDIR)/SAML2SOAPClient.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/impl/SAML2SOAPClient.cpp' object='SAML2SOAPClient.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2SOAPClient.lo `test -f 'saml2/binding/impl/SAML2SOAPClient.cpp' || echo '$(srcdir)/'`saml2/binding/impl/SAML2SOAPClient.cpp
+
+Assertion20Validator.lo: saml2/profile/impl/Assertion20Validator.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assertion20Validator.lo -MD -MP -MF $(DEPDIR)/Assertion20Validator.Tpo -c -o Assertion20Validator.lo `test -f 'saml2/profile/impl/Assertion20Validator.cpp' || echo '$(srcdir)/'`saml2/profile/impl/Assertion20Validator.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/Assertion20Validator.Tpo $(DEPDIR)/Assertion20Validator.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/impl/Assertion20Validator.cpp' object='Assertion20Validator.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assertion20Validator.lo `test -f 'saml2/profile/impl/Assertion20Validator.cpp' || echo '$(srcdir)/'`saml2/profile/impl/Assertion20Validator.cpp
+
+BrowserSSOProfile20Validator.lo: saml2/profile/impl/BrowserSSOProfile20Validator.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BrowserSSOProfile20Validator.lo -MD -MP -MF $(DEPDIR)/BrowserSSOProfile20Validator.Tpo -c -o BrowserSSOProfile20Validator.lo `test -f 'saml2/profile/impl/BrowserSSOProfile20Validator.cpp' || echo '$(srcdir)/'`saml2/profile/impl/BrowserSSOProfile20Validator.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/BrowserSSOProfile20Validator.Tpo $(DEPDIR)/BrowserSSOProfile20Validator.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/impl/BrowserSSOProfile20Validator.cpp' object='BrowserSSOProfile20Validator.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BrowserSSOProfile20Validator.lo `test -f 'saml2/profile/impl/BrowserSSOProfile20Validator.cpp' || echo '$(srcdir)/'`saml2/profile/impl/BrowserSSOProfile20Validator.cpp
+
+BearerConfirmationRule.lo: saml2/profile/impl/BearerConfirmationRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BearerConfirmationRule.lo -MD -MP -MF $(DEPDIR)/BearerConfirmationRule.Tpo -c -o BearerConfirmationRule.lo `test -f 'saml2/profile/impl/BearerConfirmationRule.cpp' || echo '$(srcdir)/'`saml2/profile/impl/BearerConfirmationRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/BearerConfirmationRule.Tpo $(DEPDIR)/BearerConfirmationRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/impl/BearerConfirmationRule.cpp' object='BearerConfirmationRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BearerConfirmationRule.lo `test -f 'saml2/profile/impl/BearerConfirmationRule.cpp' || echo '$(srcdir)/'`saml2/profile/impl/BearerConfirmationRule.cpp
+
+DelegationRestrictionRule.lo: saml2/profile/impl/DelegationRestrictionRule.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DelegationRestrictionRule.lo -MD -MP -MF $(DEPDIR)/DelegationRestrictionRule.Tpo -c -o DelegationRestrictionRule.lo `test -f 'saml2/profile/impl/DelegationRestrictionRule.cpp' || echo '$(srcdir)/'`saml2/profile/impl/DelegationRestrictionRule.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/DelegationRestrictionRule.Tpo $(DEPDIR)/DelegationRestrictionRule.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/impl/DelegationRestrictionRule.cpp' object='DelegationRestrictionRule.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DelegationRestrictionRule.lo `test -f 'saml2/profile/impl/DelegationRestrictionRule.cpp' || echo '$(srcdir)/'`saml2/profile/impl/DelegationRestrictionRule.cpp
+
+SAML2AssertionPolicy.lo: saml2/profile/impl/SAML2AssertionPolicy.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAML2AssertionPolicy.lo -MD -MP -MF $(DEPDIR)/SAML2AssertionPolicy.Tpo -c -o SAML2AssertionPolicy.lo `test -f 'saml2/profile/impl/SAML2AssertionPolicy.cpp' || echo '$(srcdir)/'`saml2/profile/impl/SAML2AssertionPolicy.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAML2AssertionPolicy.Tpo $(DEPDIR)/SAML2AssertionPolicy.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/impl/SAML2AssertionPolicy.cpp' object='SAML2AssertionPolicy.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAML2AssertionPolicy.lo `test -f 'saml2/profile/impl/SAML2AssertionPolicy.cpp' || echo '$(srcdir)/'`saml2/profile/impl/SAML2AssertionPolicy.cpp
+
+EncryptedKeyResolver.lo: encryption/EncryptedKeyResolver.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EncryptedKeyResolver.lo -MD -MP -MF $(DEPDIR)/EncryptedKeyResolver.Tpo -c -o EncryptedKeyResolver.lo `test -f 'encryption/EncryptedKeyResolver.cpp' || echo '$(srcdir)/'`encryption/EncryptedKeyResolver.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/EncryptedKeyResolver.Tpo $(DEPDIR)/EncryptedKeyResolver.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='encryption/EncryptedKeyResolver.cpp' object='EncryptedKeyResolver.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EncryptedKeyResolver.lo `test -f 'encryption/EncryptedKeyResolver.cpp' || echo '$(srcdir)/'`encryption/EncryptedKeyResolver.cpp
+
+ContentReference.lo: signature/ContentReference.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentReference.lo -MD -MP -MF $(DEPDIR)/ContentReference.Tpo -c -o ContentReference.lo `test -f 'signature/ContentReference.cpp' || echo '$(srcdir)/'`signature/ContentReference.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/ContentReference.Tpo $(DEPDIR)/ContentReference.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/ContentReference.cpp' object='ContentReference.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentReference.lo `test -f 'signature/ContentReference.cpp' || echo '$(srcdir)/'`signature/ContentReference.cpp
+
+SignatureProfileValidator.lo: signature/SignatureProfileValidator.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SignatureProfileValidator.lo -MD -MP -MF $(DEPDIR)/SignatureProfileValidator.Tpo -c -o SignatureProfileValidator.lo `test -f 'signature/SignatureProfileValidator.cpp' || echo '$(srcdir)/'`signature/SignatureProfileValidator.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SignatureProfileValidator.Tpo $(DEPDIR)/SignatureProfileValidator.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SignatureProfileValidator.cpp' object='SignatureProfileValidator.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SignatureProfileValidator.lo `test -f 'signature/SignatureProfileValidator.cpp' || echo '$(srcdir)/'`signature/SignatureProfileValidator.cpp
+
+CommonDomainCookie.lo: util/CommonDomainCookie.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonDomainCookie.lo -MD -MP -MF $(DEPDIR)/CommonDomainCookie.Tpo -c -o CommonDomainCookie.lo `test -f 'util/CommonDomainCookie.cpp' || echo '$(srcdir)/'`util/CommonDomainCookie.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/CommonDomainCookie.Tpo $(DEPDIR)/CommonDomainCookie.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='util/CommonDomainCookie.cpp' object='CommonDomainCookie.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonDomainCookie.lo `test -f 'util/CommonDomainCookie.cpp' || echo '$(srcdir)/'`util/CommonDomainCookie.cpp
+
+SAMLConstants.lo: util/SAMLConstants.cpp
+@am__fastdepCXX_TRUE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SAMLConstants.lo -MD -MP -MF $(DEPDIR)/SAMLConstants.Tpo -c -o SAMLConstants.lo `test -f 'util/SAMLConstants.cpp' || echo '$(srcdir)/'`util/SAMLConstants.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/SAMLConstants.Tpo $(DEPDIR)/SAMLConstants.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='util/SAMLConstants.cpp' object='SAMLConstants.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SAMLConstants.lo `test -f 'util/SAMLConstants.cpp' || echo '$(srcdir)/'`util/SAMLConstants.cpp
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+install-encincludeHEADERS: $(encinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(encincludedir)" || $(MKDIR_P) "$(DESTDIR)$(encincludedir)"
+	@list='$(encinclude_HEADERS)'; test -n "$(encincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(encincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(encincludedir)" || exit $$?; \
+	done
+
+uninstall-encincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(encinclude_HEADERS)'; test -n "$(encincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(encincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(encincludedir)" && rm -f $$files
+install-libsamlincludeHEADERS: $(libsamlinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(libsamlincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libsamlincludedir)"
+	@list='$(libsamlinclude_HEADERS)'; test -n "$(libsamlincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libsamlincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libsamlincludedir)" || exit $$?; \
+	done
+
+uninstall-libsamlincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(libsamlinclude_HEADERS)'; test -n "$(libsamlincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(libsamlincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(libsamlincludedir)" && rm -f $$files
+install-saml1bindincludeHEADERS: $(saml1bindinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml1bindincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml1bindincludedir)"
+	@list='$(saml1bindinclude_HEADERS)'; test -n "$(saml1bindincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml1bindincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml1bindincludedir)" || exit $$?; \
+	done
+
+uninstall-saml1bindincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml1bindinclude_HEADERS)'; test -n "$(saml1bindincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml1bindincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml1bindincludedir)" && rm -f $$files
+install-saml1coreincludeHEADERS: $(saml1coreinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml1coreincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml1coreincludedir)"
+	@list='$(saml1coreinclude_HEADERS)'; test -n "$(saml1coreincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml1coreincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml1coreincludedir)" || exit $$?; \
+	done
+
+uninstall-saml1coreincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml1coreinclude_HEADERS)'; test -n "$(saml1coreincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml1coreincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml1coreincludedir)" && rm -f $$files
+install-saml1profincludeHEADERS: $(saml1profinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml1profincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml1profincludedir)"
+	@list='$(saml1profinclude_HEADERS)'; test -n "$(saml1profincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml1profincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml1profincludedir)" || exit $$?; \
+	done
+
+uninstall-saml1profincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml1profinclude_HEADERS)'; test -n "$(saml1profincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml1profincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml1profincludedir)" && rm -f $$files
+install-saml2bindincludeHEADERS: $(saml2bindinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml2bindincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml2bindincludedir)"
+	@list='$(saml2bindinclude_HEADERS)'; test -n "$(saml2bindincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml2bindincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml2bindincludedir)" || exit $$?; \
+	done
+
+uninstall-saml2bindincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml2bindinclude_HEADERS)'; test -n "$(saml2bindincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml2bindincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml2bindincludedir)" && rm -f $$files
+install-saml2coreincludeHEADERS: $(saml2coreinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml2coreincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml2coreincludedir)"
+	@list='$(saml2coreinclude_HEADERS)'; test -n "$(saml2coreincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml2coreincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml2coreincludedir)" || exit $$?; \
+	done
+
+uninstall-saml2coreincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml2coreinclude_HEADERS)'; test -n "$(saml2coreincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml2coreincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml2coreincludedir)" && rm -f $$files
+install-saml2mdincludeHEADERS: $(saml2mdinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml2mdincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml2mdincludedir)"
+	@list='$(saml2mdinclude_HEADERS)'; test -n "$(saml2mdincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml2mdincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml2mdincludedir)" || exit $$?; \
+	done
+
+uninstall-saml2mdincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml2mdinclude_HEADERS)'; test -n "$(saml2mdincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml2mdincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml2mdincludedir)" && rm -f $$files
+install-saml2profincludeHEADERS: $(saml2profinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(saml2profincludedir)" || $(MKDIR_P) "$(DESTDIR)$(saml2profincludedir)"
+	@list='$(saml2profinclude_HEADERS)'; test -n "$(saml2profincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(saml2profincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(saml2profincludedir)" || exit $$?; \
+	done
+
+uninstall-saml2profincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(saml2profinclude_HEADERS)'; test -n "$(saml2profincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(saml2profincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(saml2profincludedir)" && rm -f $$files
+install-samlbindincludeHEADERS: $(samlbindinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(samlbindincludedir)" || $(MKDIR_P) "$(DESTDIR)$(samlbindincludedir)"
+	@list='$(samlbindinclude_HEADERS)'; test -n "$(samlbindincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(samlbindincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(samlbindincludedir)" || exit $$?; \
+	done
+
+uninstall-samlbindincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(samlbindinclude_HEADERS)'; test -n "$(samlbindincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(samlbindincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(samlbindincludedir)" && rm -f $$files
+install-sigincludeHEADERS: $(siginclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(sigincludedir)" || $(MKDIR_P) "$(DESTDIR)$(sigincludedir)"
+	@list='$(siginclude_HEADERS)'; test -n "$(sigincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(sigincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(sigincludedir)" || exit $$?; \
+	done
+
+uninstall-sigincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(siginclude_HEADERS)'; test -n "$(sigincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(sigincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(sigincludedir)" && rm -f $$files
+install-utilincludeHEADERS: $(utilinclude_HEADERS)
+	@$(NORMAL_INSTALL)
+	test -z "$(utilincludedir)" || $(MKDIR_P) "$(DESTDIR)$(utilincludedir)"
+	@list='$(utilinclude_HEADERS)'; test -n "$(utilincludedir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(utilincludedir)'"; \
+	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(utilincludedir)" || exit $$?; \
+	done
+
+uninstall-utilincludeHEADERS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(utilinclude_HEADERS)'; test -n "$(utilincludedir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(utilincludedir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(utilincludedir)" && rm -f $$files
+
+ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
+	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	mkid -fID $$unique
+tags: TAGS
+
+TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	set x; \
+	here=`pwd`; \
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: CTAGS
+CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+	$(MAKE) $(AM_MAKEFLAGS) \
+	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
+	  dist-hook
+check-am: all-am
+check: check-am
+all-am: Makefile $(LTLIBRARIES) $(HEADERS)
+installdirs:
+	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(encincludedir)" "$(DESTDIR)$(libsamlincludedir)" "$(DESTDIR)$(saml1bindincludedir)" "$(DESTDIR)$(saml1coreincludedir)" "$(DESTDIR)$(saml1profincludedir)" "$(DESTDIR)$(saml2bindincludedir)" "$(DESTDIR)$(saml2coreincludedir)" "$(DESTDIR)$(saml2mdincludedir)" "$(DESTDIR)$(saml2profincludedir)" "$(DESTDIR)$(samlbindincludedir)" "$(DESTDIR)$(sigincludedir)" "$(DESTDIR)$(utilincludedir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
+	mostlyclean-am
+
+distclean: distclean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+distclean-am: clean-am distclean-compile distclean-generic \
+	distclean-tags
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am: install-encincludeHEADERS \
+	install-libsamlincludeHEADERS install-saml1bindincludeHEADERS \
+	install-saml1coreincludeHEADERS \
+	install-saml1profincludeHEADERS \
+	install-saml2bindincludeHEADERS \
+	install-saml2coreincludeHEADERS install-saml2mdincludeHEADERS \
+	install-saml2profincludeHEADERS install-samlbindincludeHEADERS \
+	install-sigincludeHEADERS install-utilincludeHEADERS
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am: install-libLTLIBRARIES
+	@$(NORMAL_INSTALL)
+	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am: uninstall-encincludeHEADERS uninstall-libLTLIBRARIES \
+	uninstall-libsamlincludeHEADERS \
+	uninstall-saml1bindincludeHEADERS \
+	uninstall-saml1coreincludeHEADERS \
+	uninstall-saml1profincludeHEADERS \
+	uninstall-saml2bindincludeHEADERS \
+	uninstall-saml2coreincludeHEADERS \
+	uninstall-saml2mdincludeHEADERS \
+	uninstall-saml2profincludeHEADERS \
+	uninstall-samlbindincludeHEADERS uninstall-sigincludeHEADERS \
+	uninstall-utilincludeHEADERS
+
+.MAKE: install-am install-exec-am install-strip
+
+.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
+	clean-libLTLIBRARIES clean-libtool ctags dist-hook distclean \
+	distclean-compile distclean-generic distclean-libtool \
+	distclean-tags distdir dvi dvi-am html html-am info info-am \
+	install install-am install-data install-data-am install-dvi \
+	install-dvi-am install-encincludeHEADERS install-exec \
+	install-exec-am install-exec-hook install-html install-html-am \
+	install-info install-info-am install-libLTLIBRARIES \
+	install-libsamlincludeHEADERS install-man install-pdf \
+	install-pdf-am install-ps install-ps-am \
+	install-saml1bindincludeHEADERS \
+	install-saml1coreincludeHEADERS \
+	install-saml1profincludeHEADERS \
+	install-saml2bindincludeHEADERS \
+	install-saml2coreincludeHEADERS install-saml2mdincludeHEADERS \
+	install-saml2profincludeHEADERS install-samlbindincludeHEADERS \
+	install-sigincludeHEADERS install-strip \
+	install-utilincludeHEADERS installcheck installcheck-am \
+	installdirs maintainer-clean maintainer-clean-generic \
+	mostlyclean mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
+	uninstall-am uninstall-encincludeHEADERS \
+	uninstall-libLTLIBRARIES uninstall-libsamlincludeHEADERS \
+	uninstall-saml1bindincludeHEADERS \
+	uninstall-saml1coreincludeHEADERS \
+	uninstall-saml1profincludeHEADERS \
+	uninstall-saml2bindincludeHEADERS \
+	uninstall-saml2coreincludeHEADERS \
+	uninstall-saml2mdincludeHEADERS \
+	uninstall-saml2profincludeHEADERS \
+	uninstall-samlbindincludeHEADERS uninstall-sigincludeHEADERS \
+	uninstall-utilincludeHEADERS
+
+
+install-exec-hook:
+	for la in $(lib_LTLIBRARIES) ; do rm -f $(DESTDIR)$(libdir)/$$la ; done
+
+dist-hook:
+	rm -rf `find $(distdir)/zlib -name .svn`
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/samlsign/Makefile.in b/samlsign/Makefile.in
new file mode 100644
index 0000000..f183c20
--- /dev/null
+++ b/samlsign/Makefile.in
@@ -0,0 +1,552 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+VPATH = @srcdir@
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+bin_PROGRAMS = samlsign$(EXEEXT)
+subdir = samlsign
+DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_create_pkgconfig_info.m4 \
+	$(top_srcdir)/m4/doxygen.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+am__installdirs = "$(DESTDIR)$(bindir)"
+PROGRAMS = $(bin_PROGRAMS)
+am_samlsign_OBJECTS = samlsign.$(OBJEXT)
+samlsign_OBJECTS = $(am_samlsign_OBJECTS)
+samlsign_DEPENDENCIES = $(top_builddir)/saml/libsaml.la
+DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
+depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
+am__depfiles_maybe = depfiles
+am__mv = mv -f
+CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+CXXLD = $(CXX)
+CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
+	$(LDFLAGS) -o $@
+SOURCES = $(samlsign_SOURCES)
+DIST_SOURCES = $(samlsign_SOURCES)
+ETAGS = etags
+CTAGS = ctags
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AR = @AR@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CXX = @CXX@
+CXXCPP = @CXXCPP@
+CXXDEPMODE = @CXXDEPMODE@
+CXXFLAGS = @CXXFLAGS@
+CXXTEST = @CXXTEST@
+CXXTESTFLAGS = @CXXTESTFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+DX_CONFIG = @DX_CONFIG@
+DX_DOCDIR = @DX_DOCDIR@
+DX_DOT = @DX_DOT@
+DX_DOXYGEN = @DX_DOXYGEN@
+DX_DVIPS = @DX_DVIPS@
+DX_EGREP = @DX_EGREP@
+DX_ENV = @DX_ENV@
+DX_FLAG_chi = @DX_FLAG_chi@
+DX_FLAG_chm = @DX_FLAG_chm@
+DX_FLAG_doc = @DX_FLAG_doc@
+DX_FLAG_dot = @DX_FLAG_dot@
+DX_FLAG_html = @DX_FLAG_html@
+DX_FLAG_man = @DX_FLAG_man@
+DX_FLAG_pdf = @DX_FLAG_pdf@
+DX_FLAG_ps = @DX_FLAG_ps@
+DX_FLAG_rtf = @DX_FLAG_rtf@
+DX_FLAG_xml = @DX_FLAG_xml@
+DX_HHC = @DX_HHC@
+DX_INCLUDE = @DX_INCLUDE@
+DX_LATEX = @DX_LATEX@
+DX_MAKEINDEX = @DX_MAKEINDEX@
+DX_PDFLATEX = @DX_PDFLATEX@
+DX_PERL = @DX_PERL@
+DX_PROJECT = @DX_PROJECT@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LOG4CPP_CONFIG = @LOG4CPP_CONFIG@
+LOG4SHIB_CONFIG = @LOG4SHIB_CONFIG@
+LTLIBOBJS = @LTLIBOBJS@
+MAKEINFO = @MAKEINFO@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PKG_CONFIG = @PKG_CONFIG@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+STRIP = @STRIP@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_CXX = @ac_ct_CXX@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+lt_ECHO = @lt_ECHO@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+pkgconfig_libdir = @pkgconfig_libdir@
+pkgconfig_libfile = @pkgconfig_libfile@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AUTOMAKE_OPTIONS = foreign
+samlsign_SOURCES = samlsign.cpp
+samlsign_LDADD = $(top_builddir)/saml/libsaml.la
+EXTRA_DIST = samlsign.vcxproj
+all: all-am
+
+.SUFFIXES:
+.SUFFIXES: .cpp .lo .o .obj
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign samlsign/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign samlsign/Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+install-binPROGRAMS: $(bin_PROGRAMS)
+	@$(NORMAL_INSTALL)
+	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
+	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+	for p in $$list; do echo "$$p $$p"; done | \
+	sed 's/$(EXEEXT)$$//' | \
+	while read p p1; do if test -f $$p || test -f $$p1; \
+	  then echo "$$p"; echo "$$p"; else :; fi; \
+	done | \
+	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
+	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
+	sed 'N;N;N;s,\n, ,g' | \
+	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
+	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
+	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
+	    else { print "f", $$3 "/" $$4, $$1; } } \
+	  END { for (d in files) print "f", d, files[d] }' | \
+	while read type dir files; do \
+	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
+	    test -z "$$files" || { \
+	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
+	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
+	    } \
+	; done
+
+uninstall-binPROGRAMS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+	files=`for p in $$list; do echo "$$p"; done | \
+	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
+	      -e 's/$$/$(EXEEXT)/' `; \
+	test -n "$$list" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(bindir)" && rm -f $$files
+
+clean-binPROGRAMS:
+	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
+	echo " rm -f" $$list; \
+	rm -f $$list || exit $$?; \
+	test -n "$(EXEEXT)" || exit 0; \
+	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
+	echo " rm -f" $$list; \
+	rm -f $$list
+samlsign$(EXEEXT): $(samlsign_OBJECTS) $(samlsign_DEPENDENCIES) 
+	@rm -f samlsign$(EXEEXT)
+	$(CXXLINK) $(samlsign_OBJECTS) $(samlsign_LDADD) $(LIBS)
+
+mostlyclean-compile:
+	-rm -f *.$(OBJEXT)
+
+distclean-compile:
+	-rm -f *.tab.c
+
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samlsign.Po@am__quote@
+
+.cpp.o:
+@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<
+
+.cpp.obj:
+@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
+
+.cpp.lo:
+@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+
+ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
+	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	mkid -fID $$unique
+tags: TAGS
+
+TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	set x; \
+	here=`pwd`; \
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: CTAGS
+CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: check-am
+all-am: Makefile $(PROGRAMS)
+installdirs:
+	for dir in "$(DESTDIR)$(bindir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+distclean-am: clean-am distclean-compile distclean-generic \
+	distclean-tags
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am:
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am: install-binPROGRAMS
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am: uninstall-binPROGRAMS
+
+.MAKE: install-am install-strip
+
+.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
+	clean-generic clean-libtool ctags distclean distclean-compile \
+	distclean-generic distclean-libtool distclean-tags distdir dvi \
+	dvi-am html html-am info info-am install install-am \
+	install-binPROGRAMS install-data install-data-am install-dvi \
+	install-dvi-am install-exec install-exec-am install-html \
+	install-html-am install-info install-info-am install-man \
+	install-pdf install-pdf-am install-ps install-ps-am \
+	install-strip installcheck installcheck-am installdirs \
+	maintainer-clean maintainer-clean-generic mostlyclean \
+	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
+	pdf pdf-am ps ps-am tags uninstall uninstall-am \
+	uninstall-binPROGRAMS
+
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/samltest/Makefile.in b/samltest/Makefile.in
new file mode 100644
index 0000000..9409f0a
--- /dev/null
+++ b/samltest/Makefile.in
@@ -0,0 +1,2072 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+
+VPATH = @srcdir@
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+@BUILD_UNITTEST_TRUE@bin_PROGRAMS = samltest$(EXEEXT)
+subdir = samltest
+DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
+	$(srcdir)/Makefile.in
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_create_pkgconfig_info.m4 \
+	$(top_srcdir)/m4/doxygen.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+am__installdirs = "$(DESTDIR)$(bindir)"
+PROGRAMS = $(bin_PROGRAMS)
+am__objects_1 = samltest-samltest.$(OBJEXT) \
+	samltest-SAMLArtifactCreationTest.$(OBJEXT) \
+	samltest-SAMLArtifactType0001Test.$(OBJEXT) \
+	samltest-SAMLArtifactType0002Test.$(OBJEXT) \
+	samltest-SAMLArtifactType0004Test.$(OBJEXT) \
+	samltest-ArtifactMapTest.$(OBJEXT) \
+	samltest-EncryptedAssertionTest.$(OBJEXT) \
+	samltest-SAML1AssertionTest.$(OBJEXT) \
+	samltest-SAML1RequestTest.$(OBJEXT) \
+	samltest-SAML1ResponseTest.$(OBJEXT) \
+	samltest-SAML2AssertionTest.$(OBJEXT) \
+	samltest-ExplicitKeyTrustEngineTest.$(OBJEXT) \
+	samltest-StaticPKIXTrustEngineTest.$(OBJEXT) \
+	samltest-ActionTest.$(OBJEXT) samltest-AdviceTest.$(OBJEXT) \
+	samltest-AssertionIDReferenceTest.$(OBJEXT) \
+	samltest-AssertionTest.$(OBJEXT) \
+	samltest-AttributeDesignatorTest.$(OBJEXT) \
+	samltest-AttributeStatementTest.$(OBJEXT) \
+	samltest-AttributeTest.$(OBJEXT) \
+	samltest-AudienceRestrictionConditionTest.$(OBJEXT) \
+	samltest-AudienceTest.$(OBJEXT) \
+	samltest-AuthenticationStatementTest.$(OBJEXT) \
+	samltest-SAML1ArtifactTest.$(OBJEXT) \
+	samltest-SAML1POSTTest.$(OBJEXT) \
+	samltest-SAML1PolicyTest.$(OBJEXT) \
+	samltest-Action20Test.$(OBJEXT) \
+	samltest-Advice20Test.$(OBJEXT) \
+	samltest-Artifact20Test.$(OBJEXT) \
+	samltest-ArtifactResolve20Test.$(OBJEXT) \
+	samltest-ArtifactResponse20Test.$(OBJEXT) \
+	samltest-Assertion20Test.$(OBJEXT) \
+	samltest-AssertionIDRef20Test.$(OBJEXT) \
+	samltest-AssertionIDRequest20Test.$(OBJEXT) \
+	samltest-AssertionURIRef20Test.$(OBJEXT) \
+	samltest-Attribute20Test.$(OBJEXT) \
+	samltest-AttributeQuery20Test.$(OBJEXT) \
+	samltest-AttributeStatement20Test.$(OBJEXT) \
+	samltest-Audience20Test.$(OBJEXT) \
+	samltest-AudienceRestriction20Test.$(OBJEXT) \
+	samltest-AuthenticatingAuthority20Test.$(OBJEXT) \
+	samltest-AuthnContext20Test.$(OBJEXT) \
+	samltest-AuthnContextClassRef20Test.$(OBJEXT) \
+	samltest-AuthnContextDeclRef20Test.$(OBJEXT) \
+	samltest-AuthnQuery20Test.$(OBJEXT) \
+	samltest-AuthnRequest20Test.$(OBJEXT) \
+	samltest-AuthnStatement20Test.$(OBJEXT) \
+	samltest-AuthzDecisionQuery20Test.$(OBJEXT) \
+	samltest-AuthzDecisionStatement20Test.$(OBJEXT) \
+	samltest-Conditions20Test.$(OBJEXT) \
+	samltest-Evidence20Test.$(OBJEXT) \
+	samltest-GetComplete20Test.$(OBJEXT) \
+	samltest-IDPEntry20Test.$(OBJEXT) \
+	samltest-IDPList20Test.$(OBJEXT) \
+	samltest-Issuer20Test.$(OBJEXT) \
+	samltest-KeyInfoConfirmationDataType20Test.$(OBJEXT) \
+	samltest-LogoutRequest20Test.$(OBJEXT) \
+	samltest-LogoutResponse20Test.$(OBJEXT) \
+	samltest-ManageNameIDRequest20Test.$(OBJEXT) \
+	samltest-ManageNameIDResponse20Test.$(OBJEXT) \
+	samltest-NameIDMappingRequest20Test.$(OBJEXT) \
+	samltest-NameIDMappingResponse20Test.$(OBJEXT) \
+	samltest-NameIDPolicy20Test.$(OBJEXT) \
+	samltest-NameID20Test.$(OBJEXT) \
+	samltest-NameIDType20Test.$(OBJEXT) \
+	samltest-NewEncryptedID20Test.$(OBJEXT) \
+	samltest-NewID20Test.$(OBJEXT) \
+	samltest-OneTimeUse20Test.$(OBJEXT) \
+	samltest-ProxyRestriction20Test.$(OBJEXT) \
+	samltest-RequesterID20Test.$(OBJEXT) \
+	samltest-RequestedAuthnContext20Test.$(OBJEXT) \
+	samltest-Response20Test.$(OBJEXT) \
+	samltest-Scoping20Test.$(OBJEXT) \
+	samltest-SessionIndex20Test.$(OBJEXT) \
+	samltest-Status20Test.$(OBJEXT) \
+	samltest-StatusCode20Test.$(OBJEXT) \
+	samltest-StatusDetail20Test.$(OBJEXT) \
+	samltest-StatusMessage20Test.$(OBJEXT) \
+	samltest-Subject20Test.$(OBJEXT) \
+	samltest-SubjectConfirmation20Test.$(OBJEXT) \
+	samltest-SubjectConfirmationData20Test.$(OBJEXT) \
+	samltest-SubjectLocality20Test.$(OBJEXT) \
+	samltest-Terminate20Test.$(OBJEXT) \
+	samltest-SAML2ArtifactTest.$(OBJEXT) \
+	samltest-SAML2POSTTest.$(OBJEXT) \
+	samltest-SAML2RedirectTest.$(OBJEXT) \
+	samltest-XMLMetadataProviderTest.$(OBJEXT) \
+	samltest-SAML2PolicyTest.$(OBJEXT)
+nodist_samltest_OBJECTS = $(am__objects_1)
+samltest_OBJECTS = $(nodist_samltest_OBJECTS)
+samltest_DEPENDENCIES = $(top_builddir)/saml/libsaml.la
+samltest_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(samltest_CXXFLAGS) \
+	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
+DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
+depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
+am__depfiles_maybe = depfiles
+am__mv = mv -f
+CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
+CXXLD = $(CXX)
+CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
+	$(LDFLAGS) -o $@
+SOURCES = $(nodist_samltest_SOURCES)
+DIST_SOURCES =
+HEADERS = $(noinst_HEADERS)
+ETAGS = etags
+CTAGS = ctags
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AR = @AR@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CXX = @CXX@
+CXXCPP = @CXXCPP@
+CXXDEPMODE = @CXXDEPMODE@
+CXXFLAGS = @CXXFLAGS@
+CXXTEST = @CXXTEST@
+CXXTESTFLAGS = @CXXTESTFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+DX_CONFIG = @DX_CONFIG@
+DX_DOCDIR = @DX_DOCDIR@
+DX_DOT = @DX_DOT@
+DX_DOXYGEN = @DX_DOXYGEN@
+DX_DVIPS = @DX_DVIPS@
+DX_EGREP = @DX_EGREP@
+DX_ENV = @DX_ENV@
+DX_FLAG_chi = @DX_FLAG_chi@
+DX_FLAG_chm = @DX_FLAG_chm@
+DX_FLAG_doc = @DX_FLAG_doc@
+DX_FLAG_dot = @DX_FLAG_dot@
+DX_FLAG_html = @DX_FLAG_html@
+DX_FLAG_man = @DX_FLAG_man@
+DX_FLAG_pdf = @DX_FLAG_pdf@
+DX_FLAG_ps = @DX_FLAG_ps@
+DX_FLAG_rtf = @DX_FLAG_rtf@
+DX_FLAG_xml = @DX_FLAG_xml@
+DX_HHC = @DX_HHC@
+DX_INCLUDE = @DX_INCLUDE@
+DX_LATEX = @DX_LATEX@
+DX_MAKEINDEX = @DX_MAKEINDEX@
+DX_PDFLATEX = @DX_PDFLATEX@
+DX_PERL = @DX_PERL@
+DX_PROJECT = @DX_PROJECT@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LOG4CPP_CONFIG = @LOG4CPP_CONFIG@
+LOG4SHIB_CONFIG = @LOG4SHIB_CONFIG@
+LTLIBOBJS = @LTLIBOBJS@
+MAKEINFO = @MAKEINFO@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PKG_CONFIG = @PKG_CONFIG@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+STRIP = @STRIP@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_CXX = @ac_ct_CXX@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+lt_ECHO = @lt_ECHO@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+pkgconfig_libdir = @pkgconfig_libdir@
+pkgconfig_libfile = @pkgconfig_libfile@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AUTOMAKE_OPTIONS = foreign
+@BUILD_UNITTEST_TRUE@samltest_CXXFLAGS = $(CXXFLAGS) $(CXXTESTFLAGS)
+samltest_h = \
+    samltest.h \
+    SAMLArtifactCreationTest.h \
+    SAMLArtifactType0001Test.h \
+    SAMLArtifactType0002Test.h \
+    SAMLArtifactType0004Test.h \
+    ArtifactMapTest.h \
+    encryption/EncryptedAssertionTest.h \
+    signature/SAML1AssertionTest.h \
+    signature/SAML1RequestTest.h \
+    signature/SAML1ResponseTest.h \
+    signature/SAML2AssertionTest.h \
+    security/ExplicitKeyTrustEngineTest.h \
+    security/StaticPKIXTrustEngineTest.h \
+    saml1/core/impl/ActionTest.h \
+    saml1/core/impl/AdviceTest.h \
+    saml1/core/impl/AssertionIDReferenceTest.h \
+    saml1/core/impl/AssertionTest.h \
+    saml1/core/impl/AttributeDesignatorTest.h \
+    saml1/core/impl/AttributeStatementTest.h \
+    saml1/core/impl/AttributeTest.h \
+    saml1/core/impl/AudienceRestrictionConditionTest.h \
+    saml1/core/impl/AudienceTest.h \
+    saml1/core/impl/AuthenticationStatementTest.h \
+    saml1/binding/SAML1ArtifactTest.h \
+    saml1/binding/SAML1POSTTest.h \
+    saml1/profile/SAML1PolicyTest.h \
+    saml2/core/impl/Action20Test.h \
+    saml2/core/impl/Advice20Test.h \
+    saml2/core/impl/Artifact20Test.h \
+    saml2/core/impl/ArtifactResolve20Test.h \
+    saml2/core/impl/ArtifactResponse20Test.h \
+    saml2/core/impl/Assertion20Test.h \
+    saml2/core/impl/AssertionIDRef20Test.h \
+    saml2/core/impl/AssertionIDRequest20Test.h \
+    saml2/core/impl/AssertionURIRef20Test.h \
+    saml2/core/impl/Attribute20Test.h \
+    saml2/core/impl/AttributeQuery20Test.h \
+    saml2/core/impl/AttributeStatement20Test.h \
+    saml2/core/impl/Audience20Test.h \
+    saml2/core/impl/AudienceRestriction20Test.h \
+    saml2/core/impl/AuthenticatingAuthority20Test.h \
+    saml2/core/impl/AuthnContext20Test.h \
+    saml2/core/impl/AuthnContextClassRef20Test.h \
+    saml2/core/impl/AuthnContextDeclRef20Test.h \
+    saml2/core/impl/AuthnQuery20Test.h \
+    saml2/core/impl/AuthnRequest20Test.h \
+    saml2/core/impl/AuthnStatement20Test.h \
+    saml2/core/impl/AuthzDecisionQuery20Test.h \
+    saml2/core/impl/AuthzDecisionStatement20Test.h \
+    saml2/core/impl/Conditions20Test.h \
+    saml2/core/impl/Evidence20Test.h \
+    saml2/core/impl/GetComplete20Test.h \
+    saml2/core/impl/IDPEntry20Test.h \
+    saml2/core/impl/IDPList20Test.h \
+    saml2/core/impl/Issuer20Test.h \
+    saml2/core/impl/KeyInfoConfirmationDataType20Test.h\
+    saml2/core/impl/LogoutRequest20Test.h \
+    saml2/core/impl/LogoutResponse20Test.h \
+    saml2/core/impl/ManageNameIDRequest20Test.h \
+    saml2/core/impl/ManageNameIDResponse20Test.h \
+    saml2/core/impl/NameIDMappingRequest20Test.h \
+    saml2/core/impl/NameIDMappingResponse20Test.h \
+    saml2/core/impl/NameIDPolicy20Test.h \
+    saml2/core/impl/NameID20Test.h \
+    saml2/core/impl/NameIDType20Test.h \
+    saml2/core/impl/NewEncryptedID20Test.h \
+    saml2/core/impl/NewID20Test.h \
+    saml2/core/impl/OneTimeUse20Test.h \
+    saml2/core/impl/ProxyRestriction20Test.h \
+    saml2/core/impl/RequesterID20Test.h \
+    saml2/core/impl/RequestedAuthnContext20Test.h \
+    saml2/core/impl/Response20Test.h \
+    saml2/core/impl/Scoping20Test.h \
+    saml2/core/impl/SessionIndex20Test.h \
+    saml2/core/impl/Status20Test.h \
+    saml2/core/impl/StatusCode20Test.h \
+    saml2/core/impl/StatusDetail20Test.h \
+    saml2/core/impl/StatusMessage20Test.h \
+    saml2/core/impl/Subject20Test.h\
+    saml2/core/impl/SubjectConfirmation20Test.h\
+    saml2/core/impl/SubjectConfirmationData20Test.h\
+    saml2/core/impl/SubjectLocality20Test.h\
+    saml2/core/impl/Terminate20Test.h \
+    saml2/binding/SAML2ArtifactTest.h \
+    saml2/binding/SAML2POSTTest.h \
+    saml2/binding/SAML2RedirectTest.h \
+    saml2/metadata/XMLMetadataProviderTest.h \
+    saml2/profile/SAML2PolicyTest.h
+
+noinst_HEADERS = \
+	binding.h \
+    internal.h \
+    signature/SAMLSignatureTestBase.h
+
+nodist_samltest_SOURCES = $(samltest_h:.h=.cpp)
+CLEANFILES = $(nodist_samltest_SOURCES)
+samltest_LDADD = $(top_builddir)/saml/libsaml.la
+EXTRA_DIST = samltest.vcxproj samltest.vcxproj.filters $(samltest_h) data
+all: all-am
+
+.SUFFIXES:
+.SUFFIXES: .cpp .lo .o .obj
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign samltest/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign samltest/Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+install-binPROGRAMS: $(bin_PROGRAMS)
+	@$(NORMAL_INSTALL)
+	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
+	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+	for p in $$list; do echo "$$p $$p"; done | \
+	sed 's/$(EXEEXT)$$//' | \
+	while read p p1; do if test -f $$p || test -f $$p1; \
+	  then echo "$$p"; echo "$$p"; else :; fi; \
+	done | \
+	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
+	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
+	sed 'N;N;N;s,\n, ,g' | \
+	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
+	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
+	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
+	    else { print "f", $$3 "/" $$4, $$1; } } \
+	  END { for (d in files) print "f", d, files[d] }' | \
+	while read type dir files; do \
+	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
+	    test -z "$$files" || { \
+	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
+	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
+	    } \
+	; done
+
+uninstall-binPROGRAMS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+	files=`for p in $$list; do echo "$$p"; done | \
+	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
+	      -e 's/$$/$(EXEEXT)/' `; \
+	test -n "$$list" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(bindir)" && rm -f $$files
+
+clean-binPROGRAMS:
+	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
+	echo " rm -f" $$list; \
+	rm -f $$list || exit $$?; \
+	test -n "$(EXEEXT)" || exit 0; \
+	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
+	echo " rm -f" $$list; \
+	rm -f $$list
+samltest$(EXEEXT): $(samltest_OBJECTS) $(samltest_DEPENDENCIES) 
+	@rm -f samltest$(EXEEXT)
+	$(samltest_LINK) $(samltest_OBJECTS) $(samltest_LDADD) $(LIBS)
+
+mostlyclean-compile:
+	-rm -f *.$(OBJEXT)
+
+distclean-compile:
+	-rm -f *.tab.c
+
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Action20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ActionTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Advice20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AdviceTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Artifact20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ArtifactMapTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ArtifactResolve20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ArtifactResponse20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Assertion20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AssertionIDRef20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AssertionIDReferenceTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AssertionIDRequest20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AssertionTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AssertionURIRef20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Attribute20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AttributeDesignatorTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AttributeQuery20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AttributeStatement20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AttributeStatementTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AttributeTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Audience20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AudienceRestriction20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AudienceRestrictionConditionTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AudienceTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthenticatingAuthority20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthenticationStatementTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthnContext20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthnContextClassRef20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthnContextDeclRef20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthnQuery20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthnRequest20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthnStatement20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthzDecisionQuery20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-AuthzDecisionStatement20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Conditions20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-EncryptedAssertionTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Evidence20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-GetComplete20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-IDPEntry20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-IDPList20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Issuer20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-LogoutRequest20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-LogoutResponse20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ManageNameIDRequest20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ManageNameIDResponse20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NameID20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NameIDMappingRequest20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NameIDMappingResponse20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NameIDPolicy20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NameIDType20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NewEncryptedID20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-NewID20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-OneTimeUse20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-ProxyRestriction20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-RequestedAuthnContext20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-RequesterID20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Response20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML1ArtifactTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML1AssertionTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML1POSTTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML1PolicyTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML1RequestTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML1ResponseTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML2ArtifactTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML2AssertionTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML2POSTTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML2PolicyTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAML2RedirectTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAMLArtifactCreationTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAMLArtifactType0001Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAMLArtifactType0002Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SAMLArtifactType0004Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Scoping20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SessionIndex20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Status20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-StatusCode20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-StatusDetail20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-StatusMessage20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Subject20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SubjectConfirmation20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SubjectConfirmationData20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-SubjectLocality20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-Terminate20Test.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-XMLMetadataProviderTest.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/samltest-samltest.Po@am__quote@
+
+.cpp.o:
+@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<
+
+.cpp.obj:
+@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
+
+.cpp.lo:
+@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<
+
+samltest-samltest.o: samltest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-samltest.o -MD -MP -MF $(DEPDIR)/samltest-samltest.Tpo -c -o samltest-samltest.o `test -f 'samltest.cpp' || echo '$(srcdir)/'`samltest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-samltest.Tpo $(DEPDIR)/samltest-samltest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='samltest.cpp' object='samltest-samltest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-samltest.o `test -f 'samltest.cpp' || echo '$(srcdir)/'`samltest.cpp
+
+samltest-samltest.obj: samltest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-samltest.obj -MD -MP -MF $(DEPDIR)/samltest-samltest.Tpo -c -o samltest-samltest.obj `if test -f 'samltest.cpp'; then $(CYGPATH_W) 'samltest.cpp'; else $(CYGPATH_W) '$(srcdir)/samltest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-samltest.Tpo $(DEPDIR)/samltest-samltest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='samltest.cpp' object='samltest-samltest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-samltest.obj `if test -f 'samltest.cpp'; then $(CYGPATH_W) 'samltest.cpp'; else $(CYGPATH_W) '$(srcdir)/samltest.cpp'; fi`
+
+samltest-SAMLArtifactCreationTest.o: SAMLArtifactCreationTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactCreationTest.o -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactCreationTest.Tpo -c -o samltest-SAMLArtifactCreationTest.o `test -f 'SAMLArtifactCreationTest.cpp' || echo '$(srcdir)/'`SAMLArtifactCreationTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactCreationTest.Tpo $(DEPDIR)/samltest-SAMLArtifactCreationTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactCreationTest.cpp' object='samltest-SAMLArtifactCreationTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactCreationTest.o `test -f 'SAMLArtifactCreationTest.cpp' || echo '$(srcdir)/'`SAMLArtifactCreationTest.cpp
+
+samltest-SAMLArtifactCreationTest.obj: SAMLArtifactCreationTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactCreationTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactCreationTest.Tpo -c -o samltest-SAMLArtifactCreationTest.obj `if test -f 'SAMLArtifactCreationTest.cpp'; then $(CYGPATH_W) 'SAMLArtifactCreationTest.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactCreationTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactCreationTest.Tpo $(DEPDIR)/samltest-SAMLArtifactCreationTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactCreationTest.cpp' object='samltest-SAMLArtifactCreationTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactCreationTest.obj `if test -f 'SAMLArtifactCreationTest.cpp'; then $(CYGPATH_W) 'SAMLArtifactCreationTest.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactCreationTest.cpp'; fi`
+
+samltest-SAMLArtifactType0001Test.o: SAMLArtifactType0001Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactType0001Test.o -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactType0001Test.Tpo -c -o samltest-SAMLArtifactType0001Test.o `test -f 'SAMLArtifactType0001Test.cpp' || echo '$(srcdir)/'`SAMLArtifactType0001Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactType0001Test.Tpo $(DEPDIR)/samltest-SAMLArtifactType0001Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactType0001Test.cpp' object='samltest-SAMLArtifactType0001Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactType0001Test.o `test -f 'SAMLArtifactType0001Test.cpp' || echo '$(srcdir)/'`SAMLArtifactType0001Test.cpp
+
+samltest-SAMLArtifactType0001Test.obj: SAMLArtifactType0001Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactType0001Test.obj -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactType0001Test.Tpo -c -o samltest-SAMLArtifactType0001Test.obj `if test -f 'SAMLArtifactType0001Test.cpp'; then $(CYGPATH_W) 'SAMLArtifactType0001Test.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactType0001Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactType0001Test.Tpo $(DEPDIR)/samltest-SAMLArtifactType0001Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactType0001Test.cpp' object='samltest-SAMLArtifactType0001Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactType0001Test.obj `if test -f 'SAMLArtifactType0001Test.cpp'; then $(CYGPATH_W) 'SAMLArtifactType0001Test.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactType0001Test.cpp'; fi`
+
+samltest-SAMLArtifactType0002Test.o: SAMLArtifactType0002Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactType0002Test.o -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactType0002Test.Tpo -c -o samltest-SAMLArtifactType0002Test.o `test -f 'SAMLArtifactType0002Test.cpp' || echo '$(srcdir)/'`SAMLArtifactType0002Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactType0002Test.Tpo $(DEPDIR)/samltest-SAMLArtifactType0002Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactType0002Test.cpp' object='samltest-SAMLArtifactType0002Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactType0002Test.o `test -f 'SAMLArtifactType0002Test.cpp' || echo '$(srcdir)/'`SAMLArtifactType0002Test.cpp
+
+samltest-SAMLArtifactType0002Test.obj: SAMLArtifactType0002Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactType0002Test.obj -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactType0002Test.Tpo -c -o samltest-SAMLArtifactType0002Test.obj `if test -f 'SAMLArtifactType0002Test.cpp'; then $(CYGPATH_W) 'SAMLArtifactType0002Test.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactType0002Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactType0002Test.Tpo $(DEPDIR)/samltest-SAMLArtifactType0002Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactType0002Test.cpp' object='samltest-SAMLArtifactType0002Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactType0002Test.obj `if test -f 'SAMLArtifactType0002Test.cpp'; then $(CYGPATH_W) 'SAMLArtifactType0002Test.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactType0002Test.cpp'; fi`
+
+samltest-SAMLArtifactType0004Test.o: SAMLArtifactType0004Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactType0004Test.o -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactType0004Test.Tpo -c -o samltest-SAMLArtifactType0004Test.o `test -f 'SAMLArtifactType0004Test.cpp' || echo '$(srcdir)/'`SAMLArtifactType0004Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactType0004Test.Tpo $(DEPDIR)/samltest-SAMLArtifactType0004Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactType0004Test.cpp' object='samltest-SAMLArtifactType0004Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactType0004Test.o `test -f 'SAMLArtifactType0004Test.cpp' || echo '$(srcdir)/'`SAMLArtifactType0004Test.cpp
+
+samltest-SAMLArtifactType0004Test.obj: SAMLArtifactType0004Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAMLArtifactType0004Test.obj -MD -MP -MF $(DEPDIR)/samltest-SAMLArtifactType0004Test.Tpo -c -o samltest-SAMLArtifactType0004Test.obj `if test -f 'SAMLArtifactType0004Test.cpp'; then $(CYGPATH_W) 'SAMLArtifactType0004Test.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactType0004Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAMLArtifactType0004Test.Tpo $(DEPDIR)/samltest-SAMLArtifactType0004Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='SAMLArtifactType0004Test.cpp' object='samltest-SAMLArtifactType0004Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAMLArtifactType0004Test.obj `if test -f 'SAMLArtifactType0004Test.cpp'; then $(CYGPATH_W) 'SAMLArtifactType0004Test.cpp'; else $(CYGPATH_W) '$(srcdir)/SAMLArtifactType0004Test.cpp'; fi`
+
+samltest-ArtifactMapTest.o: ArtifactMapTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ArtifactMapTest.o -MD -MP -MF $(DEPDIR)/samltest-ArtifactMapTest.Tpo -c -o samltest-ArtifactMapTest.o `test -f 'ArtifactMapTest.cpp' || echo '$(srcdir)/'`ArtifactMapTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ArtifactMapTest.Tpo $(DEPDIR)/samltest-ArtifactMapTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='ArtifactMapTest.cpp' object='samltest-ArtifactMapTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ArtifactMapTest.o `test -f 'ArtifactMapTest.cpp' || echo '$(srcdir)/'`ArtifactMapTest.cpp
+
+samltest-ArtifactMapTest.obj: ArtifactMapTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ArtifactMapTest.obj -MD -MP -MF $(DEPDIR)/samltest-ArtifactMapTest.Tpo -c -o samltest-ArtifactMapTest.obj `if test -f 'ArtifactMapTest.cpp'; then $(CYGPATH_W) 'ArtifactMapTest.cpp'; else $(CYGPATH_W) '$(srcdir)/ArtifactMapTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ArtifactMapTest.Tpo $(DEPDIR)/samltest-ArtifactMapTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='ArtifactMapTest.cpp' object='samltest-ArtifactMapTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ArtifactMapTest.obj `if test -f 'ArtifactMapTest.cpp'; then $(CYGPATH_W) 'ArtifactMapTest.cpp'; else $(CYGPATH_W) '$(srcdir)/ArtifactMapTest.cpp'; fi`
+
+samltest-EncryptedAssertionTest.o: encryption/EncryptedAssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-EncryptedAssertionTest.o -MD -MP -MF $(DEPDIR)/samltest-EncryptedAssertionTest.Tpo -c -o samltest-EncryptedAssertionTest.o `test -f 'encryption/EncryptedAssertionTest.cpp' || echo '$(srcdir)/'`encryption/EncryptedAssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-EncryptedAssertionTest.Tpo $(DEPDIR)/samltest-EncryptedAssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='encryption/EncryptedAssertionTest.cpp' object='samltest-EncryptedAssertionTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-EncryptedAssertionTest.o `test -f 'encryption/EncryptedAssertionTest.cpp' || echo '$(srcdir)/'`encryption/EncryptedAssertionTest.cpp
+
+samltest-EncryptedAssertionTest.obj: encryption/EncryptedAssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-EncryptedAssertionTest.obj -MD -MP -MF $(DEPDIR)/samltest-EncryptedAssertionTest.Tpo -c -o samltest-EncryptedAssertionTest.obj `if test -f 'encryption/EncryptedAssertionTest.cpp'; then $(CYGPATH_W) 'encryption/EncryptedAssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/encryption/EncryptedAssertionTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-EncryptedAssertionTest.Tpo $(DEPDIR)/samltest-EncryptedAssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='encryption/EncryptedAssertionTest.cpp' object='samltest-EncryptedAssertionTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-EncryptedAssertionTest.obj `if test -f 'encryption/EncryptedAssertionTest.cpp'; then $(CYGPATH_W) 'encryption/EncryptedAssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/encryption/EncryptedAssertionTest.cpp'; fi`
+
+samltest-SAML1AssertionTest.o: signature/SAML1AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1AssertionTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML1AssertionTest.Tpo -c -o samltest-SAML1AssertionTest.o `test -f 'signature/SAML1AssertionTest.cpp' || echo '$(srcdir)/'`signature/SAML1AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1AssertionTest.Tpo $(DEPDIR)/samltest-SAML1AssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML1AssertionTest.cpp' object='samltest-SAML1AssertionTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1AssertionTest.o `test -f 'signature/SAML1AssertionTest.cpp' || echo '$(srcdir)/'`signature/SAML1AssertionTest.cpp
+
+samltest-SAML1AssertionTest.obj: signature/SAML1AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1AssertionTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML1AssertionTest.Tpo -c -o samltest-SAML1AssertionTest.obj `if test -f 'signature/SAML1AssertionTest.cpp'; then $(CYGPATH_W) 'signature/SAML1AssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML1AssertionTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1AssertionTest.Tpo $(DEPDIR)/samltest-SAML1AssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML1AssertionTest.cpp' object='samltest-SAML1AssertionTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1AssertionTest.obj `if test -f 'signature/SAML1AssertionTest.cpp'; then $(CYGPATH_W) 'signature/SAML1AssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML1AssertionTest.cpp'; fi`
+
+samltest-SAML1RequestTest.o: signature/SAML1RequestTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1RequestTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML1RequestTest.Tpo -c -o samltest-SAML1RequestTest.o `test -f 'signature/SAML1RequestTest.cpp' || echo '$(srcdir)/'`signature/SAML1RequestTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1RequestTest.Tpo $(DEPDIR)/samltest-SAML1RequestTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML1RequestTest.cpp' object='samltest-SAML1RequestTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1RequestTest.o `test -f 'signature/SAML1RequestTest.cpp' || echo '$(srcdir)/'`signature/SAML1RequestTest.cpp
+
+samltest-SAML1RequestTest.obj: signature/SAML1RequestTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1RequestTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML1RequestTest.Tpo -c -o samltest-SAML1RequestTest.obj `if test -f 'signature/SAML1RequestTest.cpp'; then $(CYGPATH_W) 'signature/SAML1RequestTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML1RequestTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1RequestTest.Tpo $(DEPDIR)/samltest-SAML1RequestTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML1RequestTest.cpp' object='samltest-SAML1RequestTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1RequestTest.obj `if test -f 'signature/SAML1RequestTest.cpp'; then $(CYGPATH_W) 'signature/SAML1RequestTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML1RequestTest.cpp'; fi`
+
+samltest-SAML1ResponseTest.o: signature/SAML1ResponseTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1ResponseTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML1ResponseTest.Tpo -c -o samltest-SAML1ResponseTest.o `test -f 'signature/SAML1ResponseTest.cpp' || echo '$(srcdir)/'`signature/SAML1ResponseTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1ResponseTest.Tpo $(DEPDIR)/samltest-SAML1ResponseTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML1ResponseTest.cpp' object='samltest-SAML1ResponseTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1ResponseTest.o `test -f 'signature/SAML1ResponseTest.cpp' || echo '$(srcdir)/'`signature/SAML1ResponseTest.cpp
+
+samltest-SAML1ResponseTest.obj: signature/SAML1ResponseTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1ResponseTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML1ResponseTest.Tpo -c -o samltest-SAML1ResponseTest.obj `if test -f 'signature/SAML1ResponseTest.cpp'; then $(CYGPATH_W) 'signature/SAML1ResponseTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML1ResponseTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1ResponseTest.Tpo $(DEPDIR)/samltest-SAML1ResponseTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML1ResponseTest.cpp' object='samltest-SAML1ResponseTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1ResponseTest.obj `if test -f 'signature/SAML1ResponseTest.cpp'; then $(CYGPATH_W) 'signature/SAML1ResponseTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML1ResponseTest.cpp'; fi`
+
+samltest-SAML2AssertionTest.o: signature/SAML2AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2AssertionTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML2AssertionTest.Tpo -c -o samltest-SAML2AssertionTest.o `test -f 'signature/SAML2AssertionTest.cpp' || echo '$(srcdir)/'`signature/SAML2AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2AssertionTest.Tpo $(DEPDIR)/samltest-SAML2AssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML2AssertionTest.cpp' object='samltest-SAML2AssertionTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2AssertionTest.o `test -f 'signature/SAML2AssertionTest.cpp' || echo '$(srcdir)/'`signature/SAML2AssertionTest.cpp
+
+samltest-SAML2AssertionTest.obj: signature/SAML2AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2AssertionTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML2AssertionTest.Tpo -c -o samltest-SAML2AssertionTest.obj `if test -f 'signature/SAML2AssertionTest.cpp'; then $(CYGPATH_W) 'signature/SAML2AssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML2AssertionTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2AssertionTest.Tpo $(DEPDIR)/samltest-SAML2AssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='signature/SAML2AssertionTest.cpp' object='samltest-SAML2AssertionTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2AssertionTest.obj `if test -f 'signature/SAML2AssertionTest.cpp'; then $(CYGPATH_W) 'signature/SAML2AssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/signature/SAML2AssertionTest.cpp'; fi`
+
+samltest-ExplicitKeyTrustEngineTest.o: security/ExplicitKeyTrustEngineTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ExplicitKeyTrustEngineTest.o -MD -MP -MF $(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Tpo -c -o samltest-ExplicitKeyTrustEngineTest.o `test -f 'security/ExplicitKeyTrustEngineTest.cpp' || echo '$(srcdir)/'`security/ExplicitKeyTrustEngineTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Tpo $(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='security/ExplicitKeyTrustEngineTest.cpp' object='samltest-ExplicitKeyTrustEngineTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ExplicitKeyTrustEngineTest.o `test -f 'security/ExplicitKeyTrustEngineTest.cpp' || echo '$(srcdir)/'`security/ExplicitKeyTrustEngineTest.cpp
+
+samltest-ExplicitKeyTrustEngineTest.obj: security/ExplicitKeyTrustEngineTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ExplicitKeyTrustEngineTest.obj -MD -MP -MF $(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Tpo -c -o samltest-ExplicitKeyTrustEngineTest.obj `if test -f 'security/ExplicitKeyTrustEngineTest.cpp'; then $(CYGPATH_W) 'security/ExplicitKeyTrustEngineTest.cpp'; else $(CYGPATH_W) '$(srcdir)/security/ExplicitKeyTrustEngineTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Tpo $(DEPDIR)/samltest-ExplicitKeyTrustEngineTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='security/ExplicitKeyTrustEngineTest.cpp' object='samltest-ExplicitKeyTrustEngineTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ExplicitKeyTrustEngineTest.obj `if test -f 'security/ExplicitKeyTrustEngineTest.cpp'; then $(CYGPATH_W) 'security/ExplicitKeyTrustEngineTest.cpp'; else $(CYGPATH_W) '$(srcdir)/security/ExplicitKeyTrustEngineTest.cpp'; fi`
+
+samltest-StaticPKIXTrustEngineTest.o: security/StaticPKIXTrustEngineTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StaticPKIXTrustEngineTest.o -MD -MP -MF $(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Tpo -c -o samltest-StaticPKIXTrustEngineTest.o `test -f 'security/StaticPKIXTrustEngineTest.cpp' || echo '$(srcdir)/'`security/StaticPKIXTrustEngineTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Tpo $(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='security/StaticPKIXTrustEngineTest.cpp' object='samltest-StaticPKIXTrustEngineTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StaticPKIXTrustEngineTest.o `test -f 'security/StaticPKIXTrustEngineTest.cpp' || echo '$(srcdir)/'`security/StaticPKIXTrustEngineTest.cpp
+
+samltest-StaticPKIXTrustEngineTest.obj: security/StaticPKIXTrustEngineTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StaticPKIXTrustEngineTest.obj -MD -MP -MF $(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Tpo -c -o samltest-StaticPKIXTrustEngineTest.obj `if test -f 'security/StaticPKIXTrustEngineTest.cpp'; then $(CYGPATH_W) 'security/StaticPKIXTrustEngineTest.cpp'; else $(CYGPATH_W) '$(srcdir)/security/StaticPKIXTrustEngineTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Tpo $(DEPDIR)/samltest-StaticPKIXTrustEngineTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='security/StaticPKIXTrustEngineTest.cpp' object='samltest-StaticPKIXTrustEngineTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StaticPKIXTrustEngineTest.obj `if test -f 'security/StaticPKIXTrustEngineTest.cpp'; then $(CYGPATH_W) 'security/StaticPKIXTrustEngineTest.cpp'; else $(CYGPATH_W) '$(srcdir)/security/StaticPKIXTrustEngineTest.cpp'; fi`
+
+samltest-ActionTest.o: saml1/core/impl/ActionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ActionTest.o -MD -MP -MF $(DEPDIR)/samltest-ActionTest.Tpo -c -o samltest-ActionTest.o `test -f 'saml1/core/impl/ActionTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/ActionTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ActionTest.Tpo $(DEPDIR)/samltest-ActionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/ActionTest.cpp' object='samltest-ActionTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ActionTest.o `test -f 'saml1/core/impl/ActionTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/ActionTest.cpp
+
+samltest-ActionTest.obj: saml1/core/impl/ActionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ActionTest.obj -MD -MP -MF $(DEPDIR)/samltest-ActionTest.Tpo -c -o samltest-ActionTest.obj `if test -f 'saml1/core/impl/ActionTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/ActionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/ActionTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ActionTest.Tpo $(DEPDIR)/samltest-ActionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/ActionTest.cpp' object='samltest-ActionTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ActionTest.obj `if test -f 'saml1/core/impl/ActionTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/ActionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/ActionTest.cpp'; fi`
+
+samltest-AdviceTest.o: saml1/core/impl/AdviceTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AdviceTest.o -MD -MP -MF $(DEPDIR)/samltest-AdviceTest.Tpo -c -o samltest-AdviceTest.o `test -f 'saml1/core/impl/AdviceTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AdviceTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AdviceTest.Tpo $(DEPDIR)/samltest-AdviceTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AdviceTest.cpp' object='samltest-AdviceTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AdviceTest.o `test -f 'saml1/core/impl/AdviceTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AdviceTest.cpp
+
+samltest-AdviceTest.obj: saml1/core/impl/AdviceTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AdviceTest.obj -MD -MP -MF $(DEPDIR)/samltest-AdviceTest.Tpo -c -o samltest-AdviceTest.obj `if test -f 'saml1/core/impl/AdviceTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AdviceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AdviceTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AdviceTest.Tpo $(DEPDIR)/samltest-AdviceTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AdviceTest.cpp' object='samltest-AdviceTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AdviceTest.obj `if test -f 'saml1/core/impl/AdviceTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AdviceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AdviceTest.cpp'; fi`
+
+samltest-AssertionIDReferenceTest.o: saml1/core/impl/AssertionIDReferenceTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionIDReferenceTest.o -MD -MP -MF $(DEPDIR)/samltest-AssertionIDReferenceTest.Tpo -c -o samltest-AssertionIDReferenceTest.o `test -f 'saml1/core/impl/AssertionIDReferenceTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionIDReferenceTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionIDReferenceTest.Tpo $(DEPDIR)/samltest-AssertionIDReferenceTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AssertionIDReferenceTest.cpp' object='samltest-AssertionIDReferenceTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionIDReferenceTest.o `test -f 'saml1/core/impl/AssertionIDReferenceTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionIDReferenceTest.cpp
+
+samltest-AssertionIDReferenceTest.obj: saml1/core/impl/AssertionIDReferenceTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionIDReferenceTest.obj -MD -MP -MF $(DEPDIR)/samltest-AssertionIDReferenceTest.Tpo -c -o samltest-AssertionIDReferenceTest.obj `if test -f 'saml1/core/impl/AssertionIDReferenceTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AssertionIDReferenceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AssertionIDReferenceTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionIDReferenceTest.Tpo $(DEPDIR)/samltest-AssertionIDReferenceTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AssertionIDReferenceTest.cpp' object='samltest-AssertionIDReferenceTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionIDReferenceTest.obj `if test -f 'saml1/core/impl/AssertionIDReferenceTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AssertionIDReferenceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AssertionIDReferenceTest.cpp'; fi`
+
+samltest-AssertionTest.o: saml1/core/impl/AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionTest.o -MD -MP -MF $(DEPDIR)/samltest-AssertionTest.Tpo -c -o samltest-AssertionTest.o `test -f 'saml1/core/impl/AssertionTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionTest.Tpo $(DEPDIR)/samltest-AssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AssertionTest.cpp' object='samltest-AssertionTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionTest.o `test -f 'saml1/core/impl/AssertionTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AssertionTest.cpp
+
+samltest-AssertionTest.obj: saml1/core/impl/AssertionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionTest.obj -MD -MP -MF $(DEPDIR)/samltest-AssertionTest.Tpo -c -o samltest-AssertionTest.obj `if test -f 'saml1/core/impl/AssertionTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AssertionTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionTest.Tpo $(DEPDIR)/samltest-AssertionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AssertionTest.cpp' object='samltest-AssertionTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionTest.obj `if test -f 'saml1/core/impl/AssertionTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AssertionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AssertionTest.cpp'; fi`
+
+samltest-AttributeDesignatorTest.o: saml1/core/impl/AttributeDesignatorTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeDesignatorTest.o -MD -MP -MF $(DEPDIR)/samltest-AttributeDesignatorTest.Tpo -c -o samltest-AttributeDesignatorTest.o `test -f 'saml1/core/impl/AttributeDesignatorTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AttributeDesignatorTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeDesignatorTest.Tpo $(DEPDIR)/samltest-AttributeDesignatorTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AttributeDesignatorTest.cpp' object='samltest-AttributeDesignatorTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeDesignatorTest.o `test -f 'saml1/core/impl/AttributeDesignatorTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AttributeDesignatorTest.cpp
+
+samltest-AttributeDesignatorTest.obj: saml1/core/impl/AttributeDesignatorTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeDesignatorTest.obj -MD -MP -MF $(DEPDIR)/samltest-AttributeDesignatorTest.Tpo -c -o samltest-AttributeDesignatorTest.obj `if test -f 'saml1/core/impl/AttributeDesignatorTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AttributeDesignatorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AttributeDesignatorTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeDesignatorTest.Tpo $(DEPDIR)/samltest-AttributeDesignatorTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AttributeDesignatorTest.cpp' object='samltest-AttributeDesignatorTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeDesignatorTest.obj `if test -f 'saml1/core/impl/AttributeDesignatorTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AttributeDesignatorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AttributeDesignatorTest.cpp'; fi`
+
+samltest-AttributeStatementTest.o: saml1/core/impl/AttributeStatementTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeStatementTest.o -MD -MP -MF $(DEPDIR)/samltest-AttributeStatementTest.Tpo -c -o samltest-AttributeStatementTest.o `test -f 'saml1/core/impl/AttributeStatementTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AttributeStatementTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeStatementTest.Tpo $(DEPDIR)/samltest-AttributeStatementTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AttributeStatementTest.cpp' object='samltest-AttributeStatementTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeStatementTest.o `test -f 'saml1/core/impl/AttributeStatementTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AttributeStatementTest.cpp
+
+samltest-AttributeStatementTest.obj: saml1/core/impl/AttributeStatementTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeStatementTest.obj -MD -MP -MF $(DEPDIR)/samltest-AttributeStatementTest.Tpo -c -o samltest-AttributeStatementTest.obj `if test -f 'saml1/core/impl/AttributeStatementTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AttributeStatementTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AttributeStatementTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeStatementTest.Tpo $(DEPDIR)/samltest-AttributeStatementTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AttributeStatementTest.cpp' object='samltest-AttributeStatementTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeStatementTest.obj `if test -f 'saml1/core/impl/AttributeStatementTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AttributeStatementTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AttributeStatementTest.cpp'; fi`
+
+samltest-AttributeTest.o: saml1/core/impl/AttributeTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeTest.o -MD -MP -MF $(DEPDIR)/samltest-AttributeTest.Tpo -c -o samltest-AttributeTest.o `test -f 'saml1/core/impl/AttributeTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AttributeTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeTest.Tpo $(DEPDIR)/samltest-AttributeTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AttributeTest.cpp' object='samltest-AttributeTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeTest.o `test -f 'saml1/core/impl/AttributeTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AttributeTest.cpp
+
+samltest-AttributeTest.obj: saml1/core/impl/AttributeTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeTest.obj -MD -MP -MF $(DEPDIR)/samltest-AttributeTest.Tpo -c -o samltest-AttributeTest.obj `if test -f 'saml1/core/impl/AttributeTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AttributeTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AttributeTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeTest.Tpo $(DEPDIR)/samltest-AttributeTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AttributeTest.cpp' object='samltest-AttributeTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeTest.obj `if test -f 'saml1/core/impl/AttributeTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AttributeTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AttributeTest.cpp'; fi`
+
+samltest-AudienceRestrictionConditionTest.o: saml1/core/impl/AudienceRestrictionConditionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AudienceRestrictionConditionTest.o -MD -MP -MF $(DEPDIR)/samltest-AudienceRestrictionConditionTest.Tpo -c -o samltest-AudienceRestrictionConditionTest.o `test -f 'saml1/core/impl/AudienceRestrictionConditionTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AudienceRestrictionConditionTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AudienceRestrictionConditionTest.Tpo $(DEPDIR)/samltest-AudienceRestrictionConditionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AudienceRestrictionConditionTest.cpp' object='samltest-AudienceRestrictionConditionTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AudienceRestrictionConditionTest.o `test -f 'saml1/core/impl/AudienceRestrictionConditionTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AudienceRestrictionConditionTest.cpp
+
+samltest-AudienceRestrictionConditionTest.obj: saml1/core/impl/AudienceRestrictionConditionTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AudienceRestrictionConditionTest.obj -MD -MP -MF $(DEPDIR)/samltest-AudienceRestrictionConditionTest.Tpo -c -o samltest-AudienceRestrictionConditionTest.obj `if test -f 'saml1/core/impl/AudienceRestrictionConditionTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AudienceRestrictionConditionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AudienceRestrictionConditionTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AudienceRestrictionConditionTest.Tpo $(DEPDIR)/samltest-AudienceRestrictionConditionTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AudienceRestrictionConditionTest.cpp' object='samltest-AudienceRestrictionConditionTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AudienceRestrictionConditionTest.obj `if test -f 'saml1/core/impl/AudienceRestrictionConditionTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AudienceRestrictionConditionTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AudienceRestrictionConditionTest.cpp'; fi`
+
+samltest-AudienceTest.o: saml1/core/impl/AudienceTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AudienceTest.o -MD -MP -MF $(DEPDIR)/samltest-AudienceTest.Tpo -c -o samltest-AudienceTest.o `test -f 'saml1/core/impl/AudienceTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AudienceTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AudienceTest.Tpo $(DEPDIR)/samltest-AudienceTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AudienceTest.cpp' object='samltest-AudienceTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AudienceTest.o `test -f 'saml1/core/impl/AudienceTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AudienceTest.cpp
+
+samltest-AudienceTest.obj: saml1/core/impl/AudienceTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AudienceTest.obj -MD -MP -MF $(DEPDIR)/samltest-AudienceTest.Tpo -c -o samltest-AudienceTest.obj `if test -f 'saml1/core/impl/AudienceTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AudienceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AudienceTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AudienceTest.Tpo $(DEPDIR)/samltest-AudienceTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AudienceTest.cpp' object='samltest-AudienceTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AudienceTest.obj `if test -f 'saml1/core/impl/AudienceTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AudienceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AudienceTest.cpp'; fi`
+
+samltest-AuthenticationStatementTest.o: saml1/core/impl/AuthenticationStatementTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthenticationStatementTest.o -MD -MP -MF $(DEPDIR)/samltest-AuthenticationStatementTest.Tpo -c -o samltest-AuthenticationStatementTest.o `test -f 'saml1/core/impl/AuthenticationStatementTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AuthenticationStatementTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthenticationStatementTest.Tpo $(DEPDIR)/samltest-AuthenticationStatementTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AuthenticationStatementTest.cpp' object='samltest-AuthenticationStatementTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthenticationStatementTest.o `test -f 'saml1/core/impl/AuthenticationStatementTest.cpp' || echo '$(srcdir)/'`saml1/core/impl/AuthenticationStatementTest.cpp
+
+samltest-AuthenticationStatementTest.obj: saml1/core/impl/AuthenticationStatementTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthenticationStatementTest.obj -MD -MP -MF $(DEPDIR)/samltest-AuthenticationStatementTest.Tpo -c -o samltest-AuthenticationStatementTest.obj `if test -f 'saml1/core/impl/AuthenticationStatementTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AuthenticationStatementTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AuthenticationStatementTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthenticationStatementTest.Tpo $(DEPDIR)/samltest-AuthenticationStatementTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/core/impl/AuthenticationStatementTest.cpp' object='samltest-AuthenticationStatementTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthenticationStatementTest.obj `if test -f 'saml1/core/impl/AuthenticationStatementTest.cpp'; then $(CYGPATH_W) 'saml1/core/impl/AuthenticationStatementTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/core/impl/AuthenticationStatementTest.cpp'; fi`
+
+samltest-SAML1ArtifactTest.o: saml1/binding/SAML1ArtifactTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1ArtifactTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML1ArtifactTest.Tpo -c -o samltest-SAML1ArtifactTest.o `test -f 'saml1/binding/SAML1ArtifactTest.cpp' || echo '$(srcdir)/'`saml1/binding/SAML1ArtifactTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1ArtifactTest.Tpo $(DEPDIR)/samltest-SAML1ArtifactTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/SAML1ArtifactTest.cpp' object='samltest-SAML1ArtifactTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1ArtifactTest.o `test -f 'saml1/binding/SAML1ArtifactTest.cpp' || echo '$(srcdir)/'`saml1/binding/SAML1ArtifactTest.cpp
+
+samltest-SAML1ArtifactTest.obj: saml1/binding/SAML1ArtifactTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1ArtifactTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML1ArtifactTest.Tpo -c -o samltest-SAML1ArtifactTest.obj `if test -f 'saml1/binding/SAML1ArtifactTest.cpp'; then $(CYGPATH_W) 'saml1/binding/SAML1ArtifactTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/binding/SAML1ArtifactTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1ArtifactTest.Tpo $(DEPDIR)/samltest-SAML1ArtifactTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/SAML1ArtifactTest.cpp' object='samltest-SAML1ArtifactTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1ArtifactTest.obj `if test -f 'saml1/binding/SAML1ArtifactTest.cpp'; then $(CYGPATH_W) 'saml1/binding/SAML1ArtifactTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/binding/SAML1ArtifactTest.cpp'; fi`
+
+samltest-SAML1POSTTest.o: saml1/binding/SAML1POSTTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1POSTTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML1POSTTest.Tpo -c -o samltest-SAML1POSTTest.o `test -f 'saml1/binding/SAML1POSTTest.cpp' || echo '$(srcdir)/'`saml1/binding/SAML1POSTTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1POSTTest.Tpo $(DEPDIR)/samltest-SAML1POSTTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/SAML1POSTTest.cpp' object='samltest-SAML1POSTTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1POSTTest.o `test -f 'saml1/binding/SAML1POSTTest.cpp' || echo '$(srcdir)/'`saml1/binding/SAML1POSTTest.cpp
+
+samltest-SAML1POSTTest.obj: saml1/binding/SAML1POSTTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1POSTTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML1POSTTest.Tpo -c -o samltest-SAML1POSTTest.obj `if test -f 'saml1/binding/SAML1POSTTest.cpp'; then $(CYGPATH_W) 'saml1/binding/SAML1POSTTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/binding/SAML1POSTTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1POSTTest.Tpo $(DEPDIR)/samltest-SAML1POSTTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/binding/SAML1POSTTest.cpp' object='samltest-SAML1POSTTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1POSTTest.obj `if test -f 'saml1/binding/SAML1POSTTest.cpp'; then $(CYGPATH_W) 'saml1/binding/SAML1POSTTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/binding/SAML1POSTTest.cpp'; fi`
+
+samltest-SAML1PolicyTest.o: saml1/profile/SAML1PolicyTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1PolicyTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML1PolicyTest.Tpo -c -o samltest-SAML1PolicyTest.o `test -f 'saml1/profile/SAML1PolicyTest.cpp' || echo '$(srcdir)/'`saml1/profile/SAML1PolicyTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1PolicyTest.Tpo $(DEPDIR)/samltest-SAML1PolicyTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/profile/SAML1PolicyTest.cpp' object='samltest-SAML1PolicyTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1PolicyTest.o `test -f 'saml1/profile/SAML1PolicyTest.cpp' || echo '$(srcdir)/'`saml1/profile/SAML1PolicyTest.cpp
+
+samltest-SAML1PolicyTest.obj: saml1/profile/SAML1PolicyTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML1PolicyTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML1PolicyTest.Tpo -c -o samltest-SAML1PolicyTest.obj `if test -f 'saml1/profile/SAML1PolicyTest.cpp'; then $(CYGPATH_W) 'saml1/profile/SAML1PolicyTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/profile/SAML1PolicyTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML1PolicyTest.Tpo $(DEPDIR)/samltest-SAML1PolicyTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml1/profile/SAML1PolicyTest.cpp' object='samltest-SAML1PolicyTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML1PolicyTest.obj `if test -f 'saml1/profile/SAML1PolicyTest.cpp'; then $(CYGPATH_W) 'saml1/profile/SAML1PolicyTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml1/profile/SAML1PolicyTest.cpp'; fi`
+
+samltest-Action20Test.o: saml2/core/impl/Action20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Action20Test.o -MD -MP -MF $(DEPDIR)/samltest-Action20Test.Tpo -c -o samltest-Action20Test.o `test -f 'saml2/core/impl/Action20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Action20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Action20Test.Tpo $(DEPDIR)/samltest-Action20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Action20Test.cpp' object='samltest-Action20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Action20Test.o `test -f 'saml2/core/impl/Action20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Action20Test.cpp
+
+samltest-Action20Test.obj: saml2/core/impl/Action20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Action20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Action20Test.Tpo -c -o samltest-Action20Test.obj `if test -f 'saml2/core/impl/Action20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Action20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Action20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Action20Test.Tpo $(DEPDIR)/samltest-Action20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Action20Test.cpp' object='samltest-Action20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Action20Test.obj `if test -f 'saml2/core/impl/Action20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Action20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Action20Test.cpp'; fi`
+
+samltest-Advice20Test.o: saml2/core/impl/Advice20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Advice20Test.o -MD -MP -MF $(DEPDIR)/samltest-Advice20Test.Tpo -c -o samltest-Advice20Test.o `test -f 'saml2/core/impl/Advice20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Advice20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Advice20Test.Tpo $(DEPDIR)/samltest-Advice20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Advice20Test.cpp' object='samltest-Advice20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Advice20Test.o `test -f 'saml2/core/impl/Advice20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Advice20Test.cpp
+
+samltest-Advice20Test.obj: saml2/core/impl/Advice20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Advice20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Advice20Test.Tpo -c -o samltest-Advice20Test.obj `if test -f 'saml2/core/impl/Advice20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Advice20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Advice20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Advice20Test.Tpo $(DEPDIR)/samltest-Advice20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Advice20Test.cpp' object='samltest-Advice20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Advice20Test.obj `if test -f 'saml2/core/impl/Advice20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Advice20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Advice20Test.cpp'; fi`
+
+samltest-Artifact20Test.o: saml2/core/impl/Artifact20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Artifact20Test.o -MD -MP -MF $(DEPDIR)/samltest-Artifact20Test.Tpo -c -o samltest-Artifact20Test.o `test -f 'saml2/core/impl/Artifact20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Artifact20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Artifact20Test.Tpo $(DEPDIR)/samltest-Artifact20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Artifact20Test.cpp' object='samltest-Artifact20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Artifact20Test.o `test -f 'saml2/core/impl/Artifact20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Artifact20Test.cpp
+
+samltest-Artifact20Test.obj: saml2/core/impl/Artifact20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Artifact20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Artifact20Test.Tpo -c -o samltest-Artifact20Test.obj `if test -f 'saml2/core/impl/Artifact20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Artifact20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Artifact20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Artifact20Test.Tpo $(DEPDIR)/samltest-Artifact20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Artifact20Test.cpp' object='samltest-Artifact20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Artifact20Test.obj `if test -f 'saml2/core/impl/Artifact20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Artifact20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Artifact20Test.cpp'; fi`
+
+samltest-ArtifactResolve20Test.o: saml2/core/impl/ArtifactResolve20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ArtifactResolve20Test.o -MD -MP -MF $(DEPDIR)/samltest-ArtifactResolve20Test.Tpo -c -o samltest-ArtifactResolve20Test.o `test -f 'saml2/core/impl/ArtifactResolve20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ArtifactResolve20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ArtifactResolve20Test.Tpo $(DEPDIR)/samltest-ArtifactResolve20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ArtifactResolve20Test.cpp' object='samltest-ArtifactResolve20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ArtifactResolve20Test.o `test -f 'saml2/core/impl/ArtifactResolve20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ArtifactResolve20Test.cpp
+
+samltest-ArtifactResolve20Test.obj: saml2/core/impl/ArtifactResolve20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ArtifactResolve20Test.obj -MD -MP -MF $(DEPDIR)/samltest-ArtifactResolve20Test.Tpo -c -o samltest-ArtifactResolve20Test.obj `if test -f 'saml2/core/impl/ArtifactResolve20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ArtifactResolve20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ArtifactResolve20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ArtifactResolve20Test.Tpo $(DEPDIR)/samltest-ArtifactResolve20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ArtifactResolve20Test.cpp' object='samltest-ArtifactResolve20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ArtifactResolve20Test.obj `if test -f 'saml2/core/impl/ArtifactResolve20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ArtifactResolve20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ArtifactResolve20Test.cpp'; fi`
+
+samltest-ArtifactResponse20Test.o: saml2/core/impl/ArtifactResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ArtifactResponse20Test.o -MD -MP -MF $(DEPDIR)/samltest-ArtifactResponse20Test.Tpo -c -o samltest-ArtifactResponse20Test.o `test -f 'saml2/core/impl/ArtifactResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ArtifactResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ArtifactResponse20Test.Tpo $(DEPDIR)/samltest-ArtifactResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ArtifactResponse20Test.cpp' object='samltest-ArtifactResponse20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ArtifactResponse20Test.o `test -f 'saml2/core/impl/ArtifactResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ArtifactResponse20Test.cpp
+
+samltest-ArtifactResponse20Test.obj: saml2/core/impl/ArtifactResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ArtifactResponse20Test.obj -MD -MP -MF $(DEPDIR)/samltest-ArtifactResponse20Test.Tpo -c -o samltest-ArtifactResponse20Test.obj `if test -f 'saml2/core/impl/ArtifactResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ArtifactResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ArtifactResponse20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ArtifactResponse20Test.Tpo $(DEPDIR)/samltest-ArtifactResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ArtifactResponse20Test.cpp' object='samltest-ArtifactResponse20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ArtifactResponse20Test.obj `if test -f 'saml2/core/impl/ArtifactResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ArtifactResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ArtifactResponse20Test.cpp'; fi`
+
+samltest-Assertion20Test.o: saml2/core/impl/Assertion20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Assertion20Test.o -MD -MP -MF $(DEPDIR)/samltest-Assertion20Test.Tpo -c -o samltest-Assertion20Test.o `test -f 'saml2/core/impl/Assertion20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertion20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Assertion20Test.Tpo $(DEPDIR)/samltest-Assertion20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Assertion20Test.cpp' object='samltest-Assertion20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Assertion20Test.o `test -f 'saml2/core/impl/Assertion20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Assertion20Test.cpp
+
+samltest-Assertion20Test.obj: saml2/core/impl/Assertion20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Assertion20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Assertion20Test.Tpo -c -o samltest-Assertion20Test.obj `if test -f 'saml2/core/impl/Assertion20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Assertion20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Assertion20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Assertion20Test.Tpo $(DEPDIR)/samltest-Assertion20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Assertion20Test.cpp' object='samltest-Assertion20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Assertion20Test.obj `if test -f 'saml2/core/impl/Assertion20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Assertion20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Assertion20Test.cpp'; fi`
+
+samltest-AssertionIDRef20Test.o: saml2/core/impl/AssertionIDRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionIDRef20Test.o -MD -MP -MF $(DEPDIR)/samltest-AssertionIDRef20Test.Tpo -c -o samltest-AssertionIDRef20Test.o `test -f 'saml2/core/impl/AssertionIDRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AssertionIDRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionIDRef20Test.Tpo $(DEPDIR)/samltest-AssertionIDRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AssertionIDRef20Test.cpp' object='samltest-AssertionIDRef20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionIDRef20Test.o `test -f 'saml2/core/impl/AssertionIDRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AssertionIDRef20Test.cpp
+
+samltest-AssertionIDRef20Test.obj: saml2/core/impl/AssertionIDRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionIDRef20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AssertionIDRef20Test.Tpo -c -o samltest-AssertionIDRef20Test.obj `if test -f 'saml2/core/impl/AssertionIDRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AssertionIDRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AssertionIDRef20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionIDRef20Test.Tpo $(DEPDIR)/samltest-AssertionIDRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AssertionIDRef20Test.cpp' object='samltest-AssertionIDRef20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionIDRef20Test.obj `if test -f 'saml2/core/impl/AssertionIDRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AssertionIDRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AssertionIDRef20Test.cpp'; fi`
+
+samltest-AssertionIDRequest20Test.o: saml2/core/impl/AssertionIDRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionIDRequest20Test.o -MD -MP -MF $(DEPDIR)/samltest-AssertionIDRequest20Test.Tpo -c -o samltest-AssertionIDRequest20Test.o `test -f 'saml2/core/impl/AssertionIDRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AssertionIDRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionIDRequest20Test.Tpo $(DEPDIR)/samltest-AssertionIDRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AssertionIDRequest20Test.cpp' object='samltest-AssertionIDRequest20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionIDRequest20Test.o `test -f 'saml2/core/impl/AssertionIDRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AssertionIDRequest20Test.cpp
+
+samltest-AssertionIDRequest20Test.obj: saml2/core/impl/AssertionIDRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionIDRequest20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AssertionIDRequest20Test.Tpo -c -o samltest-AssertionIDRequest20Test.obj `if test -f 'saml2/core/impl/AssertionIDRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AssertionIDRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AssertionIDRequest20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionIDRequest20Test.Tpo $(DEPDIR)/samltest-AssertionIDRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AssertionIDRequest20Test.cpp' object='samltest-AssertionIDRequest20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionIDRequest20Test.obj `if test -f 'saml2/core/impl/AssertionIDRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AssertionIDRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AssertionIDRequest20Test.cpp'; fi`
+
+samltest-AssertionURIRef20Test.o: saml2/core/impl/AssertionURIRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionURIRef20Test.o -MD -MP -MF $(DEPDIR)/samltest-AssertionURIRef20Test.Tpo -c -o samltest-AssertionURIRef20Test.o `test -f 'saml2/core/impl/AssertionURIRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AssertionURIRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionURIRef20Test.Tpo $(DEPDIR)/samltest-AssertionURIRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AssertionURIRef20Test.cpp' object='samltest-AssertionURIRef20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionURIRef20Test.o `test -f 'saml2/core/impl/AssertionURIRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AssertionURIRef20Test.cpp
+
+samltest-AssertionURIRef20Test.obj: saml2/core/impl/AssertionURIRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AssertionURIRef20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AssertionURIRef20Test.Tpo -c -o samltest-AssertionURIRef20Test.obj `if test -f 'saml2/core/impl/AssertionURIRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AssertionURIRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AssertionURIRef20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AssertionURIRef20Test.Tpo $(DEPDIR)/samltest-AssertionURIRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AssertionURIRef20Test.cpp' object='samltest-AssertionURIRef20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AssertionURIRef20Test.obj `if test -f 'saml2/core/impl/AssertionURIRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AssertionURIRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AssertionURIRef20Test.cpp'; fi`
+
+samltest-Attribute20Test.o: saml2/core/impl/Attribute20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Attribute20Test.o -MD -MP -MF $(DEPDIR)/samltest-Attribute20Test.Tpo -c -o samltest-Attribute20Test.o `test -f 'saml2/core/impl/Attribute20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Attribute20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Attribute20Test.Tpo $(DEPDIR)/samltest-Attribute20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Attribute20Test.cpp' object='samltest-Attribute20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Attribute20Test.o `test -f 'saml2/core/impl/Attribute20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Attribute20Test.cpp
+
+samltest-Attribute20Test.obj: saml2/core/impl/Attribute20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Attribute20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Attribute20Test.Tpo -c -o samltest-Attribute20Test.obj `if test -f 'saml2/core/impl/Attribute20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Attribute20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Attribute20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Attribute20Test.Tpo $(DEPDIR)/samltest-Attribute20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Attribute20Test.cpp' object='samltest-Attribute20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Attribute20Test.obj `if test -f 'saml2/core/impl/Attribute20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Attribute20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Attribute20Test.cpp'; fi`
+
+samltest-AttributeQuery20Test.o: saml2/core/impl/AttributeQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeQuery20Test.o -MD -MP -MF $(DEPDIR)/samltest-AttributeQuery20Test.Tpo -c -o samltest-AttributeQuery20Test.o `test -f 'saml2/core/impl/AttributeQuery20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AttributeQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeQuery20Test.Tpo $(DEPDIR)/samltest-AttributeQuery20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AttributeQuery20Test.cpp' object='samltest-AttributeQuery20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeQuery20Test.o `test -f 'saml2/core/impl/AttributeQuery20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AttributeQuery20Test.cpp
+
+samltest-AttributeQuery20Test.obj: saml2/core/impl/AttributeQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeQuery20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AttributeQuery20Test.Tpo -c -o samltest-AttributeQuery20Test.obj `if test -f 'saml2/core/impl/AttributeQuery20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AttributeQuery20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AttributeQuery20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeQuery20Test.Tpo $(DEPDIR)/samltest-AttributeQuery20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AttributeQuery20Test.cpp' object='samltest-AttributeQuery20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeQuery20Test.obj `if test -f 'saml2/core/impl/AttributeQuery20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AttributeQuery20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AttributeQuery20Test.cpp'; fi`
+
+samltest-AttributeStatement20Test.o: saml2/core/impl/AttributeStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeStatement20Test.o -MD -MP -MF $(DEPDIR)/samltest-AttributeStatement20Test.Tpo -c -o samltest-AttributeStatement20Test.o `test -f 'saml2/core/impl/AttributeStatement20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AttributeStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeStatement20Test.Tpo $(DEPDIR)/samltest-AttributeStatement20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AttributeStatement20Test.cpp' object='samltest-AttributeStatement20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeStatement20Test.o `test -f 'saml2/core/impl/AttributeStatement20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AttributeStatement20Test.cpp
+
+samltest-AttributeStatement20Test.obj: saml2/core/impl/AttributeStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AttributeStatement20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AttributeStatement20Test.Tpo -c -o samltest-AttributeStatement20Test.obj `if test -f 'saml2/core/impl/AttributeStatement20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AttributeStatement20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AttributeStatement20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AttributeStatement20Test.Tpo $(DEPDIR)/samltest-AttributeStatement20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AttributeStatement20Test.cpp' object='samltest-AttributeStatement20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AttributeStatement20Test.obj `if test -f 'saml2/core/impl/AttributeStatement20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AttributeStatement20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AttributeStatement20Test.cpp'; fi`
+
+samltest-Audience20Test.o: saml2/core/impl/Audience20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Audience20Test.o -MD -MP -MF $(DEPDIR)/samltest-Audience20Test.Tpo -c -o samltest-Audience20Test.o `test -f 'saml2/core/impl/Audience20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Audience20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Audience20Test.Tpo $(DEPDIR)/samltest-Audience20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Audience20Test.cpp' object='samltest-Audience20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Audience20Test.o `test -f 'saml2/core/impl/Audience20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Audience20Test.cpp
+
+samltest-Audience20Test.obj: saml2/core/impl/Audience20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Audience20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Audience20Test.Tpo -c -o samltest-Audience20Test.obj `if test -f 'saml2/core/impl/Audience20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Audience20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Audience20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Audience20Test.Tpo $(DEPDIR)/samltest-Audience20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Audience20Test.cpp' object='samltest-Audience20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Audience20Test.obj `if test -f 'saml2/core/impl/Audience20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Audience20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Audience20Test.cpp'; fi`
+
+samltest-AudienceRestriction20Test.o: saml2/core/impl/AudienceRestriction20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AudienceRestriction20Test.o -MD -MP -MF $(DEPDIR)/samltest-AudienceRestriction20Test.Tpo -c -o samltest-AudienceRestriction20Test.o `test -f 'saml2/core/impl/AudienceRestriction20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AudienceRestriction20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AudienceRestriction20Test.Tpo $(DEPDIR)/samltest-AudienceRestriction20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AudienceRestriction20Test.cpp' object='samltest-AudienceRestriction20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AudienceRestriction20Test.o `test -f 'saml2/core/impl/AudienceRestriction20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AudienceRestriction20Test.cpp
+
+samltest-AudienceRestriction20Test.obj: saml2/core/impl/AudienceRestriction20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AudienceRestriction20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AudienceRestriction20Test.Tpo -c -o samltest-AudienceRestriction20Test.obj `if test -f 'saml2/core/impl/AudienceRestriction20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AudienceRestriction20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AudienceRestriction20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AudienceRestriction20Test.Tpo $(DEPDIR)/samltest-AudienceRestriction20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AudienceRestriction20Test.cpp' object='samltest-AudienceRestriction20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AudienceRestriction20Test.obj `if test -f 'saml2/core/impl/AudienceRestriction20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AudienceRestriction20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AudienceRestriction20Test.cpp'; fi`
+
+samltest-AuthenticatingAuthority20Test.o: saml2/core/impl/AuthenticatingAuthority20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthenticatingAuthority20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthenticatingAuthority20Test.Tpo -c -o samltest-AuthenticatingAuthority20Test.o `test -f 'saml2/core/impl/AuthenticatingAuthority20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthenticatingAuthority20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthenticatingAuthority20Test.Tpo $(DEPDIR)/samltest-AuthenticatingAuthority20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthenticatingAuthority20Test.cpp' object='samltest-AuthenticatingAuthority20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthenticatingAuthority20Test.o `test -f 'saml2/core/impl/AuthenticatingAuthority20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthenticatingAuthority20Test.cpp
+
+samltest-AuthenticatingAuthority20Test.obj: saml2/core/impl/AuthenticatingAuthority20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthenticatingAuthority20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthenticatingAuthority20Test.Tpo -c -o samltest-AuthenticatingAuthority20Test.obj `if test -f 'saml2/core/impl/AuthenticatingAuthority20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthenticatingAuthority20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthenticatingAuthority20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthenticatingAuthority20Test.Tpo $(DEPDIR)/samltest-AuthenticatingAuthority20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthenticatingAuthority20Test.cpp' object='samltest-AuthenticatingAuthority20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthenticatingAuthority20Test.obj `if test -f 'saml2/core/impl/AuthenticatingAuthority20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthenticatingAuthority20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthenticatingAuthority20Test.cpp'; fi`
+
+samltest-AuthnContext20Test.o: saml2/core/impl/AuthnContext20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnContext20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthnContext20Test.Tpo -c -o samltest-AuthnContext20Test.o `test -f 'saml2/core/impl/AuthnContext20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnContext20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnContext20Test.Tpo $(DEPDIR)/samltest-AuthnContext20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnContext20Test.cpp' object='samltest-AuthnContext20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnContext20Test.o `test -f 'saml2/core/impl/AuthnContext20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnContext20Test.cpp
+
+samltest-AuthnContext20Test.obj: saml2/core/impl/AuthnContext20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnContext20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthnContext20Test.Tpo -c -o samltest-AuthnContext20Test.obj `if test -f 'saml2/core/impl/AuthnContext20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnContext20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnContext20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnContext20Test.Tpo $(DEPDIR)/samltest-AuthnContext20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnContext20Test.cpp' object='samltest-AuthnContext20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnContext20Test.obj `if test -f 'saml2/core/impl/AuthnContext20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnContext20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnContext20Test.cpp'; fi`
+
+samltest-AuthnContextClassRef20Test.o: saml2/core/impl/AuthnContextClassRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnContextClassRef20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthnContextClassRef20Test.Tpo -c -o samltest-AuthnContextClassRef20Test.o `test -f 'saml2/core/impl/AuthnContextClassRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnContextClassRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnContextClassRef20Test.Tpo $(DEPDIR)/samltest-AuthnContextClassRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnContextClassRef20Test.cpp' object='samltest-AuthnContextClassRef20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnContextClassRef20Test.o `test -f 'saml2/core/impl/AuthnContextClassRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnContextClassRef20Test.cpp
+
+samltest-AuthnContextClassRef20Test.obj: saml2/core/impl/AuthnContextClassRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnContextClassRef20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthnContextClassRef20Test.Tpo -c -o samltest-AuthnContextClassRef20Test.obj `if test -f 'saml2/core/impl/AuthnContextClassRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnContextClassRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnContextClassRef20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnContextClassRef20Test.Tpo $(DEPDIR)/samltest-AuthnContextClassRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnContextClassRef20Test.cpp' object='samltest-AuthnContextClassRef20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnContextClassRef20Test.obj `if test -f 'saml2/core/impl/AuthnContextClassRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnContextClassRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnContextClassRef20Test.cpp'; fi`
+
+samltest-AuthnContextDeclRef20Test.o: saml2/core/impl/AuthnContextDeclRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnContextDeclRef20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthnContextDeclRef20Test.Tpo -c -o samltest-AuthnContextDeclRef20Test.o `test -f 'saml2/core/impl/AuthnContextDeclRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnContextDeclRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnContextDeclRef20Test.Tpo $(DEPDIR)/samltest-AuthnContextDeclRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnContextDeclRef20Test.cpp' object='samltest-AuthnContextDeclRef20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnContextDeclRef20Test.o `test -f 'saml2/core/impl/AuthnContextDeclRef20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnContextDeclRef20Test.cpp
+
+samltest-AuthnContextDeclRef20Test.obj: saml2/core/impl/AuthnContextDeclRef20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnContextDeclRef20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthnContextDeclRef20Test.Tpo -c -o samltest-AuthnContextDeclRef20Test.obj `if test -f 'saml2/core/impl/AuthnContextDeclRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnContextDeclRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnContextDeclRef20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnContextDeclRef20Test.Tpo $(DEPDIR)/samltest-AuthnContextDeclRef20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnContextDeclRef20Test.cpp' object='samltest-AuthnContextDeclRef20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnContextDeclRef20Test.obj `if test -f 'saml2/core/impl/AuthnContextDeclRef20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnContextDeclRef20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnContextDeclRef20Test.cpp'; fi`
+
+samltest-AuthnQuery20Test.o: saml2/core/impl/AuthnQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnQuery20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthnQuery20Test.Tpo -c -o samltest-AuthnQuery20Test.o `test -f 'saml2/core/impl/AuthnQuery20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnQuery20Test.Tpo $(DEPDIR)/samltest-AuthnQuery20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnQuery20Test.cpp' object='samltest-AuthnQuery20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnQuery20Test.o `test -f 'saml2/core/impl/AuthnQuery20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnQuery20Test.cpp
+
+samltest-AuthnQuery20Test.obj: saml2/core/impl/AuthnQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnQuery20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthnQuery20Test.Tpo -c -o samltest-AuthnQuery20Test.obj `if test -f 'saml2/core/impl/AuthnQuery20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnQuery20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnQuery20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnQuery20Test.Tpo $(DEPDIR)/samltest-AuthnQuery20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnQuery20Test.cpp' object='samltest-AuthnQuery20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnQuery20Test.obj `if test -f 'saml2/core/impl/AuthnQuery20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnQuery20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnQuery20Test.cpp'; fi`
+
+samltest-AuthnRequest20Test.o: saml2/core/impl/AuthnRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnRequest20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthnRequest20Test.Tpo -c -o samltest-AuthnRequest20Test.o `test -f 'saml2/core/impl/AuthnRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnRequest20Test.Tpo $(DEPDIR)/samltest-AuthnRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnRequest20Test.cpp' object='samltest-AuthnRequest20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnRequest20Test.o `test -f 'saml2/core/impl/AuthnRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnRequest20Test.cpp
+
+samltest-AuthnRequest20Test.obj: saml2/core/impl/AuthnRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnRequest20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthnRequest20Test.Tpo -c -o samltest-AuthnRequest20Test.obj `if test -f 'saml2/core/impl/AuthnRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnRequest20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnRequest20Test.Tpo $(DEPDIR)/samltest-AuthnRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnRequest20Test.cpp' object='samltest-AuthnRequest20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnRequest20Test.obj `if test -f 'saml2/core/impl/AuthnRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnRequest20Test.cpp'; fi`
+
+samltest-AuthnStatement20Test.o: saml2/core/impl/AuthnStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnStatement20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthnStatement20Test.Tpo -c -o samltest-AuthnStatement20Test.o `test -f 'saml2/core/impl/AuthnStatement20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnStatement20Test.Tpo $(DEPDIR)/samltest-AuthnStatement20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnStatement20Test.cpp' object='samltest-AuthnStatement20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnStatement20Test.o `test -f 'saml2/core/impl/AuthnStatement20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthnStatement20Test.cpp
+
+samltest-AuthnStatement20Test.obj: saml2/core/impl/AuthnStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthnStatement20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthnStatement20Test.Tpo -c -o samltest-AuthnStatement20Test.obj `if test -f 'saml2/core/impl/AuthnStatement20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnStatement20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnStatement20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthnStatement20Test.Tpo $(DEPDIR)/samltest-AuthnStatement20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthnStatement20Test.cpp' object='samltest-AuthnStatement20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthnStatement20Test.obj `if test -f 'saml2/core/impl/AuthnStatement20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthnStatement20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthnStatement20Test.cpp'; fi`
+
+samltest-AuthzDecisionQuery20Test.o: saml2/core/impl/AuthzDecisionQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthzDecisionQuery20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthzDecisionQuery20Test.Tpo -c -o samltest-AuthzDecisionQuery20Test.o `test -f 'saml2/core/impl/AuthzDecisionQuery20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthzDecisionQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthzDecisionQuery20Test.Tpo $(DEPDIR)/samltest-AuthzDecisionQuery20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthzDecisionQuery20Test.cpp' object='samltest-AuthzDecisionQuery20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthzDecisionQuery20Test.o `test -f 'saml2/core/impl/AuthzDecisionQuery20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthzDecisionQuery20Test.cpp
+
+samltest-AuthzDecisionQuery20Test.obj: saml2/core/impl/AuthzDecisionQuery20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthzDecisionQuery20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthzDecisionQuery20Test.Tpo -c -o samltest-AuthzDecisionQuery20Test.obj `if test -f 'saml2/core/impl/AuthzDecisionQuery20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthzDecisionQuery20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthzDecisionQuery20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthzDecisionQuery20Test.Tpo $(DEPDIR)/samltest-AuthzDecisionQuery20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthzDecisionQuery20Test.cpp' object='samltest-AuthzDecisionQuery20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthzDecisionQuery20Test.obj `if test -f 'saml2/core/impl/AuthzDecisionQuery20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthzDecisionQuery20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthzDecisionQuery20Test.cpp'; fi`
+
+samltest-AuthzDecisionStatement20Test.o: saml2/core/impl/AuthzDecisionStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthzDecisionStatement20Test.o -MD -MP -MF $(DEPDIR)/samltest-AuthzDecisionStatement20Test.Tpo -c -o samltest-AuthzDecisionStatement20Test.o `test -f 'saml2/core/impl/AuthzDecisionStatement20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthzDecisionStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthzDecisionStatement20Test.Tpo $(DEPDIR)/samltest-AuthzDecisionStatement20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthzDecisionStatement20Test.cpp' object='samltest-AuthzDecisionStatement20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthzDecisionStatement20Test.o `test -f 'saml2/core/impl/AuthzDecisionStatement20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/AuthzDecisionStatement20Test.cpp
+
+samltest-AuthzDecisionStatement20Test.obj: saml2/core/impl/AuthzDecisionStatement20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-AuthzDecisionStatement20Test.obj -MD -MP -MF $(DEPDIR)/samltest-AuthzDecisionStatement20Test.Tpo -c -o samltest-AuthzDecisionStatement20Test.obj `if test -f 'saml2/core/impl/AuthzDecisionStatement20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthzDecisionStatement20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthzDecisionStatement20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-AuthzDecisionStatement20Test.Tpo $(DEPDIR)/samltest-AuthzDecisionStatement20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/AuthzDecisionStatement20Test.cpp' object='samltest-AuthzDecisionStatement20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-AuthzDecisionStatement20Test.obj `if test -f 'saml2/core/impl/AuthzDecisionStatement20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/AuthzDecisionStatement20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/AuthzDecisionStatement20Test.cpp'; fi`
+
+samltest-Conditions20Test.o: saml2/core/impl/Conditions20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Conditions20Test.o -MD -MP -MF $(DEPDIR)/samltest-Conditions20Test.Tpo -c -o samltest-Conditions20Test.o `test -f 'saml2/core/impl/Conditions20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Conditions20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Conditions20Test.Tpo $(DEPDIR)/samltest-Conditions20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Conditions20Test.cpp' object='samltest-Conditions20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Conditions20Test.o `test -f 'saml2/core/impl/Conditions20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Conditions20Test.cpp
+
+samltest-Conditions20Test.obj: saml2/core/impl/Conditions20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Conditions20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Conditions20Test.Tpo -c -o samltest-Conditions20Test.obj `if test -f 'saml2/core/impl/Conditions20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Conditions20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Conditions20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Conditions20Test.Tpo $(DEPDIR)/samltest-Conditions20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Conditions20Test.cpp' object='samltest-Conditions20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Conditions20Test.obj `if test -f 'saml2/core/impl/Conditions20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Conditions20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Conditions20Test.cpp'; fi`
+
+samltest-Evidence20Test.o: saml2/core/impl/Evidence20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Evidence20Test.o -MD -MP -MF $(DEPDIR)/samltest-Evidence20Test.Tpo -c -o samltest-Evidence20Test.o `test -f 'saml2/core/impl/Evidence20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Evidence20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Evidence20Test.Tpo $(DEPDIR)/samltest-Evidence20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Evidence20Test.cpp' object='samltest-Evidence20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Evidence20Test.o `test -f 'saml2/core/impl/Evidence20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Evidence20Test.cpp
+
+samltest-Evidence20Test.obj: saml2/core/impl/Evidence20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Evidence20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Evidence20Test.Tpo -c -o samltest-Evidence20Test.obj `if test -f 'saml2/core/impl/Evidence20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Evidence20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Evidence20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Evidence20Test.Tpo $(DEPDIR)/samltest-Evidence20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Evidence20Test.cpp' object='samltest-Evidence20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Evidence20Test.obj `if test -f 'saml2/core/impl/Evidence20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Evidence20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Evidence20Test.cpp'; fi`
+
+samltest-GetComplete20Test.o: saml2/core/impl/GetComplete20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-GetComplete20Test.o -MD -MP -MF $(DEPDIR)/samltest-GetComplete20Test.Tpo -c -o samltest-GetComplete20Test.o `test -f 'saml2/core/impl/GetComplete20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/GetComplete20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-GetComplete20Test.Tpo $(DEPDIR)/samltest-GetComplete20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/GetComplete20Test.cpp' object='samltest-GetComplete20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-GetComplete20Test.o `test -f 'saml2/core/impl/GetComplete20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/GetComplete20Test.cpp
+
+samltest-GetComplete20Test.obj: saml2/core/impl/GetComplete20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-GetComplete20Test.obj -MD -MP -MF $(DEPDIR)/samltest-GetComplete20Test.Tpo -c -o samltest-GetComplete20Test.obj `if test -f 'saml2/core/impl/GetComplete20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/GetComplete20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/GetComplete20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-GetComplete20Test.Tpo $(DEPDIR)/samltest-GetComplete20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/GetComplete20Test.cpp' object='samltest-GetComplete20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-GetComplete20Test.obj `if test -f 'saml2/core/impl/GetComplete20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/GetComplete20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/GetComplete20Test.cpp'; fi`
+
+samltest-IDPEntry20Test.o: saml2/core/impl/IDPEntry20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-IDPEntry20Test.o -MD -MP -MF $(DEPDIR)/samltest-IDPEntry20Test.Tpo -c -o samltest-IDPEntry20Test.o `test -f 'saml2/core/impl/IDPEntry20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/IDPEntry20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-IDPEntry20Test.Tpo $(DEPDIR)/samltest-IDPEntry20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/IDPEntry20Test.cpp' object='samltest-IDPEntry20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-IDPEntry20Test.o `test -f 'saml2/core/impl/IDPEntry20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/IDPEntry20Test.cpp
+
+samltest-IDPEntry20Test.obj: saml2/core/impl/IDPEntry20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-IDPEntry20Test.obj -MD -MP -MF $(DEPDIR)/samltest-IDPEntry20Test.Tpo -c -o samltest-IDPEntry20Test.obj `if test -f 'saml2/core/impl/IDPEntry20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/IDPEntry20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/IDPEntry20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-IDPEntry20Test.Tpo $(DEPDIR)/samltest-IDPEntry20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/IDPEntry20Test.cpp' object='samltest-IDPEntry20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-IDPEntry20Test.obj `if test -f 'saml2/core/impl/IDPEntry20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/IDPEntry20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/IDPEntry20Test.cpp'; fi`
+
+samltest-IDPList20Test.o: saml2/core/impl/IDPList20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-IDPList20Test.o -MD -MP -MF $(DEPDIR)/samltest-IDPList20Test.Tpo -c -o samltest-IDPList20Test.o `test -f 'saml2/core/impl/IDPList20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/IDPList20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-IDPList20Test.Tpo $(DEPDIR)/samltest-IDPList20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/IDPList20Test.cpp' object='samltest-IDPList20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-IDPList20Test.o `test -f 'saml2/core/impl/IDPList20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/IDPList20Test.cpp
+
+samltest-IDPList20Test.obj: saml2/core/impl/IDPList20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-IDPList20Test.obj -MD -MP -MF $(DEPDIR)/samltest-IDPList20Test.Tpo -c -o samltest-IDPList20Test.obj `if test -f 'saml2/core/impl/IDPList20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/IDPList20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/IDPList20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-IDPList20Test.Tpo $(DEPDIR)/samltest-IDPList20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/IDPList20Test.cpp' object='samltest-IDPList20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-IDPList20Test.obj `if test -f 'saml2/core/impl/IDPList20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/IDPList20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/IDPList20Test.cpp'; fi`
+
+samltest-Issuer20Test.o: saml2/core/impl/Issuer20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Issuer20Test.o -MD -MP -MF $(DEPDIR)/samltest-Issuer20Test.Tpo -c -o samltest-Issuer20Test.o `test -f 'saml2/core/impl/Issuer20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Issuer20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Issuer20Test.Tpo $(DEPDIR)/samltest-Issuer20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Issuer20Test.cpp' object='samltest-Issuer20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Issuer20Test.o `test -f 'saml2/core/impl/Issuer20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Issuer20Test.cpp
+
+samltest-Issuer20Test.obj: saml2/core/impl/Issuer20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Issuer20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Issuer20Test.Tpo -c -o samltest-Issuer20Test.obj `if test -f 'saml2/core/impl/Issuer20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Issuer20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Issuer20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Issuer20Test.Tpo $(DEPDIR)/samltest-Issuer20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Issuer20Test.cpp' object='samltest-Issuer20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Issuer20Test.obj `if test -f 'saml2/core/impl/Issuer20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Issuer20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Issuer20Test.cpp'; fi`
+
+samltest-KeyInfoConfirmationDataType20Test.o: saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-KeyInfoConfirmationDataType20Test.o -MD -MP -MF $(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Tpo -c -o samltest-KeyInfoConfirmationDataType20Test.o `test -f 'saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Tpo $(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp' object='samltest-KeyInfoConfirmationDataType20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-KeyInfoConfirmationDataType20Test.o `test -f 'saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp
+
+samltest-KeyInfoConfirmationDataType20Test.obj: saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-KeyInfoConfirmationDataType20Test.obj -MD -MP -MF $(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Tpo -c -o samltest-KeyInfoConfirmationDataType20Test.obj `if test -f 'saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Tpo $(DEPDIR)/samltest-KeyInfoConfirmationDataType20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp' object='samltest-KeyInfoConfirmationDataType20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-KeyInfoConfirmationDataType20Test.obj `if test -f 'saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/KeyInfoConfirmationDataType20Test.cpp'; fi`
+
+samltest-LogoutRequest20Test.o: saml2/core/impl/LogoutRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-LogoutRequest20Test.o -MD -MP -MF $(DEPDIR)/samltest-LogoutRequest20Test.Tpo -c -o samltest-LogoutRequest20Test.o `test -f 'saml2/core/impl/LogoutRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/LogoutRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-LogoutRequest20Test.Tpo $(DEPDIR)/samltest-LogoutRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/LogoutRequest20Test.cpp' object='samltest-LogoutRequest20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-LogoutRequest20Test.o `test -f 'saml2/core/impl/LogoutRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/LogoutRequest20Test.cpp
+
+samltest-LogoutRequest20Test.obj: saml2/core/impl/LogoutRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-LogoutRequest20Test.obj -MD -MP -MF $(DEPDIR)/samltest-LogoutRequest20Test.Tpo -c -o samltest-LogoutRequest20Test.obj `if test -f 'saml2/core/impl/LogoutRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/LogoutRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/LogoutRequest20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-LogoutRequest20Test.Tpo $(DEPDIR)/samltest-LogoutRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/LogoutRequest20Test.cpp' object='samltest-LogoutRequest20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-LogoutRequest20Test.obj `if test -f 'saml2/core/impl/LogoutRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/LogoutRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/LogoutRequest20Test.cpp'; fi`
+
+samltest-LogoutResponse20Test.o: saml2/core/impl/LogoutResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-LogoutResponse20Test.o -MD -MP -MF $(DEPDIR)/samltest-LogoutResponse20Test.Tpo -c -o samltest-LogoutResponse20Test.o `test -f 'saml2/core/impl/LogoutResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/LogoutResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-LogoutResponse20Test.Tpo $(DEPDIR)/samltest-LogoutResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/LogoutResponse20Test.cpp' object='samltest-LogoutResponse20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-LogoutResponse20Test.o `test -f 'saml2/core/impl/LogoutResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/LogoutResponse20Test.cpp
+
+samltest-LogoutResponse20Test.obj: saml2/core/impl/LogoutResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-LogoutResponse20Test.obj -MD -MP -MF $(DEPDIR)/samltest-LogoutResponse20Test.Tpo -c -o samltest-LogoutResponse20Test.obj `if test -f 'saml2/core/impl/LogoutResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/LogoutResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/LogoutResponse20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-LogoutResponse20Test.Tpo $(DEPDIR)/samltest-LogoutResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/LogoutResponse20Test.cpp' object='samltest-LogoutResponse20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-LogoutResponse20Test.obj `if test -f 'saml2/core/impl/LogoutResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/LogoutResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/LogoutResponse20Test.cpp'; fi`
+
+samltest-ManageNameIDRequest20Test.o: saml2/core/impl/ManageNameIDRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ManageNameIDRequest20Test.o -MD -MP -MF $(DEPDIR)/samltest-ManageNameIDRequest20Test.Tpo -c -o samltest-ManageNameIDRequest20Test.o `test -f 'saml2/core/impl/ManageNameIDRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ManageNameIDRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ManageNameIDRequest20Test.Tpo $(DEPDIR)/samltest-ManageNameIDRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ManageNameIDRequest20Test.cpp' object='samltest-ManageNameIDRequest20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ManageNameIDRequest20Test.o `test -f 'saml2/core/impl/ManageNameIDRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ManageNameIDRequest20Test.cpp
+
+samltest-ManageNameIDRequest20Test.obj: saml2/core/impl/ManageNameIDRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ManageNameIDRequest20Test.obj -MD -MP -MF $(DEPDIR)/samltest-ManageNameIDRequest20Test.Tpo -c -o samltest-ManageNameIDRequest20Test.obj `if test -f 'saml2/core/impl/ManageNameIDRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ManageNameIDRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ManageNameIDRequest20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ManageNameIDRequest20Test.Tpo $(DEPDIR)/samltest-ManageNameIDRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ManageNameIDRequest20Test.cpp' object='samltest-ManageNameIDRequest20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ManageNameIDRequest20Test.obj `if test -f 'saml2/core/impl/ManageNameIDRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ManageNameIDRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ManageNameIDRequest20Test.cpp'; fi`
+
+samltest-ManageNameIDResponse20Test.o: saml2/core/impl/ManageNameIDResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ManageNameIDResponse20Test.o -MD -MP -MF $(DEPDIR)/samltest-ManageNameIDResponse20Test.Tpo -c -o samltest-ManageNameIDResponse20Test.o `test -f 'saml2/core/impl/ManageNameIDResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ManageNameIDResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ManageNameIDResponse20Test.Tpo $(DEPDIR)/samltest-ManageNameIDResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ManageNameIDResponse20Test.cpp' object='samltest-ManageNameIDResponse20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ManageNameIDResponse20Test.o `test -f 'saml2/core/impl/ManageNameIDResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ManageNameIDResponse20Test.cpp
+
+samltest-ManageNameIDResponse20Test.obj: saml2/core/impl/ManageNameIDResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ManageNameIDResponse20Test.obj -MD -MP -MF $(DEPDIR)/samltest-ManageNameIDResponse20Test.Tpo -c -o samltest-ManageNameIDResponse20Test.obj `if test -f 'saml2/core/impl/ManageNameIDResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ManageNameIDResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ManageNameIDResponse20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ManageNameIDResponse20Test.Tpo $(DEPDIR)/samltest-ManageNameIDResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ManageNameIDResponse20Test.cpp' object='samltest-ManageNameIDResponse20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ManageNameIDResponse20Test.obj `if test -f 'saml2/core/impl/ManageNameIDResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ManageNameIDResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ManageNameIDResponse20Test.cpp'; fi`
+
+samltest-NameIDMappingRequest20Test.o: saml2/core/impl/NameIDMappingRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDMappingRequest20Test.o -MD -MP -MF $(DEPDIR)/samltest-NameIDMappingRequest20Test.Tpo -c -o samltest-NameIDMappingRequest20Test.o `test -f 'saml2/core/impl/NameIDMappingRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDMappingRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDMappingRequest20Test.Tpo $(DEPDIR)/samltest-NameIDMappingRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDMappingRequest20Test.cpp' object='samltest-NameIDMappingRequest20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDMappingRequest20Test.o `test -f 'saml2/core/impl/NameIDMappingRequest20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDMappingRequest20Test.cpp
+
+samltest-NameIDMappingRequest20Test.obj: saml2/core/impl/NameIDMappingRequest20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDMappingRequest20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NameIDMappingRequest20Test.Tpo -c -o samltest-NameIDMappingRequest20Test.obj `if test -f 'saml2/core/impl/NameIDMappingRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDMappingRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDMappingRequest20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDMappingRequest20Test.Tpo $(DEPDIR)/samltest-NameIDMappingRequest20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDMappingRequest20Test.cpp' object='samltest-NameIDMappingRequest20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDMappingRequest20Test.obj `if test -f 'saml2/core/impl/NameIDMappingRequest20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDMappingRequest20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDMappingRequest20Test.cpp'; fi`
+
+samltest-NameIDMappingResponse20Test.o: saml2/core/impl/NameIDMappingResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDMappingResponse20Test.o -MD -MP -MF $(DEPDIR)/samltest-NameIDMappingResponse20Test.Tpo -c -o samltest-NameIDMappingResponse20Test.o `test -f 'saml2/core/impl/NameIDMappingResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDMappingResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDMappingResponse20Test.Tpo $(DEPDIR)/samltest-NameIDMappingResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDMappingResponse20Test.cpp' object='samltest-NameIDMappingResponse20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDMappingResponse20Test.o `test -f 'saml2/core/impl/NameIDMappingResponse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDMappingResponse20Test.cpp
+
+samltest-NameIDMappingResponse20Test.obj: saml2/core/impl/NameIDMappingResponse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDMappingResponse20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NameIDMappingResponse20Test.Tpo -c -o samltest-NameIDMappingResponse20Test.obj `if test -f 'saml2/core/impl/NameIDMappingResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDMappingResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDMappingResponse20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDMappingResponse20Test.Tpo $(DEPDIR)/samltest-NameIDMappingResponse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDMappingResponse20Test.cpp' object='samltest-NameIDMappingResponse20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDMappingResponse20Test.obj `if test -f 'saml2/core/impl/NameIDMappingResponse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDMappingResponse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDMappingResponse20Test.cpp'; fi`
+
+samltest-NameIDPolicy20Test.o: saml2/core/impl/NameIDPolicy20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDPolicy20Test.o -MD -MP -MF $(DEPDIR)/samltest-NameIDPolicy20Test.Tpo -c -o samltest-NameIDPolicy20Test.o `test -f 'saml2/core/impl/NameIDPolicy20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDPolicy20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDPolicy20Test.Tpo $(DEPDIR)/samltest-NameIDPolicy20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDPolicy20Test.cpp' object='samltest-NameIDPolicy20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDPolicy20Test.o `test -f 'saml2/core/impl/NameIDPolicy20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDPolicy20Test.cpp
+
+samltest-NameIDPolicy20Test.obj: saml2/core/impl/NameIDPolicy20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDPolicy20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NameIDPolicy20Test.Tpo -c -o samltest-NameIDPolicy20Test.obj `if test -f 'saml2/core/impl/NameIDPolicy20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDPolicy20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDPolicy20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDPolicy20Test.Tpo $(DEPDIR)/samltest-NameIDPolicy20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDPolicy20Test.cpp' object='samltest-NameIDPolicy20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDPolicy20Test.obj `if test -f 'saml2/core/impl/NameIDPolicy20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDPolicy20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDPolicy20Test.cpp'; fi`
+
+samltest-NameID20Test.o: saml2/core/impl/NameID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameID20Test.o -MD -MP -MF $(DEPDIR)/samltest-NameID20Test.Tpo -c -o samltest-NameID20Test.o `test -f 'saml2/core/impl/NameID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameID20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameID20Test.Tpo $(DEPDIR)/samltest-NameID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameID20Test.cpp' object='samltest-NameID20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameID20Test.o `test -f 'saml2/core/impl/NameID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameID20Test.cpp
+
+samltest-NameID20Test.obj: saml2/core/impl/NameID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameID20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NameID20Test.Tpo -c -o samltest-NameID20Test.obj `if test -f 'saml2/core/impl/NameID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameID20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameID20Test.Tpo $(DEPDIR)/samltest-NameID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameID20Test.cpp' object='samltest-NameID20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameID20Test.obj `if test -f 'saml2/core/impl/NameID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameID20Test.cpp'; fi`
+
+samltest-NameIDType20Test.o: saml2/core/impl/NameIDType20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDType20Test.o -MD -MP -MF $(DEPDIR)/samltest-NameIDType20Test.Tpo -c -o samltest-NameIDType20Test.o `test -f 'saml2/core/impl/NameIDType20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDType20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDType20Test.Tpo $(DEPDIR)/samltest-NameIDType20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDType20Test.cpp' object='samltest-NameIDType20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDType20Test.o `test -f 'saml2/core/impl/NameIDType20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NameIDType20Test.cpp
+
+samltest-NameIDType20Test.obj: saml2/core/impl/NameIDType20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NameIDType20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NameIDType20Test.Tpo -c -o samltest-NameIDType20Test.obj `if test -f 'saml2/core/impl/NameIDType20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDType20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDType20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NameIDType20Test.Tpo $(DEPDIR)/samltest-NameIDType20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NameIDType20Test.cpp' object='samltest-NameIDType20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NameIDType20Test.obj `if test -f 'saml2/core/impl/NameIDType20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NameIDType20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NameIDType20Test.cpp'; fi`
+
+samltest-NewEncryptedID20Test.o: saml2/core/impl/NewEncryptedID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NewEncryptedID20Test.o -MD -MP -MF $(DEPDIR)/samltest-NewEncryptedID20Test.Tpo -c -o samltest-NewEncryptedID20Test.o `test -f 'saml2/core/impl/NewEncryptedID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NewEncryptedID20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NewEncryptedID20Test.Tpo $(DEPDIR)/samltest-NewEncryptedID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NewEncryptedID20Test.cpp' object='samltest-NewEncryptedID20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NewEncryptedID20Test.o `test -f 'saml2/core/impl/NewEncryptedID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NewEncryptedID20Test.cpp
+
+samltest-NewEncryptedID20Test.obj: saml2/core/impl/NewEncryptedID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NewEncryptedID20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NewEncryptedID20Test.Tpo -c -o samltest-NewEncryptedID20Test.obj `if test -f 'saml2/core/impl/NewEncryptedID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NewEncryptedID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NewEncryptedID20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NewEncryptedID20Test.Tpo $(DEPDIR)/samltest-NewEncryptedID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NewEncryptedID20Test.cpp' object='samltest-NewEncryptedID20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NewEncryptedID20Test.obj `if test -f 'saml2/core/impl/NewEncryptedID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NewEncryptedID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NewEncryptedID20Test.cpp'; fi`
+
+samltest-NewID20Test.o: saml2/core/impl/NewID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NewID20Test.o -MD -MP -MF $(DEPDIR)/samltest-NewID20Test.Tpo -c -o samltest-NewID20Test.o `test -f 'saml2/core/impl/NewID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NewID20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NewID20Test.Tpo $(DEPDIR)/samltest-NewID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NewID20Test.cpp' object='samltest-NewID20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NewID20Test.o `test -f 'saml2/core/impl/NewID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/NewID20Test.cpp
+
+samltest-NewID20Test.obj: saml2/core/impl/NewID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-NewID20Test.obj -MD -MP -MF $(DEPDIR)/samltest-NewID20Test.Tpo -c -o samltest-NewID20Test.obj `if test -f 'saml2/core/impl/NewID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NewID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NewID20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-NewID20Test.Tpo $(DEPDIR)/samltest-NewID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/NewID20Test.cpp' object='samltest-NewID20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-NewID20Test.obj `if test -f 'saml2/core/impl/NewID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/NewID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/NewID20Test.cpp'; fi`
+
+samltest-OneTimeUse20Test.o: saml2/core/impl/OneTimeUse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-OneTimeUse20Test.o -MD -MP -MF $(DEPDIR)/samltest-OneTimeUse20Test.Tpo -c -o samltest-OneTimeUse20Test.o `test -f 'saml2/core/impl/OneTimeUse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/OneTimeUse20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-OneTimeUse20Test.Tpo $(DEPDIR)/samltest-OneTimeUse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/OneTimeUse20Test.cpp' object='samltest-OneTimeUse20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-OneTimeUse20Test.o `test -f 'saml2/core/impl/OneTimeUse20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/OneTimeUse20Test.cpp
+
+samltest-OneTimeUse20Test.obj: saml2/core/impl/OneTimeUse20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-OneTimeUse20Test.obj -MD -MP -MF $(DEPDIR)/samltest-OneTimeUse20Test.Tpo -c -o samltest-OneTimeUse20Test.obj `if test -f 'saml2/core/impl/OneTimeUse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/OneTimeUse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/OneTimeUse20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-OneTimeUse20Test.Tpo $(DEPDIR)/samltest-OneTimeUse20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/OneTimeUse20Test.cpp' object='samltest-OneTimeUse20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-OneTimeUse20Test.obj `if test -f 'saml2/core/impl/OneTimeUse20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/OneTimeUse20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/OneTimeUse20Test.cpp'; fi`
+
+samltest-ProxyRestriction20Test.o: saml2/core/impl/ProxyRestriction20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ProxyRestriction20Test.o -MD -MP -MF $(DEPDIR)/samltest-ProxyRestriction20Test.Tpo -c -o samltest-ProxyRestriction20Test.o `test -f 'saml2/core/impl/ProxyRestriction20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ProxyRestriction20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ProxyRestriction20Test.Tpo $(DEPDIR)/samltest-ProxyRestriction20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ProxyRestriction20Test.cpp' object='samltest-ProxyRestriction20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ProxyRestriction20Test.o `test -f 'saml2/core/impl/ProxyRestriction20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/ProxyRestriction20Test.cpp
+
+samltest-ProxyRestriction20Test.obj: saml2/core/impl/ProxyRestriction20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-ProxyRestriction20Test.obj -MD -MP -MF $(DEPDIR)/samltest-ProxyRestriction20Test.Tpo -c -o samltest-ProxyRestriction20Test.obj `if test -f 'saml2/core/impl/ProxyRestriction20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ProxyRestriction20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ProxyRestriction20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-ProxyRestriction20Test.Tpo $(DEPDIR)/samltest-ProxyRestriction20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/ProxyRestriction20Test.cpp' object='samltest-ProxyRestriction20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-ProxyRestriction20Test.obj `if test -f 'saml2/core/impl/ProxyRestriction20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/ProxyRestriction20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/ProxyRestriction20Test.cpp'; fi`
+
+samltest-RequesterID20Test.o: saml2/core/impl/RequesterID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-RequesterID20Test.o -MD -MP -MF $(DEPDIR)/samltest-RequesterID20Test.Tpo -c -o samltest-RequesterID20Test.o `test -f 'saml2/core/impl/RequesterID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/RequesterID20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-RequesterID20Test.Tpo $(DEPDIR)/samltest-RequesterID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/RequesterID20Test.cpp' object='samltest-RequesterID20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-RequesterID20Test.o `test -f 'saml2/core/impl/RequesterID20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/RequesterID20Test.cpp
+
+samltest-RequesterID20Test.obj: saml2/core/impl/RequesterID20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-RequesterID20Test.obj -MD -MP -MF $(DEPDIR)/samltest-RequesterID20Test.Tpo -c -o samltest-RequesterID20Test.obj `if test -f 'saml2/core/impl/RequesterID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/RequesterID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/RequesterID20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-RequesterID20Test.Tpo $(DEPDIR)/samltest-RequesterID20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/RequesterID20Test.cpp' object='samltest-RequesterID20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-RequesterID20Test.obj `if test -f 'saml2/core/impl/RequesterID20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/RequesterID20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/RequesterID20Test.cpp'; fi`
+
+samltest-RequestedAuthnContext20Test.o: saml2/core/impl/RequestedAuthnContext20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-RequestedAuthnContext20Test.o -MD -MP -MF $(DEPDIR)/samltest-RequestedAuthnContext20Test.Tpo -c -o samltest-RequestedAuthnContext20Test.o `test -f 'saml2/core/impl/RequestedAuthnContext20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/RequestedAuthnContext20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-RequestedAuthnContext20Test.Tpo $(DEPDIR)/samltest-RequestedAuthnContext20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/RequestedAuthnContext20Test.cpp' object='samltest-RequestedAuthnContext20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-RequestedAuthnContext20Test.o `test -f 'saml2/core/impl/RequestedAuthnContext20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/RequestedAuthnContext20Test.cpp
+
+samltest-RequestedAuthnContext20Test.obj: saml2/core/impl/RequestedAuthnContext20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-RequestedAuthnContext20Test.obj -MD -MP -MF $(DEPDIR)/samltest-RequestedAuthnContext20Test.Tpo -c -o samltest-RequestedAuthnContext20Test.obj `if test -f 'saml2/core/impl/RequestedAuthnContext20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/RequestedAuthnContext20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/RequestedAuthnContext20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-RequestedAuthnContext20Test.Tpo $(DEPDIR)/samltest-RequestedAuthnContext20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/RequestedAuthnContext20Test.cpp' object='samltest-RequestedAuthnContext20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-RequestedAuthnContext20Test.obj `if test -f 'saml2/core/impl/RequestedAuthnContext20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/RequestedAuthnContext20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/RequestedAuthnContext20Test.cpp'; fi`
+
+samltest-Response20Test.o: saml2/core/impl/Response20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Response20Test.o -MD -MP -MF $(DEPDIR)/samltest-Response20Test.Tpo -c -o samltest-Response20Test.o `test -f 'saml2/core/impl/Response20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Response20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Response20Test.Tpo $(DEPDIR)/samltest-Response20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Response20Test.cpp' object='samltest-Response20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Response20Test.o `test -f 'saml2/core/impl/Response20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Response20Test.cpp
+
+samltest-Response20Test.obj: saml2/core/impl/Response20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Response20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Response20Test.Tpo -c -o samltest-Response20Test.obj `if test -f 'saml2/core/impl/Response20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Response20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Response20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Response20Test.Tpo $(DEPDIR)/samltest-Response20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Response20Test.cpp' object='samltest-Response20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Response20Test.obj `if test -f 'saml2/core/impl/Response20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Response20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Response20Test.cpp'; fi`
+
+samltest-Scoping20Test.o: saml2/core/impl/Scoping20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Scoping20Test.o -MD -MP -MF $(DEPDIR)/samltest-Scoping20Test.Tpo -c -o samltest-Scoping20Test.o `test -f 'saml2/core/impl/Scoping20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Scoping20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Scoping20Test.Tpo $(DEPDIR)/samltest-Scoping20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Scoping20Test.cpp' object='samltest-Scoping20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Scoping20Test.o `test -f 'saml2/core/impl/Scoping20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Scoping20Test.cpp
+
+samltest-Scoping20Test.obj: saml2/core/impl/Scoping20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Scoping20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Scoping20Test.Tpo -c -o samltest-Scoping20Test.obj `if test -f 'saml2/core/impl/Scoping20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Scoping20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Scoping20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Scoping20Test.Tpo $(DEPDIR)/samltest-Scoping20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Scoping20Test.cpp' object='samltest-Scoping20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Scoping20Test.obj `if test -f 'saml2/core/impl/Scoping20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Scoping20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Scoping20Test.cpp'; fi`
+
+samltest-SessionIndex20Test.o: saml2/core/impl/SessionIndex20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SessionIndex20Test.o -MD -MP -MF $(DEPDIR)/samltest-SessionIndex20Test.Tpo -c -o samltest-SessionIndex20Test.o `test -f 'saml2/core/impl/SessionIndex20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SessionIndex20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SessionIndex20Test.Tpo $(DEPDIR)/samltest-SessionIndex20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SessionIndex20Test.cpp' object='samltest-SessionIndex20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SessionIndex20Test.o `test -f 'saml2/core/impl/SessionIndex20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SessionIndex20Test.cpp
+
+samltest-SessionIndex20Test.obj: saml2/core/impl/SessionIndex20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SessionIndex20Test.obj -MD -MP -MF $(DEPDIR)/samltest-SessionIndex20Test.Tpo -c -o samltest-SessionIndex20Test.obj `if test -f 'saml2/core/impl/SessionIndex20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SessionIndex20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SessionIndex20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SessionIndex20Test.Tpo $(DEPDIR)/samltest-SessionIndex20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SessionIndex20Test.cpp' object='samltest-SessionIndex20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SessionIndex20Test.obj `if test -f 'saml2/core/impl/SessionIndex20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SessionIndex20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SessionIndex20Test.cpp'; fi`
+
+samltest-Status20Test.o: saml2/core/impl/Status20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Status20Test.o -MD -MP -MF $(DEPDIR)/samltest-Status20Test.Tpo -c -o samltest-Status20Test.o `test -f 'saml2/core/impl/Status20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Status20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Status20Test.Tpo $(DEPDIR)/samltest-Status20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Status20Test.cpp' object='samltest-Status20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Status20Test.o `test -f 'saml2/core/impl/Status20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Status20Test.cpp
+
+samltest-Status20Test.obj: saml2/core/impl/Status20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Status20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Status20Test.Tpo -c -o samltest-Status20Test.obj `if test -f 'saml2/core/impl/Status20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Status20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Status20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Status20Test.Tpo $(DEPDIR)/samltest-Status20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Status20Test.cpp' object='samltest-Status20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Status20Test.obj `if test -f 'saml2/core/impl/Status20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Status20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Status20Test.cpp'; fi`
+
+samltest-StatusCode20Test.o: saml2/core/impl/StatusCode20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StatusCode20Test.o -MD -MP -MF $(DEPDIR)/samltest-StatusCode20Test.Tpo -c -o samltest-StatusCode20Test.o `test -f 'saml2/core/impl/StatusCode20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/StatusCode20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StatusCode20Test.Tpo $(DEPDIR)/samltest-StatusCode20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/StatusCode20Test.cpp' object='samltest-StatusCode20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StatusCode20Test.o `test -f 'saml2/core/impl/StatusCode20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/StatusCode20Test.cpp
+
+samltest-StatusCode20Test.obj: saml2/core/impl/StatusCode20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StatusCode20Test.obj -MD -MP -MF $(DEPDIR)/samltest-StatusCode20Test.Tpo -c -o samltest-StatusCode20Test.obj `if test -f 'saml2/core/impl/StatusCode20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/StatusCode20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/StatusCode20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StatusCode20Test.Tpo $(DEPDIR)/samltest-StatusCode20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/StatusCode20Test.cpp' object='samltest-StatusCode20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StatusCode20Test.obj `if test -f 'saml2/core/impl/StatusCode20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/StatusCode20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/StatusCode20Test.cpp'; fi`
+
+samltest-StatusDetail20Test.o: saml2/core/impl/StatusDetail20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StatusDetail20Test.o -MD -MP -MF $(DEPDIR)/samltest-StatusDetail20Test.Tpo -c -o samltest-StatusDetail20Test.o `test -f 'saml2/core/impl/StatusDetail20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/StatusDetail20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StatusDetail20Test.Tpo $(DEPDIR)/samltest-StatusDetail20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/StatusDetail20Test.cpp' object='samltest-StatusDetail20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StatusDetail20Test.o `test -f 'saml2/core/impl/StatusDetail20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/StatusDetail20Test.cpp
+
+samltest-StatusDetail20Test.obj: saml2/core/impl/StatusDetail20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StatusDetail20Test.obj -MD -MP -MF $(DEPDIR)/samltest-StatusDetail20Test.Tpo -c -o samltest-StatusDetail20Test.obj `if test -f 'saml2/core/impl/StatusDetail20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/StatusDetail20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/StatusDetail20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StatusDetail20Test.Tpo $(DEPDIR)/samltest-StatusDetail20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/StatusDetail20Test.cpp' object='samltest-StatusDetail20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StatusDetail20Test.obj `if test -f 'saml2/core/impl/StatusDetail20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/StatusDetail20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/StatusDetail20Test.cpp'; fi`
+
+samltest-StatusMessage20Test.o: saml2/core/impl/StatusMessage20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StatusMessage20Test.o -MD -MP -MF $(DEPDIR)/samltest-StatusMessage20Test.Tpo -c -o samltest-StatusMessage20Test.o `test -f 'saml2/core/impl/StatusMessage20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/StatusMessage20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StatusMessage20Test.Tpo $(DEPDIR)/samltest-StatusMessage20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/StatusMessage20Test.cpp' object='samltest-StatusMessage20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StatusMessage20Test.o `test -f 'saml2/core/impl/StatusMessage20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/StatusMessage20Test.cpp
+
+samltest-StatusMessage20Test.obj: saml2/core/impl/StatusMessage20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-StatusMessage20Test.obj -MD -MP -MF $(DEPDIR)/samltest-StatusMessage20Test.Tpo -c -o samltest-StatusMessage20Test.obj `if test -f 'saml2/core/impl/StatusMessage20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/StatusMessage20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/StatusMessage20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-StatusMessage20Test.Tpo $(DEPDIR)/samltest-StatusMessage20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/StatusMessage20Test.cpp' object='samltest-StatusMessage20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-StatusMessage20Test.obj `if test -f 'saml2/core/impl/StatusMessage20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/StatusMessage20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/StatusMessage20Test.cpp'; fi`
+
+samltest-Subject20Test.o: saml2/core/impl/Subject20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Subject20Test.o -MD -MP -MF $(DEPDIR)/samltest-Subject20Test.Tpo -c -o samltest-Subject20Test.o `test -f 'saml2/core/impl/Subject20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Subject20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Subject20Test.Tpo $(DEPDIR)/samltest-Subject20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Subject20Test.cpp' object='samltest-Subject20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Subject20Test.o `test -f 'saml2/core/impl/Subject20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Subject20Test.cpp
+
+samltest-Subject20Test.obj: saml2/core/impl/Subject20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Subject20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Subject20Test.Tpo -c -o samltest-Subject20Test.obj `if test -f 'saml2/core/impl/Subject20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Subject20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Subject20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Subject20Test.Tpo $(DEPDIR)/samltest-Subject20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Subject20Test.cpp' object='samltest-Subject20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Subject20Test.obj `if test -f 'saml2/core/impl/Subject20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Subject20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Subject20Test.cpp'; fi`
+
+samltest-SubjectConfirmation20Test.o: saml2/core/impl/SubjectConfirmation20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SubjectConfirmation20Test.o -MD -MP -MF $(DEPDIR)/samltest-SubjectConfirmation20Test.Tpo -c -o samltest-SubjectConfirmation20Test.o `test -f 'saml2/core/impl/SubjectConfirmation20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SubjectConfirmation20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SubjectConfirmation20Test.Tpo $(DEPDIR)/samltest-SubjectConfirmation20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SubjectConfirmation20Test.cpp' object='samltest-SubjectConfirmation20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SubjectConfirmation20Test.o `test -f 'saml2/core/impl/SubjectConfirmation20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SubjectConfirmation20Test.cpp
+
+samltest-SubjectConfirmation20Test.obj: saml2/core/impl/SubjectConfirmation20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SubjectConfirmation20Test.obj -MD -MP -MF $(DEPDIR)/samltest-SubjectConfirmation20Test.Tpo -c -o samltest-SubjectConfirmation20Test.obj `if test -f 'saml2/core/impl/SubjectConfirmation20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SubjectConfirmation20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SubjectConfirmation20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SubjectConfirmation20Test.Tpo $(DEPDIR)/samltest-SubjectConfirmation20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SubjectConfirmation20Test.cpp' object='samltest-SubjectConfirmation20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SubjectConfirmation20Test.obj `if test -f 'saml2/core/impl/SubjectConfirmation20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SubjectConfirmation20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SubjectConfirmation20Test.cpp'; fi`
+
+samltest-SubjectConfirmationData20Test.o: saml2/core/impl/SubjectConfirmationData20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SubjectConfirmationData20Test.o -MD -MP -MF $(DEPDIR)/samltest-SubjectConfirmationData20Test.Tpo -c -o samltest-SubjectConfirmationData20Test.o `test -f 'saml2/core/impl/SubjectConfirmationData20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SubjectConfirmationData20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SubjectConfirmationData20Test.Tpo $(DEPDIR)/samltest-SubjectConfirmationData20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SubjectConfirmationData20Test.cpp' object='samltest-SubjectConfirmationData20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SubjectConfirmationData20Test.o `test -f 'saml2/core/impl/SubjectConfirmationData20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SubjectConfirmationData20Test.cpp
+
+samltest-SubjectConfirmationData20Test.obj: saml2/core/impl/SubjectConfirmationData20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SubjectConfirmationData20Test.obj -MD -MP -MF $(DEPDIR)/samltest-SubjectConfirmationData20Test.Tpo -c -o samltest-SubjectConfirmationData20Test.obj `if test -f 'saml2/core/impl/SubjectConfirmationData20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SubjectConfirmationData20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SubjectConfirmationData20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SubjectConfirmationData20Test.Tpo $(DEPDIR)/samltest-SubjectConfirmationData20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SubjectConfirmationData20Test.cpp' object='samltest-SubjectConfirmationData20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SubjectConfirmationData20Test.obj `if test -f 'saml2/core/impl/SubjectConfirmationData20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SubjectConfirmationData20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SubjectConfirmationData20Test.cpp'; fi`
+
+samltest-SubjectLocality20Test.o: saml2/core/impl/SubjectLocality20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SubjectLocality20Test.o -MD -MP -MF $(DEPDIR)/samltest-SubjectLocality20Test.Tpo -c -o samltest-SubjectLocality20Test.o `test -f 'saml2/core/impl/SubjectLocality20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SubjectLocality20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SubjectLocality20Test.Tpo $(DEPDIR)/samltest-SubjectLocality20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SubjectLocality20Test.cpp' object='samltest-SubjectLocality20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SubjectLocality20Test.o `test -f 'saml2/core/impl/SubjectLocality20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/SubjectLocality20Test.cpp
+
+samltest-SubjectLocality20Test.obj: saml2/core/impl/SubjectLocality20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SubjectLocality20Test.obj -MD -MP -MF $(DEPDIR)/samltest-SubjectLocality20Test.Tpo -c -o samltest-SubjectLocality20Test.obj `if test -f 'saml2/core/impl/SubjectLocality20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SubjectLocality20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SubjectLocality20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SubjectLocality20Test.Tpo $(DEPDIR)/samltest-SubjectLocality20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/SubjectLocality20Test.cpp' object='samltest-SubjectLocality20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SubjectLocality20Test.obj `if test -f 'saml2/core/impl/SubjectLocality20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/SubjectLocality20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/SubjectLocality20Test.cpp'; fi`
+
+samltest-Terminate20Test.o: saml2/core/impl/Terminate20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Terminate20Test.o -MD -MP -MF $(DEPDIR)/samltest-Terminate20Test.Tpo -c -o samltest-Terminate20Test.o `test -f 'saml2/core/impl/Terminate20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Terminate20Test.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Terminate20Test.Tpo $(DEPDIR)/samltest-Terminate20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Terminate20Test.cpp' object='samltest-Terminate20Test.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Terminate20Test.o `test -f 'saml2/core/impl/Terminate20Test.cpp' || echo '$(srcdir)/'`saml2/core/impl/Terminate20Test.cpp
+
+samltest-Terminate20Test.obj: saml2/core/impl/Terminate20Test.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-Terminate20Test.obj -MD -MP -MF $(DEPDIR)/samltest-Terminate20Test.Tpo -c -o samltest-Terminate20Test.obj `if test -f 'saml2/core/impl/Terminate20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Terminate20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Terminate20Test.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-Terminate20Test.Tpo $(DEPDIR)/samltest-Terminate20Test.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/core/impl/Terminate20Test.cpp' object='samltest-Terminate20Test.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-Terminate20Test.obj `if test -f 'saml2/core/impl/Terminate20Test.cpp'; then $(CYGPATH_W) 'saml2/core/impl/Terminate20Test.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/core/impl/Terminate20Test.cpp'; fi`
+
+samltest-SAML2ArtifactTest.o: saml2/binding/SAML2ArtifactTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2ArtifactTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML2ArtifactTest.Tpo -c -o samltest-SAML2ArtifactTest.o `test -f 'saml2/binding/SAML2ArtifactTest.cpp' || echo '$(srcdir)/'`saml2/binding/SAML2ArtifactTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2ArtifactTest.Tpo $(DEPDIR)/samltest-SAML2ArtifactTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/SAML2ArtifactTest.cpp' object='samltest-SAML2ArtifactTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2ArtifactTest.o `test -f 'saml2/binding/SAML2ArtifactTest.cpp' || echo '$(srcdir)/'`saml2/binding/SAML2ArtifactTest.cpp
+
+samltest-SAML2ArtifactTest.obj: saml2/binding/SAML2ArtifactTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2ArtifactTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML2ArtifactTest.Tpo -c -o samltest-SAML2ArtifactTest.obj `if test -f 'saml2/binding/SAML2ArtifactTest.cpp'; then $(CYGPATH_W) 'saml2/binding/SAML2ArtifactTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/binding/SAML2ArtifactTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2ArtifactTest.Tpo $(DEPDIR)/samltest-SAML2ArtifactTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/SAML2ArtifactTest.cpp' object='samltest-SAML2ArtifactTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2ArtifactTest.obj `if test -f 'saml2/binding/SAML2ArtifactTest.cpp'; then $(CYGPATH_W) 'saml2/binding/SAML2ArtifactTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/binding/SAML2ArtifactTest.cpp'; fi`
+
+samltest-SAML2POSTTest.o: saml2/binding/SAML2POSTTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2POSTTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML2POSTTest.Tpo -c -o samltest-SAML2POSTTest.o `test -f 'saml2/binding/SAML2POSTTest.cpp' || echo '$(srcdir)/'`saml2/binding/SAML2POSTTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2POSTTest.Tpo $(DEPDIR)/samltest-SAML2POSTTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/SAML2POSTTest.cpp' object='samltest-SAML2POSTTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2POSTTest.o `test -f 'saml2/binding/SAML2POSTTest.cpp' || echo '$(srcdir)/'`saml2/binding/SAML2POSTTest.cpp
+
+samltest-SAML2POSTTest.obj: saml2/binding/SAML2POSTTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2POSTTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML2POSTTest.Tpo -c -o samltest-SAML2POSTTest.obj `if test -f 'saml2/binding/SAML2POSTTest.cpp'; then $(CYGPATH_W) 'saml2/binding/SAML2POSTTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/binding/SAML2POSTTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2POSTTest.Tpo $(DEPDIR)/samltest-SAML2POSTTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/SAML2POSTTest.cpp' object='samltest-SAML2POSTTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2POSTTest.obj `if test -f 'saml2/binding/SAML2POSTTest.cpp'; then $(CYGPATH_W) 'saml2/binding/SAML2POSTTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/binding/SAML2POSTTest.cpp'; fi`
+
+samltest-SAML2RedirectTest.o: saml2/binding/SAML2RedirectTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2RedirectTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML2RedirectTest.Tpo -c -o samltest-SAML2RedirectTest.o `test -f 'saml2/binding/SAML2RedirectTest.cpp' || echo '$(srcdir)/'`saml2/binding/SAML2RedirectTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2RedirectTest.Tpo $(DEPDIR)/samltest-SAML2RedirectTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/SAML2RedirectTest.cpp' object='samltest-SAML2RedirectTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2RedirectTest.o `test -f 'saml2/binding/SAML2RedirectTest.cpp' || echo '$(srcdir)/'`saml2/binding/SAML2RedirectTest.cpp
+
+samltest-SAML2RedirectTest.obj: saml2/binding/SAML2RedirectTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2RedirectTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML2RedirectTest.Tpo -c -o samltest-SAML2RedirectTest.obj `if test -f 'saml2/binding/SAML2RedirectTest.cpp'; then $(CYGPATH_W) 'saml2/binding/SAML2RedirectTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/binding/SAML2RedirectTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2RedirectTest.Tpo $(DEPDIR)/samltest-SAML2RedirectTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/binding/SAML2RedirectTest.cpp' object='samltest-SAML2RedirectTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2RedirectTest.obj `if test -f 'saml2/binding/SAML2RedirectTest.cpp'; then $(CYGPATH_W) 'saml2/binding/SAML2RedirectTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/binding/SAML2RedirectTest.cpp'; fi`
+
+samltest-XMLMetadataProviderTest.o: saml2/metadata/XMLMetadataProviderTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-XMLMetadataProviderTest.o -MD -MP -MF $(DEPDIR)/samltest-XMLMetadataProviderTest.Tpo -c -o samltest-XMLMetadataProviderTest.o `test -f 'saml2/metadata/XMLMetadataProviderTest.cpp' || echo '$(srcdir)/'`saml2/metadata/XMLMetadataProviderTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-XMLMetadataProviderTest.Tpo $(DEPDIR)/samltest-XMLMetadataProviderTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/XMLMetadataProviderTest.cpp' object='samltest-XMLMetadataProviderTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-XMLMetadataProviderTest.o `test -f 'saml2/metadata/XMLMetadataProviderTest.cpp' || echo '$(srcdir)/'`saml2/metadata/XMLMetadataProviderTest.cpp
+
+samltest-XMLMetadataProviderTest.obj: saml2/metadata/XMLMetadataProviderTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-XMLMetadataProviderTest.obj -MD -MP -MF $(DEPDIR)/samltest-XMLMetadataProviderTest.Tpo -c -o samltest-XMLMetadataProviderTest.obj `if test -f 'saml2/metadata/XMLMetadataProviderTest.cpp'; then $(CYGPATH_W) 'saml2/metadata/XMLMetadataProviderTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/metadata/XMLMetadataProviderTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-XMLMetadataProviderTest.Tpo $(DEPDIR)/samltest-XMLMetadataProviderTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/metadata/XMLMetadataProviderTest.cpp' object='samltest-XMLMetadataProviderTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-XMLMetadataProviderTest.obj `if test -f 'saml2/metadata/XMLMetadataProviderTest.cpp'; then $(CYGPATH_W) 'saml2/metadata/XMLMetadataProviderTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/metadata/XMLMetadataProviderTest.cpp'; fi`
+
+samltest-SAML2PolicyTest.o: saml2/profile/SAML2PolicyTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2PolicyTest.o -MD -MP -MF $(DEPDIR)/samltest-SAML2PolicyTest.Tpo -c -o samltest-SAML2PolicyTest.o `test -f 'saml2/profile/SAML2PolicyTest.cpp' || echo '$(srcdir)/'`saml2/profile/SAML2PolicyTest.cpp
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2PolicyTest.Tpo $(DEPDIR)/samltest-SAML2PolicyTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/SAML2PolicyTest.cpp' object='samltest-SAML2PolicyTest.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2PolicyTest.o `test -f 'saml2/profile/SAML2PolicyTest.cpp' || echo '$(srcdir)/'`saml2/profile/SAML2PolicyTest.cpp
+
+samltest-SAML2PolicyTest.obj: saml2/profile/SAML2PolicyTest.cpp
+@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -MT samltest-SAML2PolicyTest.obj -MD -MP -MF $(DEPDIR)/samltest-SAML2PolicyTest.Tpo -c -o samltest-SAML2PolicyTest.obj `if test -f 'saml2/profile/SAML2PolicyTest.cpp'; then $(CYGPATH_W) 'saml2/profile/SAML2PolicyTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/profile/SAML2PolicyTest.cpp'; fi`
+@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/samltest-SAML2PolicyTest.Tpo $(DEPDIR)/samltest-SAML2PolicyTest.Po
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='saml2/profile/SAML2PolicyTest.cpp' object='samltest-SAML2PolicyTest.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(samltest_CXXFLAGS) $(CXXFLAGS) -c -o samltest-SAML2PolicyTest.obj `if test -f 'saml2/profile/SAML2PolicyTest.cpp'; then $(CYGPATH_W) 'saml2/profile/SAML2PolicyTest.cpp'; else $(CYGPATH_W) '$(srcdir)/saml2/profile/SAML2PolicyTest.cpp'; fi`
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+
+ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
+	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	mkid -fID $$unique
+tags: TAGS
+
+TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	set x; \
+	here=`pwd`; \
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: CTAGS
+CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: check-am
+all-am: Makefile $(PROGRAMS) $(HEADERS)
+installdirs:
+	for dir in "$(DESTDIR)$(bindir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+
+clean-generic:
+	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+distclean-am: clean-am distclean-compile distclean-generic \
+	distclean-tags
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am:
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am: install-binPROGRAMS
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am: uninstall-binPROGRAMS
+
+.MAKE: install-am install-strip
+
+.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
+	clean-generic clean-libtool ctags distclean distclean-compile \
+	distclean-generic distclean-libtool distclean-tags distdir dvi \
+	dvi-am html html-am info info-am install install-am \
+	install-binPROGRAMS install-data install-data-am install-dvi \
+	install-dvi-am install-exec install-exec-am install-html \
+	install-html-am install-info install-info-am install-man \
+	install-pdf install-pdf-am install-ps install-ps-am \
+	install-strip installcheck installcheck-am installdirs \
+	maintainer-clean maintainer-clean-generic mostlyclean \
+	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
+	pdf pdf-am ps ps-am tags uninstall uninstall-am \
+	uninstall-binPROGRAMS
+
+
+do-cxxtestgen:
+	if test $(HFILE) = "samltest.h"; then \
+		$(CXXTEST) --error-printer --have-eh --have-std --abort-on-fail -o $(CPPFILE) $(HFILE); \
+	else \
+		$(CXXTEST) --part --have-eh --have-std --abort-on-fail -o $(CPPFILE) $(HFILE); \
+	fi;
+
+$(nodist_samltest_SOURCES): %.cpp: %.h
+	$(MAKE) do-cxxtestgen HFILE=$< CPPFILE=$@
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/schemas/Makefile.in b/schemas/Makefile.in
new file mode 100644
index 0000000..6cec388
--- /dev/null
+++ b/schemas/Makefile.in
@@ -0,0 +1,530 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+VPATH = @srcdir@
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+subdir = schemas
+DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_create_pkgconfig_info.m4 \
+	$(top_srcdir)/m4/doxygen.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+SOURCES =
+DIST_SOURCES =
+am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
+am__vpath_adj = case $$p in \
+    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
+    *) f=$$p;; \
+  esac;
+am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
+am__install_max = 40
+am__nobase_strip_setup = \
+  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
+am__nobase_strip = \
+  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
+am__nobase_list = $(am__nobase_strip_setup); \
+  for p in $$list; do echo "$$p $$p"; done | \
+  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
+  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
+    if (++n[$$2] == $(am__install_max)) \
+      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
+    END { for (dir in files) print dir, files[dir] }'
+am__base_list = \
+  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
+  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
+am__installdirs = "$(DESTDIR)$(pkgxmldir)"
+DATA = $(pkgxml_DATA)
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AR = @AR@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CXX = @CXX@
+CXXCPP = @CXXCPP@
+CXXDEPMODE = @CXXDEPMODE@
+CXXFLAGS = @CXXFLAGS@
+CXXTEST = @CXXTEST@
+CXXTESTFLAGS = @CXXTESTFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+DX_CONFIG = @DX_CONFIG@
+DX_DOCDIR = @DX_DOCDIR@
+DX_DOT = @DX_DOT@
+DX_DOXYGEN = @DX_DOXYGEN@
+DX_DVIPS = @DX_DVIPS@
+DX_EGREP = @DX_EGREP@
+DX_ENV = @DX_ENV@
+DX_FLAG_chi = @DX_FLAG_chi@
+DX_FLAG_chm = @DX_FLAG_chm@
+DX_FLAG_doc = @DX_FLAG_doc@
+DX_FLAG_dot = @DX_FLAG_dot@
+DX_FLAG_html = @DX_FLAG_html@
+DX_FLAG_man = @DX_FLAG_man@
+DX_FLAG_pdf = @DX_FLAG_pdf@
+DX_FLAG_ps = @DX_FLAG_ps@
+DX_FLAG_rtf = @DX_FLAG_rtf@
+DX_FLAG_xml = @DX_FLAG_xml@
+DX_HHC = @DX_HHC@
+DX_INCLUDE = @DX_INCLUDE@
+DX_LATEX = @DX_LATEX@
+DX_MAKEINDEX = @DX_MAKEINDEX@
+DX_PDFLATEX = @DX_PDFLATEX@
+DX_PERL = @DX_PERL@
+DX_PROJECT = @DX_PROJECT@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LOG4CPP_CONFIG = @LOG4CPP_CONFIG@
+LOG4SHIB_CONFIG = @LOG4SHIB_CONFIG@
+LTLIBOBJS = @LTLIBOBJS@
+MAKEINFO = @MAKEINFO@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PKG_CONFIG = @PKG_CONFIG@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+STRIP = @STRIP@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_CXX = @ac_ct_CXX@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+lt_ECHO = @lt_ECHO@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+pkgconfig_libdir = @pkgconfig_libdir@
+pkgconfig_libfile = @pkgconfig_libfile@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AUTOMAKE_OPTIONS = foreign
+pkgxmldir = $(datadir)/xml/@PACKAGE@
+schemafiles = \
+	cs-sstc-schema-assertion-01.xsd \
+	cs-sstc-schema-protocol-01.xsd \
+	cs-sstc-schema-assertion-1.1.xsd \
+	cs-sstc-schema-protocol-1.1.xsd \
+	saml-schema-assertion-2.0.xsd \
+	saml-schema-authn-context-2.0.xsd \
+	saml-schema-authn-context-auth-telephony-2.0.xsd \
+	saml-schema-authn-context-ip-2.0.xsd \
+	saml-schema-authn-context-ippword-2.0.xsd \
+	saml-schema-authn-context-kerberos-2.0.xsd \
+	saml-schema-authn-context-mobileonefactor-reg-2.0.xsd \
+	saml-schema-authn-context-mobileonefactor-unreg-2.0.xsd \
+	saml-schema-authn-context-mobiletwofactor-reg-2.0.xsd \
+	saml-schema-authn-context-mobiletwofactor-unreg-2.0.xsd \
+	saml-schema-authn-context-nomad-telephony-2.0.xsd \
+	saml-schema-authn-context-personal-telephony-2.0.xsd \
+	saml-schema-authn-context-pgp-2.0.xsd \
+	saml-schema-authn-context-ppt-2.0.xsd \
+	saml-schema-authn-context-pword-2.0.xsd \
+	saml-schema-authn-context-session-2.0.xsd \
+	saml-schema-authn-context-smartcard-2.0.xsd \
+	saml-schema-authn-context-smartcardpki-2.0.xsd \
+	saml-schema-authn-context-softwarepki-2.0.xsd \
+	saml-schema-authn-context-spki-2.0.xsd \
+	saml-schema-authn-context-srp-2.0.xsd \
+	saml-schema-authn-context-sslcert-2.0.xsd \
+	saml-schema-authn-context-telephony-2.0.xsd \
+	saml-schema-authn-context-timesync-2.0.xsd \
+	saml-schema-authn-context-types-2.0.xsd \
+	saml-schema-authn-context-x509-2.0.xsd \
+	saml-schema-authn-context-xmldsig-2.0.xsd \
+	saml-schema-dce-2.0.xsd \
+	saml-schema-ecp-2.0.xsd \
+	saml-schema-metadata-2.0.xsd \
+	saml-schema-protocol-2.0.xsd \
+	saml-schema-x500-2.0.xsd \
+	saml-schema-xacml-2.0.xsd \
+	sstc-metadata-attr.xsd \
+	sstc-saml1x-metadata.xsd \
+	sstc-saml-attribute-ext.xsd \
+	sstc-saml-delegation.xsd \
+	sstc-saml-metadata-ext-query.xsd \
+	sstc-saml-metadata-algsupport.xsd \
+	sstc-saml-metadata-ui.xsd \
+	sstc-saml-idp-discovery.xsd \
+	sstc-request-initiation.xsd \
+	sstc-saml-protocol-ext-thirdparty.xsd
+
+pkgxml_DATA = \
+	saml20-catalog.xml \
+	saml10-catalog.xml \
+	saml11-catalog.xml \
+	$(schemafiles)
+
+CLEANFILES = \
+	saml20-catalog.xml \
+	saml10-catalog.xml \
+	saml11-catalog.xml
+
+EXTRA_DIST = \
+	saml20-catalog.xml.in \
+	saml10-catalog.xml.in \
+	saml11-catalog.xml.in \
+	$(schemafiles)
+
+all: all-am
+
+.SUFFIXES:
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign schemas/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign schemas/Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+install-pkgxmlDATA: $(pkgxml_DATA)
+	@$(NORMAL_INSTALL)
+	test -z "$(pkgxmldir)" || $(MKDIR_P) "$(DESTDIR)$(pkgxmldir)"
+	@list='$(pkgxml_DATA)'; test -n "$(pkgxmldir)" || list=; \
+	for p in $$list; do \
+	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
+	  echo "$$d$$p"; \
+	done | $(am__base_list) | \
+	while read files; do \
+	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgxmldir)'"; \
+	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgxmldir)" || exit $$?; \
+	done
+
+uninstall-pkgxmlDATA:
+	@$(NORMAL_UNINSTALL)
+	@list='$(pkgxml_DATA)'; test -n "$(pkgxmldir)" || list=; \
+	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
+	test -n "$$files" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(pkgxmldir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(pkgxmldir)" && rm -f $$files
+tags: TAGS
+TAGS:
+
+ctags: CTAGS
+CTAGS:
+
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: check-am
+all-am: Makefile $(DATA)
+installdirs:
+	for dir in "$(DESTDIR)$(pkgxmldir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+
+clean-generic:
+	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-am
+	-rm -f Makefile
+distclean-am: clean-am distclean-generic
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am: install-pkgxmlDATA
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am:
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-generic mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am: uninstall-pkgxmlDATA
+
+.MAKE: install-am install-strip
+
+.PHONY: all all-am check check-am clean clean-generic clean-libtool \
+	distclean distclean-generic distclean-libtool distdir dvi \
+	dvi-am html html-am info info-am install install-am \
+	install-data install-data-am install-dvi install-dvi-am \
+	install-exec install-exec-am install-html install-html-am \
+	install-info install-info-am install-man install-pdf \
+	install-pdf-am install-pkgxmlDATA install-ps install-ps-am \
+	install-strip installcheck installcheck-am installdirs \
+	maintainer-clean maintainer-clean-generic mostlyclean \
+	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
+	uninstall uninstall-am uninstall-pkgxmlDATA
+
+
+#
+# Some of these need building
+#
+do-build-file:
+	rm -f ${FILE}.tmp
+	sed < ${srcdir}/${FILE}.in > ${FILE}.tmp \
+	    -e 's:@-PKGXMLDIR-@:${pkgxmldir}:g'
+	cmp -s ${FILE} ${FILE}.tmp || mv ${FILE}.tmp ${FILE}
+	rm -f ${FILE}.tmp
+
+saml20-catalog.xml: ${srcdir}/saml20-catalog.xml.in Makefile ${top_builddir}/config.status
+	$(MAKE) do-build-file FILE=$@
+
+saml10-catalog.xml: ${srcdir}/saml10-catalog.xml.in Makefile ${top_builddir}/config.status
+	$(MAKE) do-build-file FILE=$@
+
+saml11-catalog.xml: ${srcdir}/saml11-catalog.xml.in Makefile ${top_builddir}/config.status
+	$(MAKE) do-build-file FILE=$@
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
-- 
1.7.1

